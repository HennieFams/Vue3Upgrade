/*!
*  filename: ej.spreadsheet.js
*  version : 18.1.0.42
*  Copyright Syncfusion Inc. 2001 - 2020. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/
(function (fn) {
    typeof define === 'function' && define.amd ? define(["jsrender","jquery-validation","./../common/ej.core","./../common/ej.data","./ej.grid","./../common/ej.scroller","./../common/ej.globalize","./ej.calculate","./ej.waitingpopup","./../datavisualization/ej.chart","./ej.dialog","./ej.tab","./ej.button","./ej.splitbutton","./ej.togglebutton","./ej.checkbox","./ej.radiobutton","./ej.autocomplete","./ej.datepicker","./ej.dropdownlist","./ej.listbox","./ej.editor","./ej.pager","./ej.menu","./ej.treeview","./ej.uploadbox","./ej.colorpicker","./ej.excelfilter","./ej.ribbon","./ej.pivotschemadesigner","./ej.pivotgrid"], fn) : fn();
})
(function () {
	
(function ($, ej, undefined) {
    ej.widget("ejSpreadsheet", "ej.Spreadsheet", {
        _rootCSS: "e-spreadsheet",
        // widget element will be automatically set in this
        element: null,
        _excelFilter: null,
        validTags: ["div"],
        // user defined model will be automatically set in this
        model: null,
        _requiresID: true,
        defaults: {
            allowFreezing: true,
            enableContextMenu: true,
            allowEditing: true,
            allowResizing: true,
            allowMerging: true,
            allowWrap: true,
            allowUndoRedo: true,
            allowClipboard: true,
            allowDataValidation: true,
            allowConditionalFormats: true,
            allowSearching: true,
            allowKeyboardNavigation: true,
            allowAutoFill: true,
            allowSelection: true,
            allowSorting: true,
            allowDragAndDrop: true,
            allowCellType: true,
            allowAutoCellType: false,
            allowCharts: true,
            enablePersistence: false,
            allowCellFormatting: true,
            allowFormulaBar: true,
            showRibbon: true,
            showPager: true,
            allowComments: true,
            allowFiltering: true,
            allowInsert: true,
            allowDelete: true,
            allowFormatPainter: true,
            allowHyperlink: true,
            allowImport: true,
            allowFormatAsTable: true,
            allowAutoSum: true,
            enablePivotTable: false,
            allowLockCell: true,
            enableTouch: true,
            allowOverflow: true,
            allowClear: true,
            allowSparkline: false,
            isReadOnly: false,
            isGridMode: false,
            columnCount: 21,
            rowCount: 20,
            rowHeight: 20,
            columnWidth: 64,
            sheetCount: 1,
            undoRedoStep: 20,
            activeSheetIndex: 1,
            apWidth: 300,
            activationPanelWidth: 300,
            _isActPanelVisible: false,
            isImport: false,
            cssClass: "",
            userName: "",
            locale: "en-US",
            pageSize: "A4",
            sparkDiv: "",
            sheets: [],
            nameManager: [],
            customFormulas: [],
            currentViewData: null,
            query: null,
            create: null,
            actionBegin: null,
            actionComplete: null,
            beforeCellFormat: null,
            cellFormatting: null,
            beforeOpen: null,
            beforePrint: null,
            beforeDrop: null,
            drop: null,
            cellEdit: null,
            pagerClick: null,
            cellClick: null,
            _pivotPrint: null,
            tabClick: null,
            tabSelect: null,
            _createPivotTable: null,
            beforePanelOpen: null,
            load: null,
            loadComplete: null,
            editRangeBegin: null,
            editRangeComplete: null,
            cellHover: null,
            menuClick: null,
            contextMenuClick: null,
            ribbonClick: null,
            dragStart: null,
            drag: null,
            cellSave: null,
            beforeCellSelect: null,
            cellSelected: null,
            autoFillBegin: null,
            autoFillComplete: null,
            openFailure: null,
            onImport: null,
            onExport: null,
            beforeImport: null,
            beforeBatchSave: null,
            keyUp: null,
            keyDown: null,
            dragShape: null,
            resizeStart: null,
            resizeEnd: null,
            refresh: null,
            beforeEditComment: null,
            beforeTabClick: null,
            scrollStop: null,
            formulaComputed: null,
            scrollSettings: {
                width: "100%",
                height: "100%",
                allowScrolling: true,
                scrollMode: "infinite",
                isResponsive: true,
                allowVirtualScrolling: true,
                allowSheetOnDemand: false
            },
            pageSettings: {
                pageCount: 10,
                currentPage: 1,
                pagerHeight: 26
            },
            exportSettings: {
                allowExporting: true,
                enableFormulaCalculation: false,
                excelUrl: null,
                csvUrl: null,
                pdfUrl: null,
                password: null
            },
            pictureSettings: {
                allowPictures: true,
                height: 220,
                width: 440
            },
            selectionSettings: {
                selectionType: "default",
                selectionUnit: "multirange",
                enableAnimation: false,
                animationType: "linear",
                animationTime: 0.001,
                activeCell: ""
            },
            chartSettings: {
                height: 220,
                width: 440
            },
            formatSettings: {
                allowFontFamily: true,
                allowDecimalPlaces: true,
                allowCellBorder: true
            },
            autoFillSettings: {
                fillType: "fillseries",
                showFillOptions: true
            },
            "importSettings": {
                importMapper: "",
                importUrl: "",
                password: "",
                allowSheetOnDemand: false,
                importOnLoad: false
            },
            printSettings: {
                allowPageSetup: true,
                allowPageSize: false,
                allowPrinting: true
            },
            ribbonSettings: {
                enableOnDemand: false,
                applicationTab: {
                    type: ej.Ribbon.ApplicationTabType.Backstage,
                    menuSettings: {
                        isAppend: false,
                        dataSource: []
                    }
                }
            }
        },

        dataTypes: {
            pageSize: "enum",
            sheets: "array",
            nameManager: "array",
            scrollSettings: {
                scrollMode: "enum"
            },
            selectionSettings: {
                selectionType: "enum",
                selectionUnit: "enum",
                animationType: "enum"
            },
            autoFillSettings: {
                fillType: "enum"
            }
        },

        _dataSource: function (sheetIdx) {
            return this.getSheet(sheetIdx).dataSource;
        },

        getSheet: function (sheetIdx) {
            return this.model.sheets[this._getSheetIndex(sheetIdx)];
        },

        getSheets: function () {
            return this.model.sheets;
        },

        getSheetElement: function (sheetIdx) {
            return this.element.find("#" + this._id + "_" + this.getSheet(sheetIdx).sheetInfo.value);
        },

        getDataSettings: function (sheetIdx) {
            var setting, arr = [], sheet = this.getSheet(sheetIdx), i = sheet.rangeSettings.length;
            if (i) {
                while (i--) {
                    setting = sheet.rangeSettings[i];
                    if (setting.dataSource)
                        arr.push(setting);
                }
            }
            return arr.length ? arr : (sheet.dataSource ? [sheet] : null);
        },

        _getJSSheetHeader: function (sheetIdx) {
            return this._sheets[sheetIdx]._sheetHeader;
        },

        _setJSSheetHeader: function (value, sheetIdx) {
            this._sheets[sheetIdx]._sheetHeader = value;
        },

        _getInputBox: function () {
            return this._inputBox;
        },

        _setInputBox: function (elem) {
            this._inputBox = elem;
        },

        _getIndexBox: function () {
            return this._indexBox;
        },

        _setIndexBox: function (elem) {
            this._indexBox = elem;
        },

        _getJSSheetRowHeader: function (sheetIdx) {
            return this._sheets[sheetIdx]._sheetRowHeader;
        },

        _setJSSheetRowHeader: function (value, sheetIdx) {
            this._sheets[sheetIdx]._sheetRowHeader = value;
        },

        _getJSSheetRowHeaderContent: function (sheetIdx) {
            return this._sheets[sheetIdx]._sheetRowHeaderContent;
        },

        _setJSSheetRowHeaderContent: function (value, sheetIdx) {
            this._sheets[sheetIdx]._sheetRowHeaderContent = value;
        },

        _getJSSheetContent: function (sheetIdx) {
            return this._sheets[sheetIdx]._sheetContent;
        },

        _setJSSheetContent: function (value, sheetIdx) {
            this._sheets[sheetIdx]._sheetContent = value;
        },

        _getContent: function (sheetIdx) {
            return this._sheets[sheetIdx]._content;
        },

        _setContent: function (value, sheetIdx) {
            this._sheets[sheetIdx]._content = value;
        },

        getPager: function () {
            return this._spreadSheetPager;
        },

        setPager: function (value) {
            this._spreadSheetPager = value;
        },

        getFooter: function () {
            return this._footer;
        },

        setFooter: function (value) {
            this._footer = value;
        },

        getMainPanel: function () {
            return this._mainPanel;
        },

        setMainPanel: function (value) {
            this._mainPanel = value;
        },

        getGroupPanel: function () {
            return this._groupPanel;
        },

        setGroupPanel: function (value) {
            this._groupPanel = value;
        },

        getActivationPanel: function () {
            return this._activationPanel;
        },

        setActivationPanel: function (value) {
            this._activationPanel = value;
        },

        getActiveSheetIndex: function () {
            return this.model.activeSheetIndex;
        },

        setActiveSheetIndex: function (value) {
            this.model.activeSheetIndex = value;
        },

        getRows: function (sheetIdx) {
            return this._sheets[sheetIdx]._Rows;
        },

        setRows: function (value, sheetIdx) {
            this._sheets[sheetIdx]._Rows = value;
        },

        getFrozenRows: function (sheetIdx) {
            return this.getSheet(this._getSheetIndex(sheetIdx)).frozenRows;
        },

        setFrozenRows: function (value, sheetIdx) {
            if (!this.model.isReadOnly)
                this.getSheet(this._getSheetIndex(sheetIdx)).frozenRows = value;
        },

        getFrozenColumns: function (sheetIdx) {
            return this.getSheet(sheetIdx).frozenColumns;
        },

        setFrozenColumns: function (value, sheetIdx) {
            if (!this.model.isReadOnly)
                this.getSheet(sheetIdx).frozenColumns = value;
        },

        setFocusTopElem: function (elem) {
            this._focusTopElem = elem;
        },

        getFocusTopElem: function () {
            return this._focusTopElem;
        },

        setFocusRightElem: function (elem) {
            this._focusRightElem = elem;
        },

        getFocusRightElem: function () {
            return this._focusRightElem;
        },

        setFocusBottomElem: function (elem) {
            this._focusBottomElem = elem;
        },

        getFocusBottomElem: function () {
            return this._focusBottomElem;
        },

        setFocusLeftElem: function (elem) {
            this._focusLeftElem = elem;
        },

        getFocusLeftElem: function () {
            return this._focusLeftElem;
        },

        setAutoFillElem: function (elem) {
            this._autoFillElem = elem;
        },

        getAutoFillElem: function () {
            return this._autoFillElem;
        },

        _setAutoFillOptElem: function (elem) {
            this._autoFillOptElem = elem;
        },

        _getAutoFillOptElem: function () {
            return this._autoFillOptElem;
        },

        _getColWidth: function (colIdx, sheetIdx) {
            return this.getSheet(sheetIdx).columnsWidthCollection[colIdx];
        },

        _getRowHeight: function (rowIdx, sheetIdx) {
            return this.getSheet(sheetIdx).rowsHeightCollection[rowIdx];
        },

        setActiveCell: function (rowIdx, colIdx, sheetIdx) {
            var sheet = this.getSheet(sheetIdx ? sheetIdx : this.getActiveSheetIndex()), range;
            if (typeof (rowIdx) === "string") {
                range = this.getRangeIndices(rowIdx);
                rowIdx = range[0];
                colIdx = range[1];
            }
            sheet._activeCell = ej.isNullOrUndefined(rowIdx) && ej.isNullOrUndefined(colIdx) ? sheet._startCell : { rowIndex: rowIdx, colIndex: colIdx };
        },

        getActiveCell: function (sheetIdx) {
            return this.getSheet(this._getSheetIndex(sheetIdx))._activeCell;
        },

        _setFormulaSuggElem: function (elem) {
            this._formulaSuggElem = elem;
        },

        _getFormulaSuggElem: function () {
            return this._formulaSuggElem;
        },

        _setRowHdrTBody: function (elem, sheetIdx) {
            this._sheets[sheetIdx]._rowHdrTBody = elem;
        },

        _getRowHdrTBody: function (sheetIdx) {
            return this._sheets[sheetIdx]._rowHdrTBody;
        },

        _setContTBody: function (elem, sheetIdx) {
            this._sheets[sheetIdx]._contTBody = elem;
        },

        _getContTBody: function (sheetIdx) {
            return this._sheets[sheetIdx]._contTBody;
        },

        _init: function () {
            var isettings = this.model.importSettings;
            this._initBegin();
            if (this.model.allowImport && (isettings.importUrl.length || isettings.importOnLoad))
                this["import"]({ url: isettings.importUrl, password: isettings.password, allowSheetOnDemand: isettings.allowSheetOnDemand });
            else {
                this.showWaitingPopUp();
                this._initBase();
                this._initComplete();
                this._isSSLoaded = true;
            }
            if (this._isAutoWHMode) {
                this._setElemDimension();
            }
            if (this.model.isGridMode && !this.getSheet(this.getActiveSheetIndex())._isDataManager && (!ej.isNullOrUndefined(this.getDataSettings(this.getActiveSheetIndex()))))
                this._gridModeScroll(true);
            this.addClass(this.element, this.model.cssClass);
            this._cssClass = this.model.cssClass;
        },

        _initBegin: function () {
            var tchProp = "touch-action", tchVal = "double-tap-zoom pinch-zoom", ssettings = this.model.scrollSettings, culPatrns = ej.preferredCulture(this.model.locale).calendar.patterns;
            ej.support.stableSort = false;
            this._isInitLoad = true;
            this._isDefaultLocked = false;
            this._isSSLoaded = false;
            this._computeFormula = true;
            if (this.model.isGridMode) {
                ssettings.scrollMode = "normal";
                this.model.showRibbon = false;
                this.model.allowFormulaBar = false;
                this.model.allowDragAndDrop = false;
                this.model.allowResizing = false;
                this.model.allowFreezing = false;
                this.model.allowImport = false;
            }
            this._isAutoWHMode = !ssettings.allowScrolling;
            if (this._isAutoWHMode) {
                ssettings.isResponsive = false;
                ssettings.scrollMode = "normal";
                ssettings.allowVirtualScrolling = false;
            }
            this._minWidth = 280;
            this._minHeight = 200;
            if (!this._isAutoWHMode)
                this.element.css({ height: ssettings.height, width: ssettings.width });
            if (!this.model.isGridMode || (this.model.isGridMode && this.model.scrollSettings.allowScrolling))
                this.element.css({ 'min-height': this._minHeight, 'min-width': this._minWidth });
            this._updateResponsiveSettings();
            if (!this._isAutoWHMode && !ssettings.isResponsive) {
                if (ssettings.width.toString().indexOf("%") > -1)
                    ssettings.width = this._responsiveWidth;
                if (ssettings.height.toString().indexOf("%") > -1)
                    ssettings.height = this._responsiveHeight;
                this.element.css({ height: ssettings.height, width: ssettings.width });
            }
            this._browserDetails = ej.browserInfo();
            this.localizedLabels = ej.getLocalizedConstants(this.sfType, this.model.locale);
            this.element.attr("tabindex", 0);
            if (this._browserDetails.name === "msie")
                tchProp = "-ms-" + tchProp;
            this.element.css(tchProp, tchVal);
            var waitPopup = ej.buildTag("div#" + this._id + "_wait", "", { position: "absolute" });
            $(document.body).append(waitPopup);
            waitPopup.ejWaitingPopup({ showOnInit: false, target: this.element });
            culPatrns["dT"] = culPatrns["d"] + " " + culPatrns["T"];
            if (this.model.locale != "en-US") {
                if (culPatrns['d'])
                    ej.Spreadsheet.CellFormat.shortdate = "{0:" + culPatrns['d'] + "}";
                if (culPatrns['D'])
                    ej.Spreadsheet.CellFormat.longdate = "{0:" + culPatrns['D'] + "}";
                if (culPatrns['T'])
                    ej.Spreadsheet.CellFormat.time = "{0:" + culPatrns['T'] + "}";
            }
        },

        _initBase: function () {
            var locale = this.model.locale, prefCul = ej.preferredCulture(locale), calcEngine;
            this._refreshModel((this.isImport || this.model.isImport) ? this._impData.model : this._isRefresh ? this.model : null);
            if (this._isRefresh)
                this._updateCellType();
            else
                this._initProps();
            calcEngine = this.getCalcEngine();
            if (locale !== "en-US") {
                if (prefCul.numberFormat["."] === ",")
                    calcEngine.setParseArgumentSeparator(";");
                calcEngine.setParseDecimalSeparator(prefCul.numberFormat["."]);
            }
            if (!this._tabMode && !this._phoneMode && !this.model.isGridMode) {
                this._minHeight = 400;
                this.element.css({ "min-height": this._minHeight });
            }
            this._initCSSTag();
            this._initLayout();
            this._wireEvents("_on");
            this._isInitLoad = false;
        },

        _initProps: function () {
            var model = this.model, features = ej.spreadsheetFeatures;
            this.XLClipboard = new features.clipboard(this);
            this.XLEdit = new features.editing(this);
            this.XLPrint = new features.print(this);
            this.XLRibbon = new features.ribbon(this);
            this.XLScroll = new features.scroller(this);
            if (model.allowDragAndDrop)
                this.XLDragDrop = new features.dragAndDrop(this);
            if (model.allowKeyboardNavigation)
                this.XLCellNav = new features.cellNavigation(this);
            if (model.allowFiltering)
                this.XLFilter = new features.filter(this);
            if (model.allowAutoFill)
                this.XLDragFill = new features.dragFill(this);
            if (model.allowCellFormatting || model.allowFormatAsTable || model.allowFormatPainter)
                this.XLFormat = new features.cellFormatting(this);
            if (model.allowCellFormatting)
                this.XLCellFrmtDlg = new features.formatCellDialog(this);
            if (model.allowConditionalFormats)
                this.XLCFormat = new features.cFormat(this);
            if (model.allowSearching)
                this.XLSearch = new features.findnreplace(this);
            if (model.allowCharts)
                this.XLChart = new features.chart(this);
            if (model.allowSparkline)
                this.XLSparkline = new features.sparkLine(this);
            if (model.exportSettings.allowExporting)
                this.XLExport = new features.exporting(this);
            if (model.allowSorting)
                this.XLSort = new features.sorting(this);
            if (model.allowFreezing)
                this.XLFreeze = new features.freezepane(this);
            if (model.allowComments)
                this.XLComment = new features.comments(this);
            if (model.allowSelection)
                this.XLSelection = new features.selection(this);
            if (model.allowCharts || model.pictureSettings.allowPictures)
                this.XLShape = new features.shape(this);
            if (model.allowResizing)
                this.XLResize = new features.resizing(this);
            if (model.enableContextMenu)
                this.XLCMenu = new features.contextmenu(this);
            if (model.allowDataValidation)
                this.XLValidate = new features.validation(this);
            if (model.allowCellType)
                this.XLCellType = new features.cellType(this);
            if (model.enablePivotTable)
                this.XLPivot = new features.pivot(this);
            if (features.math)
                $.extend(ej.Spreadsheet.prototype, features.math);
            this._initPvtProps();
            this._initFATProps();
            if (this.model.customFormulas.length) // Update custom formulas
                this._updateCustomFormulas(this.model.customFormulas, "add");
            if (this.model.nameManager.length)
                this._refreshNameMngr(this.model.nameManager);
        },

        _initPvtProps: function () {
            var i = 1, obj = { rowIndex: 0, colIndex: 0 }, text = this._getLocStr("AutoFillOptions").split("/"),
                sheetIdx = this.getActiveSheetIndex(), numFormat = ej.preferredCulture(this.model.locale).numberFormat;
            this._dataContainer = this.isImport || this.model.isImport ? $.extend(true, {}, this._impData.dataContainer) : { sheets: {}, sheetCellType: {}, hashCode: [], sharedData: [], cellType: [], valData: [], cFormatData: [], customCellStyle: {} };
            this._newSIndex = 1;
            this.isImport = this.isImport || false;
            this.mergeCenter = false;
            this.isDirty = false;
            this._calcID = CalcEngine.createSheetFamilyID();
            this._calcEngine = new CalcEngine(this, this._calcID);
            this._calcEngine.setUseDependencies(true);
            this._calcEngine.setExcelLikeComputations(true);
            this._calcEngine.setUseDatesInCalculations(true);
            this._calcEngine.setEnableFormulaErrorValidation(true);
            this._calcEngine.setCalculatingSuspended($("#" + this._id + "_CalcManual").find("span").hasClass("e-ss-calcauto"));
            this._sheets = [];
            this._cellProp = ["value", "value2", "type", "cFormatRule", "range", "thousandSeparator", "rule", "format", "border", "picture", "chart", "calcValue", "align", "hyperlink", "formats", "borders", "tformats", "tborders", "isFilterHeader", "filterState", "tableName", "comment", "formatStr", "decimalPlaces", "cellType", "isFilterHighlight", "pivot", "sparkline", "hasFormulaArray", "hasMultipleFormulaArray", "formulaRange", "customFormat"];
            this.model.isGridMode && (this.model.sheets = this.model.sheets.splice(sheetIdx - 1, 1));
            if (!(this.isImport || this.model.isImport)) {
                this.model.sheets.splice(0, 0, {});
                this._updateCellType();
            }
            this.model.isGridMode && (this.model.sheetCount = 1);
            while (i <= this.model.sheetCount) {
                if (!(this.isImport || this.model.isImport))
                    this._dataContainer.sheets[i] = {};
                this._sheetSettings(i);
                this._newSIndex++;
                i++;
            }
            this._detachTable = null;
            this._isPrint = false;
            this._isSheetInsert = false;
            this._isSheetRename = false;
            this._isTableRename = false;
            this._tableClassName = null;
            this._isSheetNavigate = false;
            this._sheetCopy = { isSheetCopy: false, sheetContent: null };
            this._alertDialog = { element: null, action: null };
            this._dataManager = null;
            this._isUndo = false;
            this._undoCollection = [],
                this._redoCollection = [],
                this._ctrlKeyCount = 0;
            this._formulaRange = [];
            this._formulaHeight = 36;
            this._isSort = false;
            this._isPaste = false;
            this._isFATResize = false;
            this._isDisplayHeader = false;
            this._currencySymbol = numFormat.currency.symbol || "$";
            this._percentSymbol = numFormat.percent.symbol || "%";
            this._decimalSeparator = numFormat["."] || ".";
            this.operators = {
                '<': function (a, b) { return a < b },
                '>': function (a, b) { return a > b },
                '>=': function (a, b) { return a >= b },
                '<=': function (a, b) { return a <= b },
                '==': function (a, b) { return a === b },
                '!=': function (a, b) { return a !== b },
                '!': function (a) { return !a },
                '=': function (a) { return a }
            };
            this.parse = {
                "parseInt": function (a) { return parseInt(a); },
                "parseFloat": function (a) { return parseFloat(a); },
                "parseDate": function (a) { return new Date(a).getTime(); },
                "parseTime": function (a) { return new Date("01/01/1990 " + a).getTime(); },
                "length": function (a) { return (a.charAt(0) === "^") ? parseInt(a.split("^")[1]) : a.length; }
            };
            this._selMergeCells = [];
            this._mergeType = "merge-cells";
            this._delCells = [];
            this._deletedText = [];
            this._removeMergeColl = [];
            this._insData = {};
            this._deletedDimension = [];
            this._insDelStatus = "";
            this._isUndoRedo = false;
            this._indexBox = null;
            this._inputBox = null;
            this._focusTopElem = null;
            this._focusRightElem = null;
            this._focusBottomElem = null;
            this._focusLeftElem = null;
            this._dStartCell = obj;
            this._dEndCell = obj;
            this._pStartCell = obj;
            this._pEndCell = obj;
            this._pFillCell = obj;
            this._borderFocus = ["e-focusright", "e-focusbottom"];
            this._cutFocus = ["e-cutright", "e-cutbottom"];
            this._autoFillFocus = ["e-autofillright", "e-autofillbottom"];
            this._formulaBorder = [["e-bborderright", "e-bborderbottom"], ["e-rborderright", "e-rborderbottom"], ["e-vborderright", "e-vborderbottom"], ["e-gborderright", "e-gborderbottom"], ["e-pborderright", "e-pborderbottom"], ["e-oborderright", "e-oborderbottom"]];
            this._ctrlFormulaBorder = [["e-bctrlborderright", "e-bctrlborderbottom"], ["e-rctrlborderright", "e-rctrlborderbottom"], ["e-vctrlborderright", "e-vctrlborderbottom"], ["e-gctrlborderright", "e-gctrlborderbottom"], ["e-pctrlborderright", "e-pctrlborderbottom"], ["e-octrlborderright", "e-octrlborderbottom"]];
            this._borderTypes = [
                { id: "bottomborder", text: this._getLocStr("BottomBorder"), parentId: null, sprite: "e-icon e-ss-bottomborder" },
                { id: "topborder", text: this._getLocStr("TopBorder"), parentId: null, sprite: "e-icon e-ss-topborder" },
                { id: "leftborder", text: this._getLocStr("LeftBorder"), parentId: null, sprite: "e-icon e-ss-leftborder" },
                { id: "rightborder", text: this._getLocStr("RightBorder"), parentId: null, sprite: "e-icon e-ss-rightborder" },
                { id: "noborder", text: this._getLocStr("NoBorder"), parentId: null, sprite: "e-icon e-ss-noborder" },
                { id: "allborder", text: this._getLocStr("AllBorder"), parentId: null, sprite: "e-icon e-ss-allborder" }
            ];
            this._datePattern = ["year", "month", "day", "hours", "minutes", "seconds"];
            this._styleColl = {};
            this._borderStyle = "solid";
            this._borderColor = "#000000";
            this._borderStyles = ["solid", "dashed", "dotted", "double"];
            this._ddlCell = null;
            this._cOpt = {};
            this._shapeChange = false;
            this._dupDetails = false;
            this._paste = false;
            this._autoFillElem = null;
            this._autoFillOptElem = null;
            this._fillOptionMenuData = [
                { id: "copycells", text: text[0], parentId: null, sprite: "e-icon e-ss-fillselect" },
                { id: "fillseries", text: text[1], parentId: null, sprite: "e-icon e-ss-filloption" },
                { id: "fillformattingonly", text: text[2], parentId: null, sprite: "e-icon e-ss-filloption" },
                { id: "fillwithoutformatting", text: text[3], parentId: null, sprite: "e-icon e-ss-filloption" },
                { id: "flashfill", text: text[4], parentId: null, sprite: "e-icon e-ss-filloption" }
            ];
            this._formulaSuggElem = null;
            this._isFormulaSuggestion = false;
            this._shiftKeyEnabled = false;
            this._preventctrlkey = false;
            this._rAlign = "e-ralign";
            this._cAlign = "e-calign";
            this._chartBorder = [["e-rcborderright", "e-rcborderbottom"], ["e-vcborderright", "e-vcborderbottom"], ["e-bcborderright", "e-bcborderbottom"]];
            this._selectionBorder = ["e-selecttop", "e-selectright", "e-selectbottom", "e-selectleft"];
            this._autofillBorder = ["e-autofilltop", "e-autofillright", "e-autofillbottom", "e-autofillleft"];
            this._thinBorder = ["e-thinborderright", "e-thinborderbottom"];
            this._rcRegx = new RegExp('\\b' + "e-rc" + '.*\\b', 'g');
            this._formatRegx = new RegExp('\\b' + "e-format" + '.*?\\b', 'g');
            this._borderRegx = new RegExp('\\b' + "e-border" + '.*?\\b', 'g');
            this._formulaChanged = [];
            this._ref = [];
            this._nmRef = [];
            this._prevText = "";
            this._prevVal = "";
            this._dlgHLClick = false;
            this._selectDataval = {};
            this._undoInputobj = {};
            this._cureditedCell = '';
            this._colHeaderHeight = 22;
            this._rowHeaderWidth = 30;
            this._scrollerHeight = 18;
            this._scrollerWidth = 18;
            this._bufferCnt = 5;
            this._maxRowCnt = 1048576;
            this._maxColCnt = 16384;
            this._impData = this._impData || null;
            this._isNew = false;
            this._isSheetReq = false;
            this._intrnlReq = false;
            this._isTableBrdrEnd = false;
            this._isFilterApplied = false;
            this._commentCount = 0;
            this._tableCnt = 1;
            this._uploadImage = false;
            this._responsiveWidth = 0;
            this._responsiveHeight = 0;
            this._celltypes = [];
            this._reqCnt = 0;
            this._resCnt = 0;
            this._pageClickArgs = null;
            this._gotoPageArgs = null;
            this._updateFormulaCollection();
            this._isRibbonClick = false;
            this._intrnlUpdate = false;
            this._isPvtNameEdit = false;
            this._hlColor = "#428bca";
            this._isFilter = false;
            this._isShowHide = false;
            this._insRows = {};
            this._isTotalRow = false;
            this._scrollReverse = false;
            this._phoneMode = this.model.scrollSettings.isResponsive && document.documentElement.clientWidth < 420;
            this._tabMode = this.model.scrollSettings.isResponsive && (document.documentElement.clientWidth > 419 && document.documentElement.clientWidth < 617);
            this._dlgHeight = this._responsiveHeight - 2;
            this._dlgWidth = this._responsiveWidth - 2;
            this._isTouchEvt = false;
            this._isTouchMoveSel = false;
            this._isTouchScroll = false;
            this._isScrolling = false;
            this._startXY = null;
            this._touchArgs = null;
            this._isResized = false;
            this._isRibbonDestroyed = false;
            this._resizeColl = [];
            this._delWrapColl = {};
            this._isInsdel = false;
            this._canOverflow = true;
            this.preventFilterPopup = false;
            this._FATStyles = {};
            this._isFiltered = false;
            this._dautoFillCell = { rowIndex: 0, colIndex: 0 };
            this._isPublic = false;
            this._fRow = { rowAdj: true, fRowCnt: 0 };
            this._fCol = { colAdj: true, fColCnt: 0 };
            this.isPasteValuesOnly = false;
            this._isSaveAsJSON = false;
            this._cssClass = "";
            this._hideRowColl = [];
            this._isSort = false;
            this._isKeyCtrlShftF2 = false;
            this._isSelIdxChange = false;
            this._isRefresh = false;
            this._clkCellObj = { rowIndex: 0, colIndex: 0 };
            this._copySheet = false;
            this._isCopyPaste = false;
            this._overFlowRowIdx = false;
            this._tableRangesFormula = {};
            this._tableFormulaCollection = {};
            this._hasFormulaArray = false;
            this._hasMultipleFormulaArray = false;
            this._formulaArray = false;
            this._isFormulaCln = false;
            this._copyColumns = {};
            this._isSameRowColumn = false;
            this._prevCellTypes = {};
            this._curCellTypes = {};
            this._cellTypesUndo = {};
            this._cellTypesRedo = {};
            this._prevChartDetails = {};
            this._curChartDetails = {};
            this._chartRedo = {};
            this._chartUndo = {};
            this._isDataSrcMethod = false;
            this._isallowScrollingSetModel = false;
            this._isallowVirtualScrollingSetModel = false;
            this._isGridModeSettings = {};
            this._isGridModeWidthChange = false;
            this._prevValData = {};
            this._curValData = {};
            this._valDataUndo = {};
            this._valDataRedo = {};
            this._isTrigCellSave = false;
            this._ddCellSave = false;
            this._saveTriggered = false;
            this._isCFDirty = false;
        },

        _initFATProps: function () {
            var i, len, b = 'w:bold', c1 = 'c:#FFFFFF', c2 = 'c:#000000', c3 = 'c:#2F75B5', c4 = 'c:#ED7D31', c5 = 'c:#FFC000', b1 = '1px solid #000000', b2 = '1px solid #2f75b5', b3 = '1px solid #ED7D31', b4 = '1px solid #FFC000',
                d1 = 'b:#D9D9D9', d2 = 'b:#DDEBF7', d3 = 'b:#FCE4D6', d4 = 'b:#FFF2CC', d5 = 'b:#000000', d6 = 'b:#DBECF6', d7 = 'b:#FFE2C6', d8 = 'b:#FFF1BF', d9 = 'b:#000000', d10 = 'b:#D7D7D7', d11 = 'b:#FFC000', d12 = 'b:#5B9BD5', d13 = 'b:#Ed7D31',
                style = 'hl?' + b + ';' + c2 + ';bo:tb-' + b1 + '&cl?' + d1 + ';' + c2 + ',' + c2 + '&cb?b-' + b1 + '/hl?' + b + ';bo:tb-' + b2 + ';' + c3 + '&cl?' + d2 + ';' + c3 + ',' + c3 + '&cb?b-' + b2 + '/hl?' + b + ';bo:tb-' + b3 + ';' + c4 + '&cl?' + d3 + ';' + c4 + ',' + c4 + '&cb?b-' + b3 + '/hl?' + b + ';bo:tb-' + b4 + ';' + c5 + '&cl?' + d4 + ';' + c5 + ',' + c5 + '&cb?b-' + b4 + '/hl?' + b + ';' + d5 + ';' + c1 + ';bo:o-' + b1 + '&cl?bo:t-' + b1 + ';' + c2 + '&cb?o-' + b1 + '/hl?bo:o-' + b2 + ';' + b + ';' + d12 + ';' + c1 + '&cl?bo:t-' + b2 + ';' + c2 + '&cb?o-' + b2 + '/hl?' + b + ';b:#EB7E2F;' + c1 + ';bo:o-' + b3 + '&cl?bo:t-' + b3 + ';' + c2 + '&cb?o-' + b3 + '/hl?' + b + ';' + d11 + ';' + c1 + ';bo:o-' + b4 + '&cl?bo:t-' + b4 + ';' + c2 + '&cb?o-' + b4 + '/hl?' + b + ';bo:gb-' + b1 + ';' + c2 + '&cl?' + d1 + ';' + c2 + ',' + c2 + '&cb?gb-' + b1 + '/hl?' + b + ';bo:gb-' + b2 + ';' + c2 + '&cl?' + d2 + ';' + c2 + ',' + c2 + '&cb?gb-' + b2 + '/hl?' + b + ';bo:gb-' + b3 + ';' + c2 + '&cl?' + d3 + ';' + c2 + ',' + c2 + '&cb?gb-' + b3 + '/hl?' + b + ';bo:gb-' + b4 + ';' + c2 + '&cl?' + d4 + ';' + c2 + ',' + c2 + '&cb?gb-' + b4 + '/hl?' + b + ';' + d5 + ';' + c1 + '&cl?b:#A6A6A6;' + c2 + ',' + d1 + ';' + c2 + '/hl?' + b + ';' + d12 + ';' + c1 + '&cl?b:#BDD7EE;' + c2 + ',' + d2 + ';' + c2 + '/hl?' + b + ';' + d13 + ';' + c1 + '&cl?b:#F8CBAD;' + c2 + ',' + d3 + ';' + c2 + '/hl?' + b + ';' + d11 + ';' + c1 + '&cl?b:#FFE699;' + c2 + ',' + d4 + ';' + c2 + '/hl?' + b + ';' + d10 + ';' + c2 + ';bo:gb-' + b1 + '&cl?b:#A7A7A7;' + c2 + ',' + d10 + ';' + c2 + '&cb?gb-' + b1 + '/hl?' + b + ';' + d6 + ';' + c2 + ';bo:gb-' + b2 + '&cl?b:#BED8F1;' + c2 + ',' + d2 + ';' + c2 + '&cb?gb-' + b2 + '/hl?' + b + ';' + d7 + ';' + c2 + ';bo:gb-' + b3 + '&cl?b:#F6CAAD;' + c2 + ',' + d7 + ';' + c2 + '&cb?gb-' + b3 + '/hl?' + b + ';' + d8 + ';' + c2 + ';bo:gb-' + b4 + '&cl?b:#FDE18D;' + c2 + ',' + d8 + ';' + c2 + '&cb?gb-' + b4 + '/hl?' + b + ';' + d9 + ';' + c1 + '&cl?b:#404040;' + c1 + ',b:#737373;' + c1 + '/hl?' + b + ';' + d9 + ';' + c1 + '&cl?b:#2F75B5;' + c1 + ',' + d12 + ';' + c1 + '/hl?' + b + ';' + d9 + ';' + c1 + '&cl?b:#C65911;' + c1 + ',' + d13 + ';' + c1 + '/hl?' + b + ';' + d9 + ';' + c1 + '&cl?b:#BF8F00;' + c1 + ',' + d11 + ';' + c1,
                name = ["Light1", "Light2", "Light3", "Light5", "Light8", "Light9", "Light10", "Light12", "Light15", "Light16", "Light17", "Light19", "Medium8", "Medium9", "Medium10", "Medium12", "Medium22", "Medium23", "Medium24", "Medium26", "Dark1", "Dark2", "Dark3", "Dark5"];
            style = style.split('/');
            i = 0; len = name.length;
            while (i < len) {
                this._FATStyles["TableStyle" + name[i]] = { format: this.XLRibbon._getFormatAsTableInput(style[i]), formatName: "TableStyle" + name[i] };
                i++;
            }
            this.XLFormat._formatAsTableStyle = this._FATStyles["TableStyle" + name[0]];
        },

        _updateResponsiveSettings: function () {
            var isIE8 = ((ej.browserInfo().name === "msie") && (ej.browserInfo().version === "8.0"));
            var clientRect = this.element[0].getClientRects()[0];
            this._responsiveHeight = Math.floor(isIE8 ? this.element[0].offsetHeight : clientRect ? clientRect.height : 0);
            this._responsiveWidth = Math.floor(isIE8 ? this.element[0].offsetWidth : clientRect ? clientRect.width : 0);
        },

        _gridModeScroll: function (isInitLoad) {
            var width, height, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), sheetElem = this.getSheetElement(sheetIdx), contentContainer = this._getContent(sheetIdx),
                content = contentContainer.find("#" + this._id + "_content"), footerHeight = this._footer.outerHeight(true),
                scrollHt = this._scrollerHeight, scrollWt = this._scrollerWidth, vPortWt = sheet._vPortWth, vPortHt = sheet._vPortHgt, cHt = 0, cWt = 0, tHt, tWt,
                vscroll = contentContainer.find("#vscrollBar"), hscroll = contentContainer.find("#hscrollBar");
            tWt = width = content.find(".e-table").width();
            tHt = height = content.find(".e-table").height();
            if (this.model.scrollSettings.allowScrolling) {
                if (this.getObjectLength(this._isGridModeSettings)) {
                    if (this._isGridModeSettings.width <= width) {
                        width = this._isGridModeSettings.width;
                        sheet._vPortWth = vPortWt = this._isGridModeSettings.vPortWt;
                        cWt = this._isGridModeSettings.cWt;
                    }
                    if (this._isGridModeSettings.height <= height) {
                        height = this._isGridModeSettings.height;
                        sheet._vPortHgt = vPortHt = this._isGridModeSettings.vPortHt;
                        cHt = this._isGridModeSettings.cHt;
                    }
                }
                if (contentContainer.find("#vscrollBar")[0].style.display == "none" || cHt >= tHt) {
                    if (sheetElem.find(".e-spreadsheetheader").hasClass("e-scrollcss")) {
                        sheetElem.find(".e-spreadsheetheader").removeClass("e-scrollcss");
                        sheetElem.find(".e-spreadsheetheader")[0].style.width = parseInt(sheetElem.find(".e-spreadsheetheader")[0].style.width) + 18 + "px";
                    }
                    scrollWt = 0;
                }
                if (contentContainer.find("#hscrollBar")[0].style.display == "none" || cWt >= tWt) {
                    if (sheetElem.find(".e-spreadsheetrowheader").hasClass("e-scrollrowcss")) {
                        sheetElem.find(".e-spreadsheetrowheader").removeClass("e-scrollrowcss");
                        sheetElem.find(".e-spreadsheetrowheader")[0].style.height = parseInt(sheetElem.find(".e-spreadsheetrowheader")[0].style.height) + 18 + "px";
                    }
                    scrollHt = 0;
                }
                if (width > vPortWt && this.model.scrollSettings.allowScrolling) {
                    return;
                }
                if (!sheet._isNavigated) {
                    sheetElem.find(".e-spreadsheetrowheader")[0].style.height = height + "px";
                    sheetElem.find(".e-rowheadercontent")[0].style.height = height + "px";
                    contentContainer[0].style.height = height + "px";
                    content[0].style.height = height + "px";
                }
                if (width > vPortWt) {
                    width = vPortWt + 17;
                    scrollWt = 0;
                }
                if (!sheet._isNavigated) {
                    sheetElem.find(".e-spreadsheetcontent")[0].style.width = width + scrollWt + this._rowHeaderWidth + "px";
                    content[0].style.width = width + "px";
                }
                if (height > vPortHt) {
                    height = vPortHt + 17;
                    scrollHt = 0;
                }
                if (!sheet._isNavigated) {
                    this.element.find(".e-spreadsheetmainpanel")[0].style.height = height + this._colHeaderHeight + footerHeight + "px";
                    this.element.find(".e-spreadsheetgrppanel")[0].style.height = height + this._colHeaderHeight + footerHeight + "px";
                    sheetElem.find(".e-spreadsheetrowheader")[0].style.height = height + "px";
                    sheetElem.find(".e-rowheadercontent")[0].style.height = height + "px";
                    contentContainer[0].style.height = height + "px";
                    content[0].style.height = height + "px";
                }
                this.element.css({ "min-height": "0", width: width + scrollWt + (sheet.showHeadings ? this._rowHeaderWidth : 0) + 2 + "px", height: height + scrollHt + (sheet.showHeadings ? this._colHeaderHeight : 0) + 2 + footerHeight + "px" });
            }
            if (isInitLoad)
                this._isGridModeSettings = { cHt: content.height(), cWt: content.width(), vPortWt: sheet._vPortWth, vPortHt: sheet._vPortHgt, width: width, height: height };
            sheet._contWidth = width + scrollWt;
            sheet._contHeight = height + scrollHt;
            if (this.model.scrollSettings.allowVirtualScrolling && !sheet._isNavigated && !isInitLoad) {
                vscroll && (vscroll[0].style.display = "none");
                hscroll && (hscroll[0].style.display = "none");
                if (scrollWt) {
                    sheet._contWidth = sheet._contWidth + 18;
                    content[0].style.width = width + 18 + "px";
                }
                if (scrollHt) {
                    sheet._contHeight = sheet._contHeight + 18;
                    content[0].style.height = height + 18 + "px";
                }
                this.XLScroll._refreshScroller(sheetIdx, "refresh", "all");
                scrollWt && (sheet._contWidth = sheet._contWidth - 18);
                scrollHt && (sheet._contHeight = sheet._contHeight - 18);
                sheet._virtualBlockRowCnt = Math.ceil(sheet._vPortHgt / sheet.rowHeight) + this._bufferCnt;
                this._refreshViewport(0, sheetIdx);
            }
            sheet._isNavigated = true;
        },

        _getElementDimension: function () {
            var rbnHt = 0, elemWidth, formulaHt = 0, contentHt = 0;
            if (this.model.showRibbon) {
                var rObj = $('#' + this._id + '_Ribbon').data('ejRibbon');
                elemWidth = rObj.element[0].offsetWidth;
                rbnHt = rObj.element[0].offsetHeight;
            }
            if (this.model.allowFormulaBar) {
                var formulaElem = $('#' + this._id + '_formulabar')[0];
                formulaHt = formulaElem.offsetHeight;
                if (!elemWidth)
                    elemWidth = formulaElem.offsetWidth;
            }
            var mPanel = this.element.find(".e-spreadsheetmainpanel")[0];
            contentHt = mPanel.offsetHeight;
            if (!elemWidth)
                elemWidth = mPanel.offsetWidth;
            return { width: elemWidth + 2, height: (rbnHt + formulaHt + contentHt + 1) }
        },

        _sheetSettings: function (sheetIdx) {
            var sIdx, sheet, impSheet, name, sheetName, msheet;
            if (!this._isSheetReq) {
                msheet = this.getSheet(sheetIdx);
                sheetName = this._generateSheetName(this._newSIndex);
                sheet = this.model.sheets[sheetIdx] = {
                    colCount: msheet && msheet.colCount || this.model.columnCount,
                    rowCount: msheet && msheet.rowCount || this.model.rowCount,
                    _formulaCollection: {},
                    columnsWidthCollection: [],
                    _colWidthCollection: [],
                    _ofColWidthColl: [],
                    rowsHeightCollection: [],
                    _rowHeightCollection: [],
                    _rowIdxColl: [],
                    _spreadSheetPager: null,
                    showHeadings: (msheet && !this.isUndefined(msheet.showHeadings)) ? msheet.showHeadings : true,
                    showGridlines: (msheet && !this.isUndefined(msheet.showGridlines)) ? msheet.showGridlines : true,
                    dataSource: (msheet && msheet.dataSource) || null,
                    _jsonData: msheet ? (msheet.dataSource instanceof ej.DataManager ? null : msheet.dataSource) : null,
                    _dataManager: (msheet && msheet.dataSource instanceof ej.DataManager) ? msheet.dataSource : null,
                    query: (msheet && msheet.query) || null,
                    primaryKey: (msheet && msheet.primaryKey) || "",
                    startCell: (msheet && msheet.startCell) || "A1",
                    topLeftCell: (msheet && msheet.topLeftCell) || "A1",
                    fieldAsColumnHeader: (msheet && msheet.fieldAsColumnHeader) || false,
                    showHeader: (msheet && msheet.showHeader === false) ? false : true,
                    headerStyles: (msheet && msheet.headerStyles) || null,
                    batchChanges: { added: [], changed: [], deleted: [] },
                    range: [0, 0, 0, 0],
                    fields: [],
                    _isDataManager: false,
                    _isOffline: false,
                    _hasDataSrc: false,
                    columns: msheet && msheet.columns || [],
                    _columnStyles: {},
                    _rowStyles: {},
                    cellTypes: msheet && msheet.cellTypes || [],
                    rows: msheet && msheet.rows || null,
                    _excelFilter: null,
                    filterSettings:
                    {
                        filteredColumns: [],
                        maxFilterChoices: 1000,
                        filteredRange: [],
                        range: "",
                        tableRange: []
                    },
                    paperSettings: {
                        paperOrientation: "Portrait",
                        pageSize: "PaperLetter",
                        bottomMargin: "0.75",
                        headerMargin: "0.3",
                        footerMargin: "0.3",
                        leftMargin: "0.7",
                        rightMargin: "0.7",
                        topMargin: "0.75"
                    },
                    frozenRows: msheet && msheet.frozenRows || 0,
                    frozenColumns: msheet && msheet.frozenColumns || 0,
                    _frozenRows: msheet && msheet.frozenRows && msheet.frozenRows + 1 || 1,
                    _frozenColumns: msheet && msheet.frozenColumns && msheet.frozenColumns + 1 || 1,
                    _fHMergeRows: [],
                    _fHMergeCols: [],
                    paneTopLeftCell: msheet && msheet.paneTopLeftCell || "A1",
                    _selectedRange: {},
                    _selectedCellColors: [],
                    columnWidth: (msheet && msheet.columnWidth) || this.model.columnWidth,
                    rowHeight: this.model.rowHeight,
                    _frozenHeight: 0,
                    _frozenWidth: 0,
                    _firstRow: { idx: 0, value: 0 },
                    _firstCol: { idx: 0, value: 0 },
                    _topRow: { idx: 0, value: 0 },
                    _bottomRow: { idx: 0, value: 0 },
                    _leftCol: { idx: 0, value: 0 },
                    _rightCol: { idx: 0, value: 0 },
                    _filterColl: {},
                    _filteredColumns: [],
                    _commentColl: {},
                    _mergeColl: {},
                    _unmergeColl: {},
                    _delmergeColl: {},
                    _hideMergeColl: {},
                    _clrMergeColl: [],
                    _clrWrapColl: [],
                    _selectedCells: [],
                    selectedRange: [0, 0, 0, 0],
                    tableManager: {},
                    _header: {},
                    _selectedCellIndexes: [],
                    _startCell: { rowIndex: 0, colIndex: 0 },
                    _endCell: { rowIndex: 0, colIndex: 0 },
                    _activeCell: { rowIndex: 0, colIndex: 0 },
                    _autoFillCell: { rowIndex: 0, colIndex: 0 },
                    rangeSettings: msheet && msheet.rangeSettings || [],
                    sheetInfo: { text: sheetName, value: this._getLocStr("Sheet") + this._newSIndex, isVisible: true },
                    _multipleFiltering: false,
                    _multifilterIdx: [],
                    _filteredByColor: "",
                    staticWidth: 0,
                    _fRow: 0,
                    _fCol: 0,
                    hideColsCollection: {},
                    hideRowsCollection: msheet && msheet.hideRowsCollection || [],
                    _hiddenFreezeRows: [],
                    _hiddenFreezeCols: [],
                    _filterHRowsColl: [],
                    _restrictedHeightRows: [],
                    filteredRowsCollection: [],
                    _rHeightCollection: [],
                    _frHiddenHeight: 0,
                    _fpHiddenHeight: 0,
                    _fpHiddenWidth: 0,
                    _pTarget: {},
                    _cSpan: 1,
                    _rSpan: 1,
                    usedRange: { rowIndex: 0, colIndex: 0 },
                    mergedCells: [],
                    shapeMngr: { picture: {}, chart: {}, sharedPics: [], sparkline: {}, },
                    formulaRange: {},
                    pivotMngr: { pivot: {} },
                    _nmValue: {},
                    _nmEdit: false,
                    _wrapHtCollection: {},
                    _isChartBorderDrawn: false,
                    _virtualBlockCnt: 0,
                    _virtualBlockRowCnt: 0,
                    _virtualContBlockIdx: 1,
                    _virtualTopTBodyHgt: 0,
                    _virtualBottomTBodyHgt: 0,
                    _virtualTBodyHgt: 0,
                    _scrollTop: 0,
                    _scrollLeft: 0,
                    _virtualRowIdx: [],
                    _virtualTopTBodyOffset: { top: 0, bottom: 0 },
                    _virtualContTBodyOffset: { top: 0, bottom: 0 },
                    _virtualBottomTBodyOffset: { top: 0, bottom: 0 },
                    _virtualDataLoadedBlks: [],
                    _virtualDataMngrLoadedBlks: [1, 2],
                    _isVirtualTopReached: true,
                    _isVirtualEndReached: false,
                    _isLoaded: false,
                    _isNavigated: false,
                    _isImpSLoad: false,
                    _isRowSelected: false,
                    _isColSelected: false,
                    _isSheetSelected: false,
                    isSheetProtected: false,
                    _contWidth: 0,
                    _isRangeSelected: false,
                    _isEmptyActiveCell: false,
                    _isMultiSelect: false,
                    _isImported: this.isImport,
                    _isRequested: false,
                    _goToCollection: { multiple: false, selected: [] },
                    _showLockCellAlert: false,
                    _reqCnt: 0,
                    _resCnt: 0,
                    _templateColCount: 0,
                    _isTemplate: false,
                    _cFormatFormula: {},
                    _isVPRendered: false,
                    _isDataMoved: false,
                    _vPortHgt: 0,
                    _vPortWth: 0,
                    cFormatRule: msheet && msheet.cFormatRule || [],
                    mergeCells: msheet && msheet.mergeCells || [],
                    hideRows: msheet && msheet.hideRows || [],
                    hideColumns: msheet && msheet.hideColumns || [],
                    border: msheet && msheet.border || [],
                    isResized: false,
                    _isOpened: false,
                    _wrapColl: {},
                    _formatColl: {},
                    _isFreezed: false,
                    _ftopRowIdx: 0,
                    _fleftColIdx: 0,
                    _contScrollTop: 0,
                    _contScrollLeft: 0,
                    _fDivTop: 0,
                    _fDivLeft: 0,
                    _isRibCollapsed: false,
                    _wrapValColl: { rows: {}, cols: {} },
                    _refrshObj: {},
                    _scopeRanges: {},
                    _mergeSpan: {},
					_renderedRange: []
                };
                this._initRangeSettings(sheetIdx);
                name = sheet.sheetInfo.value;
                this._sheets[sheetIdx] = { _contentColGroup: null, _content: null, _sheetRowHeaderContent: null, _sheetHeader: null, _sheetRowHeader: null, _sheetContent: null, _Rows: null, _contTBody: null, _rowHdrTBody: null };
                this._calcEngine.registerGridAsSheet(name, name, this._calcID);
            }
            else
                sheet = this.getSheet(sheetIdx);
            if (this.isImport || this.model.isImport) {
                impSheet = this._impData.model.sheets[sheetIdx];
                sIdx = this.getRangeIndices(impSheet.topLeftCell || "A1");
                sheet.sheetInfo.text = impSheet.sheetInfo.text;
                if (this.isUndefined(impSheet.sheetInfo.isVisible))
                    sheet.sheetInfo.isVisible = true;
                else
                    sheet.sheetInfo.isVisible = impSheet.sheetInfo.isVisible;
                if (!this.model.importSettings.allowSheetOnDemand || sheetIdx === this.getActiveSheetIndex())
                    sheet._isRequested = true;
                if (sheet._isRequested) {
                    if (impSheet.paperSettings) {
                        sheet.paperSettings = $.extend({}, sheet.paperSettings, impSheet.paperSettings);
                    }
                    if (impSheet.usedRange) {
                        if (impSheet.usedRange.rowIndex)
                            sheet.usedRange.rowIndex = impSheet.usedRange.rowIndex;
                        if (impSheet.usedRange.colIndex)
                            sheet.usedRange.colIndex = impSheet.usedRange.colIndex;
                    }
                    if (impSheet._startCell) {
                        if (impSheet._startCell.rowIndex)
                            sheet._startCell.rowIndex = impSheet._startCell.rowIndex;
                        if (impSheet._startCell.colIndex)
                            sheet._startCell.colIndex = impSheet._startCell.colIndex;
                    }
                    if (impSheet._endCell) {
                        if (impSheet._endCell.rowIndex)
                            sheet._endCell.rowIndex = impSheet._endCell.rowIndex;
                        if (impSheet._endCell.colIndex)
                            sheet._endCell.colIndex = impSheet._endCell.colIndex;
                    }
                    if (impSheet._activeCell) {
                        if (impSheet._activeCell.rowIndex)
                            sheet._activeCell.rowIndex = impSheet._activeCell.rowIndex;
                        if (impSheet._activeCell.colIndex)
                            sheet._activeCell.colIndex = impSheet._activeCell.colIndex;
                    }
                    if (impSheet.columnsWidthCollection)
                        sheet.columnsWidthCollection = impSheet.columnsWidthCollection;
                    if (impSheet.rowsHeightCollection) {
                        var i, len, rowIdxCln = impSheet.hideRowsCollection || [];
                        for (i = 0, len = rowIdxCln.length; i < len; i++)
                            impSheet.rowsHeightCollection[parseInt(rowIdxCln[i])] = 0;
                        sheet.rowsHeightCollection = $.extend(true, [], impSheet.rowsHeightCollection);
                    }
                    if (!ej.isNullOrUndefined(impSheet.showGridlines))
                        sheet.showGridlines = impSheet.showGridlines;
                    if (impSheet.hideRowsCollection)
                        sheet.hideRowsCollection = impSheet.hideRowsCollection || [];
					if (impSheet.hideColsCollection)
                        sheet.hideColsCollection = impSheet.hideColsCollection || [];
                    if (impSheet.formulaRange)
                        sheet.formulaRange = impSheet.formulaRange || {};
                    if (impSheet.shapeMngr.picture.length)
                        sheet.shapeMngr.sharedPics = impSheet.shapeMngr.sharedPics;
                    if (impSheet.isSheetProtected)
                        sheet.isSheetProtected = impSheet.isSheetProtected;
                    if (impSheet._restrictedHeightRows)
                        sheet._restrictedHeightRows = impSheet._restrictedHeightRows || [];
                    if (impSheet._isColSelected)
                        sheet._isColSelected = impSheet._isColSelected;
                    if (impSheet._isRowSelected)
                        sheet._isRowSelected = impSheet._isRowSelected;
                    if (impSheet.showHeadings === false)
                        sheet.showHeadings = false;
                    if (impSheet.frozenRows) {
                        sheet.frozenRows = sheet._frozenRows = sIdx[0] + impSheet.frozenRows;
                        sheet._frozenRows = sheet.frozenRows + 1;
                    }
                    if (impSheet.frozenColumns) {
                        sheet.frozenColumns = sheet._frozenColumns = sIdx[1] + impSheet.frozenColumns;
                        sheet._frozenColumns = sheet.frozenColumns + 1;
                    }
                }
            }
        },

        _generateSheetName: function (index) {
            var i, len, sName, sheet, shtNo = 1, sheetModel = this.model.sheets, txt = this._getLocStr("Sheet");
            sheet = sheetModel[index];
            sName = sheet && sheet.sheetName || (txt + index);
            for (i = 1, len = sheetModel.length; i < len; i++) {
                if (sheetModel[i].sheetInfo && sName === sheetModel[i].sheetInfo.text) {
                    i = 0;
                    sName = sheet && sheet.sheetName ? (sheet.sheetName + shtNo++) : (txt + ++index);
                }
            }
            return sName;
        },

        _initRangeSettings: function (sheetIdx) {
            var setting, sheet = this.getSheet(sheetIdx), i = sheet.rangeSettings.length;
            if (i) {
                while (i--) {
                    setting = sheet.rangeSettings[i];
                    if (setting.dataSource) {
                        setting._jsonData = setting._dataManager = null;
                        if (setting.dataSource instanceof ej.DataManager)
                            setting._dataManager = setting.dataSource;
                        else
                            setting._jsonData = setting.dataSource;
                        if (setting.showHeader != false)
                            setting.showHeader = true;
                    }
                }
            }
        },

        _initCSSTag: function () {
            if (!document.getElementById(this._id + "_sscustomformat")) {
                if (this.isImport || this.model.isImport)
                    this._dataContainer.hashCode = [];
                var prop, len, i = 0, stag;
                stag = this._renderStyleTag("custom");
                if (this.isImport || this.model.isImport)
                    this._refreshImpStyles(this._impData.dataContainer.hashCode);
                if (this.XLFormat) {
                    prop = "s:11pt/b:#FFC7CE;c:#82012A;f:calibri;s:11pt/b:#C6EED2;c:#0A7043;f:calibri;s:11pt/b:#FEEC9B;c:#826717;f:calibri;s:11pt/f:Calibri;w:bold;v:top;s:11pt/f:calibri;s:18pt/b:#DDE5F6;f:calibri;s:11pt/b:#FDE0D2;f:calibri;s:11pt/b:#EEEEEC;f:calibri;s:11pt/b:#FEF4CD;f:calibri;s:11pt/b:#9CC0E7;f:calibri;s:11pt/b:#F9AD7B;f:calibri;s:11pt/b:#C9C9C9;f:calibri;s:11pt/b:#FED965;f:calibri;s:11pt/b:#559AD9;c:#FFFFFF;f:calibri;s:11pt/b:#EB7E2F;c:#FFFFFF;f:calibri;s:11pt/b:#A5A5A5;c:#FFFFFF;f:calibri;s:11pt/b:#FDBF01;c:#FFFFFF;f:calibri;s:11pt".split("/");
                    len = prop.length;
                    while (i < len) {
                        this.XLFormat._createFormatClass(this._getStyleAsJSON(prop[i]), null, true);
                        i++;
                    }
                }
                prop = ".e-spreadsheet .e-hide, .e-spreadsheet .e-mc-hide, .e-spreadsheet .e-fr-hide, .e-spreadsheet .e-fc-hide, .e-spreadsheet .e-c-hide, .e-spreadsheet .e-r-hide, .e-spreadsheet .e-col-hide{ display: none}";
                prop += ".e-js.e-spreadsheet .e-spreadsheetmainpanel .e-rowcell.e-redft { background-color: #FFC7CE; color: #9C0055;} .e-js.e-spreadsheet .e-spreadsheetmainpanel .e-rowcell.e-yellowft { background-color: #FFEB9C; color: #9C6500;}";
                prop += ".e-js.e-spreadsheet .e-spreadsheetmainpanel .e-rowcell.e-greenft { background-color: #C6EFCE;   color: #006100;} .e-js.e-spreadsheet .e-spreadsheetmainpanel .e-rowcell.e-redf { background-color: #FFC7CE;} .e-js.e-spreadsheet .e-spreadsheetmainpanel .e-rowcell.e-redt { color: #9C0055;}";
                prop += ".e-js.e-spreadsheet .e-spreadsheetmainpanel .e-rowcell.e-hlcell { background-color: #FFFF00; color: #FF0000;} .e-js.e-spreadsheet .e-spreadsheetmainpanel .e-rowcell.e-goto-blank { background-color: #C6C6C6;}";
                stag.styleSheet ? stag.styleSheet.cssText += prop : stag.appendChild(document.createTextNode(prop));
            }
            this._renderStyleTag("showhide");
        },

        _initEditForm: function () {
            var $acElem, $form, $valElem;
            $acElem = ej.buildTag("input", "", { display: "none" }, { id: this._id + "_AutoComplete" });
            $acElem.addClass("e-hide");
            this.element.append($acElem);
            this.XLEdit._renderAutoComplete($acElem, "", null, true);
            $acElem.data("ejAutocomplete")._setListPosition = function () { }; //JS-35957
            $form = ej.buildTag("form", "", { width: 1, height: 1, display: "none" }, { id: this._id + "EditForm" }), $valElem = ej.buildTag("input", "", { width: 1, height: 1, overflow: "hidden", opacity: 0 }, { id: this._id + "_ValElem" });
            $form.append($valElem);
            $valElem.data("id", this._id);
            this.element.append($form);
        },

        _getStyleAsJSON: function (str) {
            var istr, len, i = 0, obj = {}, prop = { b: 'background-color', c: 'color', f: 'font-family', s: 'font-size', w: 'font-weight', v: 'vetical-align', bo: 'border' };
            str = str.split(';'), len = str.length;
            while (i < len) {
                istr = str[i].split(':');
                obj[prop[istr[0]]] = istr[0] === 'bo' ? this.XLRibbon._getBorderObj(istr[1].split('-')[0], istr[1].split('-')[1]) : istr[1];
                i++;
            }
            return obj;
        },

        _initLayout: function () {
            if (this.model.showRibbon) {
                this.XLRibbon._renderRibbon();
                if (this._tabMode)
                    $("#" + this._id + "_Ribbon").ejRibbon("collapse");
            }
            if (this.model.allowFormulaBar)
                this._renderFormulaBar();
            this._renderFUpload();
            this._renderLayout();
        },

        _renderLayout: function () {
            var i, cnt, settings = this.getDataSettings(this.getActiveSheetIndex());
            if (this.model.isGridMode && ej.isNullOrUndefined(settings)) {
                this._renderAlertdlg();
                this._showAlertDlg("Alert", "GridDataSourceAlert", "", 630);
                this.element.css({ height: 0, width: 0, "min-height": 0, "min-width": 0 });
                return;
            }
            this._renderPanel();
            this._initTags();
            this._initDependencies();
            this._renderFooter();
            this._refreshSheetLayout();
            if (this.model.scrollSettings.allowVirtualScrolling || this.model.scrollSettings.allowSheetOnDemand)
                i = cnt = this.getActiveSheetIndex()
            else {
                i = 1;
                cnt = this.model.sheetCount;
            }
            while (i <= cnt) {
                this._initSheet(i);
                i++;
            }
        },

        _renderPanel: function () {
            var $mainDiv, div, settings = this.model.scrollSettings;
            $mainDiv = ej.buildTag('div.e-spreadsheetgrppanel', "", {}, { id: this._id + "GroupPanel" });
            this.setGroupPanel($mainDiv);
            div = ej.buildTag('div.e-spreadsheetmainpanel', this._renderDIV("e-spreadsheet-list", ""), {}, { id: this._id + "MainPanel" });
            $mainDiv.append(div);
            this.setMainPanel(div);
            div = ej.buildTag('div.e-spreadsheetactpanel', "", { height: settings.height, width: this.model.activationPanelWidth - 1, display: "none" }, { id: this._id + "ActivationPanel" });
            $mainDiv.append(div);
            this.setActivationPanel(div);
            this.element.append($mainDiv);
        },

        _refreshSheetLayout: function () {
            var contentHt, formulaHeight, ribHgt, ribbonHeight, ribContHeight = -1, pagerHt = this.model.pageSettings.pagerHeight + 1;
            this._updateResponsiveSettings();
            this.XLRibbon._ribbonState && (ribContHeight = $("#" + this._id + "_Ribbon").find(".e-content:eq(1)").height());
            ribHgt = this._phoneMode ? $("#" + this._id + "_Ribbon").height() : $("#" + this._id + "_Ribbon").find(".e-header").height() + ribContHeight + 2;
            formulaHeight = this.model.allowFormulaBar ? this._formulaHeight : 0;
            ribbonHeight = (ribHgt && this.model.showRibbon && $("#" + this._id + "_Ribbon").is(":visible")) ? ribHgt : 0;
            (!this.model.showPager || !this.element.find(".e-spreadsheetfooter").is(":visible")) && (pagerHt = 1);
            contentHt = this._responsiveHeight - (ribbonHeight + formulaHeight + 2);
            ((this._browserDetails.name != "msie") && !this._isAutoWHMode) && this.element.find(".e-spreadsheet-list").height(contentHt - pagerHt);
        },

        _initTags: function () {
            var span = ej.buildTag('span#' + this._id + '_emptySpan'), div = ej.buildTag('div#' + this._id + '_emptyDiv');
            this.element.find('.e-spreadsheetmainpanel')[0].insertBefore(span[0], this.element.find('.e-spreadsheetmainpanel').find(".e-spreadsheet-list")[0]);
            this.element.find('.e-spreadsheetmainpanel')[0].insertBefore(div[0], this.element.find('.e-spreadsheetmainpanel').find(".e-spreadsheet-list")[0]);
            this._refreshGlobalSpan();
        },

        _refreshGlobalSpan: function (span, width) {
            span = span || document.getElementById(this._id + (width ? '_emptyDiv' : '_emptySpan'));
            span.textContent = '';
            span.className = '';
            if (this._browserDetails.name === "msie" && this._browserDetails.version === "8.0")
                $(span).removeAttr('style').text("");
            else
                span.removeAttribute("style");
        },

        _initSheet: function (sheetIdx) {
            var len, i = 0, sheet = this.getSheet(sheetIdx), settings = this.getDataSettings(sheetIdx);
            this._updateResponsiveSettings();
            this._initViewPort(sheetIdx);
            if (settings && !this._sheetCopy.isSheetCopy) {
                len = settings.length;
                while (i < len) {
                    this._initDataSrc(sheetIdx, sheet, settings[i]);
                    i++;
                }
            }
            if (sheet._reqCnt === sheet._resCnt)
                this._renderSheet(sheetIdx);
        },

        _initViewPort: function (sheetIdx) {
            var pagerHt = -1, actPnlWidth, ribbonHgt, ribHght, scrollerHgt, scrollerWth, colHdrHgt, rowHdrWth, formulaHgt, curRowCnt, loadedBlk, len, i, j, container = this._dataContainer.sheets, erowIdx, srowIdx, settings = this.model.scrollSettings, sheet = this.getSheet(sheetIdx), prevVRowCnt;
            actPnlWidth = ribbonHgt = scrollerHgt = scrollerWth = colHdrHgt = rowHdrWth = formulaHgt = prevVRowCnt = 0;
            if (settings.allowScrolling) {
                scrollerHgt = this._scrollerHeight;
                scrollerWth = this._scrollerWidth;
            }
            if (sheet.showHeadings) {
                colHdrHgt = this._colHeaderHeight;
                rowHdrWth = this._rowHeaderWidth;
            }
            if (this.model.showRibbon) {
                ribHght = this.getSheet(this.getActiveSheetIndex())._isRibCollapsed ? 0 : ribHght = $("#" + this._id + "_Ribbon_home").height();
                ribbonHgt = this.element.find(".e-box.e-addborderbottom.e-header").height() + ribHght + 2;
                ribbonHgt = ribbonHgt < 189 ? ribbonHgt : 188; //188 max height of Ribbon
            }
            if (this.model.allowFormulaBar)
                formulaHgt = this._formulaHeight;
            if (this.model.showPager && this.element.find(".e-spreadsheetfooter").is(":visible"))
                pagerHt = this.model.pageSettings.pagerHeight;
            if (this.getActivationPanel().is(":visible"))
                actPnlWidth = this.getActivationPanel().width();
            sheet._vPortHgt = this._responsiveHeight - (ribbonHgt + formulaHgt + colHdrHgt + pagerHt + scrollerHgt);
            sheet._vPortWth = this._responsiveWidth - (actPnlWidth + scrollerWth + rowHdrWth);
            if (settings.allowVirtualScrolling) {
                prevVRowCnt = sheet._virtualBlockRowCnt;
                sheet._virtualBlockRowCnt = Math.ceil(sheet._vPortHgt / sheet.rowHeight) + this._bufferCnt;
                if (sheet._hasDataSrc && prevVRowCnt < sheet._virtualBlockRowCnt) {
                    curRowCnt = sheet._virtualBlockRowCnt, loadedBlk = sheet._virtualDataLoadedBlks, len = loadedBlk.length;
                    for (i = 0; i < len; i++) {
                        erowIdx = (loadedBlk[i] * curRowCnt), srowIdx = erowIdx - curRowCnt;
                        for (j = srowIdx + 1; j <= erowIdx; j++)
                            if (ej.isNullOrUndefined(container[sheetIdx][j]))
                                this._refreshDataSrc([j, 0, j, sheet.usedRange.colIndex, sheetIdx]);
                    }
                }
            }
        },

        _initDataSrc: function (sheetIdx, sheet, setting) {
            var proxy, args = { sheetIndex: sheetIdx, lockWorkbookCells: false, computeFormula: this._computeFormula };
            if (setting._dataManager) {
                this._trigger("load", args);
                this._isDefaultLocked = args.lockWorkbookCells;
                this._computeFormula = args.computeFormula;
                if (setting._dataManager instanceof ej.DataManager) {
                    if (setting._dataManager.ready) {
                        proxy = this;
                        sheet._reqCnt++;
                        this._reqCnt++;
                        setting._dataManager.ready.done(function (args) {
                            proxy._initDataMngr(sheetIdx, sheet, setting);
                        });
                    }
                    else
                        this._initDataMngr(sheetIdx, sheet, setting);
                }
            }
            else if (setting._jsonData)
                setting.count = setting._jsonData.length;
        },

        _initDataMngr: function (sheetIdx, sheet, setting) {
            var len, query, range, queries, promise, queryCnt, cnt = 0, proxy = this;
            setting._isDataManager = true;
            setting._isOffline = setting._dataManager.dataSource.offline;
            if (!setting.query)
                setting.query = new ej.Query();
            setting.query.requiresCount();
            if (this.model.scrollSettings.allowVirtualScrolling) {
                queries = setting.query.queries;
                len = queries.length;
                if (len) {
                    while (len--) {
                        query = queries[len];
                        if (query.fn === "onTake") {
                            cnt = query.e.nos;
                            queries.splice(len, 1);
                        }
                        else if (query.fn === "onSkip")
                            setting._skip = query.e.nos;
                    }
                }
                queryCnt = sheet._virtualBlockRowCnt * 2;
                if (setting.startCell) {
                    range = this.getRangeIndices(setting.startCell);
                    if (range[0])
                        queryCnt -= range[0] - 0;
                }
                if (cnt && cnt < queryCnt)
                    queryCnt = cnt;
                setting.query.take(queryCnt);
            }
            promise = setting._dataManager.executeQuery(setting.query);
            promise.done(function (e) {
                len = e.count || e.result.length;
                if (len) {
                    setting._jsonData = e.result;
                    if (proxy.model.isGridMode)
                        setting.count = (e.result && e.result.length > 0) ? e.result.length : 1;
                    else
                        setting.count = cnt || len;
                }
                if (proxy._isDataSrcMethod) {
                    if (sheet.fieldAsColumnHeader) {
                        sheet.columns = [];
                        proxy._initTmplColumns(sheetIdx);
                        proxy.refreshContent(sheetIdx);
                        this._isDataSrcMethod = false;
                    }
                    else {
                        proxy.refreshContent(sheetIdx);
                        this._isDataSrcMethod = false;
                    }
                    if (proxy._isAutoWHMode) {
                        proxy._setElemDimension();
                    }
                    if (proxy.model.isGridMode && !proxy._isAutoWHMode)
                        this._gridModeScroll(true);
                }
                else {
                    proxy._respHandler(sheetIdx);
                    if (proxy.model.isGridMode && !proxy._isAutoWHMode)
                        proxy._gridModeScroll(true);
                }
            });
            promise.fail(function (e) {
                proxy._respHandler(sheetIdx);
            });
            if (!setting._dataManager.isDataAvailable) {
                sheet._reqCnt++;
                this._reqCnt++;
            }
        },

        _respHandler: function (sheetIdx) {
            var sheet = this.getSheet(sheetIdx);
            sheet._resCnt++;
            this._resCnt++;
            if (sheet._reqCnt === sheet._resCnt)
                this._renderSheet(sheetIdx);
            this._initComplete();
            if (this._isAutoWHMode) {
                this._setElemDimension();
            }

        },

        _renderSheet: function (sheetIdx) {
            var div, sIdx, impData, hfreeze, actSheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), name = sheet.sheetInfo.value, settings = {},
                elem = this.element.find('#' + this._id + '_' + name), args = { sheetIndex: sheetIdx, lockWorkbookCells: this._isDefaultLocked, computeFormula: this._computeFormula };
            this._resizeColl[sheetIdx - 1] = false;
            if (this._isInitLoad)
                this._trigger("load", args);
            this._isDefaultLocked = args.lockWorkbookCells;
            this._computeFormula = args.computeFormula;
            this._initTmplColumns(sheetIdx);
            div = elem.length === 1 ? elem : ej.buildTag('div.e-sheet e-hide ', '', {}, { id: this._id + '_' + name });
            var content = this._renderContent(sheetIdx);
            for (var i = 0, iLen = content.length; i < iLen; i++)
                div.append(content[i]);
            if (!elem.length) {
                if (this.model.allowFreezing)
                    hfreeze = this.XLFreeze._getHFreeze();
                if (hfreeze)
                    hfreeze.before(div);
                else
                    this.element.find(".e-spreadsheet-list").append(div);
            }
            if (sheet.showGridlines === false)
                $("#" + this._id + "_Ribbon_PageLayout_Show_Gridlines").ejCheckBox({ checked: sheet.showGridlines });
            if (this.model.enableContextMenu) {
                this.XLCMenu._initContextMenu();
                this.XLCMenu._initColorDialog();
                this.XLCMenu._initCMenuFooter();
            }
            this._updateResponsiveSettings();
            this._removeClass(div, "e-hide");
            settings.width = this._responsiveWidth;
            settings.height = this._responsiveHeight;
            (this.model.showRibbon && !this._isAutoWHMode && (this._tabMode || this._responsiveHeight < 280)) && $("#" + this._id + "_Ribbon").ejRibbon("collapse");
            this._setSheetWidthHeight(sheetIdx, settings, null, "refresh", "initial");
            this._refreshCellBinding(sheetIdx);
            this._refreshImpResRowHght(sheetIdx);
            this.refreshContent(sheetIdx);
            if (sheetIdx === actSheetIdx)
                this._updateHiddenRows(actSheetIdx);
            this._initializePicture(sheetIdx);
            if (this.model.allowCellType && this.model.allowAutoCellType && this._celltypes.length)
                this._processCellTypes(this._celltypes, sheetIdx);
            if (this.model.allowCellType && !this.model.scrollSettings.allowVirtualScrolling)
                this.XLCellType._rangeCellTypes(sheet.cellTypes, sheetIdx);
            if (sheet._isImported && !this._sheetCopy.isSheetCopy) {
                this.setActiveSheetIndex(sheetIdx);
                this._refreshImpSheets(sheetIdx);
                this.setActiveSheetIndex(actSheetIdx);
            }
            if (sheetIdx !== actSheetIdx)
                div.hide();
            else
                this._initSelection();
            this._initSheetModel(sheetIdx);
            if ((this.isImport || this.model.isImport) && sheet._isFreezed) {
                impData = this._impData.model.sheets[sheetIdx];
                sIdx = this.getRangeIndices(impData.paneTopLeftCell);
                if (this._isFrozen(sheet.frozenRows))
                    this.XLScroll._vScroller(sheetIdx).scroll(this._getRowOffsetTop(sheet, sIdx[0]) - sheet._frozenHeight);
                if (this._isFrozen(sheet.frozenColumns))
                    this.XLScroll._hScroller(sheetIdx).scroll(this._getColOffsetLeft(sheet, sIdx[1]) - sheet._frozenWidth);
            }
            sheet._isLoaded = true;
            if (!this._isSheetInsert && (this._pageClickArgs || this._gotoPageArgs))
                this._pageLoadComplete(sheetIdx);
            this.getSheet(actSheetIdx)._isOpened = true;
            if (this.model.showRibbon) {
                if ($("#" + this._id + "_Ribbon")[0].style.overflow === "hidden") {
                    $("#" + this._id + "_Ribbon")[0].style.overflow = "";
                    if (this.model.showRibbon)
                        this.XLRibbon._refreshBackstageHeight();
                }
                sheet._isRibCollapsed = !this.XLRibbon._ribbonState;
            }
            if (this._isAutoWHMode && (sheetIdx == actSheetIdx))
                this._autoSSWidthHeight(sheetIdx);
        },

        _initSheetModel: function (sheetIdx) {
            var sIdx, toprow, leftCol, impData, sheet = this.getSheet(sheetIdx), frows = this.getFrozenRows(sheetIdx), fcols = this.getFrozenColumns(sheetIdx);
            if (sheet.showHeadings === false)
                this.showHeadings(sheet.showHeadings);
            if (sheet._isImported) {
                impData = this._impData.model.sheets[sheetIdx];
                sIdx = this.getRangeIndices(impData.topLeftCell || "A1");
            }
            toprow = sheet._isImported ? sIdx[0] : ((this._isFrozen(frows) && sheet._bottomRow.idx <= frows) ? frows - 1 : 0);
            leftCol = sheet._isImported ? sIdx[1] : ((this._isFrozen(fcols) && sheet._rightCol.idx <= fcols) ? fcols - 1 : 0);
            if (this.model.scrollSettings.allowScrolling) {
                (toprow > 0) && this.XLScroll._vScroller(sheetIdx).scroll(this._getRowOffsetTop(sheet, toprow));
                (leftCol > 0) && this.XLScroll._hScroller(sheetIdx).scroll(this._getColOffsetLeft(sheet, leftCol));
            }
            if (this.model.allowFreezing) {
                if (this._isFrozen(frows) && this._isFrozen(fcols))
                    this.XLFreeze.freezePanes(frows, fcols);
                else if (this._isFrozen(frows))
                    this.XLFreeze._freeze(frows);
                else if (this._isFrozen(fcols))
                    this.XLFreeze._freeze(null, fcols);
            }
        },

        _initTmplColumns: function (sheetIdx) {
            var i, value, field, data, range, sheet = this.getSheet(sheetIdx), len = sheet.columns.length;
            for (i = 0; i < len; i++) {
                if (sheet.columns[i].field && sheet.columns[i].text)
                    this._copyColumns[sheet.columns[i].field] = sheet.columns[i];
            }
            if (len)
                sheet.columns = [];
            if (!this._sheetCopy.isSheetCopy && !sheet.rangeSettings.length && sheet.dataSource && sheet._jsonData && sheet.fieldAsColumnHeader) {
                data = sheet._jsonData[0];
                range = this.getRangeIndices(sheet.startCell);
                i = range[1] + 1;
                if (data) {
                    for (field in data) {
                        if (data.hasOwnProperty(field)) {
                            value = data[field];
                            if (typeof data[field] === "object")
                                field = this._iterateComplxObj(data[field], field).prop;
                            sheet.columns[i - 1] = {
                                field: this._generateHeaderText(i),
                                text: field,
                                type: value != null ? (value.getDay ? "date" : typeof (value)) : null
                            };
                            i++;
                        }
                    }
                    sheet.colCount = sheet._templateColCount = sheet.columns.length;
                    sheet._isTemplate = true;
                }
            }
        },

        _refreshCellBinding: function (sheetIdx) {
            var i, j, len, sheet = this.getSheet(sheetIdx), mergeCellsCln = sheet.mergeCells, hideRowsCln = sheet.hideRows;
            if (mergeCellsCln.length) {
                var k, range, rowCount, colCount, mergeObj;
                for (k = 0, len = mergeCellsCln.length; k < len; k++) {
                    range = this.getRangeIndices(mergeCellsCln[k]), rowCount = range[2] - range[0] + 1, colCount = range[3] - range[1] + 1, mergeObj;
                    for (i = 0; i < rowCount; i++) {
                        for (j = 0; j < colCount; j++) {
                            if (i == 0 && j == 0)
                                mergeObj = { merge: { isMerge: true, mRange: mergeCellsCln[k], isCenterAlign: false, mSpan: { colSpan: colCount, rowSpan: rowCount } } };
                            else
                                mergeObj = { isMHide: true, mergeIdx: { rowIndex: range[0], colIndex: range[1] } };
                            this.XLEdit._updateDataContainer({ rowIndex: range[0] + i, colIndex: range[1] + j }, { dataObj: mergeObj, sheetIdx: sheetIdx, skipCell: true });
                        }
                    }

                }
            }
            if (hideRowsCln.length && this.model.scrollSettings.allowVirtualScrolling) {
                for (i = 0, len = hideRowsCln.length; i < len; i++)
                    this._cellBindHiddenRows(hideRowsCln[i], hideRowsCln, sheetIdx);
            }

        },

        _cellBindHiddenRows: function (rowIdx, hideRowsCln, sheetIdx) {
            var curCell, cell, sheet = this.getSheet(sheetIdx), xlEdit = this.XLEdit;
            sheet.hideRowsCollection.push(rowIdx);
            this.XLScroll._getRowHeights(sheetIdx, hideRowsCln.sort()[0]);
            cell = (rowIdx === 0) ? { rowIndex: rowIdx, colIndex: 0 } : { rowIndex: rowIdx - 1, colIndex: 0 };
            curCell = { rowIndex: rowIdx, colIndex: 0 };
            xlEdit._updateDataContainer(cell, { dataObj: { hRow: true }, sheetIdx: sheetIdx, skipCell: true });
            xlEdit._updateDataContainer(curCell, { dataObj: { isRHide: true }, sheetIdx: sheetIdx, skipCell: true });
        },

        _updateHiddenRows: function (sheetIdx) {
            var i, len, rowColl, rows, hdrRows, sheet = this.getSheet(sheetIdx), hideRowsCln = sheet.hideRows, rowIdx, cFormatRuleCln = sheet.cFormatRule, cFormatRule, hideColsCln = sheet.hideColumns, borderColl = sheet.border;
            if (hideRowsCln.length && !this.model.scrollSettings.allowVirtualScrolling) {
                for (i = 0, len = hideRowsCln.length; i < len; i++) {
                    rowIdx = hideRowsCln[i];
                    rowColl = this.getRows(sheetIdx), rows = rowColl[1], hdrRows = rowColl[0];
                    this.addClass(rows[rowIdx], "e-r-hide");
                    this.addClass(hdrRows[rowIdx], "e-r-hide");
                    rowIdx > 0 && this.addClass(hdrRows.eq(rowIdx - 1).find("td")[0], "e-hrow");
                    this._cellBindHiddenRows(rowIdx, hideRowsCln, sheetIdx);
                }
            }
            if (hideColsCln.length && !this.model.scrollSettings.allowVirtualScrolling) {
                for (i = 0, len = hideColsCln.length; i < len; i++) {
                    if (!sheet.hideColsCollection[hideColsCln[i]])
                        this._updateHiddenColumns({ rowIndex: 0, colIndex: hideColsCln[i] }, sheetIdx);
                }
                this.XLScroll._getColWidths(sheetIdx, hideColsCln.sort()[0]);
            }
            if (!ej.isNullOrUndefined(cFormatRuleCln) && cFormatRuleCln.length) {
                for (i = 0, len = sheet.cFormatRule.length; i < len; i++) {
                    cFormatRule = sheet.cFormatRule[i];
                    this.XLCFormat._cFormat(cFormatRule.action, cFormatRule.inputs[0], cFormatRule.inputs[1], cFormatRule.color, cFormatRule.bgColor, cFormatRule.range, sheetIdx);
                }
            }

            if (borderColl.length && !this.model.scrollSettings.allowVirtualScrolling) {
                for (i = 0, len = borderColl.length; i < len; i++)
                    this._updateCellBorder(borderColl[i], sheetIdx);
            }
        },

        _updateHiddenColumns: function (cell, sheetIdx) {
            var colIdx = cell.colIndex, sheet = this.getSheet(sheetIdx), dataObj = { isCHide: true }, sheetHdr = this._getJSSheetHeader(sheetIdx), hdrElem = sheetHdr.find("th"), hdrcolgrp = sheetHdr.find("col"), colGrp = this._getContent(sheetIdx).find("col");
            sheet.hideColsCollection[colIdx] = sheet.columnWidth;
            sheet.columnsWidthCollection[colIdx] = 0;
            if (colIdx === 0)
                dataObj.hCol = true;
            this._writeRule(colIdx, sheetIdx);
            this.addClass(hdrElem[colIdx], "e-hide");
            this.addClass(hdrcolgrp[colIdx], "e-hide");
            this.addClass(colGrp[colIdx], "e-hide");
            !sheetHdr.find('th:eq(' + (colIdx - 1) + ')').hasClass("e-hide") && this.addClass(sheetHdr.find('th:eq(' + (colIdx - 1) + ')')[0], "e-hcol");
            this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: colIdx }, { dataObj: dataObj, sheetIdx: sheetIdx, skipCell: true });
            if (colIdx > 0)
                this.isUndefined(this.XLEdit.getPropertyValue(0, colIdx - 1, "isCHide")) && this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: colIdx - 1 }, { dataObj: { hCol: true }, sheetIdx: sheetIdx, skipCell: true });
        },


        _renderContent: function (sheetIdx) {
            var elems = [], div = ej.buildTag('div.e-spreadsheetheader'), innerDiv = ej.buildTag('div.e-headercontent'),
                colHeader = ej.buildTag('div.e-spreadsheetcolumnheader e-icon e-ss-selectall  e-ss-cursor', "", {}, {}),
                contentContainer = ej.buildTag('div.e-spreadsheetcontentcontainer', "", { "-webkit-tap-highlight-color": "rgba(0,0,0,0)" }), cont = ej.buildTag("div#" + this._id + "_content.e-content e-ss-cursor"),
                rowHeader = ej.buildTag('div.e-spreadsheetrowheader', "", { "float": "left", "width": "30px" }, {}), rowHdrCont = ej.buildTag("div.e-rowheadercontent");
            if (this._isAutoWHMode) {
                cont.addClass("e-rmvbtmbdr");
                innerDiv.addClass("e-rmvrghtbdr");
                rowHdrCont.addClass("e-rmvbtmbdr");
            }
            this._setJSSheetHeader(div, sheetIdx);
            div.append(colHeader);
            div.append(innerDiv);
            elems.push(div);
            div = ej.buildTag("div.e-spreadsheetcontent");
            this._setJSSheetContent(div, sheetIdx);
            this._setContent(contentContainer, sheetIdx);
            this._setJSSheetRowHeader(rowHeader, sheetIdx);
            this._setJSSheetRowHeaderContent(rowHdrCont, sheetIdx);
            rowHeader.append(rowHdrCont);
            contentContainer.append(cont);
            div.append(rowHeader);
            div.append(contentContainer);
            elems.push(div);
            return elems;
        },

        refreshContent: function (sheetIdx) {
            this._refreshContent(sheetIdx);
        },

        _refreshContent: function (sheetIdx, isRefreshScroller) {
            sheetIdx = sheetIdx || this.getActiveSheetIndex();
            var contentrows, rowhdrrows, scroll = this.model.scrollSettings,
                isVirtualScroll = scroll.allowVirtualScrolling, cont = this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"), colHdrs, rowHdrs;
            this._initDataRange(sheetIdx);
            this._refreshRowColCnt(sheetIdx);
            colHdrs = this._renderHeaderColumns(sheetIdx);
            this._getJSSheetHeader(sheetIdx).find(".e-headercontent").html(colHdrs);
            this._refreshTemplates(sheetIdx);
            rowHdrs = this._renderHdrRows(sheetIdx);
            this._getJSSheetRowHeaderContent(sheetIdx).html(rowHdrs);
            cont.find(".e-table")[0] && cont.find(".e-table").eq(0).remove();
            cont.prepend(this._renderContTable(sheetIdx));
            this._initViewPortCont(sheetIdx);
            if (this._isAutoWHMode) {
                if (!this._isInitLoad)
                    this._autoSSWidthHeight(sheetIdx);
            }
            else if (!isRefreshScroller)
                this.XLScroll._refreshScroller(sheetIdx, "refresh", "all");
            if (!isVirtualScroll && !isRefreshScroller) {
                this.XLScroll._getFirstRow(sheetIdx);
                this.XLScroll._getFirstColumn(sheetIdx);
            }
            contentrows = this._getContTBody(sheetIdx).find("tr");
            rowhdrrows = this._getRowHdrTBody(sheetIdx).find("tr");
            this.setRows([rowhdrrows, contentrows], sheetIdx);
        },

        _autoSSWidthHeight: function (sheetIdx, refrshWHSttgsOnly) {
            var settings = {}, ribObj = $("#" + this._id + "_Ribbon").data("ejRibbon");
            sheetIdx = sheetIdx || this._getSheetIndex();
            this._responsiveWidth = this._dlgWidth = settings.width = (this.getSheet(sheetIdx).showHeadings) ? this._getContTBody(sheetIdx).width() + this._getJSSheetRowHeader(sheetIdx).width() : this._getContTBody(sheetIdx).width();
            if (this.model.showRibbon && settings.width <= 480) {
                settings.width = 480;
                this._getContent(sheetIdx).find(".e-content").removeClass("e-rmvrghtbdr");
            }
            else if (!refrshWHSttgsOnly)
                this._getContent(sheetIdx).find(".e-content").addClass("e-rmvrghtbdr");
            if (!refrshWHSttgsOnly)
                this._setSheetWidthHeight(sheetIdx, settings, null, "refresh");
            if (this.model.showRibbon) {
                (settings.width <= 480) && this._alignFormulaBar(settings.width);
                this.XLRibbon._refreshBackstageHeight();
                ribObj.setModel({ width: settings.width });
            }
            this._responsiveHeight = this._dlgHeight = settings.height = this.element.height();
        },

        _initDataRange: function (sheetIdx) {
            var len, range, setting, rowCnt, colCnt, rowIdx, colIdx, i = 0, sheet = this.getSheet(sheetIdx), settings = this.getDataSettings(sheetIdx);
            if (settings) {
                len = settings.length;
                while (i < len) {
                    setting = settings[i];
                    if (setting._jsonData) {
                        setting.batchChanges = sheet.batchChanges;
                        setting.fields = this.getObjectKeys(setting._jsonData[0]);
                        range = setting.startCell ? this._toIntrnlRange(setting.startCell, sheetIdx) : [0, 0, 0, 0];
                        range[2] = range[0] + (!setting.fieldAsColumnHeader && setting.showHeader ? setting.count : setting.count - 1);
                        range[3] = range[1] + this.getObjectLength(setting._jsonData[0]) - 1;
                        setting.range = range;
                        rowIdx = range[2], colIdx = range[3]; // used range update
                        if (this._isAutoWHMode || sheet.usedRange.rowIndex < rowIdx)
                            sheet.usedRange.rowIndex = rowIdx;
                        if (this._isAutoWHMode || sheet.usedRange.colIndex < colIdx)
                            sheet.usedRange.colIndex = colIdx;
                        rowCnt = rowIdx + 1, colCnt = colIdx + 1; // row and col count update
                        if (!this._isPublic) {
                            if (this._isAutoWHMode || sheet.rowCount < rowCnt)
                                sheet.rowCount = rowCnt;
                            if (this._isAutoWHMode || sheet.colCount <= colCnt)
                                sheet.colCount = colCnt;
                            if (this.model.isGridMode) {
                                if (sheet.usedRange.rowIndex < rowCnt)
                                    sheet.rowCount = rowCnt;
                                if (sheet.usedRange.colIndex < colCnt)
                                    sheet.colCount = colCnt;
                            }
                        }
                        sheet._hasDataSrc = true;
                    }
                    i++;
                }
            }
        },

        _renderStyleTag: function (type) {
            var rtag, stag;
            rtag = document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0];
            stag = document.createElement("style");
            stag.type = "text/css";
            if (type == "custom") {
                stag.setAttribute("id", this._id + "_sscustomformat");
                rtag.appendChild(stag);
            }
            else if (type === "showhide" && !document.getElementById(this._id + "_sshide")) {
                stag.setAttribute("id", this._id + "_sshide");
                rtag.appendChild(stag);
            }
            return stag;
        },

        _renderHeaderColumns: function (sheetIdx) {
            var colHdr, table, colGroup, valColl, thead = document.createElement('thead'), sheet = this.getSheet(sheetIdx), i, keys = this.getObjectKeys(this._copyColumns), len = keys.length, copyColumns = this._copyColumns, index;
            for (i = 0; i < len; i++) {
                index = this._generateColCount(keys[i]) - 1;
                if (sheet.columns[index])
                    sheet.columns[index]["text"] = copyColumns[keys[i]].text;
                else if (sheet.colCount > index && copyColumns[keys[i]].field)
                    sheet.columns[index] = copyColumns[keys[i]];
            }
            valColl = this._renderHeaderCol(sheetIdx, 0, sheet.colCount);
            table = ej.buildTag('table.e-table')[0];
            if (this.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal)
                $(table).width(this._getEntireColWidth(sheetIdx));
            else
                this.addClass(table, "e-ss-hdrspacing");
            colGroup = valColl[1];
            colHdr = valColl[0];
            thead.appendChild(colHdr);
            table.appendChild(colGroup);
            table.appendChild(thead);
            return table;
        },

        _renderHeaderCol: function (sheetIdx, startIdx, colCount) {
            var thCls, hdrCell, hdrCellDiv, col, colTxt, hTxt, hdrTxt, value, colWth, width = 0, arr = [], i = startIdx, sheet = this.getSheet(sheetIdx),
                colHdr = document.createElement('tr'), colGrp = document.createElement('colgroup');
            colHdr.className = "e-columnheader";
            if (!(this.isImport || this.model.isImport)) {
                sheet._colWidthCollection.length = 0;
                sheet._ofColWidthColl.length = 0;
            }
            if (!this.model.scrollSettings.allowScrolling && (this.model.scrollSettings.scrollMode == "infinite"))
                sheet.columnsWidthCollection = [];
            sheet._colWidthCollection.push(width);
            sheet._ofColWidthColl.push(width);
            while (i < colCount) {
                thCls = "e-headercell";
                colTxt = "col";
                colWth = sheet.columnsWidthCollection[i];
                if (this.isUndefined(colWth))
                    colWth = sheet.columnsWidthCollection[i] = sheet.columnWidth;
                if (i != colCount - 1) {
                    width = sheet._colWidthCollection[sheet._colWidthCollection.length - 1] + colWth;
                    sheet._colWidthCollection.push(width);
                    sheet._ofColWidthColl.push(width);
                }
                if (this.model.allowSelection && this._inColumn(sheet.selectedRange, i)) {
                    thCls += " e-colhighlight";
                    if (sheet._isColSelected)
                        thCls += " e-colselected";
                }
                if (colWth < 1) {
                    colTxt += ".e-hide";
                    thCls += " e-hide";
                }
                else if (sheet._hiddenFreezeCols.indexOf(i) > -1) {
                    colTxt += ".e-fcol-hide";
                    thCls += " e-fcol-hide";
                }
                if (this.isImport || this.model.isImport || sheet._isLoaded)
                    this.XLEdit.getPropertyValue(0, i, "hCol") && (thCls += " e-hcol");
                hdrCell = document.createElement('th');
                hdrCell.className = thCls;
                hTxt = hdrTxt = this._generateHeaderText(i + 1);
                if (sheet.fieldAsColumnHeader && sheet.columns[i])
                    hTxt = sheet.columns[i].text;
                hdrCellDiv = document.createElement('div');
                hdrCellDiv.className = "e-headercelldiv";
                hdrCellDiv.innerHTML = hTxt;
                hdrCell.appendChild(hdrCellDiv);
                col = ej.buildTag(colTxt, "", { width: colWth }, {});
                colHdr.appendChild(hdrCell);
                colGrp.appendChild(col[0]);
                if (!this._sheetCopy.isSheetCopy && !sheet.columns[i]) {
                    sheet.columns[i] = {
                        field: hdrTxt,
                        text: hdrTxt,
                        type: value != null ? (value.getDay ? "date" : typeof (value)) : null,
                    };
                }
                i++;
            }
            arr.push(colHdr);
            arr.push(colGrp);
            return arr;
        },

        _getWidth: function (scolIdx, ecolIdx, sheetIdx) {
            var wth = 0, sheet = this.getSheet(sheetIdx);
            for (; scolIdx <= ecolIdx; scolIdx++)
                wth += sheet.columnsWidthCollection[scolIdx];
            return wth;
        },

        _getEntireColWidth: function (sheetIdx) {
            var sheet = this.getSheet(sheetIdx), lastColTop = this._getIdxWithOffset(null, this._getLastColIdx(sheet)).xOffset;
            return lastColTop + sheet.columnsWidthCollection[sheet.columnsWidthCollection.length - 1];
        },

        _getLastColIdx: function (sheet) {
            var colIdx = sheet.colCount - 1;
            while (colIdx > -1) {
                if (!(colIdx in sheet.hideColsCollection) && sheet._hiddenFreezeCols.indexOf(colIdx) === -1)
                    break;
                colIdx--;
            }
            return colIdx;
        },

        _getIdxWithOffset: function (y, x, isOffset, skipActions, sheetIdx) {
            skipActions = skipActions || [];
            var isDefaultHide, isFreezeHide, len, i, idx, pos, offset, obj = {}, hideTypes = ej.Spreadsheet.HideTypes, sheet = this.getSheet(sheetIdx);
            i = idx = pos = offset = 0;
            if (!ej.isNullOrUndefined(y)) {
                if (isOffset) {
                    len = sheet.rowsHeightCollection.length;
                    while (i < len) {
                        isDefaultHide = isFreezeHide = false;
                        if (skipActions.indexOf(hideTypes.Default) === -1 && sheet.hideRowsCollection.indexOf(i) > -1)
                            isDefaultHide = true;
                        if (skipActions.indexOf(hideTypes.Freeze) === -1 && sheet._hiddenFreezeRows.indexOf(i) > -1)
                            isFreezeHide = true;
                        if (!isDefaultHide && !isFreezeHide) {
                            pos += sheet.rowsHeightCollection[i];
                            if (pos > y) {
                                idx = i;
                                break;
                            }
                            offset = pos;
                        }
                        i++;
                    }
                }
                else {
                    while (i < y) {
                        isDefaultHide = isFreezeHide = false;
                        if (skipActions.indexOf(hideTypes.Default) === -1 && sheet.hideRowsCollection.indexOf(i) > -1)
                            isDefaultHide = true;
                        if (skipActions.indexOf(hideTypes.Freeze) === -1 && sheet._hiddenFreezeRows.indexOf(i) > -1)
                            isFreezeHide = true;
                        if (!isDefaultHide && !isFreezeHide)
                            offset += sheet.rowsHeightCollection[i];
                        i++;
                    }
                    idx = y;
                }
                obj.rowIdx = idx;
                obj.yOffset = offset;
            }
            if (!ej.isNullOrUndefined(x)) {
                if (isOffset) {
                    i = idx = pos = offset = 0, len = sheet.columnsWidthCollection.length;
                    while (i < len) {
                        isDefaultHide = isFreezeHide = false;
                        if (skipActions.indexOf(hideTypes.Default) === -1 && i in sheet.hideColsCollection)
                            isDefaultHide = true;
                        if (skipActions.indexOf(hideTypes.Freeze) === -1 && sheet._hiddenFreezeCols.indexOf(i) > -1)
                            isFreezeHide = true;
                        if (!isDefaultHide && !isFreezeHide) {
                            pos += sheet.columnsWidthCollection[i];
                            if (pos > x) {
                                idx = i;
                                break;
                            }
                            offset = pos;
                        }
                        i++;
                    }
                }
                else {
                    while (i < x) {
                        isDefaultHide = isFreezeHide = false;
                        if (skipActions.indexOf(hideTypes.Default) === -1 && i in sheet.hideColsCollection)
                            isDefaultHide = true;
                        if (skipActions.indexOf(hideTypes.Freeze) === -1 && sheet._hiddenFreezeCols.indexOf(i) > -1)
                            isFreezeHide = true;
                        if (!isDefaultHide && !isFreezeHide)
                            offset += sheet.columnsWidthCollection[i];
                        i++;
                    }
                    idx = x;
                }
                obj.colIdx = idx;
                obj.xOffset = offset;
            }
            return obj;
        },

        _getEntireRowHeight: function (sheetIdx) {
            var sheet = this.getSheet(sheetIdx);
            return sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1] + sheet.rowsHeightCollection[sheet.rowsHeightCollection.length - 1];
        },

        _renderHdrRows: function (sheetIdx) {
            var i, j, k, l, len, cnt, cls, hgt, row, cell, span, diff, table, rowHgt, rowIdx, minrIdx, cellData,
                sheet = this.getSheet(sheetIdx), isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling;
            table = ej.buildTag("table.e-table", "<colgroup><col style='width: 30px;'></colgroup>", {});
            this.addClass(table[0], "e-ss-rowhdrspacing");
            if (!this._sheetCopy.isSheetCopy) {
                hgt = rowIdx = 0;
                cellData = sheet.rows;
                i = 0, cnt = sheet.rowCount;
                sheet._rowHeightCollection = [], sheet._rowIdxColl = [];
                sheet._rowHeightCollection.push(hgt);
                while (i < cnt) {
                    rowHgt = sheet.rowsHeightCollection[i];
                    if (!rowHgt)
                        rowHgt = sheet.rowsHeightCollection[i] = sheet.rowHeight;
                    if (!isVirtualScroll || (sheet.hideRowsCollection.indexOf(i) === -1 && sheet._hiddenFreezeRows.indexOf(i) === -1))
                        sheet._rowIdxColl.push(i);
                    else
                        rowHgt = 0;
                    if (i != cnt - 1)
                        sheet._rowHeightCollection.push(sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1] + rowHgt);
                    i++;
                }
                if (cellData) {
                    minrIdx = -1;
                    len = cellData.length;
                    diff = (this._browserDetails.name === "mozilla") ? 2 : 1;
                    for (j = 0; j < len; j++) {
                        row = cellData[j];
                        l = row.cells.length;
                        if (!this.isUndefined(row.index))
                            rowIdx = row.index;
                        hgt = row.height || sheet.rowHeight;
                        if (sheet.rowHeight < hgt) {
                            sheet.rowsHeightCollection[rowIdx] = hgt;
                            if (minrIdx === -1)
                                minrIdx = rowIdx;
                        }
                        for (k = 0; k < l; k++) {
                            cell = row.cells[k];
                            if (cell.style && cell.style["font-size"]) {
                                span = document.getElementById(this._id + '_emptySpan');
                                cls = this.XLFormat._createFormatClass(cell.style);
                                this.addClass(span, cls);
                                span.textContent = cell.value;
                                hgt = span.offsetHeight + diff;
                                if (hgt > sheet.rowsHeightCollection[rowIdx]) {
                                    sheet.rowsHeightCollection[rowIdx] = hgt;
                                    if (minrIdx === -1)
                                        minrIdx = rowIdx;
                                }
                                this._refreshGlobalSpan(span);
                            }
                            if (!this.isUndefined(cell.value))
                                sheet._hasDataSrc = true;
                        }
                        rowIdx++;
                    }
                    if (minrIdx !== -1)
                        this.XLScroll._getRowHeights(sheetIdx, minrIdx, true);
                }
            }
            if (isVirtualScroll)
                table.append("<tbody class='e-ss-virtualtop'></tbody><tbody></tbody><tbody class='e-ss-virtualbottom'></tbody>");
            else
                table.append("<tbody>" + this._renderRowHdr(sheet._rowIdxColl, sheetIdx) + "</tbody>");
            this._setRowHdrTBody(table.find("tbody").eq(isVirtualScroll ? 1 : 0), sheetIdx);
            return table;
        },

        _renderRowHdr: function (rowIdxArr, sheetIdx) {
            var idx, cnt, obj, i = 0, data = [], sheet = this.getSheet(sheetIdx);
            cnt = rowIdxArr ? rowIdxArr.length : sheet.rowCount;
            while (i < cnt) {
                idx = rowIdxArr ? rowIdxArr[i] : i;
                if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(idx, 0, "isFilterHide", sheetIdx)) || ej.isNullOrUndefined(this.XLEdit.getPropertyValue(idx, 0, "isRHide", sheetIdx))) {
                    obj = { height: sheet.rowsHeightCollection[idx] < this.model.rowHeight ? this.model.rowHeight : sheet.rowsHeightCollection[idx], rowidx: idx };
                    obj.className = this.XLEdit.getPropertyValue(idx, 0, "hRow", sheetIdx) ? "e-rowheader e-hrow " : "e-rowheader";
                    if (this.XLEdit.getPropertyValue(idx, 0, "isFilterHighlight", sheetIdx))
                        obj.className += " e-filterhiglight";
                    obj.wrap = this.XLEdit.getPropertyValue(idx, 0, "wrapRow", sheetIdx) ? " e-sswraprow" : "";
                    if (this.model.allowSelection && this._inRow(sheet.selectedRange, idx)) {
                        obj.className += " e-rowhighlight";
                        if (sheet._isRowSelected)
                            obj.className += " e-rowselected";
                    }
                    data.push(obj);
                }
                i++;
            }
            return $.render[this._id + "JSONRowHdrTemplate" + sheetIdx](data);
        },

        _refreshDataSrc: function (range, sheetIdx) {
            var j, k, l, m, n, data, setting, len, formatClass, srange, field, showHdr, isSheetData, i = 0,
                sheet = this.getSheet(sheetIdx), settings = this.getDataSettings(sheetIdx);
            showHdr = isSheetData = false;
            if (!sheet.rangeSettings.length && sheet.dataSource)
                isSheetData = true;
            if (settings) {
                len = settings.length;
                while (i < len) {
                    setting = settings[i];
                    if (setting.range) {
                        srange = setting.range; // settings range
                        showHdr = isSheetData ? (!setting.fieldAsColumnHeader && setting.showHeader) : setting.showHeader;
                        if (setting.headerStyles && this.getObjectLength(setting.headerStyles) && this.model.allowCellFormatting)
                            formatClass = this.XLFormat._createFormatClass(setting.headerStyles);
                        if (range) {
                            j = range[0], k = range[2], m = range[3];
                            while (j <= k) {
                                if (this._inRow(srange, j)) {
                                    l = range[1];
                                    while (l <= m) {
                                        if (this._inColumn(srange, l)) {
                                            field = setting.fields[l - setting.range[1]];
                                            if (showHdr && j === srange[0]) {
                                                data = setting._jsonData[j - setting.range[0]];
                                                if (data)
                                                    this._refreshCell(j, l, sheetIdx, setting, data, field, false, formatClass);
                                            }
                                            else {
                                                data = setting._jsonData[j - (setting.range[0] + (showHdr ? 1 : 0))];
                                                if (data)
                                                    this._refreshCell(j, l, sheetIdx, setting, data, field, true);
                                            }
                                        }
                                        l++;
                                    }
                                }
                                j++;
                            }
                        }
                        else {
                            j = 0, k = srange[0], m = srange[1], l = srange[2];
                            if (showHdr) {
                                data = setting._jsonData[j];
                                for (n in data) {
                                    this._refreshCell(k, m, sheetIdx, setting, data, n, false, formatClass);
                                    m++;
                                }
                                k++;
                            }
                            while (k <= l) {
                                data = setting._jsonData[j];
                                m = srange[1];
                                for (n in data) {
                                    this._refreshCell(k, m, sheetIdx, setting, data, n, true);
                                    m++;
                                }
                                j++ , k++;
                            }
                        }
                    }
                    i++;
                }
            }
        },

        _refreshCell: function (rowIdx, colIdx, sheetIdx, setting, data, field, isCont, formatClass) {
            var dataObj, cmplxObj = this._iterateComplxObj(data[field], field), sheet = this.getSheet(sheetIdx), container = this._dataContainer;
            dataObj = this.XLEdit._parseValue(isCont ? cmplxObj.value : cmplxObj.prop, { rowIndex: rowIdx, colIndex: colIdx });
            dataObj.sheetIdx = sheetIdx;
            if (setting.rangeName)
                dataObj.rangeName = setting.rangeName;
            if (isCont) {
                if (setting.primaryKey === field)
                    dataObj.isReadOnly = true;
            }
            else {
                if (formatClass) {
                    dataObj.format = formatClass;
                    dataObj.formats = setting.headerStyles;
                }
                if (!sheet.rangeSettings.length && sheet.dataSource)
                    dataObj.isReadOnly = true;
            }
            if ((sheet.showHeader && rowIdx) && this.isFormula(data[field])) {
                this.XLEdit._refreshCalcEngine(rowIdx, colIdx, true, data[field], sheetIdx);
                dataObj.value2 = container.sharedData[container.sheets[sheetIdx][rowIdx][colIdx].value2];
            }
            if ((sheet.showHeader && rowIdx) && data[field] && data[field][0] == "'")
                dataObj.value2 = dataObj.value2.substr(1);
            this.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: dataObj, sheetIdx: sheetIdx, skipCell: true });
        },

        _iterateComplxObj: function (obj, prop, cxprop) {
            var i, value, sep, cmplxProp = cxprop || prop, reslt = { prop: cmplxProp, value: obj };
            if (this._isObject(obj)) {
                sep = ".";
                for (i in obj) {
                    value = obj[i];
                    if (this.isUndefined(value))
                        return reslt;
                    else {
                        if (obj.hasOwnProperty(i) && this._isObject(value) && !this._isDateTime(value)) {
                            cmplxProp += sep + i;
                            reslt = this._iterateComplxObj(value, i, cmplxProp);
                        }
                        else {
                            reslt.prop += sep + i;
                            reslt.value = value;
                            return reslt;
                        }
                    }
                }
            }
            return reslt;
        },

        _refreshCellData: function (range, sheetIdx) {
            var i, j, row, cell, cells, colIdx, dataObj, userName, isFormula, formatObj, len, l, rowIdx = 0, sheet = this.getSheet(sheetIdx), cellData = sheet.rows, hideColsCln = sheet.hideColumns, borderColl = sheet.border;
            if (cellData) {
                for (i = 0, len = cellData.length; i < len; i++) {
                    colIdx = 0;
                    row = cellData[i];
                    cells = cellData[i].cells;
                    if (row.index)
                        rowIdx = row.index;
                    if ((!range || this._inRow(range, rowIdx)) && cells) {
                        for (j = 0, l = cells.length; j < l; j++) {
                            cell = cells[j];
                            if (cell.index)
                                colIdx = cell.index;
                            if ((!range || this._inColumn(range, colIdx))) {
                                dataObj = this.isUndefined(cell.value) ? {} : (cell.format && cell.format.type == "text") ? { type: "text", value: cell.value, value2: cell.value } : this.XLEdit._parseValue(cell.value, { rowIndex: rowIdx, colIndex: colIdx });
                                dataObj.value = this.isUndefined(dataObj.value) ? (this.isUndefined(this.XLEdit.getPropertyValue(rowIdx, colIdx)) ? "" : this.XLEdit.getPropertyValue(rowIdx, colIdx)) : dataObj.value;
                                isFormula = this.isFormula(dataObj.value);
                                if (isFormula)
                                    this.XLEdit._refreshCalcEngine(rowIdx, colIdx, true, dataObj.value, sheetIdx);
                                if (cell.format) {
                                    formatObj = this.XLFormat._getFormatObj(cell.format);
                                    dataObj.type = cell.format.type;
                                    dataObj.formatStr = formatObj.format.formatStr;
                                    dataObj.decimalPlaces = formatObj.format.decimalPlaces;
                                    dataObj.thousandSeparator = formatObj.format.thousandSeparator ? true : false;
                                }
                                dataObj.value2 = this.XLFormat._format(isFormula ? this.XLEdit.getPropertyValue(rowIdx, colIdx, "value2") : dataObj.value, { formatStr: dataObj.formatStr, type: dataObj.type, thousandSeparator: dataObj.thousandSeparator, decimalPlaces: dataObj.decimalPlaces, cellObj: dataObj });
                                if (cell.hyperlink) {
                                    if (cell.hyperlink.webAddr)
                                        dataObj.hyperlink = cell.hyperlink.webAddr.indexOf("http") === -1 ? { webAddr: "http://" + cell.hyperlink.webAddr } : { webAddr: cell.hyperlink.webAddr };
                                    else
                                        dataObj.hyperlink = { cellAddr: cell.hyperlink.cellAddr + "_" + cell.hyperlink.sheetIndex || sheetIdx };
                                    dataObj.formats = { "color": this._hlColor };
                                }
                                if (cell.comment) {
                                    userName = (this.model.userName.length ? this.model.userName : this._getLocStr("UserName")) + ":\n";
                                    dataObj.comment = { value: userName + (cell.comment.value || ""), isVisible: cell.comment.isVisible || false };
                                }
                                if (cell.isLocked) {
                                    dataObj.isLocked = true;
                                    this.protectSheet(true);
                                }
                                if (cell.style) {
                                    if (cell.style.fontWeight) {
                                        cell.style["font-weight"] = cell.style.fontWeight;
                                        delete cell.style["fontWeight"];
                                    }
                                    if (cell.style.backgroundColor) {
                                        cell.style["background-color"] = cell.style.backgroundColor;
                                        delete cell.style["backgroundColor"];
                                    }
                                    dataObj.formats = $.extend(dataObj.formats, cell.style);
                                }
                                if (dataObj.formats)
                                    dataObj.format = this.XLFormat._createFormatClass(dataObj.formats);
                                this.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: dataObj, sheetIdx: sheetIdx, skipCell: true });
                                this.XLEdit._refreshCellAlignment({ cellIdx: { rowIndex: rowIdx, colIndex: colIdx }, value: dataObj.value, type: dataObj.type });
                                if (!isFormula)
                                    this.XLEdit._refreshCalcEngine(rowIdx, colIdx, false, null, sheetIdx);
                            }
                            colIdx++;
                        }
                    }
                    rowIdx++;
                }
                if (this.model.scrollSettings.allowVirtualScrolling)
                    sheet._virtualTBodyHgt = sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1] + sheet.rowsHeightCollection[sheet.rowsHeightCollection.length - 1];
            }
            if (hideColsCln.length && this.model.scrollSettings.allowVirtualScrolling) {
                for (i = 0, len = hideColsCln.length; i < len; i++) {
                    if (!sheet.hideColsCollection[hideColsCln[i]])
                        this._updateHiddenColumns({ rowIndex: 0, colIndex: hideColsCln[i] }, sheetIdx);
                }
                this.XLScroll._getColWidths(sheetIdx, hideColsCln.sort()[0]);
            }
            if (borderColl.length && this.model.scrollSettings.allowVirtualScrolling) {
                for (i = 0, len = borderColl.length; i < len; i++)
                    this._updateCellBorder(borderColl[i], sheetIdx);
            }
        },

        _updateCellBorder: function (border, sheetIdx) {
            var i, len, border1, option, borderColl, range = this.getRangeIndices(border.range);
            border1 = {
                top: { top: "1px solid" },
                right: { right: "1px solid" },
                bottom: { bottom: "1px solid" },
                left: { left: "1px solid" },
                outside: { top: "1px solid", right: "1px solid", bottom: "1px solid", left: "1px solid" },
                allborder: { top: "1px solid", right: "1px solid", bottom: "1px solid", left: "1px solid" },
                thickbox: { top: "2px solid", right: "2px solid", bottom: "2px solid", left: "2px solid" },
                thickbottom: { bottom: "2px solid" },
                topandbottom: { top: "1px solid", bottom: "1px solid" },
                topandthickbottom: { top: "1px solid", bottom: "2px solid" }
            };
            option = border1[border.type];
            borderColl = this.getObjectKeys((option));
            if (borderColl.length) {
                for (i = 0, len = borderColl.length; i < len; i++) {
                    option[borderColl[i]] = option[borderColl[i]].concat(" " + border.color);
                }
            }
            option.skipCell = true;
            option["sheetIdx"] = sheetIdx;
            border.type === "allborder" ? this.XLFormat._applyAllBorderCss(option, range) : this.XLFormat._applyBorderCss(option, range);
        },

        _renderContTable: function (sheetIdx) {
            var table;
            if (this._sheetCopy.isSheetCopy)
                table = $(this._sheetCopy.sheetContent);
            else {
                table = ej.buildTag("table.e-table", this._sheets[sheetIdx]._contentColGroup.outerHTML);
                if (this.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal)
                    $(table).width(this._getEntireColWidth(sheetIdx));
                else
                    this.addClass(table, "e-ss-rowhdrspacing");
                if (this.model.scrollSettings.allowVirtualScrolling)
                    table.append("<tbody class='e-ss-virtualtop'></tbody><tbody></tbody><tbody class='e-ss-virtualbottom'></tbody>");
                else
                    table.append("<tbody></tbody>");
            }
            this._setContTBody(table.find("tbody").eq(this.model.scrollSettings.allowVirtualScrolling ? 1 : 0), sheetIdx);
            return table;
        },

        _initViewPortCont: function (sheetIdx) {
            var rangeData, sheet = this.getSheet(sheetIdx), props = ["value", "value2", "comment", "hyperlink", "format", "border", "type", "isFilterHide", "isRHide", "isFHide",
                "isFilterHeader", "isFilterVisible", "filterState", "isMHide", "merge", "hRow", "isLocked", "wrap", "isOverflow", "align", "picture", "cFormatRule", "isOfBrdr", "formatStr"];
            if (this.model.scrollSettings.allowVirtualScrolling) {
                this._refreshViewport(this._initLoad ? 0 : this._isFrozen(this.getFrozenRows()) ? sheet._contScrollTop : sheet._scrollTop, sheetIdx);
            }
            else {
                rangeData = this.getRangeData({ property: props, sheetIdx: sheetIdx, rowIdxs: sheet._rowIdxColl, withRowIdx: true });
                this._getContTBody(sheetIdx).html(this._renderData(rangeData, sheetIdx));
                if (this.model.allowComments)
                    this.XLComment._updateCmntArrowPos(null, sheetIdx);
                if (this.model.allowCellType)
                    this.XLCellType._rangeCellTypes(sheet.cellTypes, sheetIdx);
                if (this.model.allowSparkline)
                    this.XLSparkline._refreshContentWithSparkline(sheetIdx);
            }
            sheet._isVPRendered = true;
        },

        _processCellTypes: function (cellTypes, sheetIdx) {
            var i, len, arr = [];
            for (i = 0, len = cellTypes.length; i < len; i++) {
                if (cellTypes[i]['cellType']['type'] === "DatePicker")
                    arr.push({ 'range': this._getAlphaRange(sheetIdx, cellTypes[i].rowIndex, cellTypes[i].colIndex, cellTypes[i].rowIndex, cellTypes[i].colIndex), 'settings': { 'type': cellTypes[i]['cellType']['type'], 'value': cellTypes[i]['value'] } });
                else
                    arr.push({ 'range': this._getAlphaRange(sheetIdx, cellTypes[i].rowIndex, cellTypes[i].colIndex, cellTypes[i].rowIndex, cellTypes[i].colIndex), 'settings': { 'type': cellTypes[i]['cellType']['type'], 'isChecked': cellTypes[i]['cellType']['isChecked'] } });
            }
            this.XLCellType._rangeCellTypes(arr, sheetIdx);
            this._celltypes = [];
        },

        _initDependencies: function () {
            var model = this.model;
            this._renderAlertdlg();
            this._renderAlertDlgContent($("#" + this._id + "_alertdlg"), "Alert", "");
            this._initEditForm();
            if (model.allowClipboard)
                this.XLClipboard._initCopyPaste();
            if (model.allowEditing) {
                this.XLEdit._processEditing();
                this.getMainPanel().append(this.XLEdit._editElem);
                this.XLEdit._editElem.hide();
            }
            this._renderDDownList();
            this.clearUndoRedo();
            if (model.showRibbon)
                this.XLRibbon._disableButtons(['clearfilter'], 'ejButton');
            if (model.allowDataValidation)
                this.XLValidate._addDVMethod();
            if (model.enableContextMenu)
                this.XLCMenu._initCMenuFooter();
            if (model.allowFiltering)
                this.XLFilter._renderExcelFilter();
            if (model.allowFreezing)
                this.XLFreeze._initFreeze();
        },

        _initComplete: function () {
            if (this._reqCnt === this._resCnt) {
                !this._isRefresh && this._trigger("loadComplete", {});
                this.isDirty = false;
                this.clearUndoRedo();
                this.hideWaitingPopUp();
                this.XLRibbon.updateRibbonIcons();
            }
        },

        _showDialog: function (id, type) {
            var dlgHt, dlg, dlgclass = "e-dialog", model = this.model;
            switch (id) {
                case this._id + "_Ribbon_Home_Styles_ConditionalFormatting":
                    dlg = $("#" + this._id + "_CFDialog");
                    if (!dlg.length && model.allowConditionalFormats)
                        dlg = this.XLRibbon._initCFDialog();
                    dlg.ejDialog("open");
                    break;
                case this._id + "_chartname":
                    dlg = $("#" + this._id + "_chartnamedlg");
                    if (!dlg.length)
                        this.XLRibbon._renderChartNameDlg();
                    break;
                case this._id + "_Ribbon_ChartDesign_Type_ChangeChartType":
                    dlg = $("#" + this._id + "_charttypedlg");
                    if (!dlg.length)
                        dlg = this.XLRibbon._renderChartTypeDialog();
                    break;
                case this._id + "_ImportPasswordDialog":
                    dlg = $("#" + this._id + "_ImportPasswordDialog");
                    if (!dlg.length)
                        dlg = this._importPasswordDlg();
                    dlg.ejDialog("open");
                    break;
                case this._id + "_Ribbon_Insert_Links_Hyperlink":
                    if (!this.model.isReadOnly) {
                        if (model.allowHyperlink && !this._hasClass(document.getElementById(this._id + "_HLDialog"), dlgclass))
                            this.XLRibbon._initHLDialog();
                        this._hlDlgOpen();
                    }
                    break;
                case this._id + "_Ribbon_SparklineDesign_Sparkline_EditData":
                    this.XLSparkline._initSparklineDialog();
                    this.XLSparkline._renderSparklineDialog();
                    this.XLSparkline._renderSparklineDesignDlg();
                    break;
                case this._id + "_Ribbon_Others_Cells_InsertCellOptions":
                    if (model.allowInsert) {
                        if (!this._hasClass(document.getElementById(this._id + "_insertdeletedlg"), dlgclass))
                            this._renderInsertDeleteDialog();
                        this._refreshInsDelDialog("Insert");
                    }
                    break;
                case this._id + "_Ribbon_Insert_Sparkline_Column":
                case this._id + "_Ribbon_Insert_Sparkline_Line":
                case this._id + "_Ribbon_Insert_Sparkline_Pie":
                case this._id + "_Ribbon_Insert_Sparkline_Area":
                case this._id + "_Ribbon_Insert_Sparkline_Winloss":
                    if (model.allowSparkline && !this._hasClass(document.getElementById(this._id + "_SparklineDialog"), dlgclass)) {
                        this.XLSparkline._initSparklineDialog();
                        this.XLSparkline._renderSparklineDialog();
                    }
                    break;
                case this._id + "_Ribbon_Others_Cells_DeleteCellOptions":
                    if (model.allowDelete) {
                        if (!this._hasClass(document.getElementById(this._id + "_insertdeletedlg"), dlgclass))
                            this._renderInsertDeleteDialog("delete");
                        this._refreshInsDelDialog("Delete");
                    }
                    break;
                case this._id + "_FormatCells":
                    if (model.allowCellFormatting && !this._hasClass(document.getElementById(this._id + "_formatdlg"), dlgclass))
                        this.XLCellFrmtDlg._renderCellFrmtDlg();
                    this.XLCellFrmtDlg._initFormatCellDlg();
                    break;
                case this._id + "_MoveorCopy":
                    if (!this._hasClass(document.getElementById(this._id + "_moveCopyDlg", dlgclass)))
                        this._initMoveCopyDlg();
                    this._renderMoveCopyDlg();
                    break;
                case this._id + "_UnhideSheet":
                    if (!this._hasClass(document.getElementById(this._id + "_UnhideDlg", dlgclass)))
                        this._initUnhideDlg();
                    this._renderUnhideDlg();
                    break;
                case this._id + "_Ribbon_Data_DataTools_DataValidation":
                case this._id + "_Ribbon_Data_DataTools_DataValidationOptions":
                    if (this.model.allowDataValidation && !this._hasClass(document.getElementById(this._id + "_ValDialog"), dlgclass)) {
                        dlgHt = this.XLRibbon._initValDialog();
                        this.XLRibbon._renderValDialog(dlgHt);
                    }
                    break;
                case this._id + "_Filter":
                    if (!document.getElementById(this._id + type + "_excelDlg") && !document.getElementById(this._id + "_filter_custom_" + type))
                        this.XLFilter._renderFilterDialogs(type);
                    break;
                case this._id + "_Ribbon_Review_Changes_ProtectWorkbook":
                    if (!this._hasClass(document.getElementById(this._id + "_PasswordDialog"), dlgclass))
                        this._passwordDlg();
                    break;
                case this._id + "_Ribbon_Insert_Tables_Table":
                    if (model.allowFormatAsTable && !this._hasClass(document.getElementById(this._id + "_fatnamedlg"), dlgclass))
                        this.XLRibbon._renderFATNameDlg();
                    break;
                case this._id + "_Ribbon_Insert_Tables_PivotTable":
                    if (model.enablePivotTable && !this._hasClass(document.getElementById(this._id + "_PvtDialog"), dlgclass)) {
                        this.XLRibbon._initPvtDialog();
                        this.XLRibbon._renderPvtDialog();
                    }
                    break;
                case this._id + "_Ribbon_Others_Editing_FindSelect":
                    if (model.allowSearching && !this._hasClass(document.getElementById(this._id + "_FRDialog"), dlgclass)) {
                        this.XLRibbon._initFRDialog();
                        this.XLRibbon._renderFRDialog();
                        if (!this.model.isReadOnly) {
                            dlgHt = this.XLRibbon._initGoToDialog();
                            this.XLRibbon._renderGoToDialog(dlgHt);
                        }
                    }
                    if (this.model.isReadOnly)
                        $("#" + this._id + "_FRDialog_FPDlgTab").ejTab("option", { disabledItemIndex: [1, 2] });
                    else
                        $("#" + this._id + "_FRDialog_FPDlgTab").ejTab("option", { enabledItemIndex: [1, 2] });
                    break;
                case this._id + "_Ribbon_ChartDesign_Data_SelectData":
                    if (model.allowCharts && !this._hasClass(document.getElementById(this._id + "_chartrangedlg", dlgclass)))
                        this.XLChart._renderChartRangeDialog();
                    break;
                case this._id + "_Ribbon_Others_NameManager":
                    if (!document.getElementById(this._id + "_nmdlg"))
                        this.XLRibbon._renderNameManagerDlg();
                    else
                        $("#" + this._id + "_nmgrid").ejGrid("option", { dataSource: this.model.nameManager });
                    break;
                case this._id + "_Ribbon_Design_Tools_ResizeTable":
                    if (!document.getElementById(this._id + '_fatresizetabledlg'))
                        this.XLRibbon._renderFATResizeTableDlg();
                    break;
                case "exportxl":
                case "exportcsv":
                case "exportpdf":
                    if (!document.getElementById(this._id + '_ExportFileNameDialog'))
                        this.XLExport._exportFileNameDlg();
                    break;
                case this._id + "_CustomCellDialog":
                    if (!document.getElementById(this._id + '_CustomCellDialog')) {
                        this.XLFormat._customStyleDlg();
                        this.XLFormat._styleDlgOpen();
                    }
                    else this.XLFormat._styleDlgOpen();
                    break;
            }
        },

        _generateHeaderText: function (colIndex) {
            var alphabet = "Z";
            if (colIndex / 26 > 1)
                return this._generateHeaderText((colIndex % 26 === 0) ? (colIndex / 26 - 1) : Math.floor(colIndex / 26)) + String.fromCharCode((colIndex % 26) === 0 ? alphabet.charCodeAt(alphabet) : 64 + (colIndex % 26));
            else
                return String.fromCharCode(64 + (colIndex));
        },

        _generateColCount: function (text) {
            var colCount = 0;
            text = text.split('').reverse().join('');
            for (var i = text.length - 1; i >= 0; i--) {
                colCount += (text[i].charCodeAt(text[i]) - 64) * (Math.pow(26, i));
            }
            return colCount;
        },

        _getSheetIndex: function (sheetIdx) {
            return sheetIdx || this.getActiveSheetIndex();
        },

        _getSheetIdxFromSheetValue: function (name) {
            var i = 1, sheets = this.model.sheets, len = sheets.length - 1;
            while (i <= len) {
                if (sheets[i].sheetInfo.value.toLowerCase() === name.toLowerCase())
                    return i;
                i++;
            }
            return -1;
        },

        getAlphaRange: function (sRIndex, sCIndex, eRIndex, eCIndex) {
            if (this.isUndefined(eRIndex) && this.isUndefined(eCIndex)) {
                eRIndex = sRIndex;
                eCIndex = sCIndex;
            }
            return this._getAlphaRange(null, sRIndex, sCIndex, eRIndex, eCIndex);
        },

        _getAlphaRange: function (sindex, srindex, scindex, erindex, ecindex) {
            srindex = srindex + 1, scindex = scindex + 1, erindex = erindex + 1, ecindex = ecindex + 1;
            return srindex === erindex && scindex === ecindex ? this._generateHeaderText(scindex) + srindex : this._generateHeaderText(scindex) + srindex + ":" + this._generateHeaderText(ecindex) + erindex;
        },

        _getProperAlphaRange: function (sindex, minrindex, mincindex, maxrindex, maxcindex) {
            var range = this._getAlphaRange(sindex, minrindex, mincindex, maxrindex, maxcindex);
            return range.indexOf(':') === -1 ? range + ':' + range : range;
        },

        _getDollarAlphaRange: function (range, checkRange, sheetIdx) {
            var sheetIdx = sheetIdx ? sheetIdx : this.getActiveSheetIndex(), sName = this.getSheet(sheetIdx).sheetInfo.text, sNameStr = sName.match(/\s/g) ? "'" + sName + "'" : sName;
            if (checkRange && !this.isRange(range))
                return sNameStr + "!$" + this._generateHeaderText(range[1] + 1) + "$" + (range[0] + 1);
            else
                return sNameStr + "!$" + this._generateHeaderText(range[1] + 1) + "$" + (range[0] + 1) + ":$" + this._generateHeaderText(range[3] + 1) + "$" + (range[2] + 1);
        },

        _toIntrnlRange: function (range, sheetIdx) {
            if (!range)
                range = this.getSheet(sheetIdx).selectedRange;
            else if (this._isString(range))
                range = this.getRangeIndices(range);
            return range;
        },

        _getMaxRowColCnt: function (sheets, fromUsedRange, sheetIdx) {
            var rowCount, colCount, sheet, rcnt = 0, ccnt = 0,
                i = sheetIdx ? sheetIdx : 1, len = sheetIdx ? sheetIdx + 1 : sheets.length;
            sheets = sheets ? sheets : this.model.sheets
            while (i < len) {
                sheet = sheets[i];
                if (fromUsedRange && sheet.usedRange) {
                    rowCount = sheet.usedRange.rowIndex;
                    colCount = sheet.usedRange.colIndex;
                }
                else {
                    rowCount = sheet.rowCount;
                    colCount = sheet.colCount;
                }
                if (rcnt < rowCount)
                    rcnt = rowCount;
                if (ccnt < colCount)
                    ccnt = colCount;
                i++;
            }
            return { rowCount: rcnt, colCount: ccnt };
        },

        _generateEJMenu: function (type, orientation, cssClass) {
            return {
                menuType: (type === "normal") ? ej.MenuType.NormalMenu : ej.MenuType.ContextMenu,
                orientation: (orientation === "vertical") ? ej.Orientation.Vertical : ej.orientation.Horizontal,
                cssClass: cssClass
            };
        },

        _generateEJDD: function (datasource, fields, selectedIndex, width, height, evt) {
            return {
                dataSource: datasource,
                fields: fields,
                selectedItemIndex: selectedIndex,
                width: width,
                cssClass: "e-" + this._id + "-ddl",
                change: $.proxy(this.XLRibbon._frTypeChange, this, evt)
            };
        },

        _heightWidthCalculation: function (sheetIdx, args) {
            var height, actpanel = this.getActivationPanel(), isVisible = actpanel.is(':visible');
            if (!this._isDisplayHeader)
                height = (this.XLRibbon._ribbonState) ? this.element.find('.e-ribbon').height() - 1 : this.element.find('.e-ribbon .e-header').height();
            else {
                height = $("#" + this._id + "_Ribbon").height();
                this._isDisplayHeader = false;
            }
            this._refreshSheetWithScreen(sheetIdx);
            this._updateResponsiveSettings();
            if (this.model.isGridMode && !this.model.scrollSettings.allowScrolling)
                this._responsiveHeight = this._minHeight;
            this._initViewPort(sheetIdx);
            this._setSheetWidthHeight(sheetIdx, { width: this._responsiveWidth, height: this._responsiveHeight }, height, "refresh", args.action);
            isVisible && actpanel.height(this.getMainPanel().height() - 1);
            this.refreshContent(sheetIdx);
        },

        _refreshSheetWithScreen: function (sheetIdx) {
            $("#" + this._id + "GroupPanel")[0].style.height = "0px";
            $("#" + this._id + "MainPanel")[0].style.height = "0px";
            this.model.allowFormulaBar && (this.element.find('.e-formulabar')[0].style.width = "0px");
            this.getSheetElement(sheetIdx).find(".e-spreadsheetcontentcontainer")[0].style.height = "0px";
            this.getSheetElement(sheetIdx).find(".e-spreadsheetrowheader")[0].style.height = "0px";
        },

        _refreshWidthHeight: function (sheetIdx, settings, ribbonHeight, action) {
            var footer, colHdrHeight = 1, rowHdrHeight = 0, cont = this._getContent(sheetIdx), contentHt, formulaHeight, pagerHt = this.model.pageSettings.pagerHeight + 1, actTab,
                sheet = this.getSheet(sheetIdx), sheetRowHdr = this._getJSSheetRowHeader(sheetIdx), ribHgt, diffHt, ribContHeight = -1, ribObj = $("#" + this._id + "_Ribbon").ejRibbon("instance");
            actTab = this.model.showRibbon ? (ribObj.model.selectedItemIndex < 1 ? 1 : ribObj.model.selectedItemIndex) : 0;
            this.XLRibbon._ribbonState && (ribContHeight = $("#" + this._id + "_Ribbon").find(".e-content:eq(" + actTab + ")").height());
            ribHgt = this._phoneMode ? $("#" + this._id + "_Ribbon").height() : $("#" + this._id + "_Ribbon").find(".e-header").height() + ribContHeight + 2;
            formulaHeight = (this.model.allowFormulaBar && this.element.find("#" + this._id + "_formulabar").is(":visible")) ? this._formulaHeight : 0;
            ribbonHeight = (ribHgt && this.model.showRibbon && $("#" + this._id + "_Ribbon").is(":visible")) ? ribHgt : 0;
            if (sheet.showHeadings) {
                colHdrHeight = 20 + 2; // column header 20 + 2 //Border
                rowHdrHeight = sheetRowHdr.width();
            }
            if (!this._isAutoWHMode || !sheet.showHeadings) {
                contentHt = settings.height - (ribbonHeight + formulaHeight + 1);
                this.getGroupPanel().height(contentHt - 1); // for Border
                this.getMainPanel().height(contentHt - 1); // for Border
                (!this.model.showPager || (action !== "initial" && !this.element.find(".e-spreadsheetfooter").is(":visible"))) && (pagerHt = 1);
                diffHt = (this._browserDetails.name === "chrome") ? 1 : 2;
                settings.height = settings.height - (colHdrHeight + pagerHt + formulaHeight + ribbonHeight + diffHt);
                this.element.find(".e-spreadsheet-list")[0].style.height = "";
            }
            if (this.model._isActPanelVisible)
                settings.width = (settings.width - (this.model.activationPanelWidth + 2)); //0.5 for border alignment
            else
                (!ej.isNullOrUndefined(settings.isActPanel) && !settings.isActPanel) && (settings.width = settings.width + this.model.activationPanelWidth + 2);
            var orgSettings = this.model.scrollSettings;
            this.getMainPanel().width(!this.model._isActPanelVisible && orgSettings.isResponsive ? "100%" : settings.width);
            if (cont.find("#hscrollBar").length > 0) {
                cont.find("#hscrollBar").remove();
                sheetRowHdr.removeClass("e-scrollrowcss");
                this._getJSSheetRowHeaderContent(sheetIdx).height(settings.height);
                this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").height(settings.height - 1);
            }
            if (cont.find("#vscrollBar").length > 0) {
                var top = sheet._scrollTop;
                cont.find("#vscrollBar").data("ejScrollBar").scroll(0);
                sheet._scrollTop = top;
                cont.find("#vscrollBar").remove();
                this._getJSSheetHeader(sheetIdx).removeClass("e-scrollcss");
                this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").width(orgSettings.isResponsive ? settings.width - 2 : settings.width);
            }
            if (!this._isAutoWHMode || !sheet.showHeadings) {
                cont.height(settings.height);
                sheetRowHdr.height(settings.height);
            }
            this._getJSSheetContent(sheetIdx).width(orgSettings.isResponsive ? "100%" : settings.width);
            footer = this.getFooter();
            if (footer)
                footer.width(orgSettings.isResponsive ? "100%" : settings.width);
            this._alignFormulaBar(this._responsiveWidth);
            this._initViewPort(sheetIdx);
            this.model.allowFreezing && this.XLFreeze._refreshFreeze();
            settings.width = settings.width - rowHdrHeight; // is for row Header  
            settings.height = settings.height - 0;
            return settings;
        },

        _setSheetWidthHeight: function (sheetIdx, settings, ribbonHeight, status, action) {
            var sheet = this.getSheet(sheetIdx), cont = this._getContent(sheetIdx), hScroll, vScroll, hScrollObj, vScrollObj, contentHt, sheetRowHdr = this._getJSSheetRowHeader(sheetIdx);
            var currSettings, isResponsive = this.model.scrollSettings.isResponsive, rowHdrWidth = sheet.showHeadings ? sheetRowHdr.width() : 0;
            if (isResponsive) {
                if (action != "initial" && status != "resize") {
                    this._refreshSheetWithScreen(sheetIdx);
                    this._updateResponsiveSettings();
                    settings = { width: this._responsiveWidth, height: this._responsiveHeight };
                }
                this._resizeColl[sheetIdx - 1] = this._isResized;
                if (status === "resize" && (!this.model.allowResizing || (this.model.allowResizing && !this.XLResize._resizeStart)) && (action != "toggleBtn"))
                    this.model.activationPanelWidth = Math.floor(settings.width / 3);
                currSettings = this._refreshWidthHeight(sheetIdx, $.extend(true, {}, settings), ribbonHeight, action, status);
                this._updateResponsiveSettings();
                if (status === "resize" && (!this.model.allowResizing || (this.model.allowResizing && !this.XLResize._resizeStart)) && (action != "toggleBtn"))
                    this.model.activationPanelWidth = Math.floor(settings.width / 3);
                settings = currSettings;
            }
            else {
                if (!this._isAutoWHMode)
                    settings.width = settings.width - 2; // border 2px
                settings = this._refreshWidthHeight(sheetIdx, $.extend(true, {}, settings), ribbonHeight, action, status);
            }
            this.getMainPanel().width(!this.model._isActPanelVisible && isResponsive ? "100%" : settings.width + rowHdrWidth);
            if (this.model.scrollSettings.allowScrolling) {
                if (this.model._isActPanelVisible)
                    settings.width += 2;
                this._renderScroller(sheetIdx, $.extend(true, {}, settings), action);
                vScroll = cont.find("#vscrollBar");
                hScroll = cont.find("#hscrollBar");
                if (vScroll.length > 0)
                    this._getJSSheetHeader(sheetIdx).addClass("e-scrollcss");
                if (hScroll.length > 0) {
                    contentHt = cont.height();
                    sheetRowHdr.height(contentHt - 18);
                    this._getJSSheetRowHeaderContent(sheetIdx).height(contentHt - (hScroll[0].style.display === "none" ? 0 : 18));
                    sheetRowHdr.addClass("e-scrollrowcss");
                }
                if (action != "initial") {
                    vScrollObj = vScroll.data("ejScrollBar");
                    hScrollObj = hScroll.data("ejScrollBar");
                    vScrollObj.scroll(sheet._scrollTop);
                    hScrollObj.scroll(sheet._scrollLeft);
                }
            }
            if (!sheet.showHeadings)
                cont.find(".e-content")[!this.model.allowFormulaBar ? "removeClass" : "addClass"]("e-viewbrdr");
            if (!this._isAutoWHMode) {
                this._dlgWidth = (this._phoneMode || this._tabMode || this._responsiveWidth < 350) ? this._responsiveWidth - 2 : this._responsiveWidth / 2;
                this._dlgHeight = (this._phoneMode || this._tabMode || this._responsiveHeight < 350) ? this._responsiveHeight - 2 : this._responsiveHeight / 1.5;
            }
        },

        setWidthToColumns: function (widthColl, sheetIndex) {
            var cellIdx, sheetIdx = sheetIndex || this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), col, hdrcol, staticWidth = 0, width, colIdx, isObj = false, overflowCells;
            if (this.isUndefined(sheet) || this.model.isGridMode) return;
            if (typeof (widthColl[0]) == "object")
                isObj = true;
            if (sheet._isLoaded) {
                col = this._getContent(sheetIdx).find("col");
                hdrcol = this._getJSSheetHeader(sheetIdx).find("col");
            }
            for (var i = 0, len = widthColl.length; i < len; i++) {
                width = isObj ? widthColl[i].width : widthColl[i];
                colIdx = isObj ? widthColl[i].colIndex : i;
                overflowCells = this.XLEdit._getPropWithCellIdx([0, colIdx, sheet.rowCount - 1, colIdx], "isOfBrdr", sheetIdx);
                (width === 0) && (width = 64);
                if (width < sheet.columnsWidthCollection[colIdx] && this.XLEdit.getPropertyValue(0, colIdx, "wrapCol")) {
                    staticWidth += width;
                    continue;
                }
                if (sheet._isLoaded) {
                    if (!ej.isNullOrUndefined(hdrcol[colIdx])) {
                        hdrcol[colIdx].style["width"] = width + "px";
                        col[colIdx].style["width"] = width + "px";
                    }
                }
                staticWidth += width;
                this.XLShape && this.XLShape._refreshShapePosOnResize(colIdx, width, true, sheetIdx);
                if (this.XLEdit.getPropertyValue(0, colIdx, "isCHide", sheetIdx)) {
                    sheet.hideColsCollection[colIdx] = width;
                    sheet.columnsWidthCollection[colIdx] = 0;
                }
                else
                    sheet.columnsWidthCollection[colIdx] = width;
                this.XLScroll._getColWidths(sheetIdx, colIdx);
                for (var j = 0; j < overflowCells.length; j++) {
                    cellIdx = overflowCells[j];
                    this._textClip(cellIdx.rowIdx, cellIdx.colIdx, 'delete', '', true);
                    this._textClip(cellIdx.rowIdx, cellIdx.colIdx, 'add', '', true);
                }
            }
            sheet.staticWidth = staticWidth;
            if (sheet._isLoaded && this.model.scrollSettings.allowScrolling)
                this.XLScroll._refreshScroller(sheetIdx, "refresh", "horizontal");
            if (sheet._isFreezed) {
                this.XLFreeze._refreshFreezeRowDiv();
                this.XLFreeze._refreshFreezeColDiv();
            }
            if (!sheet._isImported || sheet._isLoaded) {
                if (this.model.allowSelection)
                    this.XLSelection._refreshBorder();
                if (this.model.allowAutoFill)
                    this.XLDragFill.positionAutoFillElement();
                if (this.model.allowComments)
                    this.XLComment._updateCmntArrowPos();
                if (this._isAutoWHMode)
                    this._autoSSWidthHeight();
            }
        },

        setHeightToRows: function (heightColl) {
            this._setHeightToRows(heightColl);
        },

        _setHeightToRows: function (heightColl, isPrivate) {
            var vPrtRIdx, height, rowIdx, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), isObj = false, rowColl = this.getRows(sheetIdx), rows = rowColl[1], rowHdrs = rowColl[0];
            if (typeof (heightColl[0]) == "object")
                isObj = true;
            for (var i = 0, len = heightColl.length; i < len; i++) {
                height = isObj ? heightColl[i].height : heightColl[i];
                rowIdx = isObj ? heightColl[i].rowIndex : i;
                (height === 0) && (height = 22);
                if (height < sheet.rowsHeightCollection[rowIdx] && this.XLEdit.getPropertyValue(rowIdx, 0, "wrapRow")) {
                    continue;
                }
                if (this._isRowViewable(sheetIdx, rowIdx) && rowIdx != -1) {
                    vPrtRIdx = this._getRowIdx(rowIdx, sheetIdx);
                    rows[vPrtRIdx].style["height"] = height + "px";
                    rowHdrs[vPrtRIdx].style["height"] = height + "px";
                }
                this.XLShape && this.XLShape._refreshShapePosOnResize(rowIdx, height, false, sheetIdx);
                sheet.rowsHeightCollection[rowIdx] = height;
            }
            if (!isPrivate) {
                if (this.model.scrollSettings.allowScrolling) {
                    this.XLScroll._getRowHeights(sheetIdx, 1);
                    this.XLScroll._getFirstRow(sheetIdx);
                }
                if (this.model.allowSelection)
                    if (!sheet._isImported || sheet._isLoaded) {
                        this.XLSelection._refreshBorder();
                        if (this.model.allowAutoFill)
                            this.XLDragFill.positionAutoFillElement();
                    }
            }
        },

        _refreshRowColCnt: function (sheetIdx) {
            var totHgt, totWth, diff, srowCnt, rowCnt, buffHgt, buffWth, settings = this.model.scrollSettings,
                isInfinite = settings.scrollMode === ej.Spreadsheet.scrollMode.Infinite,
                sheet = this.getSheet(sheetIdx);
            rowCnt = buffHgt = buffWth = 0;
            if (sheet.rowCount > this._maxRowCnt)
                sheet.rowCount = this._maxRowCnt;
            totHgt = this._getMaxHgt(sheetIdx, this.isImport || this.model.isImport);
            if (isInfinite) {
                buffHgt = sheet._vPortHgt + (this._bufferCnt * sheet.rowHeight);
                if (totHgt < buffHgt) {
                    diff = buffHgt - totHgt;
                    rowCnt = Math.ceil(diff / sheet.rowHeight);
                    sheet.rowCount += rowCnt;
                    totHgt += rowCnt * sheet.rowHeight;
                }
            }
            if (settings.allowVirtualScrolling) {
                srowCnt = sheet.rowCount - (sheet.hideRowsCollection.length + ((this.isImport || this.model.isImport) ? sheet._hiddenFreezeRows.length : 0));
                if (settings.allowScrolling && isInfinite) {
                    diff = srowCnt % sheet._virtualBlockRowCnt;
                    if (diff) {
                        rowCnt = sheet._virtualBlockRowCnt - diff;
                        sheet.rowCount += rowCnt;
                        srowCnt += rowCnt;
                        totHgt += rowCnt * sheet.rowHeight;
                    }
                }
                sheet._virtualBlockCnt = Math.ceil(srowCnt / sheet._virtualBlockRowCnt);
                sheet._virtualTBodyHgt = totHgt;
            }
            if (sheet.colCount > this._maxColCnt) //col
                sheet.colCount = this._maxColCnt;
            else if (settings.allowScrolling && isInfinite) {
                buffWth = sheet._vPortWth + (this._bufferCnt * sheet.columnWidth);
                totWth = (this.isImport || this.model.isImport) ? this._getMaxWth(sheetIdx) : sheet.colCount * sheet.columnWidth;
                if (totWth < buffWth) {
                    diff = buffWth - totWth;
                    sheet.colCount += Math.ceil(diff / sheet.columnWidth);
                }
            }
        },

        _getMaxHgt: function (sheetIdx, fromHgtColl, processHide) {
            var len, i, val, sheet = this.getSheet(sheetIdx);
            i = val = 0;
            if (fromHgtColl) {
                len = sheet.rowsHeightCollection.length;
                while (i < len) {
                    if (!processHide || (sheet.hideRowsCollection.indexOf(i) === -1))
                        val += sheet.rowsHeightCollection[i];
                    i++;
                }
            }
            else
                val = (sheet.rowCount - (sheet.hideRowsCollection.length + sheet._hiddenFreezeRows.length)) * sheet.rowHeight;
            return val;
        },

        _getMaxWth: function (sheetIdx) {
            var val = 0, i = 0, sheet = this.getSheet(sheetIdx), len = sheet.columnsWidthCollection.length;
            while (i < len) {
                val += sheet.columnsWidthCollection[i];
                i++;
            }
            return val;
        },

        _refreshTemplates: function (sheetIdx, skipRowHdr, stColIdx, colCount) {
            var colWth, col, colHdr, htmlStr, i = ej.isNullOrUndefined(stColIdx) ? 0 : stColIdx, templates = {}, sheet = this.getSheet(sheetIdx),
                colgrp = ej.buildTag("colgroup"), isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling, len = ej.isNullOrUndefined(colCount) ? sheet.colCount : colCount;
            htmlStr = isVirtualScroll ? "<tr style = 'height: {{:height}}px' data-idx = '{{:rowidx}}'>" : "<tr style = 'height: {{:height}}px'>";
            while (i < len) {
                colWth = sheet.columnsWidthCollection[i];
                colHdr = this._generateHeaderText(i + 1);
                col = document.createElement("col");
                if (colWth < 1)
                    col.setAttribute("class", "e-hide");
                else if (sheet._hiddenFreezeCols.indexOf(i) > -1)
                    col.setAttribute("class", "e-fcol-hide");
                col.style["width"] = colWth + "px";
                htmlStr += "<td class='{{:" + colHdr + "_className}}' rowspan= {{:" + colHdr + "_rspan}} colspan= {{:" + colHdr + "_cspan}} style={{:" + colHdr + "_Colors}} >{{:" + colHdr + "_value}}</td>";
                colgrp.append(col);
                i++;
            }
            templates[this._id + "JSONTemplate" + sheetIdx] = htmlStr + "</tr>";
            if (!skipRowHdr)
                templates[this._id + "JSONRowHdrTemplate" + sheetIdx] = isVirtualScroll ? "<tr class='{{:wrap}}' style='height:{{:height}}px' data-idx='{{:rowidx}}'><td class='{{:className}}'>{{:rowidx + 1}}</td></tr>" : "<tr class='{{:wrap}}' style='height:{{:height}}px'><td class='{{:className}}'>{{:rowidx + 1}}</td></tr>";
            $.templates(templates);
            this._sheets[sheetIdx]._contentColGroup = colgrp.get(0);
        },

        _renderData: function (rangeData, sheetIdx, stColIdx, colCount, isPrint, stRowIdx, rowCount) {
            var j, cls, val, obj, prop, text, data, rSpan, cSpan, mSpan, rowCnt, rowIdx, colIdx, colHdr, fltrStr, rowHgt, cFormat,
                isSelect, isVisible, sheetData, isVisCmnt, i, eCol, spc = " ", viewData = [], sheet = this.getSheet(sheetIdx), k, prefCul = ej.preferredCulture(this.model.locale), isTextDecoration, hlLinkFormats,
                colCnt = isPrint ? colCount : sheet.colCount, goTo = sheet._goToCollection, goToLen = goTo.selected.length, rng, rowSpan, CFColors = "e-redft e-yellowft e-greenft e-redf e-redt", container = this._dataContainer.sheets[sheetIdx];
            eCol = 0;
            i = stRowIdx ? stRowIdx : 0;
            if (rangeData) {
                data = rangeData.data;
                rowCnt = data.length / colCnt;
                while (i < rowCnt) {
                    obj = {}, j = eCol;
                    rowIdx = rangeData.rowIdx[i];
                    colIdx = isPrint ? stColIdx : 0;
                    while (j < (eCol + colCnt)) {
                        prop = data[j];
                        if (prop) {
                            colHdr = this._generateHeaderText(colIdx + 1);
                            cls = colHdr + "_className";
                            val = colHdr + "_value";
                            obj[cls] = "e-rowcell e-wrapword ";
                            if (!sheet.showGridlines)
                                obj[cls] += " e-hborder";
                            if (!isPrint && !goTo.multiple && goToLen && goTo.selected.indexOf(rowIdx + ":" + colIdx) > -1)
                                obj[cls] += " e-selected";
                            if (colIdx in sheet.hideColsCollection)
                                obj[cls] += " e-soverflow";
                            if (sheet._hiddenFreezeCols.indexOf(colIdx) > -1)
                                obj[cls] += " e-fcol-hide";
                            if (!isPrint && this.model.allowSelection && this.inRange(sheet.selectedRange, rowIdx, colIdx)) {
                                isSelect = true;
                                if (goTo.multiple) {
                                    isSelect = false;
                                    if (goToLen && goTo.selected.indexOf(rowIdx + ":" + colIdx) > -1)
                                        isSelect = true;
                                }
                                if (isSelect)
                                    obj[cls] += " e-selected";
                                if (sheet._activeCell.rowIndex === rowIdx && sheet._activeCell.colIndex === colIdx)
                                    obj[cls] += " e-activecell";
                            }
                            if (this.model.allowCellType && this.model.allowAutoCellType) {
                                if (prop.type == "shortdate" || prop.type == "longdate")
                                    this._celltypes.push({ rowIndex: rowIdx, colIndex: colIdx, sheetIndex: sheetIdx, cellType: { 'type': 'DatePicker' }, value: prop.value2 });
                                if (prop.value2 && ['true', 'yes', 'false', 'no'].indexOf(prop.value2.toLowerCase()) > -1)
                                    this._celltypes.push({ rowIndex: rowIdx, colIndex: colIdx, sheetIndex: sheetIdx, cellType: { 'type': 'CheckBox', 'isChecked': ['yes', 'true'].indexOf(prop.value2.toLowerCase()) > -1 ? true : false } });
                            }
                            if ((this.isImport || this.model.isImport) && prop.type == "date")
                                this.XLFormat.addCustomFormatSpecifier(null, prop.formatStr && prop.formatStr.replace(/^\{0\:|\}$/g, ""), prop.type);
                            if ((prop.type == "shortdate" || prop.type == "longdate" || prop.type == "date" || prop.type == "time") && !this._isDateTime(prop.value) && Date.parse(prop.value))
                                prop.value = new Date(prop.value);
                            // format
                            if (prop.format) {
                                obj[cls] += spc + prop.format;
                                if (this._isClassHasProperty(prop.format, 'text-align', 'right') && !prop.merge)
                                    obj[cls] += " e-rightalign";
                            }
                            if (prop.border)
                                obj[cls] += spc + prop.border;
                            if (prop.align) {
                                if (prop.align === ej.Spreadsheet.Align.Center)
                                    obj[cls] += spc + this._cAlign;
                                else if (prop.align === ej.Spreadsheet.Align.Right && ((typeof prop.value === "object" && this._isDateTime(prop.value)) || this.isNumber(this.isFormula(prop.value) ? (container[rowIdx][colIdx]["calcValue"] ? container[rowIdx][colIdx]["calcValue"] : prop.value2) : prop.value)))
                                    obj[cls] += spc + this._rAlign;
                                else if (prop.align == ej.Spreadsheet.Align.Right && prop.type == "time" && prop.formatStr)
                                    for (k in prefCul.calendar.patterns)
                                        if (prefCul.calendar.patterns[k] == prop.formatStr.replace(/^\{0\:|\}$/g, "")) {
                                            obj[cls] += spc + this._rAlign;
                                            break;
                                        }
                            }
                            else if (this._isGeneral(prop.type) && ((typeof prop.value === "object" && this._isDateTime(prop.value)) || this.isNumber(prop.value) || this.isFormula(prop.value))) {
                                if (this.isNumber(prop.value2))
                                    obj[cls] += spc + this._rAlign;
                            }
                            // merge
                            if (prop.isMHide) {
                                obj[cls] += " e-mc-hide";
                                obj[cls] += " e-moverflow";
                            }
                            if (prop.isOfBrdr)
                                obj[cls] += " e-ofbrdr";
                            if (prop.isOverflow === false)
                                obj[cls] += " e-overflow";
                            rSpan = colHdr + "_rspan";
                            cSpan = colHdr + "_cspan";
                            if (prop.merge) {
                                mSpan = prop.merge.mSpan;
                                obj[rSpan] = mSpan.rowSpan;
                                obj[cSpan] = mSpan.colSpan;
                                obj[cls] += " e-moverflow";
                                if (prop.merge.isCenterAlign)
                                    obj[cls] += spc + this._cAlign;
                            }
                            else {
                                obj[rSpan] = 1;
                                obj[cSpan] = 1;
                            }
                            text = ej.isNullOrUndefined(prop.value2) ? "" : prop.value2;
                            //wrap
                            if (prop.wrap) {
                                sheetData = this._dataContainer.sheets[sheetIdx];
                                (this.isUndefined(sheetData[rowIdx])) && (sheetData[rowIdx] = {});
                                (this.isUndefined(sheetData[rowIdx][0])) && (sheetData[rowIdx][0] = {});
                                if (!sheetData[rowIdx][colIdx]["wrap"])
                                    sheetData[rowIdx][colIdx]["wrap"] = true;
                                if (this.model.allowWrap) {
                                    obj[cls] += " e-sswraptext";
                                    sheetData[rowIdx][0].wrapRow = true;
                                    (this.isUndefined(sheetData[0])) && (sheetData[0] = {});
                                    if (this.isUndefined(sheetData[0][colIdx]))
                                        sheetData[0][colIdx] = { wrapCol: true, wrapWidth: sheet.columnsWidthCollection[colIdx] };
                                    else {
                                        sheetData[0][colIdx]["wrapCol"] = true;
                                        sheetData[0][colIdx]["wrapWidth"] = sheet.columnsWidthCollection[colIdx];
                                    }
                                    if (!sheet._wrapColl[rowIdx] || (sheet._wrapColl[rowIdx] && !sheet._wrapColl[rowIdx][colIdx])) {
                                        this._wrapTextLenCln([{ rowIndex: rowIdx, colIndex: colIdx }], sheet, "renderdata", sheetIdx);
                                        this._wrapCollection(rowIdx, colIdx, this._getWrapCellHeight(sheetIdx, rowIdx, colIdx).rowHt, sheetIdx);
                                    }
                                }
                                else
                                    sheetData[rowIdx][colIdx]["wrap"] = false;
                            }
                            // data & hyperlink
                            if (prop.hyperlink) {
                                isTextDecoration = "";
                                hlLinkFormats = this.XLEdit.getPropertyValue(rowIdx, colIdx, "formats");
                                if (!ej.isNullOrUndefined(hlLinkFormats))
                                    isTextDecoration = hlLinkFormats["text-decoration"];
                                if (!isPrint) {
                                    if (prop.hyperlink.webAddr)
                                        obj[val] = isTextDecoration ? String.format("<a href=\{0}\ class='e-hyperlinks' target='_blank'>\{1}\</a>", prop.hyperlink.webAddr, text) : String.format("<a href=\{0}\ class='e-hyperlinks' style = 'text-decoration: none' target='_blank'>\{1}\</a>", prop.hyperlink.webAddr, text);
                                    else
                                        obj[val] = isTextDecoration ? String.format("<a class='e-hyperlinks'>\{0}\</a>", text) : String.format("<a class='e-hyperlinks' style = 'text-decoration: none'>\{0}\</a>", text);
                                }
                                else {
                                    obj[cls] += " e-hyperlinks";
                                    obj[val] = text;
                                }
                            }
                            else if (prop.merge) {
                                rowSpan = 0;
                                rng = this.getRangeIndices(prop.merge.mRange);
                                for (k = rng[0]; k <= rng[2]; k++) {
                                    if (rangeData.rowIdx.indexOf(k) < 0)
                                        rowSpan++;
                                }
                                obj[val] = "<div id =" + this._id + "_Merge style = 'border :0px;overflow: hidden;max-height:" + (Math.floor(sheet._rowHeightCollection[rowIdx + (prop.merge.mSpan.rowSpan - rowSpan)] - sheet._rowHeightCollection[rowIdx]) - 1) + "px'" + (!this._isClassHasProperty(prop.format, 'text-align', 'right') ? " class = 'e-rightalign'>" : ">") + text + "</div>"; //-1 to set the height less than cell height to avoid misalignment*/		
                            }
                            else
                                obj[val] = text;
                            // conditional format
                            if (prop.cFormatRule) {
                                var kLen = prop.cFormatRule.length, tempiconset = "";
                                for (k = 0; k < kLen; k++) {
                                    cFormat = prop.cFormatRule[k].split("_");
                                    if (cFormat[8] === "true") {
                                        if (cFormat[4].length > 0 && CFColors.indexOf(cFormat[4]) > -1)
                                            obj[cls] += " e-" + cFormat[4];
                                        else {
                                            obj[colHdr + "_Colors"] = this.isUndefined(obj[colHdr + "_Colors"]) ? "" : obj[colHdr + "_Colors"];
                                            if (CFColors.indexOf(cFormat[4]) < 0)
                                                obj[colHdr + "_Colors"] += "color:" + cFormat[4] + ";";
                                            if (CFColors.indexOf(cFormat[5]) < 0)
                                                obj[colHdr + "_Colors"] += "background-color:" + cFormat[5] + ";";
                                        }
                                    }
                                    if (!ej.isNullOrUndefined(prop.value) && (this.isNumber(prop.value) || Object.prototype.toString.call(prop.value) == "[object Date]")) {
                                        if (cFormat[0] === "colorscale") {
                                            obj[colHdr + "_Colors"] = this.isUndefined(obj[colHdr + "_Colors"]) ? "" : obj[colHdr + "_Colors"];
                                            if (cFormat[9] && cFormat[9].indexOf('#') > -1)
                                                obj[colHdr + "_Colors"] += "background-color:" + cFormat[9] + ";";
                                        }
                                        if (cFormat[0] === "iconset") {
                                            if(obj[val].indexOf('e-cf-databar') > -1)
                                                continue;
                                            var icons = ["e-ss-greenarrow", "e-ss-yellowarrow", "e-ss-redarrow", "e-ss-downarrow", "e-ss-midarrow", "e-ss-uparrow", "e-ss-uptriangle", "e-ss-midtriangle", "e-ss-downtriangle", "e-ss-greencircle", "e-ss-yellowcircle", "e-ss-redcircle", "e-ss-rimgreencircle", "e-ss-rimyellowcircle", "e-ss-rimredcircle", "e-ss-yellowtri", "e-ss-redsquare", "e-ss-greencircleindi", "e-ss-yellowcircleindi", "e-ss-redcircleindi", "e-ss-tick", "e-ss-exclam", "e-ss-cross", "e-ss-greenflag", "e-ss-yellowflag", "e-ss-redflag", "e-ss-fullstar", "e-ss-drystar", "e-ss-halfstar"];
                                            fltrStr = 'e-icon e-iconsetspan ' + cFormat[9];
                                            if (icons.indexOf(tempiconset) > -1) {
                                                obj[val] = obj[val].split(tempiconset).join(cFormat[9]);
                                            } else
                                                obj[val] = String.format("<span class=\"{0}\"></span>", fltrStr) + obj[val];
                                            obj[cls] += " e-iconset";
                                            tempiconset = cFormat[9];
                                        }
                                        if (cFormat[0] === "databar") {
                                            if(obj[val].indexOf('e-iconsetspan') > -1)
                                                continue;
                                            var right, left;
                                            this.XLCFormat._dataBarStyle.forEach(function (a, b) {
                                                if (a["idx"] == rowIdx + "" + colIdx) {
                                                    right = a['rightStyle'] || "";
                                                    left = a['leftStyle'] || "";
                                                    right && (right = "width:" + right["width"] + ";" + "height:" + right["height"] + ";" + "background-color:" + right["backgroundColor"] + ";" + "left:" + right["left"]);
                                                    left && (left = "width:" + left["width"] + ";" + "height:" + left["height"] + ";" + "background-color:" + left["backgroundColor"] + ";" + "left:" + left["left"] + ";" + "right:" + left["right"] + ";");
                                                    return;
                                                }

                                            })
                                            obj[val] = String.format('<div id="{0}_databar" class="e-cf-databar" style="height: 19px;">'
                                                + '<span id="{0}_leftspan" style="{1}" class="e-databar"></span>'
                                                + '<span id="{0}_rightspan" class="e-databar" style="{2}">'
                                                + '</span><span id="{0}_dataspan" class="e-databar-value" style="font-size:11pt;">{3}</span></div>', this._id, left, right, obj[val]);
                                        }
                                    }
                                }
                            }
                            // comment
                            if (prop.comment) {
                                obj[cls] += " e-commentcell";
                                isVisCmnt = prop.comment.isVisible ? "visible" : "none";
                                obj[val] = String.format("<span class='e-comment'><span class='e-celltoparrow'></span><textarea class='e-comment-txtarea' style='display:\{0}\;z-index:9;text-align:left'>\{1}\</textarea></span>", isVisCmnt, prop.comment.value) + obj[val];
                            }
                            // validation
                            if (prop.rule && prop.rule.isApply && !(this.XLValidate._checkValidation(obj[val], prop.rule.customVal.split("_"), true, sheetIdx)))
                                obj[cls] += " e-hlcell";
                            // filter
                            if (prop.isFilterHeader && !this.isUndefined(sheet._filterColl[rowIdx]) && !this.isUndefined(sheet._filterColl[rowIdx][colIdx])) {
                                fltrStr = 'e-icon e-spanfilter e-filterspan ' + sheet._filterColl[rowIdx][colIdx].status;
                                isVisible = prop.isFilterVisible ? 'display: visible' : 'display: none';
                                obj[val] = String.format("<span class=\"{0}\" style=\"{1}\"></span>", fltrStr, isVisible) + obj[val];
                                obj[cls] = obj[cls].replace("e-ralign", "");
                                spc = spc.replace("e-ralign", "");
                            }
                            //Alt Text - unwrap state
                            if (prop.altTxt && !prop.wrap)
                                obj[cls] += " e-alt-unwrap";
                            // Encode cell text containing < symbol in html
                            if (typeof (text) == "string" && text.indexOf("<") > -1)
                                obj[val] = obj[val].replace(/</g, "&lt;");

                        }
                        colIdx++;
                        j++;
                    }
                    obj["rowidx"] = rowIdx;
                    rowHgt = sheet.rowsHeightCollection[rowIdx];
                    obj["height"] = (this.isUndefined(rowHgt) || rowHgt < this.model.rowHeight) ? this.model.rowHeight : rowHgt;
                    viewData.push(obj);
                    eCol = j;
                    i++;
                }
            }
            else {
                rowCnt = this.model.scrollSettings.allowVirtualScrolling ? sheet._virtualBlockRowCnt : rowCount ? rowCount : sheet.rowCount;
                rowCnt = i + rowCnt;
                while (i < rowCnt) {
                    obj = {}, j = 0;
                    while (j < colCnt) {
                        colHdr = this._generateHeaderText(j + 1);
                        cls = colHdr + "_className";
                        obj[cls] = "e-rowcell e-wrapword ";
                        j++;
                    }
                    rowHgt = sheet.rowsHeightCollection[i];
                    obj["height"] = (this.isUndefined(rowHgt) || rowHgt < this.model.rowHeight) ? this.model.rowHeight : rowHgt;
                    obj["rowidx"] = rowIdx;
                    viewData.push(obj);
                    i++;
                }
            }
            return $.render[this._id + "JSONTemplate" + sheetIdx](viewData);
        },
        _padStart: function () {
            if (!String.prototype.padStart) {
                String.prototype.padStart = function padStart(targetLength, padString) {
                    targetLength = targetLength >> 0; //truncate if number or convert non-number to 0;
                    padString = String((typeof padString !== 'undefined' ? padString : ' '));
                    if (this.length > targetLength) {
                        return String(this);
                    }
                    else {
                        targetLength = targetLength - this.length;
                        if (targetLength > padString.length) {
                            padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
                        }
                        return padString.slice(0, targetLength) + String(this);
                    }
                };
            }
        },
        _isGeneral: function (type) {
            if (this.isUndefined(type))
                type = ej.Spreadsheet.CellType.General;
            return type === ej.Spreadsheet.CellType.General;
        },

        _isFormulaError: function (error) {
            var i, len, formulaErr = ["#NA", "#DIV/0!", "#NAME?", "circular reference", "TypeError", "wrong"];
            for (i = 0, len = formulaErr.length; i < len; i++) {
                if (typeof error == "string" && error.indexOf(formulaErr[i]) > -1)
                    return true;
            }
            return false;
        },

        _refreshViewport: function (top, sheetIdx) {
            var rangeData, rowIdxs, currIdx, nstartIdx, currRIdx, cendRIdx, nstartRIdx, nendRIdx, pstartIdx, pstartRIdx, sheet = this.getSheet(sheetIdx), idx = this.XLShape._getCellIndexFromOffset(top, 0),
                props = ["value", "value2", "comment", "hyperlink", "rule", "cFormatRule", "format", "border", "type", "isFilterHide", "isRHide", "isFHide",
                    "isFilterHeader", "isFilterVisible", "filterState", "isMHide", "merge", "hRow", "isLocked", "wrap", "isOverflow", "align", "isOfBrdr", "altTxt", "formatStr", "cellType"];
            sheet._virtualContBlockIdx = this._getVirtualBlockIdx(sheetIdx, idx.rowIndex).idx;
            currIdx = (sheet._virtualContBlockIdx - 1) * sheet._virtualBlockRowCnt;
            currRIdx = this._getRowIdx(currIdx, sheetIdx, true);
            nstartIdx = sheet._virtualContBlockIdx * sheet._virtualBlockRowCnt;
            nstartRIdx = this._getRowIdx(nstartIdx, sheetIdx, true);
            sheet._virtualContTBodyOffset.top = this._getRowOffsetTop(sheet, currRIdx);
            if (sheet._virtualBlockCnt === 1) {
                sheet._virtualTopTBodyOffset.top = sheet._virtualTopTBodyOffset.bottom = sheet._virtualTopTBodyHgt = 0;
                sheet._virtualBottomTBodyOffset.top = sheet._virtualBottomTBodyOffset.bottom = sheet._virtualBottomTBodyHgt = 0;
                sheet._virtualContTBodyOffset.bottom = this._getRowOffsetBottom(sheet._rowIdxColl[sheet._rowIdxColl.length - 1], sheetIdx);
                rowIdxs = sheet._rowIdxColl;
                sheet._isVirtualTopReached = sheet._isVirtualEndReached = true;
            }
            else if (sheet._virtualContBlockIdx === 1) {
                sheet._virtualTopTBodyOffset.top = sheet._virtualTopTBodyOffset.bottom = sheet._virtualTopTBodyHgt = 0;
                sheet._virtualContTBodyOffset.bottom = sheet._virtualBottomTBodyOffset.top = this._getRowOffsetTop(sheet, nstartRIdx);
                nendRIdx = this._getRowIdx(nstartIdx + (sheet._virtualBlockRowCnt - 1), sheetIdx, true);
                sheet._virtualBottomTBodyOffset.bottom = this._getRowOffsetBottom(nendRIdx, sheetIdx);
                sheet._virtualBottomTBodyHgt = sheet._virtualTBodyHgt - ((sheet._virtualContTBodyOffset.bottom - sheet._virtualContTBodyOffset.top) + (sheet._virtualBottomTBodyOffset.bottom - sheet._virtualBottomTBodyOffset.top));
                rowIdxs = sheet._rowIdxColl.slice(0, sheet._rowIdxColl.indexOf(nendRIdx) + 1);
                sheet._isVirtualTopReached = true;
                sheet._isVirtualEndReached = false;
            }
            else if (sheet._virtualContBlockIdx === sheet._virtualBlockCnt) {
                pstartIdx = (sheet._virtualContBlockIdx - 2) * sheet._virtualBlockRowCnt;
                sheet._virtualBottomTBodyOffset.top = sheet._virtualBottomTBodyOffset.bottom = sheet._virtualBottomTBodyHgt = 0;
                cendRIdx = this._getRowIdx(currIdx + (sheet._virtualBlockRowCnt - 1), sheetIdx, true);
                sheet._virtualContTBodyOffset.bottom = this._getRowOffsetBottom(cendRIdx, sheetIdx);
                pstartRIdx = this._getRowIdx(pstartIdx, sheetIdx, true);
                sheet._virtualTopTBodyOffset.top = this._getRowOffsetTop(sheet, pstartRIdx);
                sheet._virtualTopTBodyOffset.bottom = sheet._virtualContTBodyOffset.top;
                sheet._virtualTopTBodyHgt = sheet._virtualTBodyHgt - ((sheet._virtualContTBodyOffset.bottom - sheet._virtualContTBodyOffset.top) + (sheet._virtualTopTBodyOffset.bottom - sheet._virtualTopTBodyOffset.top));
                rowIdxs = sheet._rowIdxColl.slice(sheet._rowIdxColl.indexOf(pstartRIdx), sheet._rowIdxColl.indexOf(cendRIdx) + 1);
                sheet._isVirtualEndReached = true;
                sheet._isVirtualTopReached = false;
            }
            else {
                pstartIdx = currIdx - sheet._virtualBlockRowCnt;
                pstartRIdx = this._getRowIdx(pstartIdx, sheetIdx, true);
                sheet._virtualTopTBodyOffset.top = this._getRowOffsetTop(sheet, pstartRIdx);
                sheet._virtualTopTBodyOffset.bottom = sheet._virtualContTBodyOffset.top;
                sheet._virtualContTBodyOffset.bottom = sheet._virtualBottomTBodyOffset.top = this._getRowOffsetTop(sheet, nstartRIdx);
                nendRIdx = this._getRowIdx(nstartIdx + (sheet._virtualBlockRowCnt - 1), sheetIdx, true);
                sheet._virtualBottomTBodyOffset.bottom = this._getRowOffsetBottom(nendRIdx, sheetIdx);
                sheet._virtualTopTBodyHgt = top - ((sheet._virtualTopTBodyOffset.bottom - sheet._virtualTopTBodyOffset.top) + (top - sheet._virtualContTBodyOffset.top));
                sheet._virtualBottomTBodyHgt = sheet._virtualTBodyHgt - sheet._virtualBottomTBodyOffset.bottom;
                rowIdxs = sheet._rowIdxColl.slice(sheet._rowIdxColl.indexOf(pstartRIdx), sheet._rowIdxColl.indexOf(nendRIdx) + 1);
                sheet._isVirtualTopReached = sheet._isVirtualEndReached = false;
            }
            rangeData = this.getRangeData({ property: props, sheetIdx: sheetIdx, rowIdxs: rowIdxs, withRowIdx: true });
            this._getRowHdrTBody(sheetIdx).html(this._renderRowHdr(rangeData.rowIdx, sheetIdx));
            this._getContTBody(sheetIdx).html(this._renderData(rangeData, sheetIdx));
            this._refreshRows(sheetIdx);
            this._refreshTBodiesHgt(sheetIdx);
            if (this.model.allowComments)
                this.XLComment._updateCmntArrowPos(null, sheetIdx);
            sheet._virtualRowIdx = rangeData.rowIdx;
            if (this.model.allowCellType)
                this.XLCellType._rangeCellTypes(sheet.cellTypes, sheetIdx);
            if (this.model.allowSparkline)
                this.XLSparkline._refreshContentWithSparkline(sheetIdx);
            this._refreshViewVar(top, sheet._isLoaded ? null : 0, sheetIdx);
        },

        refreshOverflow: function (range, sheetIdx) {
            this._refreshOverflow(range, sheetIdx);
        },

        _refreshOverflow: function (range, sheetIdx) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            var i, cell, rowIdx, colIdx, cells, sheet = this.getSheet(sheetIdx), keys, container = this._dataContainer.sheets[sheetIdx], lastColIdx;
            range = range || [0, 0, sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
            cells = this.XLEdit._getPropWithCellIdx(range, 'value2');
            if (cells.length < 1)
                return;
            lastColIdx = cells[cells.length - 1].colIdx;
            for (i = cells.length - 1; i > -1; i--) {
                rowIdx = cells[i].rowIdx, colIdx = cells[i].colIdx;
                if (this.model.allowOverflow) {
                    if (lastColIdx === colIdx)
                        keys = this.getObjectKeys(container[rowIdx]);
                    this._textClip(rowIdx, colIdx, 'add', '', true, keys);
                }
                else {
                    if (this._isRowViewable(sheetIdx, rowIdx))
                        cell = this.getCell(rowIdx, colIdx)[0];
                    this._removeClass(cell, 'e-overflow');
                    if (lastColIdx === colIdx)
                        keys = this.getObjectKeys(container[rowIdx]);
                    this._textClip(rowIdx, colIdx, 'delete', '', true, keys);
                    this.addClass(cell, 'e-overflow');
                    this.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { isOverflow: false }, skipCell: true });
                }
            }
        },

        _getVirtualBlockIdx: function (sheetIdx, rowIdx, withAllIdx) {
            var vrowIdx, i = 1, obj = {}, sheet = this.getSheet(sheetIdx);
            vrowIdx = this._getRowIdx(rowIdx, sheetIdx, false, true);
            while (i <= sheet._virtualBlockCnt) {
                if (vrowIdx < (i * sheet._virtualBlockRowCnt)) {
                    obj.idx = i;
                    break;
                }
                i++;
            }
            if (withAllIdx) {
                i = 0;
                while (++i) {
                    if (rowIdx < (i * sheet._virtualBlockRowCnt)) {
                        obj.orgIdx = i;
                        break;
                    }
                }
            }
            return obj;
        },

        _getBlockInfo: function (rowIdx, sheetIdx, withAllIdx) {
            var blkIdx, sheet = this.getSheet(sheetIdx), range = [0, 0, 0, sheet.colCount - 1];
            blkIdx = this._getVirtualBlockIdx(sheetIdx, rowIdx, withAllIdx);
            range[0] = (sheet._virtualBlockRowCnt * (blkIdx.idx - 1));
            range[2] = (sheet._virtualBlockRowCnt * blkIdx.idx) - 1;
            blkIdx.range = range;
            if (withAllIdx) {
                range = [0, 0, 0, sheet.colCount - 1];
                range[0] = (sheet._virtualBlockRowCnt * (blkIdx.orgIdx - 1));
                range[2] = (sheet._virtualBlockRowCnt * blkIdx.orgIdx) - 1;
                blkIdx.orgRange = range;
            }
            return blkIdx;
        },

        _getRowOffsetTop: function (sheet, rowIdx) {
            return sheet._rowHeightCollection[rowIdx];
        },

        _getRowOffsetBottom: function (rowIdx, sheetIdx) {
            return this.getSheet(sheetIdx)._rowHeightCollection[rowIdx] + this.getSheet(sheetIdx).rowsHeightCollection[rowIdx];
        },

        _getColOffsetLeft: function (sheet, colIdx) {
            return sheet._colWidthCollection[colIdx];
        },

        getCellIdx: function (cell) {
            return this._getCellIdx(cell);
        },

        _getCellIdx: function (cell) {
            return { rowIndex: this.model.scrollSettings.allowVirtualScrolling ? Number(cell.parentNode.attributes.getNamedItem("data-idx").value) : cell.parentNode.rowIndex, colIndex: cell.cellIndex };
        },

        _getMidCell: function () {
            var diff, obj = {}, sheet = this.getSheet();
            diff = (sheet._bottomRow.idx - sheet._topRow.idx) + 1;
            obj.rowIdx = sheet._topRow.idx + Math.floor(diff / 2);
            diff = (sheet._rightCol.idx - sheet._leftCol.idx) + 1;
            obj.colIdx = sheet._leftCol.idx + Math.floor(diff / 2);
            return obj;
        },

        _removeRange: function (idx, cnt) {
            var sheetIdx = this.getActiveSheetIndex(), rowHdrTBody = this._getRowHdrTBody(sheetIdx), rowHdrRows = $(this._getRowHdrTBody(sheetIdx)[0].rows),
                contTBody = this._getContTBody(sheetIdx), contRows = $(this._getContTBody(sheetIdx)[0].rows), container = this._dataContainer.sheets[sheetIdx], sheet = this.getSheet(sheetIdx);
            var rowIdx, idx1, mergespanRow, mergeSpanCol, prop, mergeRng, mergeVal, j = 0, mergeRCSpan;
            for (var i = 0, rowLen = this.getObjectLength(sheet._mergeSpan); i < rowLen; i++) {
                mergespanRow = parseInt(this.getObjectKeys(sheet._mergeSpan)[i]);
                for (var k = 0, colLength = this.getObjectLength(sheet._mergeSpan[mergespanRow]); k < colLength; k++) {
                    mergeSpanCol = parseInt(this.getObjectKeys(sheet._mergeSpan[mergespanRow])[0]);
                    idx1 = this._getRowIdx(mergespanRow);
                    if (idx1 >= 0) {
                        contRows[idx1].children[mergeSpanCol].rowSpan = 1;
                        contRows[idx1].children[mergeSpanCol].colSpan = 1;
                        contRows[idx1].children[mergeSpanCol].classList.add("e-mc-hide");
                    }
                    delete sheet._mergeSpan[mergespanRow][mergeSpanCol];
                }
                delete sheet._mergeSpan[mergespanRow];
            }
            rowHdrRows.splice(idx, cnt);
            contRows.splice(idx, cnt);
            this.setRows([rowHdrRows, contRows], sheetIdx);
            while (j < sheet.usedRange.colIndex) {
                rowIdx = parseInt(contRows[0].getAttribute('data-idx'));
                if (!ej.isNullOrUndefined(container[rowIdx])) {
                    prop = container[rowIdx][j];
                    if (!ej.isNullOrUndefined(prop)) {
                        if (prop.mergeIdx) {
                            mergeRng = this.getAlphaRange(prop.mergeIdx.rowIndex, prop.mergeIdx.colIndex, prop.mergeIdx.rowIndex, prop.mergeIdx.colIndex);
                            mergeVal = this.getRangeIndices(mergeRng);
                            mergeRCSpan = container[mergeVal[0]][mergeVal[1]].merge.mSpan;
                            contRows[0].children[j].rowSpan = mergeRCSpan.rowSpan - rowIdx;
                            contRows[0].children[j].colSpan = mergeRCSpan.colSpan;
                            contRows[0].children[j].classList.remove("e-mc-hide");
                            if (!ej.isNullOrUndefined(sheet._mergeSpan[rowIdx])) {
                                if (this.getObjectKeys(sheet._mergeSpan) == rowIdx)
                                    sheet._mergeSpan[rowIdx][j] = { isMerged: true };
                            }
                            else {
                                sheet._mergeSpan[rowIdx] = {};
                                sheet._mergeSpan[rowIdx][j] = { isMerged: true };
                            }
                        }
                    }
                }
                j++;
            }
            contTBody.html(contRows);
            rowHdrTBody.html(rowHdrRows);
            this._getContent(sheetIdx).find(".e-ss-sparkline").remove();
            this._getContent(sheetIdx).find(".e-ddl").remove();
        },

        _refreshTBodiesHgt: function (sheetIdx) {
            sheetIdx = this._getSheetIndex(sheetIdx)
            var px = "px", sheet = this.getSheet(sheetIdx), hdrTBody = this._getJSSheetRowHeaderContent(sheetIdx)[0].getElementsByTagName("tbody"),
                contTBody = this._getContent(sheetIdx)[0].getElementsByTagName("tbody");
            hdrTBody[0].style.height = contTBody[0].style.height = (sheet._virtualTopTBodyHgt < this.model.rowHeight ? 0 : sheet._virtualTopTBodyHgt) + px;
            hdrTBody[2].style.height = contTBody[2].style.height = sheet._virtualBottomTBodyHgt + px;
        },

        _renderTD: function (className, styles, innerHtml) {
            return String.format("<td class='{0}' style='{1}' >{2}</td>", className, styles, innerHtml);
        },

        _renderDIV: function (className, innerHtml, title) {
            return title ? String.format("<div class='{0}' title='{2}'>{1}</div>", className, innerHtml, title) : String.format("<div class='{0}'>{1}</div>", className, innerHtml);
        },

        _renderTR: function (tdData, i, sheetIdx) {
            var trHeight = this._sheetCopy.isSheetCopy ? this.getSheet(sheetIdx).rowsHeightCollection[i] : this.model.rowHeight,
                height = "height:" + trHeight + "px";
            return String.format("<tr style='{0}'>" + tdData + "</tr>", height);
        },

        _renderFooter: function () {
            var scrollSettings = this.model.scrollSettings, pgrWidth, div = ej.buildTag('div.e-spreadsheetfooter', "", { "display": this.model.showPager ? "block" : "none" }), table = ej.buildTag("table.e-table", "", {}, {}),
                tbody = $(document.createElement("tbody")), tr = $(document.createElement("tr")), td = $(document.createElement("td")), pagerHt;
            this._updateResponsiveSettings();
            pgrWidth = scrollSettings.isResponsive ? "100%" : this._responsiveWidth - 2;
            td.append(this._renderSpreadSheetPager());
            td.find(".e-pagercontainer").append(ej.buildTag("div#" + this._id + "_AddSheet.e-new e-icon e-default", "", null, { title: this._getLocStr("NewSheet") }));
            tr.append(td);
            tbody.append(tr);
            table.append(tbody);
            div.append(table);
            this.getMainPanel().append(div);
            this._refreshSpreadSheetPager();
            pagerHt = this.element.find(".e-spreadsheetfooter").outerHeight();
            if (this.model.showPager && pagerHt > this.model.pageSettings.pagerHeight)
                this.model.pageSettings.pagerHeight = pagerHt < 37 ? pagerHt : 36; //pager max height
            div.width(pgrWidth).height(this.model.showPager ? this.model.pageSettings.pagerHeight : 0);
            this.element.find(".e-spreadsheetfooter .e-table").height(this.model.pageSettings.pagerHeight);
            this.setFooter(div);
        },

        //Pager
        gotoPage: function (sheetIdx, newSheet) {
            if ((!newSheet && sheetIdx > this.model.sheetCount) || sheetIdx < 1)
                return;
            var insertIndex, sheet, sheets = this.model.sheets, pagerObj = this.getPager(), settings = {}, impData = this._impData, scrollTop, scrollLeft,
                args = { reqType: "gotoSheet", gotoIndex: sheetIdx, newSheet: newSheet, prevSheetIdx: this.getActiveSheetIndex() }, cell, listProp, ribCollapsed = !this.XLRibbon._ribbonState,
                evtArgs = { reqType: args.reqType, gotoSheetIndex: args.gotoIndex, isNewSheet: args.newSheet, prevSheetIndex: args.prevSheetIdx, action: "gotopage", type: "actionBegin" }, pgrItemsCnt = pagerObj.ejPager("option", "totalRecordsCount"), sheetCount = this.model.sheetCount;
            if (newSheet)
                newSheet = (sheetIdx <= sheetCount) ? false : true;
            if (newSheet) {
                (sheetCount + 1 < sheetIdx) && (sheetIdx = sheetCount + 1);
                (pgrItemsCnt == sheetCount) && pagerObj.ejPager("option", { totalRecordsCount: pgrItemsCnt + 1 });
            }
            this._gotoPageArgs = $.extend(true, {}, args);
            this._isSheetNavigate = newSheet ? false : true;
            if (this._trigActionBegin(evtArgs))
                return;
            this.setActiveSheetIndex(sheetIdx);
            this.model.pageSettings.currentPage = sheetIdx;
            sheet = sheets[sheetIdx];
            (!newSheet && !this.isNumber(sheet.colCount)) && (sheet.colCount = this.model.columnCount);
            if (!newSheet && !sheet._isRequested && sheet._isImported)
                this._importSheet(sheetIdx);
            else {
                this.element.find(".e-sheet").hide();
                if (newSheet) {
                    this._addSheet(sheetIdx);
                    sheet = sheets[sheetIdx];
                    sheet._isNavigated = true;
                }
                if (this._isSheetInsert) {
                    insertIndex = pagerObj.ejPager("option", "currentPage");
                    this._swapSheetDtCntr(sheets.length - 1, insertIndex);
                    this.model.activeSheetIndex = sheetIdx = insertIndex;
                    this._isSheetInsert = false;
                }
                if (this._isNew || ((this.model.scrollSettings.allowVirtualScrolling || this.model.scrollSettings.allowSheetOnDemand) && !sheet._isLoaded) || this._isallowScrollingSetModel || this._isallowVirtualScrollingSetModel) {
                    this.showWaitingPopUp();
                    this._initSheet(sheetIdx);
                    if (this.model.isGridMode && !newSheet)
                        this._gridModeScroll();
                    this._isallowScrollingSetModel = false;
                    this._isallowVirtualScrollingSetModel = false;
                }
                else {
                    this.element.find("#" + this._id + "_" + sheet.sheetInfo.value).show();
                    if (!this.model.scrollSettings.allowVirtualScrolling && !newSheet && !sheet._isOpened)
                        this._refreshOverflow(undefined, sheetIdx);
                    if (this.model.isGridMode && !newSheet)
                        this._gridModeScroll();
                    !newSheet && this._initSelection();
                    if (this._isAutoWHMode) {
                        this._autoSSWidthHeight();
                        !sheet._isOpened && this._refreshOverflow(undefined, sheetIdx);
                    }
                    if (this._gotoPageArgs)
                        this._pageLoadComplete(sheetIdx);
                }
                if (this.model.isGridMode) {
                    var sheetElem = this.getSheetElement(sheetIdx), contentContainer = this._getContent(sheetIdx);
                    if (contentContainer.find("#vscrollBar")[0].style.display == "none" && sheetElem.find(".e-spreadsheetheader").hasClass("e-scrollcss")) {
                        sheetElem.find(".e-spreadsheetheader").removeClass("e-scrollcss");
                        sheetElem.find(".e-spreadsheetheader")[0].style.width = parseInt(sheetElem.find(".e-spreadsheetheader")[0].style.width) + 18 + "px";
                    }
                    if (contentContainer.find("#hscrollBar")[0].style.display == "none" && sheetElem.find(".e-spreadsheetrowheader").hasClass("e-scrollrowcss")) {
                        sheetElem.find(".e-spreadsheetrowheader").removeClass("e-scrollrowcss");
                        sheetElem.find(".e-spreadsheetrowheader")[0].style.height = parseInt(sheetElem.find(".e-spreadsheetrowheader")[0].style.height) + 18 + "px";
                    }
                }
                if (sheet._isResized) {
                    this._refreshSheetWithScreen(sheetIdx);
                    this._updateResponsiveSettings();
                    settings.width = this._responsiveWidth;
                    settings.height = this._responsiveHeight;
                    this._setSheetWidthHeight(sheetIdx, settings, null, "refresh");
                    sheet._isResized = false;
                }
                if (!this.model.scrollSettings.allowVirtualScrolling && !sheet._isOpened)
                    this._updateHiddenRows(sheetIdx);
                if (this.model.allowFreezing)
                    this.XLFreeze._refreshFreeze();
                this._isSheetNavigate = false;
            }
            sheet._isOpened = true;
            if (!(this.isImport || this.model.isImport))
                this.hideActivationPanel();
            if (impData && !this._isExport && !sheet._isImpSLoad && sheet._isImported) {
                scrollTop = impData.model.sheets[sheetIdx]._scrollTop, scrollLeft = impData.model.sheets[sheetIdx]._scrollLeft;
                (scrollTop > 0) && this.XLScroll._vScroller(sheetIdx).scroll(scrollTop);
                (scrollLeft > 0) && this.XLScroll._hScroller(sheetIdx).scroll(scrollLeft);
                sheet._isImpSLoad = true;
            }
            cell = this.getActiveCell(sheetIdx);
            listProp = this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "rule", sheetIdx);
            if (listProp && listProp.type === "list")
                this._setddlCell();
            if (sheet._isRibCollapsed != ribCollapsed) {
                this._heightWidthCalculation(this.getActiveSheetIndex(), $.extend(true, {}, this.model.scrollSettings));
                sheet._isRibCollapsed = ribCollapsed;
            }
            if (this._isAutoWHMode) {
                var dimension = this._getElementDimension();
                this.element.css({ height: dimension.height, width: dimension.width });
            }
            this.XLRibbon._updateScopeRange();
            this.XLRibbon._updateUseInFormulaTrgt();
            this.XLEdit._refreshAutoComplete();
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && !this._isExport) {
                evtArgs = { sheetIndex: sheetIdx, reqType: args.reqType, gotoSheetIndex: args.gotoIndex, isNewSheet: args.newSheet, prevSheetIndex: args.prevSheetIdx, action: "gotopage", type: "actionComplete" };
                this._trigActionComplete(evtArgs);
            }
			if (this.XLEdit._isEdit) {
				var editElem = this.element.find("#" + this._id + "_Edit");
				this.XLEdit._focusElements(editElem);
			}
        },

        insertSheet: function () {
            if (!this.model.allowInsert || this.model.isReadOnly || this.model.isGridMode)
                return;
            var pager = this.getPager(), insertPage = pager.ejPager("option", "totalRecordsCount") + 1;
            pager.ejPager("option", { totalRecordsCount: insertPage });
            this._isSheetInsert = true;
            this.gotoPage(insertPage, true);
            this._setSheetFocus();
        },

        _renameSheet: function (sName) {
            var trgt = this.element.find(".e-currentitem"), input = ej.buildTag("input#" + this._id + "_Sheet_RenamePanel", "", { width: trgt.width() + 5 + "px", padding: 0 }, { type: "input", value: sName || this.getSheet(this.getActiveSheetIndex()).sheetInfo.text, maxlength: "31" });
            trgt.hide();
            input.insertAfter(trgt).select().focus();
            this._isSheetRename = true;
            if (this.model.showRibbon)
                this.XLRibbon._disableRibbonIcons();
            if (this.model.enableContextMenu)
                $("#" + this._id + "_contextMenuFooter").data("ejMenu")._contextMenuEvents("_off"); //for enable default contextmenu - clipboard actions
        },

        deleteSheet: function (index, alertStatus) {
            if (!this.model.allowDelete || this.model.isReadOnly || this.model.isGridMode)
                return;
            var actShtIdx = this.getActiveSheetIndex(), args = { index: index, alertStatus: alertStatus, sheetIndex: actShtIdx, reqType: "delete", type: "actionBegin", action: "deleteSheet" }, sheetCount;
            if (this._trigActionBegin(args))
                return;
            sheetCount = this._getSheetNames(true).length;
            index = args.index || actShtIdx;
            if (sheetCount > 1) {
                if (index !== actShtIdx)
                    this.gotoPage(index, false);
                if (this.getObjectLength(this._dataContainer.sheets[index]) && args.alertStatus)
                    this._showAlertDlg("", "SheetDeleteAlert", "sheetDeleteActn", 470);
                else
                    this._removeSheet(index);
            }
            else
                this._showAlertDlg("Alert", "SheetDeleteErrorAlert", "", 430);
            args.type = "actionComplete";
            this._trigActionComplete(args);
        },

        hideSheet: function (shtInfo) {
            if (this.model.isReadOnly || this.model.isGridMode)
                return;
            var visibeSht = this._getSheetNames(true), shtNames = this._getSheetNames(),
                idx = $.isNumeric(shtInfo) ? shtInfo : this._getSheetIndexByName(shtInfo) || this.getActiveSheetIndex();
            if (visibeSht.length > 1) {
                shtNames[idx - 1].isVisible = false;
                this.gotoPage(this._getNxtVisibleSheet(idx, null, visibeSht));
            }
            else
                this._showAlertDlg("Alert", "SheetDeleteErrorAlert", "", 377);
        },

        unhideSheet: function (shtInfo) {
            if (this.model.isReadOnly || this.model.isGridMode)
                return;
            var shtNames = this._getSheetNames(), idx = $.isNumeric(shtInfo) ? shtInfo : this._getSheetIndexByName(shtInfo);
            if (!shtNames[idx - 1].isVisible) {
                shtNames[idx - 1].isVisible = true;
                this.gotoPage(idx);
            }
            this.hideWaitingPopUp();
        },

        _getNxtVisibleSheet: function (idx, isReverseDir, visibleSheets) {
            var shtNames = this._getSheetNames(), limit = shtNames.length, optr1 = "<=", optr2 = 1, visibeShts = this._getSheetNames(true),
                isLastSht = shtNames[idx - 1].value === (visibleSheets && visibleSheets[visibleSheets.length - 1].value || visibeShts[visibeShts.length - 1].value);
            if (isReverseDir || isLastSht) {
                limit = 0;
                optr1 = ">=";
                optr2 = -1;
            }
            while (this.operators[optr1](idx, limit)) {
                if (shtNames[idx - 1].isVisible)
                    return idx;
                idx = idx + optr2;
            }
        },

        _renderSpreadSheetPager: function () {
            var inst, parent, pagerModel = {}, div = $(document.createElement("div"));
            this.model.pageSettings.change = $.proxy(this._spreadSheetPagerClickHandler, this);
            this.model.pageSettings.totalRecordsCount = this.model.sheetCount;
            this.model.pageSettings.locale = this.model.locale
            $.extend(pagerModel, this.model.pageSettings);
            pagerModel.currentPage = this.getActiveSheetIndex();
            pagerModel.pageSize = 1;
            pagerModel.showGotoPage = false;
            this.setPager(div);
            div.ejPager(pagerModel);
            inst = div.data("ejPager");
            inst._$first[0].title = this._getLocStr("Firstsheet");
            inst._$last[0].title = this._getLocStr("Lastsheet");
            inst._$next[0].title = this._getLocStr("Nextsheet");
            inst._$prev[0].title = this._getLocStr("Prevsheet");
            div.find(".e-parentmsgbar").remove();
            parent = div.find(".e-pagercontainer")[0];
            parent.appendChild(div.find("a.e-PP")[0]);
            parent.appendChild(div.find(".e-numericcontainer")[0]);
            parent.appendChild(div.find("a.e-NP")[0]);
            return div;
        },

        _getPageCount: function () {
            var isResponsive = this.model.scrollSettings.isResponsive, count = this.model.pageSettings.pageCount;
            if (isResponsive) {
                var pageCount = 0, sheetTxt, isIE8Bwsr, spanElem, pager = this.getPager(), cavsElem, cavsTxt, currentItem = pager.find('.e-currentitem'), numericcontainer = pager.find(".e-numericcontainer"),
                    sheetNames = this._getSheetNames(), totalwidth = pager.width(), width = 250, //total width except numeric container
                    visibleLinks = numericcontainer.children(':visible'), actIdx = this.getActiveSheetIndex(), startPgIdx = $(visibleLinks[0]).data("index"), isFoundCnt = true;

                isIE8Bwsr = (this._browserDetails.name === "msie" && this._browserDetails.version === "8.0");
                if (isIE8Bwsr) {
                    spanElem = $('#' + this._id + '_emptySpan');
                    spanElem.css({ 'font-size': currentItem.css('font-size'), 'font-family': currentItem.css("font-family") });
                }
                else {
                    cavsElem = document.createElement("canvas");
                    cavsTxt = cavsElem.getContext("2d");
                    cavsTxt.font = currentItem.css('font-size') + " " + currentItem.css("font-family");
                }
                while (actIdx > (startPgIdx - 1)) {
                    if (isIE8Bwsr)
                        width += (spanElem.text(sheetNames[actIdx - 1].text).width() + 19);
                    else
                        width += (cavsTxt.measureText(sheetNames[actIdx - 1].text).width + 19); //19 for padding & border
                    if (totalwidth <= width)
                        return pageCount || 1;
                    actIdx--;
                    pageCount++;
                }

                actIdx = this.getActiveSheetIndex();
                while (isFoundCnt) {
                    if (this.isUndefined(sheetNames[actIdx]))
                        sheetTxt = this._getLocStr("Sheet") + actIdx;
                    else
                        sheetTxt = sheetNames[actIdx].text;
                    if (isIE8Bwsr)
                        width += (spanElem.text(sheetTxt).width() + 19);
                    else
                        width += (cavsTxt.measureText(sheetTxt).width + 19);
                    if (totalwidth <= width) {
                        isFoundCnt = false;
                        break;
                    }
                    actIdx++;
                    pageCount++;
                }
                isIE8Bwsr && this._refreshGlobalSpan();

                return pageCount || 1;
            }
            else
                return count;
        },

        _spreadsheetPagerCustomBtnHandler: function (event) {
            var currentPage = this.getPager().ejPager("option", "currentPage");
            this._spreadSheetPagerClickHandler({ "currentPage": currentPage, "event": event, "isInteraction": true });
        },

        _spreadSheetPagerClickHandler: function (sender) {
            if (!sender.isInteraction)
                return;
            var div, newPage, addnew = false, masterObj = this, args, trgt = $(sender.event.target), pagerObj = masterObj.getPager().data("ejPager"), fStartCell, fEndCell;
            masterObj._filterClose(trgt);
            if ((trgt.hasClass("e-new") && masterObj.model.exportSettings.password))
                return;
            if (((masterObj.model.allowComments && masterObj.XLComment._isCommentEdit) || masterObj.XLEdit._isEdit || !masterObj.model.allowInsert || masterObj.model.isReadOnly) && (sender.event && (trgt.hasClass("e-pager") || trgt.hasClass("e-new")) || (masterObj.element.find(".e-field-validation-error").length)))
                return;
            else {
                masterObj.model.allowComments && masterObj.XLComment._isCommentEdit && masterObj.XLComment._updateCurCmntVal();
                if (masterObj.XLEdit._isEdit && !masterObj.XLEdit._isFormulaEdit)
                    masterObj.XLEdit.saveCell();
                else {
                    var formulaText = masterObj.element.find("#" + masterObj._id + "_Edit").text();
                    if (formulaText.substr(formulaText.length - 1).indexOf(",") > -1) {
                        fStartCell = { rowIndex: 0, colIndex: 0 };
                        fEndCell = { rowIndex: 0, colIndex: 0 };
                    }
                    else {
                        fStartCell = masterObj._dStartCell;
                        fEndCell = masterObj._dEndCell;
                    }
                    masterObj.XLSelection._clearBorder(masterObj._arrayAsString(masterObj._ctrlFormulaBorder.concat(masterObj._formulaBorder)));
                    this.element.focus();
                }
            }
            if (!ej.isNullOrUndefined(sender.event) && (trgt.hasClass("e-prevpage") || trgt.hasClass("e-nextpage") || trgt.hasClass("e-firstpagedisabled") || trgt.hasClass("e-lastpagedisabled")))
                sender.currentPage = masterObj._getNxtVisibleSheet(sender.currentPage, (trgt.hasClass("e-prevpage") || trgt.hasClass("e-lastpage")) || trgt.hasClass("e-lastpagedisabled"));
            args = {
                activeSheet: masterObj.getActiveSheetIndex(),
                gotoSheet: sender.currentPage,
                newSheet: sender.event && trgt.hasClass("e-new")
            };
            if (args.newSheet) {
                div = masterObj.getPager();
                newPage = div.ejPager("option", "totalRecordsCount") + 1;
                args.gotoSheet = newPage;
            }
            else
                args.gotoSheet = sender.currentPage;
            sender.currentPage = args.gotoSheet;
            if ((!ej.isNullOrUndefined(sender.event) && sender.event.target.id.indexOf("_Sheet_RenamePanel") > -1) || (masterObj._isSheetRename && !masterObj._updateSheetNames(null, false)) || (pagerObj._prevPageNo === sender.currentPage))
                return;
            else if (args.newSheet) {
                div.ejPager("option", { totalRecordsCount: newPage, currentPage: newPage });
                sender.currentPage = newPage;
                addnew = true;
            }
            masterObj._pageClickArgs = $.extend(true, {}, args);
            masterObj.gotoPage(sender.currentPage, addnew);
            if (!$(sender.event.target).hasClass("e-pager")) {
                masterObj._completeAction({ reqType: "paging", sheetIndex: args.activeSheet, nSheetIndex: sender.currentPage });
                masterObj._trigActionComplete({ reqType: "paging", sheetIndex: args.activeSheet, newSheetIndex: sender.currentPage });
            }
            return false;
        },

        _pageLoadComplete: function (sheetIdx) {
            var sheetCont, evtArgs, sheet = this.getSheet(sheetIdx), opt = "option", chkd = "checked", args = this._gotoPageArgs, isSelect = this.model.allowSelection;
            if (isSelect && (sheetIdx !== args.prevSheetIdx) && (this.XLSelection._isGridBordering || this.XLSelection._isOutsideBordering)) {
                this._getContent(args.prevSheetIdx).find("div:first-child").removeClass("e-ss-drwbrdrcursor e-ss-drwbrdrgridcursor").addClass("e-ss-cursor");
                this.XLSelection._isGridBordering = this.XLSelection._isOutsideBordering = false;
            }
            if ((!sheet._isImported || sheet._isLoaded) && this.model.enableContextMenu)
                this.XLCMenu.hideCMenu();
            this._refreshSpreadSheetPager(args.newSheet);
            if (isSelect && this.getSheetElement(sheetIdx).find(".e-ss-activeimg").length)
                this.XLSelection._cleanUp(true);
            if (this.model.showRibbon) {
                this._updateRibbonTab(sheet._activeCell);
                if (!(this.isImport || this.model.isImport)) {
                    if (this.model.allowLockCell) {
                        (sheet.isSheetProtected || this.XLEdit._isFormulaEdit) ? this.XLRibbon._disableRibbonIcons() : this.XLRibbon._enableRibbonIcons();
                        this.XLRibbon._updateRibbonIcons();
                    }
                    if (this.model.allowComments)
                        this.XLComment._updateCmntRibIcons();
                }
                $("#" + this._id + "_Ribbon_PageLayout_Show_Headings").ejCheckBox(opt, chkd, sheet.showHeadings);
                $("#" + this._id + "_Ribbon_PageLayout_Show_Gridlines").ejCheckBox(opt, chkd, sheet.showGridlines);
            }
            if (this.model.allowCellFormatting) {
                sheetCont = this.getSheetElement(sheetIdx).find(".e-content")[0];
                if (this.XLFormat._formatEnable) {
                    this._removeClass(sheetCont, "e-ss-cursor");
                    this.addClass(sheetCont, "e-ss-fpcursor");
                }
                else {
                    this.addClass(sheetCont, "e-ss-cursor");
                    this._removeClass(sheetCont, "e-ss-fpcursor");
                }
            }
            if (this._pageClickArgs) {
                this._pageClickArgs.activeSheet = this.getActiveSheetIndex();
                if (this._trigger("pagerClick", this._pageClickArgs))
                    return false;
                if (this.model.scrollSettings.isResponsive)
                    if (this._isResized && !this._resizeColl[sheetIdx - 1]) {
                        this._refreshSheetonResize();
                        if (this._resizeColl.toString().indexOf("f") < 0) {
                            this._isResized = false;
                            this._resizeColl.fill(false);
                        }
                    }
            }
            this.hideWaitingPopUp();
            this._pageClickArgs = this._gotoPageArgs = null;
            evtArgs = { gotoSheetIndex: args.gotoIndex, isNewSheet: args.newSheet, prevSheetIndex: args.prevSheetIdx, reqType: args.reqType };
            if (this._trigActionComplete(evtArgs))
                return;
        },

        _createTemplateElement: function (index, column) {
            var scriptElement = document.createElement("script");
            scriptElement.id = (this._id + index + column["field"] + $.inArray(column, this.getSheet(index).columns) + "_Template").split(" ").join("");
            scriptElement.type = "text/x-jsrender";
            scriptElement.text = column["templateContent"] ? column["templateContent"] : $(column["templateID"]).html();
            $("body").append(scriptElement);
            $(column["templateID"]).hide();
            return scriptElement;
        },

        _refreshSpreadSheetPager: function (refreshPgCnt) {
            var pager = this.getPager(), model = { currentPage: this.getActiveSheetIndex() }, prePgHght = pager.height(), curHght;
            if (this.isImport || this.model.isImport || this._isNew || pager === null)
                model.totalRecordsCount = this.model.sheetCount;
            if (refreshPgCnt || this._isInitLoad || this._isSheetInsert || this._isNew)
                this.model.pageSettings.pageCount = model.pageCount = this._getPageCount();
            pager.ejPager("option", model).ejPager("refreshPager");
            this._updatePageContainer(pager, model.currentPage);
            curHght = pager.height();
            if (prePgHght !== curHght) {
                model.pageCount = this._getPageCount();
                pager.ejPager("option", model).ejPager("refreshPager");
                this._updatePageContainer(pager, model.currentPage);
            }
            this.model.isGridMode && (document.getElementById(this._id + "_AddSheet").style.display = "none");
            if (!this.model.allowInsert)
                this.addClass(document.getElementById(this._id + "_AddSheet"), "e-disable");
        },

        _updatePageContainer: function (pagerContainer, currentPage) {
            var isFirst, isLast, index, pagerelem, sheetText, sheetinfo, i = 0, j = 0, pagerObj = pagerContainer.data("ejPager"), sheets = this.model.sheets,
                pager = pagerContainer.find(".e-numericcontainer").children(':visible'), pageCnt = pagerObj.model.pageCount, first = [pagerObj._$first[0], pagerObj._$prev[0]],
                firstcls = ["e-firstpagedisabled e-disable", "e-firstpage e-default", "e-prevpagedisabled e-disable", "e-prevpage e-default"],
                last = [pagerObj._$last[0], pagerObj._$next[0]], lastcls = ["e-lastpagedisabled e-disable", "e-lastpage e-default", "e-nextpagedisabled e-disable", "e-nextpage e-default"],
                len = pager.length, isSingleSht = ((i + 1) === len);
            pagerObj._$next[0].className = pagerObj._$next[0].className.replace("-2x", "");
            pagerObj._$prev[0].className = pagerObj._$prev[0].className.replace("-2x", "");
            while (i < len) {
                pagerelem = $(pager[i]);
                index = pagerelem.data("index");
                sheetinfo = sheets[index].sheetInfo;
                sheetText = sheetinfo.text;
                if (isSingleSht) {
                    var isIE8Bwsr, spanElem, pgrWidth = pagerContainer.outerWidth(), width, cavsElem,
                        cavsTxt, iterateElpstxt = true, temp = sheetText, sIdx = 3;
                    isIE8Bwsr = (this._browserDetails.name === "msie" && this._browserDetails.version === "8.0");
                    while (iterateElpstxt) {
                        if (isIE8Bwsr) {
                            spanElem = $('#' + this._id + '_emptySpan');
                            spanElem.css({ 'font-size': pagerelem.css('font-size'), 'font-family': pagerelem.css("font-family") });
                            width = 248 + (spanElem.text(temp).width() + 19);
                        }
                        else {
                            cavsElem = document.createElement("canvas");
                            cavsTxt = cavsElem.getContext("2d");
                            cavsTxt.font = pagerelem.css('font-size') + " " + pagerelem.css("font-family");
                            width = 248 + (cavsTxt.measureText(temp).width + 19); //total width except numeric container - 19(border & padding)
                        }
                        if (pgrWidth <= width && sheetText.length >= sIdx) {
                            temp = sheetText.slice(0, sheetText.length - sIdx++) + "...";
                            continue;
                        }
                        iterateElpstxt = false;
                        sheetText = temp;
                    }
                    isIE8Bwsr && this._refreshGlobalSpan();
                }
                pagerelem.text(sheetText);
                if (sheetinfo.isVisible)
                    isLast = index % pageCnt;
                else
                    pagerelem.hide();
                if (!isFirst && sheetinfo.isVisible)
                    isFirst = index % pageCnt;
                i++;
            }
            if (isFirst === currentPage) {
                for (i = 0; i < 2; i++) {
                    this.addClass(first[i], firstcls[j]);
                    this._removeClass(first[i], firstcls[j + 1]);
                    j += 2;
                }
            }
            j = 0;
            if (isLast === currentPage) {
                for (i = 0; i < 2; i++) {
                    this.addClass(last[i], lastcls[j]);
                    this._removeClass(last[i], lastcls[j + 1]);
                    j += 2;
                }
            }
        },

        _updateSheetNames: function (updatedValue, isCancel) {
            var args, pName, gridObj, rfrTo, calcObj, nMngr, pagerContainer = this.getPager(), len, $sheet = pagerContainer.find(".e-currentitem"),
                sheets = this.model.sheets, $input = $("#" + this._id + "_Sheet_RenamePanel"), isValidName = true,
                temp = [], cellRefrs, sheetNames, cellRef, fValue, rowIdx, colIdx, sheetIdx, regx, isReplaced, i, j, k, l, keys = [], calcDependent, tmgr, nMngrLen, scope, keysLen, sheet, name, singleQuoteExp = /'[^'"]*'(?=(?:[^"]*"[^"]*")*[^"]*$)/g;
            if (ej.isNullOrUndefined(updatedValue))
                updatedValue = $input.val().trim();
            pName = sheets[$sheet.data("index")].sheetInfo.text;
            args = { sheetIdx: this.getActiveSheetIndex(), reqType: "renameSheet", prevName: pName, newName: updatedValue, type: "actionBegin", action: "updatesheetnames" };
            if (this._trigActionBegin(args))
                isCancel = true;
            updatedValue = args.newName;
            //Cancel rename action
            if (isCancel) {
                $input.remove();
                $sheet.show();
                if (this.model.showRibbon)
                    this.XLRibbon._enableRibbonIcons();
                if (this.model.enableContextMenu)
                    $("#" + this._id + "_contextMenuFooter").data("ejMenu")._contextMenuEvents("_on"); //for disable default contextmenu - clipboard actions
                this._isSheetRename = false;
                return false;
            }
            if (updatedValue.match(new RegExp(".*[\\[\\]\\*\\\\\/\\?].*")))
                updatedValue = false;
            if (!updatedValue) {
                this._showAlertDlg("Alert", ["SheetRenameEmptyAlert", "SheetRenameEmptyCharExceedAlert", "SheetRenameEmptySplCharAlert", "SheetRenameEmptyBlankAlert"], "sheetRenameActn", 500);
                return false;
            }
            //Check isValid name
            for (i = 1, len = sheets.length; i < len; i++) {
                if ($sheet.text() !== sheets[i].sheetInfo.text && updatedValue.toLowerCase() === sheets[i].sheetInfo.text.toLowerCase())
                    isValidName = false;
            }
            if (isValidName) {
                if (this.model.enablePivotTable)
                    this.XLPivot._updateSheetName(updatedValue);
                if (sheets[$sheet.data("index")].sheetInfo.text = updatedValue) {
                    $input.remove();
                    $sheet.show();
                    calcObj = this._calcEngine;
                    calcDependent = calcObj.getDependentCells().items;
                    for (var key in calcDependent)
                        if (calcDependent.hasOwnProperty(key))
                            keys.push(key);
                    cellRefrs = keys;
                    sheetNames = this._getSheetNames();
                    for (i = 0; i < cellRefrs.length; i++) {
                        cellRef = calcDependent[cellRefrs[i]];
                        for (j = 0; j < cellRef.length; j++) {
                            fValue = calcObj.getFormulaInfoTable().items[cellRef[j]];
                            if (fValue) {
                                fValue = fValue.getFormulaText();
                                for (k = 0; k < sheetNames.length; k++) {
                                    if (sheetNames[k].text !== sheetNames[k].value) {
                                        regx = new RegExp(sheetNames[k].value + '(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)', 'gi');
                                        if (fValue.match(singleQuoteExp))
                                            this.XLEdit._singleQuote = true;
                                        if (fValue.match(regx)) {
                                            fValue = fValue.replace(regx, k + "/");
                                            temp.push(k);
                                            isReplaced = true;
                                        }
                                    }
                                }
                            }
                            if (isReplaced) {
                                l = 0;
                                while (l < temp.length) {
                                    regx = new RegExp(temp[l] + '/(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)', 'gi');
                                    if (!isNaN(sheetNames[temp[l]].text) || !(/^[a-zA-Z0-9- ]*$/.test(sheetNames[temp[l]].text)) || sheetNames[l].text.match("\\s+"))
                                        fValue = fValue.replace(regx, this.XLEdit._singleQuote ? sheetNames[temp[l]].text : "'" + sheetNames[temp[l]].text + "'");
                                    else
                                        fValue = fValue.replace(regx, sheetNames[temp[l]].text);
                                    l++;
                                    this.XLEdit._singleQuote = false;
                                }
                                rowIdx = calcObj.rowIndex(cellRef[j]) - 1;
                                colIdx = calcObj.colIndex(cellRef[j]) - 1;
                                sheetIdx = this._getSheetIdxFromSheetValue(this._getLocStr("Sheet") + (parseInt(cellRef[j].split("!")[1]) + 1));
                                this.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { value: fValue }, sheetIdx: sheetIdx });
                                isReplaced = false;
                            }
                        }
                    }
                    this._isSheetRename = false;
                }
                this._refreshSpreadSheetPager(true);
                this.model.allowFormulaBar && this.updateFormulaBar();
                sheet = this.getSheet(sheetIdx);
                //Refresh NM coll
                nMngr = this.model.nameManager;
                for (i = 0, nMngrLen = nMngr.length; i < nMngrLen; i++) {
                    rfrTo = nMngr[i].refersto;
                    rfrTo = rfrTo.split(",");
                    var rfrToDsRng = [];
                    scope = nMngr[i].scope;
                    for (var j = 0, rfrToDsRngLn = rfrTo.length; j < rfrToDsRngLn; j++) {
                        if (scope && scope.indexOf(pName) > -1) {
                            nMngr[i].scope = scope.replace(pName, updatedValue.match(/\s/g) ? "'" + updatedValue + "'" : updatedValue);
                            this._calcEngine.removeNamedRange(pName + "!" + nMngr[i].name);
                            this._calcEngine.addNamedRange(updatedValue + "!" + nMngr[i].name, nMngr[i].refersto.replace("=", ""));
                        }
                        if (rfrTo[j] && rfrTo[j].indexOf(pName) > -1) {
                            rfrTo[j] = rfrTo[j].replace(/[\']/g, "");
                            rfrToDsRng.push(rfrTo[j].replace(pName, updatedValue.match(/\s/g) ? "'" + updatedValue + "'" : updatedValue));
                        }
                    }
                    nMngr[i].refersto = rfrToDsRng.join(",");
                }
                keys = this.getObjectKeys(sheet._scopeRanges);
                for (i = 0, keysLen = keys.length; i < keysLen; i++) {
                    name = sheet._scopeRanges[keys[i]].name;
                    rfrTo = sheet._scopeRanges[keys[i]].refersto;
                    if (name && name.indexOf(pName) > -1)
                        sheet._scopeRanges[keys[i]].name = name.replace(pName, updatedValue.match(/\s/g) ? "'" + updatedValue + "'" : updatedValue);
                    if (rfrTo && rfrTo.indexOf(pName) > -1) {
                        rfrTo = rfrTo.replace(/[\']/g, "");
                        sheet._scopeRanges[keys[i]].refersto = rfrTo.replace(pName, updatedValue.match(/\s/g) ? "'" + updatedValue + "'" : updatedValue);
                    }
                }
                tmgr = sheet.tableManager;
                for (i in tmgr)
                    this.XLFormat._updateTableFormula("updateRange", tmgr[i], sheetIdx);
                if (this.model.showRibbon) {
                    this.XLRibbon._enableRibbonIcons();
                    gridObj = $("#" + this._id + "_nmgrid").data("ejGrid");
                    if (gridObj) {
                        gridObj.refreshContent();
                        $("#" + this._id + "_nmrange").val("");
                    }
                }
                if (this.model.enableContextMenu)
                    $("#" + this._id + "_contextMenuFooter").data("ejMenu")._contextMenuEvents("_on"); //for disable default contextmenu - clipboard actions
                args = { sheetIdx: this.getActiveSheetIndex(), reqType: "renameSheet", prevName: pName, newName: updatedValue, type: "actionComplete", action: "updatesheetnames" };
                this._trigActionComplete(args);
                return true;
            }
            else
                this._showAlertDlg("Alert", "SheetRenameAlert", "sheetRenameActn", 325);
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && !this._isExport) {
                this._completeAction(args);
                this._trigActionComplete(args);
            }
        },

        _getSheetIndexByName: function (sheetName) {
            var sheetNameCol = this._getSheetNames(), i, len;
            sheetName = sheetName && sheetName.replace(/^'|'$/g, '');
            if (sheetName)
                sheetName = sheetName.toLowerCase();
            for (i = 0, len = sheetNameCol.length; i < len; i++) {
                if (sheetNameCol[i].text.toLowerCase() === sheetName)
                    return (i + 1);
            }
            return false;
        },

        _removeSheet: function (index) {
            var sheetCount = this.model.sheetCount, shtDtCntr = this._dataContainer.sheets, i, sheets = this.model.sheets, args,
                j, cellRef, frmlaRefVal, frmlaVal, cellRefrs = [], regx, sIdx, delShtVal, nMngr, rfrTo, nMngrRefrs = [], calcObj, gridObj, calcDpdntCells, nMngrLen;
            if (sheetCount > 1) {
                delShtVal = sheets[index].sheetInfo.value;
                this._getAutoFillOptElem().appendTo(this.element);
                this.element.find("#" + this._id + "_" + delShtVal).remove();
                if (sheetCount === this.getActiveSheetIndex()) {
                    for (i = 1; i < sheetCount; i++) {
                        if (sheets[index - i].sheetInfo.isVisible) {
                            this.setActiveSheetIndex(index - i);
                            break;
                        }
                    }
                }
                else
                    this.setActiveSheetIndex(index);
                this._swapSheetDtCntr(index, sheetCount);
                sheetCount in shtDtCntr && delete shtDtCntr[sheetCount];
                this._sheets.splice(sheetCount, 1);
				var sLen = sheets.length;
                sheets.splice(sheetCount, 1);
                sheetCount = --this.model.sheetCount;
				delete CalcEngine.modelToSheetID.items[delShtVal];
				for (var i = 1; i < sLen; i++) {
					var family = CalcEngine.getSheetFamilyItem("Sheet" + i);
					if (family.sheetNameToParentObject) {
						delete family.sheetNameToParentObject.items[delShtVal.toUpperCase()];
						delete family.parentObjectToToken.items[delShtVal];
						delete family.sheetNameToToken.items[delShtVal.toUpperCase()];
						delete family.tokenToParentObject.items[delShtVal];
					}
				}
                this.getPager().ejPager("option", { totalRecordsCount: sheetCount, pageCount: this._getPageCount() });
                this.gotoPage(this.getActiveSheetIndex(), false);
                this._getAutoFillOptElem().appendTo(this._getJSSheetContent(this.getActiveSheetIndex()).find(".e-spreadsheetcontentcontainer > .e-content"));
                //Rebind sheet scroller event after delete sheets(index changed)
                this._rebindScrollEvnt();

                //Refresh NM coll
                nMngr = this.model.nameManager;
                for (i = 0, nMngrLen = nMngr.length; i < nMngrLen; i++) {
                    rfrTo = nMngr[i].refersto;
                    if (rfrTo.indexOf(delShtVal) > -1) {
                        nMngrRefrs.push(nMngr[i].name);
                        (nMngr[i].scope != "Workbook") ? nMngr.splice(i, 1) : nMngr[i].refersto = "#REF!";
                    }
                }

                calcObj = this._calcEngine;
                calcDpdntCells = $.extend(true, [], calcObj.getDependentCells().items);
                for (i in calcDpdntCells)
                    if (calcDpdntCells.hasOwnProperty(i))
                        cellRefrs.push(i);
                for (i = 0; i < cellRefrs.length; i++) {
                    cellRef = calcDpdntCells[cellRefrs[i]];
                    for (j = 0; j < cellRef.length; j++) {
                        frmlaRefVal = calcObj.getFormulaInfoTable().items[cellRef[j]];
                        sIdx = this._getSheetIdxFromSheetValue(this._getLocStr("Sheet") + (parseInt(cellRef[j].split("!")[1]) + 1));
                        if (frmlaRefVal && sIdx > -1) {
                            frmlaVal = frmlaRefVal.getFormulaText();
                            regx = new RegExp(delShtVal + '(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)', 'gi');
                            if (frmlaVal.match(regx)) {
                                frmlaVal = frmlaVal.replace(regx, "#REF");
                                this.XLEdit._updateDataContainer({ rowIndex: calcObj.rowIndex(cellRef[j]) - 1, colIndex: calcObj.colIndex(cellRef[j]) - 1 }, { dataObj: { value: frmlaVal }, sheetIdx: sIdx });
                                calcObj.refresh(frmlaRefVal.getParsedFormula());
								this.XLEdit._refreshCalcEngine(calcObj.rowIndex(cellRef[j]) - 1, calcObj.colIndex(cellRef[j]) - 1, true, frmlaVal, sIdx);
                            }

                            for (var k = 0, nMngrRefrsLen = nMngrRefrs.length; k < nMngrRefrsLen; k++)
                                if (frmlaVal.indexOf(nMngrRefrs[k]) > -1)
                                    calcObj.refresh(frmlaRefVal.getParsedFormula());
                        }
                    }
                }
                if (this.model.showRibbon) {
                    gridObj = $("#" + this._id + "_nmgrid").data("ejGrid");
                    if (gridObj) {
                        gridObj.refreshContent();
                        $("#" + this._id + "_nmrange").val("");
                    }
                }
                args = { sheetIndex: index, reqType: "remove-sheet" };
                this.clearUndoRedo();
                if (this._trigActionComplete(args))
                    return;
            }
        },

        _rebindScrollEvnt: function () {
            for (var i = 1; i <= this.model.sheetCount; i++) {
                if (this.getSheet(i)._isLoaded) {
                    this._getJSSheetContent(i).find(".e-spreadsheetcontentcontainer > .e-content").off("scroll");
                    this.element.find("#" + this._id + "_" + this.model.sheets[i].sheetInfo.value).find(".e-headercontent").off("scroll");
                    this._refreshScrollerEvent(i);
                }
            }
        },

        _getSheetNames: function (visible) {
            var i, len, sheetNames = [], sheets = this.model.sheets;
            for (i = 1, len = sheets.length; i < len; i++) {
                if (!this.isUndefined(visible) && ((visible && !sheets[i].sheetInfo.isVisible) || (!visible && sheets[i].sheetInfo.isVisible)))
                    continue;
                sheetNames.push(sheets[i].sheetInfo);
            }
            return sheetNames;
        },

        _initMoveCopyDlg: function () {
            var dlgId = this._id + "_moveCopyDlg", $dlg, $content, $okBtn, $cancelBtn, $btndiv, $listUl, $chkbox, $listCtn, $btnctnr;
            $dlg = ej.buildTag("div#" + dlgId, "", { display: "none" });
            $content = ej.buildTag("div#" + dlgId + "_sheetContent.e-dlgctndiv e-dlg-fields", ej.buildTag("label.e-dlg-fields", this._getLocStr("Beforesheet")));
            $listCtn = ej.buildTag("div.e-dlg-fields"), $listUl = ej.buildTag("ul#" + dlgId + "_list");
            $content.append($listCtn.append($listUl));
            $chkbox = ej.buildTag("input#" + dlgId + "_createcopy");
            $content.append($chkbox);
            $chkbox.ejCheckBox({ cssClass: "e-dlg-fields" });
            $chkbox.parent().append(ej.buildTag("label", this._getLocStr("CreateaCopy"), { "margin-left": 6 }));
            $dlg.append($content);
            $btndiv = ej.buildTag("div#" + dlgId + "_btndiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + dlgId + "_okbtn", "");
            $cancelBtn = ej.buildTag("input#" + dlgId + "_cnlbtn");
            $okBtn.ejButton({ text: this._getLocStr("Ok"), showRoundedCorner: true, click: ej.proxy(this._moveCopyBtnClick, this, "ok"), cssClass: "e-ss-okbtn", width: 60 });
            $cancelBtn.ejButton({ text: this._getLocStr("Cancel"), click: ej.proxy(this._moveCopyBtnClick, this, "cancel"), showRoundedCorner: true, width: 60 });
            $btndiv.append($btnctnr.append($okBtn, $cancelBtn));
            $dlg.append($btndiv);
            this.element.append($dlg);
            $dlg.ejDialog({ showOnInit: false, enableModal: true, enableResize: false, allowKeyboardNavigation: false, title: this._getLocStr("MoveorCopy"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-" + this._id + "-dlg e-ss-movedlg" });
            $listUl.ejListBox({
                dataSource: this._getSheetNames(),
                height: "197px",
                width: "250px",
                fields: { text: "text", value: "value" }
            });
        },

        _renderMoveCopyDlg: function () {
            var $dlg = $("#" + this._id + "_moveCopyDlg"), lbObj = $("#" + this._id + "_moveCopyDlg_list").data("ejListBox"), lbDataSrc = this._getSheetNames();
            lbDataSrc.push({ text: this._getLocStr('MoveToEnd'), value: this._getLocStr('MoveToEnd') });
            $dlg.ejDialog("open");
            lbObj.model.dataSource = lbDataSrc;
            lbObj.option("fields", { dataSource: lbDataSrc });
            lbObj.unSelectAll();
            lbObj.selectItemByIndex(0);
        },

        _initUnhideDlg: function () {
            var dlgId = this._id + "_UnhideDlg", $dlg, $content, $okBtn, $cancelBtn, $btndiv, $listUl, $btnctnr;
            $dlg = ej.buildTag("div#" + dlgId, "", { display: "none" });
            $content = ej.buildTag("div#" + dlgId + "_sheetContent.e-dlgctndiv e-dlg-fields", ej.buildTag("label.e-dlg-fields", this._getLocStr("UnhideDlgText")));
            $listUl = ej.buildTag("ul#" + dlgId + "_list");
            $content.append($listUl);
            $dlg.append($content);
            $btndiv = ej.buildTag("div#" + dlgId + "_btndiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + dlgId + "_okbtn");
            $cancelBtn = ej.buildTag("input#" + dlgId + "_cnlbtn");
            $okBtn.ejButton({ text: this._getLocStr("Ok"), showRoundedCorner: true, width: "25%", click: ej.proxy(this._unhideBtnClick, this, "ok"), cssClass: "e-ss-okbtn" });
            $cancelBtn.ejButton({ text: this._getLocStr("Cancel"), click: ej.proxy(this._unhideBtnClick, this, "cancel"), showRoundedCorner: true, width: "25%" });
            $btndiv.append($btnctnr.append($okBtn, $cancelBtn));
            $dlg.append($btndiv);
            this.element.append($dlg);
            $dlg.ejDialog({ showOnInit: false, enableModal: true, enableResize: false, allowKeyboardNavigation: false, title: this._getLocStr("UnhideSheet"), width: 280, height: "auto", cssClass: "e-ss-dialog e-" + this._id + "-dlg" });
            $listUl.ejListBox({
                dataSource: this._getSheetNames(),
                height: "197px",
                width: "250px",
                fields: { text: "text", value: "value" }
            });
        },

        _renderUnhideDlg: function () {
            var dlg = $("#" + this._id + "_UnhideDlg"), lbObj = $("#" + this._id + "_UnhideDlg_list").data("ejListBox"), lbDataSrc = this._getSheetNames(false);
            if (lbDataSrc.length > 0) {
                dlg.ejDialog("open");
                lbObj.model.dataSource = lbDataSrc;
                lbObj.option("fields", { dataSource: lbDataSrc });
                lbObj.unselectAll();
                lbObj.selectItemByIndex(0);
            }
        },

        _moveCopyBtnClick: function (action) {
            switch (action) {
                case "ok":
                    var args, spliceIndex, i, len, cpySheetName, isValid = false, sheetNameCount = 2, index, selectedItem = $(this.element).find(".e-currentitem"), lbObj = $("#" + this._id + "_moveCopyDlg_list").data("ejListBox"), checkObj = $("#" + this._id + "_moveCopyDlg_createcopy").data("ejCheckBox"), sText = lbObj.getSelectedItems()[0].text, mainIndex = lbObj.getIndexByText(sText), modelSheet = this.model.sheets;
                    //Check is same sheet
                    if (!checkObj.isChecked() && (sText === selectedItem.text())) {
                        $("#" + this._id + "_moveCopyDlg").ejDialog("close");
                        this._setSheetFocus();
                        return;
                    }

                    //Getting splice index and sheet position index
                    for (i = 1; i < modelSheet.length; i++) {
                        (sText === modelSheet[i].sheetInfo.text) && (spliceIndex = i);
                        (selectedItem.text() === modelSheet[i].sheetInfo.text) && (index = i);
                    }

                    args = { reqType: "moveSheet", toSheetIndex: mainIndex, fromSheetIndex: index, isCopy: checkObj.isChecked(), type: "actionBegin", action: action };
                    if (this._trigActionBegin(args)) {
                        $("#" + this._id + "_moveCopyDlg").ejDialog("close");
                        return false;
                    }
                    mainIndex = args.toSheetIndex;
                    index = args.fromSheetIndex;

                    //Check is Copy sheet
                    if (checkObj.isChecked()) {
                        // Getting unique sheet name
                        if (selectedItem.text().match('.*[ ]+[(]+[0-9]+[)]$') === null) {
                            cpySheetName = selectedItem.text() + " (" + sheetNameCount + ")";
                        }
                        else {
                            if (selectedItem.text().lastIndexOf(' ') !== -1) {
                                sheetNameCount = parseInt(selectedItem.text().substring(selectedItem.text().lastIndexOf("(") + 1, selectedItem.text().lastIndexOf(")")));
                                cpySheetName = selectedItem.text().substring(0, selectedItem.text().lastIndexOf(" ")) + " (" + sheetNameCount + ")";
                            }
                        }
                        while (!isValid) {
                            cpySheetName = cpySheetName.substring(0, cpySheetName.lastIndexOf(" ")) + " (" + sheetNameCount + ")";
                            for (i = 1, len = modelSheet.length; i < len; i++) {
                                (cpySheetName === modelSheet[i].sheetInfo.text) && sheetNameCount++;
                            }
                            (sheetNameCount === parseInt(cpySheetName.substring(cpySheetName.lastIndexOf("(") + 1, cpySheetName.lastIndexOf(")")))) && (isValid = true);
                        }
                        this._copySheet = true;
                        //Copy Sheet Process      
                        this._copySheetProcess(index, cpySheetName);
                        this._copySheet = false;

                        index = this.model.sheetCount;
                        ej.isNullOrUndefined(spliceIndex) && (spliceIndex = index);
                    }
                    else {
                        !ej.isNullOrUndefined(spliceIndex) && spliceIndex > index && (spliceIndex = spliceIndex - 1);
                    }

                    ej.isNullOrUndefined(spliceIndex) && (spliceIndex = mainIndex);

                    //Sheets[] updates
                    if (!checkObj.isChecked() && spliceIndex === index) {
                        $("#" + this._id + "_moveCopyDlg").ejDialog("close");
                        this._setSheetFocus();
                        break;
                    }

                    //Update DataContainer positions
                    this._swapSheetDtCntr(index, spliceIndex);

                    $("#" + this._id + "_moveCopyDlg").ejDialog("close");

                    spliceIndex <= index && (mainIndex = mainIndex + 1);
                    this.getPager().ejPager("option", { currentPage: mainIndex });
                    this.gotoPage(mainIndex, false);
                    this._rebindScrollEvnt();
                    args = { reqType: "moveSheet", toSheetIndex: mainIndex, fromSheetIndex: index, isCopy: checkObj.isChecked() };
                    this._trigActionComplete(args);

                    //uncheck copy sheet checkbox
                    checkObj._unChecked();
                    checkObj._isChecked = false;

                    this._setSheetFocus();
                    break;
                case "cancel":
                    $("#" + this._id + "_moveCopyDlg").ejDialog("close");
                    break;
            }
        },

        _unhideBtnClick: function (action) {
            if (action === "ok") {
                var lbObj = $("#" + this._id + "_UnhideDlg_list").data("ejListBox");
                this.unhideSheet(lbObj.getSelectedItems()[0].text);
            }
            $("#" + this._id + "_UnhideDlg").ejDialog("close");

        },

        _swapSheetDtCntr: function (index, spliceIdx) {
            var sheetDtMngr = this._dataContainer.sheets, modelSheet = this.model.sheets, dtSheets = this._sheets, shtValue = this._getLocStr("Sheet"), backupDtCntr = [{}], newIdx;
            for (var ind in sheetDtMngr) {
                if (sheetDtMngr.hasOwnProperty(ind))
                    backupDtCntr[parseInt(modelSheet[ind].sheetInfo.value.replace(shtValue, ""))] = sheetDtMngr[ind];
            }
            modelSheet.splice(spliceIdx, 0, modelSheet.splice(index, 1)[0]);
            dtSheets.splice(spliceIdx, 0, dtSheets.splice(index, 1)[0]);
            for (var indx = 1, len = modelSheet.length; indx < len; indx++) {
                newIdx = parseInt(modelSheet[indx].sheetInfo.value.replace(shtValue, ""));
                this._dataContainer.sheets[indx] = backupDtCntr[newIdx];
            }
            this.clearUndoRedo();
        },

        _copySheetProcess: function (index, cpySheetName) {
            var cellIdx, data, i, j, len, newSheetIdx, sheetvalue, shapeMngr, shapeDtl, usedRange, pager = this.getPager(), newPage = pager.ejPager("option", "totalRecordsCount") + 1, modelSheet = this.model.sheets;
            this._impData && this.XLExport._renderAll();
            pager.ejPager("option", { totalRecordsCount: newPage, currentPage: newPage });
            //Sheet settings Copy
            modelSheet.push($.extend(true, {}, modelSheet[index]));
            modelSheet[modelSheet.length - 1]._isImported = false;
            this._sheetCopy = { isSheetCopy: true, sheetContent: this._getContent(index).find(".e-table").clone(true).get(0), sheetIndex: index };

            newSheetIdx = this.model.sheetCount + 1;
            modelSheet[newSheetIdx].sheetInfo.text = cpySheetName;
            sheetvalue = modelSheet[newSheetIdx].sheetInfo.value = this._getLocStr("Sheet") + this._newSIndex;
            this._newSIndex++;
            this.setActiveSheetIndex(newSheetIdx);

            //Copy Data Container
            this._dataContainer.sheets[newSheetIdx] = $.extend(true, {}, this._dataContainer.sheets[index]);
            this._sheets[newSheetIdx] = { _contentColGroup: null, _content: null, _sheetRowHeaderContent: null, _sheetHeader: null, _sheetRowHeader: null, _sheetContent: null, _Rows: null };

            this._initSheet(newSheetIdx);
            this.model.sheetCount++;

            this._sheetCopy = { isSheetCopy: false, sheetContent: null, sheetIndex: null };


            //To register in calc engine
            this._calcEngine.registerGridAsSheet(sheetvalue, sheetvalue, this._calcID);
            usedRange = modelSheet[newSheetIdx].usedRange;
            for (i = 0; i <= usedRange.rowIndex; i++) {
                for (j = 0; j <= usedRange.colIndex; j++) {
                    data = this.XLEdit.getPropertyValue(i, j, "value");
                    if (data && this.isFormula(data))
                        this.XLEdit._refreshCalcEngine(i, j, true, data, newSheetIdx);
                }
            }

            //To update picture
            shapeMngr = modelSheet[newSheetIdx].shapeMngr.picture;
            len = this.getObjectLength(shapeMngr);
            for (i = 1; i <= len; i++) {
                shapeDtl = shapeMngr[this._id + "_picture" + i];
                this.XLShape._createPicture(newSheetIdx, { rowIndex: shapeDtl.rowIndex, colIndex: shapeDtl.colIndex }, this.getSheet(newSheetIdx).shapeMngr.sharedPics[shapeDtl.data], shapeDtl.top, shapeDtl.left, shapeDtl.width, shapeDtl.height, null, shapeDtl.bcolor, shapeDtl.bstyle, shapeDtl.bwidth);
            }

            //Comments update
            if (!this.model.scrollSettings.allowVirtualScrolling) {
                var commentCells = this._getContent(newSheetIdx).find(".e-commentcell"), elem;
                for (i = 0, len = commentCells.length; i < len; i++) {
                    elem = $(commentCells[i]);
                    cellIdx = this._getCellIdx($(".e-commentcell")[0]);
                    elem.removeClass("e-commentcell") && this.XLComment.setComment([cellIdx.rowIndex, cellIdx.colIndex, cellIdx.rowIndex, cellIdx.colIndex], null, false);
                }
            }
            if (this.model.allowComments)
                this.XLComment._updateCmntArrowPos();
        },

        showActivationPanel: function (rangeName) {
            var rangeInfo, sheetIdx = this.getActiveSheetIndex(), actpanel = this.getActivationPanel();
            if (!this.model.enablePivotTable || this._phoneMode)
                return false;
            if (this.isUndefined(rangeName)) {
                if (this._getContent(sheetIdx).find(".e-ss-activepivot").length && this.XLPivot._displayActPanel) {
                    this.model._isActPanelVisible = true;
                    this._setSheetWidthHeight(sheetIdx, { width: this._responsiveWidth, height: this._responsiveHeight, isActPanel: true }, null, "refresh");
                    this._refreshActivationPanel();
                }
            }
            else {
                rangeInfo = this.getSheet(sheetIdx).rangeSettings[rangeName];
                if (rangeInfo.showPanel) {
                    if (this._trigger("beforePanelOpen", { activationPanel: actpanel, range: rangeInfo, sheetIndex: sheetIdx }))
                        return false;
                    this.model._isActPanelVisible = true;
                    this._setSheetWidthHeight(sheetIdx, { width: this._responsiveWidth, height: this._responsiveHeight, isActPanel: true }, null, "refresh");
                    this._refreshActivationPanel();
                }
            }
            if (this.model.showPager)
                this._refreshSpreadSheetPager(true);
        },

        _refreshActivationPanel: function () {
            var actpanel = this.getActivationPanel(), height = this.getMainPanel().height(), scrObj = actpanel.data("ejScroller"), desObj;
            actpanel.width(this.model.activationPanelWidth - 1).height(height);
            actpanel.find(".e-ss-pivotfield").hide();
            actpanel.find("#" + this._id + "_PivotTableSchema_" + this._getContent(this.getActiveSheetIndex()).find(".e-ss-activepivot")[0].id).show();
            actpanel.find(".e-ss-pivotfield").width(this.model.activationPanelWidth - 20); //20 for scrollbar width
            actpanel.show();
            desObj = this.getActivationPanel().find("#" + this._id + "_PivotTableSchema_" + this._getContent(this.getActiveSheetIndex()).find(".e-ss-activepivot")[0].id).data("ejPivotSchemaDesigner");
            desObj._reSizeHandler();
            if (scrObj) {
                scrObj.option({ width: this.model.activationPanelWidth - 1, height: height });
                scrObj.refresh();
            }
        },

        hideActivationPanel: function () {
            var actpanel = this.getActivationPanel();
            if (actpanel.is(":visible")) {
                actpanel.find(".e-ss-pivotfield").hide();
                this.model._isActPanelVisible = false;
                actpanel.hide();
                if (!this._isNew)
                    this._setSheetWidthHeight(this.getActiveSheetIndex(), { width: this._responsiveWidth, height: this._responsiveHeight }, null, "refresh");
                if (this.model.showPager)
                    this._refreshSpreadSheetPager(true);
            }
        },

        _addSheet: function (index) {
            this._sheetSettings(index);
            this._dataContainer.sheets[index] = {};
            this._initSheet(index);
            this._newSIndex++;
            this.model.sheetCount++;
        },

        addNewSheet: function () {
            if (!this.model.allowInsert || this.model.isReadOnly || this.model.isGridMode)
                return;
            this.element.find(".e-pager .e-new").click();
        },

        _createFocusElement: function () {
            this.setFocusTopElem($("<div class='e-focustop e-hide' ></div>"));
            this.setFocusRightElem($("<div class='e-focusright e-hide' ></div>"));
            this.setFocusBottomElem($("<div class='e-focusbottom e-hide' ></div>"));
            this.setFocusLeftElem($("<div class='e-focusleft e-hide' ></div>"));
        },

        _createAutoFillElement: function () {
            var html, sheetCont = this._getJSSheetContent(this.getActiveSheetIndex()).find(".e-spreadsheetcontentcontainer > .e-content");
            if (this.model.allowAutoFill) {
                html = $("<div class='e-autofill e-hide'></div>");
                sheetCont.append(html);
                this.setAutoFillElem(html);
            }
            this.element.append(ej.buildTag("ul.e-spreadsheet", "", { "width": "auto" }, { id: this._id + "_ctxtmenu" }));
            html = $("<div class='e-splitspan e-hide' title=" + this._getLocStr("AutoFillTitle") + "><button id=" + this._id + "_dragfilloptionbtn type='button'></button></div>");
            sheetCont.append(html);
            this._setAutoFillOptElem(html);
            this._initializeSplitButton();
        },

        _initializeSplitButton: function () {
            this._getAutoFillOptElem().find("button").ejSplitButton({
                size: "normal",
                contentType: "imageonly",
                targetID: this._id + "_ctxtmenu",
                prefixIcon: "e-icon e-ss-autofill",
                isSeparator: false,
                buttonMode: ej.ButtonMode.Dropdown,
                imagePosition: ej.ImagePosition.ImageLeft,
                arrowPosition: ej.ArrowPosition.Right,
                fields: { dataSource: this._fillOptionMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" },
                beforeOpen: $.proxy(this.model.allowAutoFill && this.XLDragFill._autoFillClick, this),
                itemSelected: $.proxy(this.model.allowAutoFill && this.XLDragFill._autoFillOptionClick, this),
                width: "42px",
                height: "24px",
                cssClass: "e-spreadsheet e-autofillbtn"
            });
        },

        // formula bar
        _renderFormulaBar: function (isSetModel) {
            var inputBox, formulabar = "<div id=" + this._id + "_formulabar class='e-formulabar' ><div id=" + this._id + "_indexbox class='e-indexbox' title='" + this._getLocStr("NameBox") + "'></div><div class='e-inputbox' ><input id=" + this._id + "_inputbox type='text' title='" + this._getLocStr("FormulaBar") + "'/></div></div>", frmlaBarHt;
            if (isSetModel)
                this.model.showRibbon ? $("#" + this._id + "_Ribbon").after(formulabar) : this.element.prepend(formulabar);
            else
                this.element.append(formulabar);
            this._setIndexBox($("#" + this._id + "_indexbox"));
            inputBox = $("#" + this._id + "_inputbox");
            this._setInputBox(inputBox);
            this.XLEdit._renderAutoComplete(inputBox, "", 26);
            this._alignFormulaBar();
            frmlaBarHt = this.element.find(".e-formulabar").height();
            if (frmlaBarHt > 36)
                this._formulaHeight = frmlaBarHt;
            if (this.model.isReadOnly)
                this.element.find('.e-formulabar')[0].disabled = true;
        },

        _alignFormulaBar: function (width) {
            var orgSettings = this.model.scrollSettings;
            width = width || this._responsiveWidth;
            this.element.find('.e-formulabar').width(orgSettings.isResponsive ? width - 2 : width);
            width = parseInt(width);
            var idxWt, iptWt, inputBox;
            idxWt = width / 10;
            iptWt = width - (idxWt + 24); // 24 is for border and padding for the index box and input box
            inputBox = this.element.find(".e-inputbox");
            inputBox.hide();
            inputBox.width(Math.floor(iptWt));
            this.element.find(".e-indexbox").width(Math.floor(idxWt));
            inputBox.show();
        },

        hideFormulaBar: function () {
            $("#" + this._id + "_formulabar").hide();
            if (!this._isInitLoad) {
                this._setSheetWidthHeight(this._getSheetIndex(), { width: this._responsiveWidth, height: this._responsiveHeight });
                for (var i = 1, len = this.model.sheets.length; i < len; i++)
                    this.getSheet(i)._isResized = (i != this.getActiveSheetIndex());
            }
        },

        showFormulaBar: function () {
            if (this.model.allowFormulaBar) {
                $("#" + this._id + "_formulabar").show();
                this._setSheetWidthHeight(this._getSheetIndex(), { width: this._responsiveWidth, height: this._responsiveHeight });
                for (var i = 1, len = this.model.sheets.length; i < len; i++)
                    this.getSheet(i)._isResized = (i != this.getActiveSheetIndex());
                this.updateFormulaBar();
            }
        },

        _getlocaleNumVal: function (value, isCulValue) {
            value = (typeof value !== "object" && Number(value)) ? Number(value) : ((!ej.isNullOrUndefined(value) && typeof value !== "object") ? ej.parseFloat(value + "", this.model.locale) : null);
            if (!ej.isNullOrUndefined(value) && !isNaN(value) && isCulValue) {
                var culNumFmt = ej.preferredCulture(this.model.locale).numberFormat, temp = value.toString();
                if (culNumFmt["."] != "." && temp.indexOf(culNumFmt["."]) < 0)
                    value = temp.replace(".", culNumFmt["."]);
            }
            return value;
        },

        _getEditValOfDateTime: function (rowIdx, colIdx) {
            var type = this.XLEdit.getPropertyValue(rowIdx, colIdx, "type"), cellData = this.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], property: ["value", "value2"] })[0];
            if (!this._isDateTime(cellData.value))
                return cellData.value2;
            if (type == "longdate" || type == "date") {
                if (["12:00:00 AM", "0:00:00"].indexOf(cellData.value.toLocaleTimeString()) == -1)
                    return this.formatting("{0:" + ej.preferredCulture(this.model.locale).calendar.patterns["dT"] + "}", cellData.value, this.model.locale);
                else
                    return this.formatting("{0:" + ej.preferredCulture(this.model.locale).calendar.patterns["d"] + "}", cellData.value, this.model.locale);
            }
            else {
                if ((cellData.value.toLocaleDateString() != "1/1/1990" && ["12:00:00 AM", "0:00:00"].indexOf(cellData.value.toLocaleTimeString()) == -1) || (type == "time" && cellData.value.toLocaleDateString() != "1/1/1990"))
                    return this.formatting("{0:" + ej.preferredCulture(this.model.locale).calendar.patterns["dT"] + "}", cellData.value, this.model.locale);
                else
                    return cellData.value2;
            }
        },

        updateFormulaBar: function () {
            if (!this.model.allowFormulaBar)
                return;
            var val, cellData, text, sheetIdx = this.getActiveSheetIndex(), activecell = this.getSheet(sheetIdx)._activeCell,
                trgt = this._getContent(sheetIdx).find(".e-ss-activeimg")[0], culNumFmt, regExp, arrayFormula, multipleArrayFormula;
            cellData = this.getRangeData({ range: [activecell.rowIndex, activecell.colIndex, activecell.rowIndex, activecell.colIndex], property: ["value", "value2", "isLocked"] })[0];
            if (!ej.isNullOrUndefined(cellData)) {
                val = ej.isNullOrUndefined(cellData.value) ? "" : cellData.value;
                arrayFormula = this.XLEdit.getPropertyValue(activecell.rowIndex, activecell.colIndex, "hasFormulaArray");
                multipleArrayFormula = this.XLEdit.getPropertyValue(activecell.rowIndex, activecell.colIndex, "hasMultipleFormulaArray")
                if (!this.XLEdit._isEdit && (arrayFormula || multipleArrayFormula) || this._formulaArray)
                    val = "{" + val + "}";
            }
            else
                val = "";
            if (this._isDateTime(val))
                val = this._getEditValOfDateTime(activecell.rowIndex, activecell.colIndex);
            if (this.model.locale !== "en-US" && this.isNumber(val)) {
                culNumFmt = ej.preferredCulture(this.model.locale).numberFormat, regExp = new RegExp("\\" + culNumFmt[","] + "\\d{3}"), val = val + "";
                if (culNumFmt[","] == "." && (regExp.test(val) || cellData.value != cellData.value2))
                    val = this._getlocaleNumVal(val, true);
            }
            if (this.XLEdit.getPropertyValue(activecell.rowIndex, activecell.colIndex, "type") === "percentage") {
                val = this.isFormula(cellData.value) ? cellData.value : cellData.value2;
                if (!this.XLEdit._isEdit && (arrayFormula || multipleArrayFormula) || this._formulaArray)
                    val = "{" + val + "}";
            }
            this._getInputBox().val(val);
            if (this.XLEdit.getPropertyValue(activecell.rowIndex, activecell.colIndex, "isReadOnly") || (this.model.allowLockCell && this.getSheet(sheetIdx).isSheetProtected && cellData.isLocked))
                this._getInputBox().attr("readonly", "readonly");
            else
                this._getInputBox().prop("readonly", false);
            if (trgt && (trgt.id.indexOf(this._id + "_picture") > -1 || trgt.id.indexOf(this._id + "_chart") > -1))
                text = trgt.id.replace($(trgt).data("parentID") + "_", "");
            else
                text = this._generateHeaderText(activecell.colIndex + 1) + (activecell.rowIndex + 1);
            this._getIndexBox().html(text);
        },

        _initSelection: function () {
            var range, model = this.model, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx),
                scont = this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"), type = model.selectionSettings.selectionType,
                types = ej.Spreadsheet.SelectionType, actCell = model.selectionSettings.activeCell;
            if (model.allowSelection) {
                if (!this.getFocusTopElem())
                    this._createFocusElement();
                scont.append(this.getFocusTopElem(), this.getFocusRightElem(), this.getFocusBottomElem(), this.getFocusLeftElem());
                if (actCell) {
                    range = this.getRangeIndices(actCell);
                    if (!this.isRange(range) && (range[0] < sheet.rowCount && range[1] < sheet.colCount))
                        sheet._startCell = sheet._endCell = sheet._activeCell = { rowIndex: range[0], colIndex: range[1] };
                }
                if ((!sheet._isImported || sheet._isLoaded) && sheet._selectedCells.length) {
                    this.XLSelection.selectRange(sheet._selectedCells[0], sheet._selectedCells[sheet._selectedCells.length - 1]);
                    this.XLSelection._refreshBorder();
                }
                else {
                    this.XLSelection._processBoundary();
                    if (type === types.Row || sheet._isRowSelected)
                        this.XLSelection.selectRows(sheet._startCell.rowIndex, sheet._endCell.rowIndex);
                    else if (type === types.Column || sheet._isColSelected)
                        this.XLSelection.selectColumns(sheet._startCell.colIndex, sheet._endCell.colIndex);
                    else
                        this.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                }
            }
            if (model.allowAutoFill) {
                if (!this.getAutoFillElem())
                    this._createAutoFillElement();
                this.getAutoFillElem().appendTo(scont);
                this.XLDragFill.positionAutoFillElement();
                if (model.autoFillSettings.showFillOptions && model.allowAutoFill) {
                    this._getAutoFillOptElem().appendTo(scont);
                    this.XLDragFill.hideAutoFillOptions();
                }
            }
            if (model.allowSelection && sheet._isFreezed)
                this.XLFreeze._refreshSelection();
        },

        _updateRibbonTab: function (cellIdx) {
            var actShape, tname, sheetIdx = this.getActiveSheetIndex(), robj = $("#" + this._id + "_Ribbon").data("ejRibbon"), xlRibbon = this.XLRibbon,
                ctabs = this.element.find(".e-ribbon .e-contextual a:visible"), len = ctabs.length,
                ribTabPinEle = robj.element.find("#" + this._id + "_Ribbon_togglebutton");
            if (cellIdx)
                tname = this.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "tableName", sheetIdx);
            if (len) {
                while (len--)
                    robj.hideTab(ctabs[len].text);
            }
            xlRibbon._toggleAnalyzeTab();
            if (ribTabPinEle.is(":visible") && ribTabPinEle.hasClass("e-ribbonpin"))
                this._refreshSheetonResize();
            actShape = this._getContent(sheetIdx).find(".e-ss-activeimg");
            if (actShape.length)
                actShape[0].id.indexOf("chart") > -1 ? this.XLRibbon._chartDesignTabUpdate(actShape) : this.XLRibbon._formatTabUpdate();
            else if (tname)
                xlRibbon._designTabUpdate(this._getTableID(tname), cellIdx);
            else if (this._getContent(sheetIdx).find(".e-ss-activepivot").length) {
                xlRibbon._analyzeTabUpdate();
                this.XLSelection._cleanUp(true);
                this.getActivationPanel().find("#" + this._id + "_PivotTableSchema_" + this._getContent(sheetIdx).find(".e-ss-activepivot")[0].id).show();
                this.showActivationPanel();
            }
        },

        _updateCellType: function () {
            var i, ctype = ej.Spreadsheet.CellType;
            for (i in ctype)
                this._dataContainer.cellType.push(ctype[i]);
        },

        _updateFormulaCollection: function () {
            var i, libraryFunc = this._calcEngine.getLibraryFunctions(), arr = [];
            for (i in libraryFunc.items)
                arr.push({ text: "=" + i, display: i });
            this._formulaCollection = arr;
        },

        _renderScroller: function (sheetIdx, settings, action) {
            this.XLScroll._createScroller(sheetIdx, settings, action);
            this._refreshScrollerEvent(sheetIdx);
        },

        _refreshScrollerEvent: function (sheetIdx) {
            this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").scroll(ej.proxy(function (e) {
                var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), scrollLeft = this._isFrozen(this.getFrozenColumns(sheetIdx)) ? $(e.target).scrollLeft() : sheet._scrollLeft;
                this._getJSSheetHeader(sheetIdx).find(".e-headercontent").scrollLeft(scrollLeft);
                this._getJSSheetRowHeaderContent(sheetIdx).scrollTop($(e.currentTarget).scrollTop());
            }, this));

            this.element.find("#" + this._id + "_" + this.model.sheets[sheetIdx].sheetInfo.value).find(".e-headercontent").scroll(ej.proxy(function (e) {
                var sheetIdx = this.getActiveSheetIndex(), scrollLeft = this._isFrozen(this.getFrozenColumns(sheetIdx)) ? $(e.target).scrollLeft() : this.getSheet(sheetIdx)._scrollLeft;
                this._getContent(sheetIdx).find(".e-content").scrollLeft(scrollLeft);
                this.getSheet(sheetIdx)._scrollLeft = this._getContent(sheetIdx).find(".e-content").scrollLeft();
            }, this));
        },

        _clickHandler: function (e) {
            this.XLEdit._isFEdit = false;
            if (this._hasClass(e.target, "e-ssfilter")) {
                if (this._excelFilter._openedFltr && $(this._excelFilter._openedFltr).is(":visible"))
                    this._excelFilter.closeXFDialog();
                else
                    this.XLFilter._filterClickHandler(e);
            }
            else {
                if (e.target.tagName === "TD" && $(e.target).parents("div")[0].className.indexOf("e-content") > -1 && e.target.className.indexOf('e-rowcell') > -1 && $(e.target).find('.e-chk-image').length < 1) {
                    this._clkCellObj = this._getCellIdx(e.target);
                }
                if (e.target.localName === "svg" || e.target.localName === "path" || e.target.localName === "rect" || e.target.localName === "circle" || (e.target.localName === "div" && e.target.className.indexOf("e-sparkline") > -1) || (e.target.localName === "span" && e.target.className.indexOf("e-databar") > -1) || (e.target.localName === "div" && e.target.className.indexOf("e-cf-databar") > -1) || (e.target.localName === "span" && e.target.className.indexOf("e-iconsetspan") > -1)) {
                    this._clkCellObj = this._getCellIdx($(e.target).closest("td")[0]);
                }
                if (e.target.tagName === "DIV" && e.target.id.indexOf("_Merge") > -1)
                    this._clkCellObj = this._getCellIdx(e.target.parentElement);
                if (this._isExport || !this.model.cellClick)
                    return false;
                var args, target = e.target, sheetIdx = this.getActiveSheetIndex(), colIndex, rowIndex, column;
                if (e.target.tagName === "TD" && $(e.target).parents("div")[0].className.indexOf("e-content") > -1 && e.target.className.indexOf('e-rowcell') > -1 && $(e.target).find('.e-chk-image').length < 1) {
                    colIndex = target.cellIndex, rowIndex = $.inArray($(target).closest("tr").get(0), this.getRows(sheetIdx)[1]);
                    column = this.getSheet(sheetIdx).columns[colIndex];
                    args = {
                        columnName: column.field, value: this.XLEdit.getPropertyValue(rowIndex, colIndex), columnIndex: colIndex, rowIndex: rowIndex, columnObject: column, cell: target, eventArgs: e, event: e,
                        target: e.target
                    };
                    if (this.isFormula(args.value))
                        args.calcValue = this.XLEdit.getPropertyValue(rowIndex, colIndex, "calcValue");
                    if (this._trigger("cellClick", args))
                        return false;
                }
                else if (!ej.isNullOrUndefined($(e.target).parents("div")) && $(e.target).parents("div")[0].className.indexOf("e-content") > -1 && (e.target.className.indexOf('e-rowcell') > -1 || e.target.parentElement.className.indexOf('e-rowcell') > -1) && $(e.target).find('.e-chk-image').length < 1) {
                    target = $(e.target).parents("td").get(0);
                    if (!ej.isNullOrUndefined(target)) {
                        colIndex = target.cellIndex, rowIndex = $.inArray($(target).closest("tr").get(0), this.getRows(sheetIdx)[1]);
                        column = this.getSheet(sheetIdx).columns[colIndex];
                        args = {
                            columnName: column.field, value: this.XLEdit.getPropertyValue(rowIndex, colIndex), columnIndex: colIndex, rowIndex: rowIndex, columnObject: column, cell: target, eventArgs: e, event: e,
                            target: e.target
                        };
                        if (this.isFormula(args.value))
                            args.calcValue = this.XLEdit.getPropertyValue(rowIndex, colIndex, "calcValue");
                        if (this._trigger("cellClick", args))
                            return false;
                    }
                }
            }
        },

        _wireEvents: function (action) {
            var elem = this.element, id = this._id;
            if (this.model.enableTouch && (action == "_on") && parseInt(this._browserDetails.version) > 8)
                this._wireTouchEvts("_on");
            else
                this._wireTouchEvts("_off");
            this[action](elem, "mousedown", ".e-spreadsheetcontentcontainer .e-content, .e-spreadsheetrowheader, .e-spreadsheetheader, .e-spreadsheetactpanel, .e-ribbon, .e-spreadsheetcontentcontainer .e-vscroll, .e-spreadsheetcontentcontainer .e-hscroll", this._mouseDownHandler);
            this[action](elem, "mousemove", this._mouseMoveHandler);
            this[action](elem, "mouseup", this._mouseUpHandler);
            this[action](elem, "keydown", this._keyDownHandler);
            this[action](elem, "keyup", this._keyUpHandler);
            this[action](elem, "click", ".e-spreadsheetcontentcontainer .e-content,.e-spreadsheetrowheader,.e-spreadsheetheader,.e-spreadsheetactpanel, .e-ss-object, .e-ss-sparkline", this._clickHandler);
            this[action](elem, ($.isFunction($.fn.doubletap) && (this.model.enableTouch && (parseInt(this._browserDetails.version) > 8)) && !this._browserDetails.isMSPointerEnabled) ? "doubletap" : "dblclick", ".e-spreadsheetcontentcontainer, .e-spreadsheetheader, .e-spreadsheetrowheader, .e-numericcontainer .e-numericitem, .e-ss-sparkline, .e-cf-databar", this._dblClickHandler);
            this[action](elem, "mouseleave", ".e-spreadsheetrowheader, .e-spreadsheetheader, .e-viewhdrlbl, .e-vheading, .e-viewlinlbl, .e-vgridlines", this._mouseLeaveHandler);
            this[action](elem, "mouseover", ".e-spreadsheetcontentcontainer .e-content .e-rowcell, .e-viewhdrlbl, .e-vheading, .e-viewlinlbl, .e-vgridlines, .e-rowheadercontent, .e-vscrollbar, .e-hscrollbar, .e-spreadsheetfooter, .e-spreadsheetheader", this._mouseHoverHandler);
            if (this.model.allowFormulaBar && this.XLEdit)
                this[action](this._getInputBox(), "input", this.XLEdit._formulaBoxInputChange);
            this[action]($(".e-ss-" + id + ".e-chartcell"), "click", this._chartClickHandler);
            this[action]($('#' + id + '_cellstyles'), "click", this._cellStyleClick);
            this[action]($('#' + id + '_formatastable'), "click", this._formatAsTableClick);
            this[action]($('#' + id + '_nmuseinformula'), "click", ".e-nmuseinformularow", this._useInFormulaClick);
            this[action]($("#" + id + "_AddSheet"), "click", this._spreadsheetPagerCustomBtnHandler);
            if (this.model.scrollSettings.allowScrolling && this.XLScroll)
                this[action](this.element.find(".e-spreadsheet-list"), 'mousewheel DOMMouseScroll', $.proxy(this.XLScroll._spreadMouseWheel, this.XLScroll));
            if (this.model.scrollSettings.isResponsive)
                this[action]($(window), "resize", $.proxy(this._resizeHandler, this));
        },

        _wireTouchEvts: function (action) {
            if (this._browserDetails.name != "msie" || ["11.0", "10.0"].indexOf(this._browserDetails.version) === -1)
                this[action](this.element, this._getBrowserEvt(), ".e-spreadsheetcontentcontainer .e-content, .e-spreadsheetrowheader, .e-spreadsheetheader, .e-spreadsheetactpanel, .e-ribbon, .e-spreadsheetcontentcontainer .e-vscroll, .e-spreadsheetcontentcontainer .e-hscroll", this._mouseDownHandler);
            this[action](this.element, this._getBrowserEvt("move"), this._mouseMoveHandler);
            this[action](this.element, this._getBrowserEvt("end"), this._mouseUpHandler);
            this[action](this.element, "swipeleft swiperight", ".e-spreadsheetfooter", this._swipeHandler);
        },

        _getBrowserEvt: function (type, isMouse) {
            var evt;
            if (type === "move")
                evt = this._browserDetails.isMSPointerEnabled ? (this._browserDetails.pointerEnabled ? "pointermove" : "MSPointerMove") : (isMouse ? "mousemove" : "touchmove");
            else if (type === "end")
                evt = this._browserDetails.isMSPointerEnabled ? (this._browserDetails.pointerEnabled ? "pointerup" : "MSPointerUp") : (isMouse ? "mouseup" : "touchend");
            else
                evt = this._browserDetails.isMSPointerEnabled ? (this._browserDetails.pointerEnabled ? "pointerdown" : "MSPointerDown") : "touchstart";
            return evt;
        },

        _swipeHandler: function (e) {
            var sheetIdx = this.getActiveSheetIndex();
            this.gotoPage(e.type === "swiperight" ? --sheetIdx : ++sheetIdx);
        },

        _isTouchEvent: function (e) {
            if (this.model.enableTouch && (e.type.indexOf("touch") > -1 || e.type.indexOf("pointer") > -1) && e.originalEvent.pointerType !== "mouse" && e.originalEvent.pointerType !== 4)
                return true;
            return false;
        },

        _getOriginalEvt: function (e) {
            if (e.originalEvent.changedTouches)
                return e.originalEvent.changedTouches[0];
            return e.originalEvent;
        },

        _allChartType: function (e) {
            $("#" + this._id + "_allchart").find(".e-chartimg").removeClass("e-chartselect");
            $(e.target).addClass("e-chartselect");
        },

        refreshSpreadsheet: function () {
            if (this._responsiveHeight > 350) {
                this._refreshSheetonResize();
                if (this.model.showRibbon)
                    $("#" + this._id + "_Ribbon").data("ejRibbon")._ribbonResize();
            }
        },
        _databarItemClick: function (args) {
            var CF = $('#' + this._id + '_Ribbon_Home_Styles_ConditionalFormatting');
            if (args.target.id.indexOf("databar") > -1 || args.target.id.indexOf("colorscale") > -1) {
                cfColor = args.target.id.indexOf("databar") > -1 ? args.target.id.split("databar").join("") : args.target.id.split("colorscale").join("");
                this.XLCFormat._cFormat(args.target.id, null, null, cfColor);
                CF.length && CF.data("ejSplitButton")._hidePopup();
            } else if (args.target.classList.contains("e-ss-iconsets-wrapper") || args.target.id == "") {
                var iconSetSpans = (args.target.id == "") ? args.target.parentElement.children : args.target.children, iconList = [], len = iconSetSpans.length;
                if (len != 3) {
                    return;
                }
                for (var i = 0; i < len; i++) {
                    iconList.push(iconSetSpans[i].classList[0].split('e-ss-').join(""));
                }
                this.XLCFormat._cFormat("iconset", null, null, iconList.toString());
                CF.length && CF.data("ejSplitButton")._hidePopup();
                $("#" + this._id + "_CFormat").hide();
            }
        },
        refresh: function () {
            this._isRefresh = true;
            this._destroy();
            for (var i = 1; i <= this.model.sheetCount; i++)
                this.model.sheets[i]._isLoaded = false;
            this.addClass(this.element[0], this._rootCSS + ' e-js');
            this._init();
            this._isRefresh = false;
        },

        _resizeHandler: function () {
            var resizeTimer, proxy = this;
            if (proxy.element.is(":hidden"))
                return;
            if (resizeTimer) {
                clearTimeout(resizeTimer);
            }
            resizeTimer = setTimeout(function () {
                proxy._refreshSheetonResize();
                for (var i = 1, len = proxy.model.sheets.length; i < len; i++)
                    proxy.getSheet(i)._isResized = (i != proxy.getActiveSheetIndex());
            }, 100);
        },

        _refreshSheetonResize: function () {
            var contentrows, rowhdrrows, sheetIdx = this.getActiveSheetIndex(), settings, popupElem = $('.e-ddl-popup:visible[id^=' + this._id + ']'), inputBox = $("#" + this._id + "_inputbox_suggestion"), elemId, sElem,
                ePanel, sRnmVal, isPhoneMode = this._phoneMode, sheet, cpElem = $('.e-ss-colorpicker:visible[id^=' + this._id + ']'), splitBtnElem = $('.e-menu:visible[id^=' + this._id + ']');
            this._resizeColl[sheetIdx - 1] = this._isResized = true;
            this.element.find(".e-inputbox").hide();
            if (!ej.isNullOrUndefined(this._getFormulaSuggElem())) {
                this._isFormulaSuggestion = false;
                this._getFormulaSuggElem().hide();
            }
            if (!ej.isNullOrUndefined(inputBox[0]) && inputBox[0].style.display == "block") {
                this._isFormulaSuggestion = false;
                inputBox.hide();
            }
            this.model.enablePivotTable && this.hideActivationPanel();
            this._phoneMode = this.model.scrollSettings.isResponsive && document.documentElement.clientWidth < 420;
            this._tabMode = this.model.scrollSettings.isResponsive && (document.documentElement.clientWidth > 419 && document.documentElement.clientWidth < 617);
            settings = { width: this._responsiveWidth, height: this._responsiveHeight };
            (this.model.showRibbon && (this._tabMode || this._responsiveHeight < 280)) && $("#" + this._id + "_Ribbon").ejRibbon("collapse");
            sheet = this.getSheet(sheetIdx);
            sheet._virtualRowIdx = [];
            this._refreshSheetWithScreen(sheetIdx);
            this._updateResponsiveSettings();
            this._initViewPort(sheetIdx);
            this.refreshContent(sheetIdx);
            settings.width = this._responsiveWidth;
            settings.height = this._responsiveHeight;
            this._setSheetWidthHeight(sheetIdx, settings, null, "refresh");
            contentrows = this._getContTBody(sheetIdx).find("tr");
            rowhdrrows = this._getRowHdrTBody(sheetIdx).find("tr");
            this.setRows([rowhdrrows, contentrows], sheetIdx);
            this._dlgWidth = (this._phoneMode || this._tabMode || this._responsiveWidth < 350) ? this._responsiveWidth - 2 : this._responsiveWidth / 1.5;
            this._dlgHeight = (this._phoneMode || this._tabMode || this._responsiveHeight < 350) ? this._responsiveHeight - 2 : this._responsiveHeight / 1.2;
            if (this.model._isActPanelVisible)
                this._refreshActivationPanel();
            this.element.find(".e-inputbox").show();
            if (this.model.showPager) {
                if (this._isSheetRename) {
                    ePanel = this.getPager().find("#" + this._id + "_Sheet_RenamePanel");
                    sRnmVal = ePanel.val();
                    ePanel.remove();
                }
                this._refreshSpreadSheetPager(true);
                this._isSheetRename && this._renameSheet(sRnmVal);
            }
            if (this._phoneMode) {
                $("#" + this._id + "_CFormat").css("width", "");
                $("#" + this._id + "_Ribbon_Border").css("width", "");
                $('#' + this._id + '_indexbox').css({ 'text-overflow': 'ellipsis', 'overflow': 'hidden' });
            }
            if (this.model.showRibbon) {
                this.XLRibbon._refreshBackstageHeight();
                if (this._phoneMode && !isPhoneMode)
                    this.XLRibbon._hideRibbonElem();
            }
            //pop-up hide
            if (popupElem.length) {
                elemId = popupElem[0].id.split("_", 5).join("_");
                if (elemId.length) {
                    sElem = $("#" + elemId);
                    if (sElem.hasClass("e-dropdownlist"))
                        sElem.ejDropDownList("hidePopup");
                }
            }
            if (splitBtnElem.length) {
                elemId = splitBtnElem[0].id.split("_", 5).join("_");
                if (elemId.length) {
                    sElem = $("#" + elemId);
                    if (sElem.hasClass("e-split"))
                        sElem.hide();
                }
            }
            if (cpElem.length) {
                elemId = cpElem[0].id.split("_", 5).join("_");
                if (elemId.length) {
                    sElem = $("#" + elemId);
                    if (sElem.hasClass("e-colorpicker"))
                        sElem.ejColorPicker("hide");
                }
            }
            this._isResized = false;
            if (this._isRibbonDestroyed) {
                var rbnObj = $("#" + this._id + "_Ribbon").ejRibbon("instance");
                if (this.model.ribbonSettings.enableOnDemand)
                    this.XLRibbon._createTabControls(rbnObj.getTabText(rbnObj.model.selectedItemIndex));
                else if (this.model.showRibbon) {
                    var tabColl = [this._getLocStr("HOME"), this._getLocStr("DATATAB"), this._getLocStr("PAGELAYOUT"), this._getLocStr("OTHERS")];
                    for (var c = 0, cLen = tabColl.length; c < cLen; c++)
                        this.XLRibbon._updateRibCustomCss(tabColl[c]);
                }
                this._on($(".e-ss-" + this._id + ".e-chartcell"), "click", this._chartClickHandler);
                this._on($('#' + this._id + '_cellstyles'), "click", this._cellStyleClick);
                this._on($('#' + this._id + '_formatastable'), "click", this._formatAsTableClick);
            }
            this._isRibbonDestroyed = false;
            this._trigger('refresh');
        },

        _chartClickHandler: function (e) {
            var trgt = $(e.target), prop = $.extend(true, {}, $(e.target).data());
            trgt.parents().eq(1).hide();
            this.XLChart.createChart(null, prop);
        },

        _useInFormulaClick: function (e) {  // defined names click
            var i, formula, eql = "=", comma = ",", oBrkt = "(", isFrmla = false, txt = e.target.textContent, sheetIdx = this.getActiveSheetIndex(),
                actCell = this.getActiveCell(sheetIdx), editElem = this.XLEdit._editElem, text = editElem.text(), hasMergeIdx;
            hasMergeIdx = this.XLEdit.getPropertyValue(actCell.rowIndex, actCell.colIndex, "mergeIdx");
            this._intrnlReq = true;
            this.XLEdit.editCell(hasMergeIdx ? hasMergeIdx.rowIndex : actCell.rowIndex, hasMergeIdx ? hasMergeIdx.colIndex : actCell.colIndex, true);
            this._intrnlReq = false;
            if (text === eql)
                editElem.text(eql + txt);
            else {
                formula = this.XLDragFill._parseFormula(text)
                i = formula.length;
                if (i) {
                    while (i--) {
                        if (formula[i] === comma || formula[i] === oBrkt) {
                            formula.splice(i + 1, 0, txt);
                            isFrmla = true;
                            break;
                        }
                        else if (this._isCellReference(formula[i]) || this.isNumber(formula[i])) {
                            formula[i] = txt;
                            isFrmla = true;
                            break;
                        }
                    }
                    txt = isFrmla ? formula.join("") : txt;
                }
                editElem.text(eql + txt);
            }
            editElem.focusEnd();
            $("#" + this._id + "_nmuseinformula").hide();
        },

        _formatAsTableClick: function (e) {
            var tname, fatName, target = e.target,
                sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), scells = sheet._selectedCells;
            if (scells.length === 0)
                return;
            if (target.parentNode.className === 'e-formatastablecell') {
                tname = this.XLEdit.getPropertyValue(scells[0].rowIndex, scells[0].colIndex, "tableName", sheetIdx);
                this._showDialog(this._id + "_Ribbon_Insert_Tables_Table");
                if (tname) {
                    this.XLFormat._formatAsTableStyle = this._FATStyles[target.parentNode.id.replace(/ /g, '')];
                    this.XLFormat._createTable(this._getTableID(tname), this.XLFormat._formatAsTableStyle);
                }
                else if (scells.length > 1) {
                    fatName = $("#" + this._id + '_fatname');
                    $('#' + this._id + '_fatnamedlg').ejDialog("open");
                    $("#" + this._id + "_fatheader").data("ejCheckBox").option("checked", false);
                    fatName.val('Table' + (this._tableCnt)).focus().setInputPos(fatName.val().length);
                    if (this.model.allowCellFormatting)
                        this.XLFormat._formatAsTableStyle = this._FATStyles[target.parentNode.id.replace(/ /g, '')];
                }
                else
                    this._showAlertDlg("Alert", "FormatAsTableAlert", null, 445);
            }
            if (target.className.indexOf("back") > -1 || target.parentNode.className === 'e-formatastablecell')
                $('#' + this._id + '_Ribbon_Home_Styles_FormatAsTable').length && $('#' + this._id + '_Ribbon_Home_Styles_FormatAsTable').data("ejSplitButton")._hidePopup();
        },

        _borderSelectionClick: function (e) {
            var hexcode, args = { ID: e.target.parentNode.id }, alphRange, target = e.target, sheetIdx = this.getActiveSheetIndex(), selCells = this.getSheet(sheetIdx)._selectedCells;
            if (selCells.length === 0)
                return;
            if ((this._borderStyles.indexOf(args.ID) > -1))
                this.XLRibbon._updateBordeStyle(args);
            hexcode = this._borderColor || '#000000';
            alphRange = this._getAlphaRange(sheetIdx, selCells[0].rowIndex, selCells[0].colIndex, selCells[selCells.length - 1].rowIndex, selCells[selCells.length - 1].colIndex);
            if (this.model.allowSelection && (this.XLSelection._isOutsideBordering || this.XLSelection._isGridBordering))
                !(this._borderStyles.indexOf(args.ID) > -1) && (args.ID.indexOf("bordercolor") < 0) && (this.XLSelection._isOutsideBordering = this.XLSelection._isGridBordering = false);
            else
                this.setBorder({ "type": args.ID, "color": hexcode, "style": this._borderStyle }, alphRange);
            if (target.className.indexOf("back") > -1 || target.parentNode.className === 'e-bordercell')
                $('#' + this._id + '_bordercontainer').hide();
        },

        _getTableID: function (classname, name) {
            var i, tmgr = this.getSheet(this.getActiveSheetIndex()).tableManager;
            if (name) {
                for (i in tmgr)
                    if (name === tmgr[i].name)
                        return Number(i);
            }
            else {
                for (i in tmgr) {
                    if (classname.indexOf('e-table' + i) > -1)
                        return Number(i);
                }
            }
        },

        _cellStyleClick: function (e) {
            var range = this.model.sheets[this.getActiveSheetIndex()].selectedRange, cname = e.target.className, innerHtml = e.target.innerHTML, formatstr = this.XLFormat.getFormatClass(cname), container = this._dataContainer;
            var args = { range: range, sheetIdx: this.getActiveSheetIndex(), reqType: "cell-styles", type: "actionBegin", action: e.target.innerHTML };
            if (this._trigActionBegin(args))
                return;
            range = args.range;
            var details = { range: range, sheetIndex: this.getActiveSheetIndex(), reqType: "cell-styles", opr: e.target.innerHTML, beforeFormat: this.getRangeData({ range: range, property: ["format", "formats"] }) };
            if (cname.indexOf('e-cellstylecell') > -1 && ej.isNullOrUndefined(container.customCellStyle[innerHtml]))
                this.XLFormat.updateUniqueFormat(formatstr, range, e.target.innerHTML);
            if (cname.indexOf('e-cellstylecell') > -1 && !ej.isNullOrUndefined(container.customCellStyle[innerHtml])) {
                var formatObj = { style: container.customCellStyle[innerHtml].style }
                $.extend(formatObj, container.customCellStyle[innerHtml].NumFormat)
                this.XLFormat.format(formatObj);
            }
            if (cname.indexOf('e-cellstylecell') > -1 && innerHtml === this._getLocStr('NewCellStyle'))
                this._showDialog(this._id + "_CustomCellDialog");
            if (cname.indexOf('e-cellstylecell') > -1 || cname.indexOf("back") > -1)
                $('#' + this._id + '_Ribbon_Home_Styles_CellStyles').length && $('#' + this._id + '_Ribbon_Home_Styles_CellStyles').data("ejSplitButton")._hidePopup();
            details.afterFormat = this.getRangeData({ range: range, property: ["format", "formats"] });
            if (!this.isUndoRedo) {
                this._completeAction(details);
                this._trigActionComplete(details);
            }
            if (this.model.showRibbon)
                this.XLRibbon._updateRibbonIcons();
        },

        _mouseHoverHandler: function (e) {
            var trgt = e.target, cellIdx;
            if (e.target.localName == "svg" || e.target.localName === "rect" || e.target.localName === "path")
                return;
            if (this._hasClass(e.target, "e-viewhdrlbl") || this._hasClass(e.target, "e-vheading"))
                this.element.find(".e-vheading .e-chk-act, .e-vheading .e-chk-inact").addClass("e-chkhover");
            else if (this._hasClass(e.target, "e-viewlinlbl") || this._hasClass(e.target, "e-vgridlines"))
                this.element.find(".e-vgridlines .e-chk-act, .e-vgridlines .e-chk-inact").addClass("e-chkhover")
            else if (this.model.allowDragAndDrop && this.XLDragDrop._allowDragAndDrop && ($(e.target).parents('.e-vscrollbar').length > 0 || e.target.className.indexOf('e-rowheader') > -1 || $(e.target).parents('.e-spreadsheetfooter').length > 0 ||
                e.target.className.indexOf('e-headercell') > -1 || e.target.className.indexOf('e-spreadsheetfooter') > -1 || $(e.target).parents('.e-hscrollbar').length > 0 || (this.getSheet()._isFreezed && e.target.className.indexOf('e-rowcell') > -1)))
                this.XLDragDrop._scrollHover(e);
            else if (this._hasClass(e.target, "e-rowcell")) {
                cellIdx = this._getCellIdx(trgt);
                this._trigger("cellHover", { target: trgt, event: e, cellIndex: cellIdx });
            }
        },

        _mouseDownHandler: function (e) {
            var x, y, lmt, tid, obj, cell, elem, cname, tname, trgtCell, isNavigate = true, imgNavigate = true, sparkline = "e-ss-sparkline", str = "e-ss-object", pvt = "e-ss-pivot",
                trgt = e.target, $trgt = $(trgt), sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx),
                robj = $('#' + this._id + '_Ribbon').data('ejRibbon');
            e.currentTarget.className.indexOf("e-ribbon") < 0 && this.element.find(".e-bordercontainer").hide();
            if (this.element.find("#" + this._id + "ddl_popup").has(trgt).length)
                return false;
            this._isTouchEvt = this._isTouchEvent(e);
            if (this._isTouchEvt) {
                this._touchArgs = e;
                this._startXY = this._setXY(e, navigator.userAgent.indexOf("WebKit") > -1);
                if (this.model.allowDragAndDrop)
                    this.XLDragDrop._dragtouch(this._startXY[0], this._startXY[1]);
                if (!this._hasClass(trgt, "e-autofill") && this.model.allowAutoFill) {
                    lmt = (this._hasClass(trgt, "e-headercell")) ? 10 : 20;
                    x = this._setXY(e), y = x[1], x = x[0];
                    x = Math.abs(x - this.getAutoFillElem().offset().left);
                    y = Math.abs(y - this.getAutoFillElem().offset().top);
                    if (x <= lmt && x >= 0 && y <= lmt && y >= 0) {
                        $trgt = this.getAutoFillElem();
                        trgt = e.target = $trgt[0];
                    }
                }
            }
            if ($trgt.parents(".e-ribbon").length || $trgt.parents(".e-vscroll").length || $trgt.parents(".e-hscroll").length) {
                if (this._excelFilter) {
                    this.XLFilter._isSearchEdit = false;
                    this._excelFilter.closeXFDialog();
                }
            }
            else if (this._hasClass(trgt, "e-ssddl"))
                this._ddlopen(e);
            else {
                e.target = this._changeTargetWithOffset(e);
                if (this.model.allowCharts && sheet._isChartBorderDrawn)
                    this.XLChart._clearChartRange(this._arrayAsString(this._chartBorder));
                if (this.model.allowSparkline && sheet._isSparklineBorder)
                    this.XLSparkline._clearSparkline(this._arrayAsString(this._chartBorder))

                if ((this.model.pictureSettings.allowPictures || this.model.allowCharts) && ($trgt.hasClass(str) || $($trgt).parents("." + str).length)) {
                    if (!$trgt.hasClass(str))
                        trgt = e.target = $($trgt).parents("." + str)[0];
                    this.XLShape._shapeMouseDown(e);
                }
                else if ((this.model.allowSparkline) && ($trgt.hasClass(sparkline) || $($trgt).parents("." + sparkline).length)) {
                    if (!$trgt.hasClass(sparkline))
                        imgNavigate = false;
                    if (trgt.localName == "svg" || trgt.localName == "rect" || trgt.localName == "path")
                        this.sparkDiv = $($trgt).parents("." + sparkline)[0] || $trgt[0];
                    var sparkRc = this._getCellIdx($(this.sparkDiv).closest("td")[0]), sparklineObj, range, sparklineProp;
                    // click sparkline
                    if (this.model.showRibbon && this.model.allowSparkline && (this.sparkDiv.id.indexOf("Line") > -1 || this.sparkDiv.id.indexOf("Area") > -1 || this.sparkDiv.id.indexOf("Pie") > -1 || this.sparkDiv.id.indexOf("Column") > -1 || this.sparkDiv.id.indexOf("Winloss") > -1))
                        this.XLSparkline._sparklineDesignTabUpdate(this.sparkDiv.id);
                    else if (this.model.showRibbon && this.model.allowSparkline && (robj.model.selectedItemIndex === this.XLRibbon._getTabIndex("sparklinedesign") || robj.isVisible(this._getLocStr("SPARKLINEDESIGN"))))
                        this.XLSparkline._toggleSparklineDesignTab();
                    trgt = e.target = this.sparkDiv;
                    //Prevent the Drag and Drop support
                    //this.XLShape._shapeMouseDown(e);
                    this.performSelection({ rowIndex: sparkRc.rowIndex, colIndex: sparkRc.colIndex }, { rowIndex: sparkRc.rowIndex, colIndex: sparkRc.colIndex });
                    this.XLShape._shapeType = "sparkline";
                    sparkline = this.getSheet(this.getActiveSheetIndex()).shapeMngr.sparkline;
                    sparklineObj = this.getObjectKeys(sparkline);
                    for (var i = 0, len = sparklineObj.length; i < len; i++) {
                        if (sparklineObj[i] == trgt.id) {
                            sparklineProp = sparkline[sparklineObj[i]];
                            range = this.getRangeIndices(sparklineProp.DataRange);
                            this.XLSelection._focusBorder({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, ["e-bcborderright", "e-bcborderbottom"]);
                            this.getSheet(this.getActiveSheetIndex())._isSparklineBorder = true;
                        }
                    }
                } else {
                    imgNavigate = false;
                    if (!this.XLShape._shapeROStart || !this.XLShape._shapeRSStart)
                        this._getContent(sheetIdx).find(".e-ss-activeimg").removeClass("e-ss-activeimg e-ss-imgcresize e-ss-imgrresize");
                }
                if ($trgt.hasClass('e-cf-databar') || $trgt.hasClass('e-databar') || $trgt.hasClass('e-databar-value') || $trgt.hasClass('e-iconsetspan')) {
                    imgNavigate = false;
                    var databar = this._getCellIdx($($trgt).closest("td")[0]);
                    trgt = $($trgt).closest("td")[0]; e.target = $trgt[0];
                    this.performSelection({ rowIndex: databar.rowIndex, colIndex: databar.colIndex }, { rowIndex: databar.rowIndex, colIndex: databar.colIndex });
                }
                if (trgt.nodeName === "TD" || trgt.nodeName === "TH")
                    this.XLRibbon._isPanelVisible = false;
                if (this.model.enablePivotTable) {
                    if (this._isPvtNameEdit) {
                        this._isPvtNameEdit = false;
                        this.XLPivot._changePvtName();
                    }
                    if ($trgt.hasClass(pvt) || $trgt.parents("." + pvt).length) {
                        if (!$trgt.hasClass(pvt))
                            trgt = e.target = $trgt.parents("." + pvt)[0];
                        this.XLPivot._pivotMouseDown(e);
                    }
                    else if (!($trgt.parents(".e-ss-pivotfield").length || $trgt.hasClass("e-ss-pivotfield")) && !($trgt.hasClass("e-vhandle") || $trgt.hasClass("e-hhandle")) && $trgt.css("cursor") !== "col-resize") {
                        this.hideActivationPanel();
                        this.getSheetElement(sheetIdx).find(".e-ss-activepivot").removeClass("e-ss-activepivot");
                    }
                }
                cname = trgt.className;
                if (trgt.id.indexOf("picture") === -1) {
                    if (this.model.showRibbon && (robj.model.selectedItemIndex === this.XLRibbon._getTabIndex("format") || robj.isVisible(this._getLocStr("FORMAT"))))
                        this.XLRibbon._toggleFormatTab();
                }
                //Click the Chart
                if (this.model.showRibbon && trgt.id.indexOf("chart") > -1)
                    this.XLRibbon._chartDesignTabUpdate($(trgt));
                else if (this.model.showRibbon && (robj.model.selectedItemIndex === this.XLRibbon._getTabIndex("cdesign") || robj.isVisible(this._getLocStr("CHARTDESIGN"))))
                    this.XLRibbon._toggleChartDesignTab();
                //Click the Sparkline
                if (this.model.showRibbon && this.model.allowSparkline && (trgt.id.indexOf("Line") > -1 || trgt.id.indexOf("Area") > -1 || trgt.id.indexOf("Pie") > -1 || trgt.id.indexOf("Column") > -1 || trgt.id.indexOf("Winloss") > -1))
                    this.XLSparkline._sparklineDesignTabUpdate(this.sparkDiv.id);
                else if (this.model.showRibbon && this.model.allowSparkline && (robj.model.selectedItemIndex === this.XLRibbon._getTabIndex("sparklinedesign") || robj.isVisible(this._getLocStr("SPARKLINEDESIGN"))))
                    this.XLSparkline._toggleSparklineDesignTab();
                if (this.XLEdit._isEdit && trgt.nodeName != "TD" && !(this._hasClass(trgt, "e-autofill")))
                    return;
                if (this.model.allowDragAndDrop && this.XLDragDrop._isDragAndDropStart && (cname !== "e-autofill" && cname.indexOf("e-filterspan") < 0))
                    this.XLDragDrop._dMouseDown(e);
                if (this.model.allowResizing && !this.XLEdit._isEdit) {
                    if ($(trgt).hasClass("e-headercelldiv") || $(trgt).hasClass("e-headercell"))
                        this.XLResize._headerMouseDown(e);
                    else if ($(trgt).hasClass("e-rowheader"))
                        this.XLResize._rowMouseDown(e);
                    else if ($(trgt).hasClass("e-spreadsheetactpanel") || $(trgt).parents(".e-spreadsheetactpanel").length)
                        this.XLResize._apMouseDown(e);
                }
                if ($(trgt).parents("div.e-spreadsheetactpanel").length > 0)
                    return;
                if (this.model.allowEditing && this.XLEdit._isEdit && this.XLEdit._editElem.html() === "=") {
                    this._isFormulaSuggestion = false;
                    this.XLEdit._isFormulaEdit = true;
                }
                isNavigate = this.XLEdit._isEdit ? (this._isFormulaSuggestion || !this.XLEdit._isFormulaEdit) && this.XLEdit.saveCell() : true;
                if (!isNavigate && !this.XLEdit._isFormulaEdit)
                    return false;
                //Comment
                if (this.model.allowComments && !$trgt.hasClass("e-pager") && this.getSheetElement(sheetIdx).find(".e-commentcell").length)
                    this.XLComment._commentMouseDownHandler(e);
                if ((trgt.tagName === "SPAN" || trgt.tagName === "A") && (!ej.isNullOrUndefined($trgt.parent("td")[0]))) {
                    cell = $trgt.parent("td")[0];
                    obj = this._getCellIdx(cell);
                }
                else if (trgt.tagName === "TD" && this._hasClass(trgt, "e-rowcell")) {
                    cell = trgt;
                    obj = this._getCellIdx(cell);
                    if (this.model.showRibbon)
                        this.XLRibbon.updateRibbonIcons();
                }
                else
                    obj = this.getActiveCell();
                if (trgt.tagName === "A") {
                    sheet._activeCell = obj;
                    if (this.model.allowSelection) {
                        this.XLSelection.selectRange(obj, obj);
                        this.XLDragFill && this.XLDragFill.positionAutoFillElement();
                    }
                    if (e.which !== 3)
                        this._hlClick(this.XLEdit.getPropertyValue(obj.rowIndex, obj.colIndex, "hyperlink", sheetIdx));
                }
                else if ((e.button !== 2 || e.which !== 3) || this.getSheetElement(sheetIdx).find(".e-selected, .e-colselected .e-headercelldiv, .e-rowselected").index(trgt) === -1) { // for context menu behavior                          
                    if (this.model.allowSelection && !imgNavigate) {
                        if (ej.isNullOrUndefined(this.XLDragDrop) || !this.XLDragDrop._allowDragAndDrop) {
                            if (!(this.XLResize && this.XLResize._resizeStart) && !$trgt.hasClass("e-comment-txtarea") && !($trgt.hasClass(pvt) || $($trgt).parents("." + pvt).length))
                                this.XLSelection._selectionMouseDownHandler(e);
                        }
                    }
                }
                this._filterClose(e.target);
                this._undoInputobj = {};
                if (trgt.tagName === "TD" && !ej.isNullOrUndefined($(trgt).parents("div")[0]) && $(trgt).parents("div")[0].className === "e-content")
                    this.displayActivationPanel(this.XLEdit.getPropertyValue(obj.rowIndex, obj.colIndex, "range"));
                if ((trgt.tagName === "TD") && trgt.className.indexOf("e-rowheader") < 0) {
                    if (!ej.isNullOrUndefined(this._ddlCell)) {
                        this.element.find("#" + this._id + "ddl").ejDropDownList("hidePopup");
                        this.element.find("#" + this._id + "ddlspan").remove();
                        this._ddlCell = null;
                    }
                }
                if (trgt.tagName === "TD" && this._hasClass(trgt, "e-rowcell")) {
                    trgtCell = this._getCellIdx(trgt);
                    if (!ej.isNullOrUndefined(this.XLEdit.getPropertyValue(trgtCell.rowIndex, trgtCell.colIndex, "rule", sheetIdx)))
                        this._setddlCell(e);
                }
                //Click the Sparkline
                if (this.model.showRibbon && this.model.allowSparkline && trgt.id.indexOf("sparkline") > -1)
                    this.XLSparkline._sparklineDesignTabUpdate(this.sparkDiv.id);
                //Table Rename
                if (this._isTableRename) {
                    this.XLFormat._renameTable(this._tableClassName);
                    this._isTableRename = false;
                }
                //Sheet Rename
                if (this._isSheetRename)
                    this._updateSheetNames(null, false);
                this.element.find("#" + this._id + "ddl").ejDropDownList("hidePopup");
                if (this._hasClass(trgt, "e-rowcell"))
                    tname = this.XLEdit.getPropertyValue(obj.rowIndex, obj.colIndex, "tableName", sheetIdx);
                if (tname) {
                    tid = this._getTableID(tname);
                    if (this.isNumber(tid))
                        this.XLRibbon._designTabUpdate(tid, obj);
                }
                else if (this.model.showRibbon && (robj.model.selectedItemIndex === this.XLRibbon._getTabIndex("design") || robj.isVisible(this._getLocStr("Design"))))
                    this.XLRibbon._toggleDesignTab(obj);
                if (this.model.allowEditing) {
                    cell = sheet._activeCell;
                    if (this.XLEdit._isEdit && e.target.id !== this._id + "_inputbox") {
                        elem = ($(e.target).hasClass("e-ss-input") || !this.XLEdit._isFBarFocused) ? this.element.find("#" + this._id + "_Edit") : this._getInputBox();
                        if (elem) {
                            if (e.target.id !== elem[0].id)
                                elem.focus().setInputPos(elem[0].selectionStart, elem[0].selectionEnd);
                            if (elem.hasClass("e-ss-input"))
                                this.XLEdit._isFBarFocused = false;
                        }
                    }
                    if (!(this.model.allowComments && this.XLComment._isCommentEdit) && !this._isSheetRename && e.target.id === this._id + "_inputbox") {
                        if (e.target.readOnly)
                            this._setSheetFocus();
                        else {
                            if (!this.XLEdit._isEdit)
                                this.XLEdit.editCell(cell.rowIndex, cell.colIndex, true);
                            this._getInputBox().focus();
                            this.XLEdit._isFBarFocused = true;
                        }
                    }
                }
            }
        },

        // Dropdownlist list validation
        _renderDDownList: function () {
            if ($("#" + this._id + "ddl").length < 1)
                this.element.append(ej.buildTag("input.e-" + this._id + "-ddl", "", "", { id: this._id + "ddl", style: "display:none" }));
            $("#" + this._id + "ddl").ejDropDownList({
                fields: { id: "Types", text: "text", value: "text" },
                beforePopupShown: $.proxy(this._drppopupshow, this),
                cssClass: "e-" + this._id + "-ddl e-ss-ddlwrap",
                width: 0.1,
                height: 0.1,
                change: $.proxy(this._changeddl, this)
            });
            $(document.body).append($('#' + this._id + 'ddl_popup_wrapper'));
        },

        _setddlCell: function (e) {
            var i, elepos, len, range, value = [], value2 = [], td, listdatsrc = [], check, customvalue, cell, trgt, sheetIdx = this.getActiveSheetIndex(), pos, spanElem, calcNamedRanges = this.getCalcEngine().getNamedRanges(), isNamedRange;
            if (!ej.isNullOrUndefined(e) && e.type === "mousedown") {
                td = $(e.target).parents('td');
                if (e.target.classList[0].indexOf('databar') > -1 || e.target.classList.contains('e-iconsetspan'))
                    e.target = td && td[0];
                cell = this._getCellIdx(e.target);
                trgt = e.currentTarget;
            }
            else {
                cell = this.getActiveCell();
                trgt = $("#" + this._id + "GroupPanel").find("div.e-content")[0];
            }
            customvalue = this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "rule", sheetIdx);
            if (!customvalue)
                return;
            check = customvalue.customVal.split("_");
            if (customvalue && (check.indexOf("list") > 0)) {
                this._ddlCell = cell;
                var dataSrc = customvalue.customVal.split("_list")[0], values = [], splitStr;
                if (dataSrc.startsWith("=") && dataSrc.indexOf(",") < 0) {
                    value = $.trim(dataSrc.replace("=", ""));
                    isNamedRange = calcNamedRanges.getItem(value.toUpperCase());
                    if (isNamedRange)
                        value = isNamedRange;
                    if (value.indexOf("!") > -1) {
                        splitStr = value.split("!");
                        sheetIdx = isNamedRange ? this._getSheetIdxFromSheetValue(splitStr[0]) : this._getSheetIndexByName(splitStr[0]);
                        value = splitStr[1];
                    }
                    value.indexOf("$") > -1 && (value = value.split("$").join(""));
                    value.indexOf(":") < 0 && (value = value + ":" + value);
                    range = this.getRangeIndices(value);
                    var cells = this._getMultiRangeCells(range);
                    var contValue = this.getRangeData({ range: [cells[0].rowIndex, cells[0].colIndex, cells[cells.length - 1].rowIndex, cells[cells.length - 1].colIndex], property: ["value", "value2"], sheetIdx: sheetIdx });
                    for (i = 0, len = contValue.length; i < len; i++) {
                        if (!ej.isNullOrUndefined(contValue[i].value) && !ej.isNullOrUndefined(contValue[i].value2)) {
                            values.push(contValue[i].value);
                            value2.push(contValue[i].value2);
                        }
                        else {
                            values.push("");
                            value2.push("");
                        }
                    }
                    if (!values.length) {
                        values.push(dataSrc);
                        value2.push(dataSrc);
                    }
                }
                else if (dataSrc.indexOf(",") > -1)
                    value2 = values = dataSrc.split(",");
                else {
                    values = [];
                    values.push(dataSrc);
                    value2.push(dataSrc);
                }
                for (i = 0, len = values.length; i < len; i++)
                    listdatsrc[i] = { id: i + 1, text: value2[i], value: values[i] };
                cell = this.getCell(cell.rowIndex, cell.colIndex);
                if (cell) {
                    elepos = { "top": cell[0].offsetTop, "left": cell[0].offsetLeft };
                    trgt.insertAdjacentHTML("beforeEnd", "<span id='" + this._id + "ddlspan' class='e-icon e-ssddl e-spanddl e-ddlspan' role='button'></span>");
                    spanElem = $("#" + this._id + "ddlspan");
                    pos = cell.height() - (spanElem.height() + 3);
                    spanElem.css({ top: elepos.top + pos, left: elepos.left + cell.width() + 3 });
                    $("#" + this._id + "ddl").ejDropDownList("option", "dataSource", listdatsrc);
                }
            }
        },

        _drppopupshow: function () {
            if (this._ddlCell) {
                var cell = this.getCell(this._ddlCell.rowIndex, this._ddlCell.colIndex);
                $("#" + this._id + "ddl_popup").css({ "width": this.getActiveCellElem().width() + 20, "font-size": "11", top: cell.position().top, left: cell.position().left });
            }
        },

        _ddlPosition: function () {
            if (this._ddlCell) {
                var spanElem, cell = this.getCell(this._ddlCell.rowIndex, this._ddlCell.colIndex), elepos = { "top": cell[0].offsetTop, "left": cell[0].offsetLeft };
                spanElem = $("#" + this._id + "ddlspan");
                spanElem.css({ top: elepos.top + cell.height() - (spanElem.height() + 3), left: elepos.left + cell.width() + 3 });
            }
        },

        _changeddl: function (args) {
            if (this._ddlCell && this.model.allowEditing) {
                var actCell = this.getActiveCell(), selVal = args.model.dataSource[args.itemId].value, pValue = this.XLEdit.getPropertyValue(actCell.rowIndex, actCell.colIndex);
                var listArgs = { cellIndex: actCell, value: selVal, prevValue: pValue, sheetIdx: this.getActiveSheetIndex(), reqType: "list-value" };
                if (this._trigger("cellSave", listArgs))
                    return;
                this.XLEdit._updateCellValue(listArgs.cellIndex, listArgs.value);
                this.getActiveCellElem().hasClass("e-hlcell") && this.XLValidate.highlightInvalidData();
                this._trigrDdlActnCmplt(listArgs.value, pValue, args.itemId);
                if (this.model.allowFormulaBar)
                    this.updateFormulaBar();
            }
        },

        _trigrDdlActnCmplt: function (selVal, pValue, ddlSIdx) {
            if (this.model.actionComplete === null)
                return;
            var refrRange, range, actCell = this.getActiveCell(), sheetIdx = this.getActiveSheetIndex(), valRule, args, dtSrcRef, addr, rangeData, i, rangeDataLen;
            valRule = this.XLEdit.getPropertyValue(actCell.rowIndex, actCell.colIndex, "rule", sheetIdx);
            args = { reqType: "edit", sheetIndex: sheetIdx, currValue: selVal, prevValue: pValue, rowIndex: actCell.rowIndex, colIndex: actCell.colIndex, hasValidation: true, rule: valRule, isRefreshVal: false, isDropDownAction: true };
            if (this._trigActionBegin(args))
                return;
            if (valRule.type == "list" && selVal !== "") {
                dtSrcRef = valRule.customVal.split("_")[0];
                if (dtSrcRef[0] == "=" && dtSrcRef.indexOf(",") < 0) {
                    args.isRefrsVal = true;
                    dtSrcRef = dtSrcRef.replace("=", "");
                    addr = dtSrcRef.split("!");
                    args.refrValSheetIdx = addr.length == 1 ? sheetIdx : this._getSheetIndexByName(addr[0]);
                    refrRange = addr.length == 1 ? addr[0] : addr[1];
                    refrRange.indexOf("$") > -1 && (refrRange = refrRange.replace(/\$/g, ""));
                    range = this.getRangeIndices(refrRange);
                    if (this.isUndefined(ddlSIdx)) {
                        rangeData = this.getRangeData({ range: range });
                        rangeDataLen = rangeData.length;
                        for (i = 0; i < rangeDataLen; i++)
                            if (rangeData[i].value == selVal)
                                ddlSIdx = parseInt(i);
                    }
                    if (range[0] === range[2])
                        args.refrValCellAddr = this.getAlphaRange(range[0], range[1] + ddlSIdx);
                    else
                        args.refrValCellAddr = this.getAlphaRange(range[0] + ddlSIdx, range[1]);
                }
            }
            this._trigActionComplete(args);
        },

        _ddlopen: function (e) {
            var sheetIdx = this.getActiveSheetIndex(), actCell = this.getActiveCell(sheetIdx), rowHt = this.getSheet(sheetIdx).rowsHeightCollection[actCell.rowIndex], position;
            if (this.XLEdit._isEdit && this.XLEdit.getPropertyValue(actCell.rowIndex, actCell.colIndex, "rule").customVal.split("_")[2] === "true")
                return false;
            this.XLEdit.saveCell();
            var actionObj = $("#" + this._id + "ddl").data("ejDropDownList"), cell = this.getCell(this._ddlCell.rowIndex, this._ddlCell.colIndex);
            e.stopPropagation();
            if (!ej.isNullOrUndefined(actionObj)) {
                if (actionObj._isPopupShown()) {
                    actionObj._hideResult();
                }
                else {
                    actionObj._showResult();
                    $("#" + this._id + "ddl_popup").css({ "width": this.getActiveCellElem().width() + 20, "font-size": "11", top: 20, left: 100 });
                    position = this._getXYPos(cell, $("#" + this._id + "ddl_popup"), rowHt, 0);
                    $("#" + this._id + "ddl_popup_list_wrapper").css({ top: position.yPos + rowHt, left: position.xPos });
                }
            }
        },

        _mouseMoveHandler: function (e) {
            e.target = this._changeTargetWithOffset(e);
            var trgt = $(e.target), xy, clientDiff;
            this._isTouchEvt = this._isTouchEvent(e);
            if (this._isTouchEvt) {
                e.preventDefault();
                xy = this._setXY(e, navigator.userAgent.indexOf("WebKit") > -1);
                if (this.model.allowDragAndDrop)
                    this.XLDragDrop._dragtouch(xy[0], xy[1]);
            }
            if (this.model.allowResizing && (this.XLResize._resizeType === "Col" || trgt.hasClass("e-headercelldiv") || trgt.hasClass("e-headercell") || trgt.hasClass("e-reSizeColbg")) && !this.XLEdit._isEdit && !(this.XLCMenu && this.XLCMenu._isMenuOpened))
                this.XLResize._cMouseMove(e);
            else if (this.model.allowResizing && (this.XLResize._resizeType === "Row" || trgt.hasClass("e-rowheader") || trgt.hasClass("e-reSizeRowbg")) && !this.XLEdit._isEdit && !(this.XLCMenu && this.XLCMenu._isMenuOpened))
                this.XLResize._rMouseMove(e);
            else if (this.model.allowResizing && (this.XLResize._resizeType === "AP" || trgt.hasClass("e-spreadsheetactpanel") || trgt.parents(".e-spreadsheetactpanel").length > 0))
                this.XLResize._apMouseMove(e);
            else if ((this.model.pictureSettings.allowPictures || this.model.allowCharts) && (trgt.hasClass("e-ss-object") || trgt.parents(".e-ss-object").length || this.XLShape._shapeROStart || this.XLShape._shapeRSStart || trgt.hasClass("e-ss-imgvisual")))
                this.XLShape._imgMouseMove(e);
            if (this.model.allowSelection && this.model.allowDragAndDrop && ej.spreadsheetFeatures.dragAndDrop && trgt.parents(".e-spreadsheetmainpanel").length && trgt.hasClass("e-rowcell") && !this.XLEdit._isEdit && this._getJSSheetHeader(this.getActiveSheetIndex())[0].querySelector('.e-spreadsheetcolumnheader').className.indexOf('e-sheetselected') === -1)
                this.XLDragDrop._dMouseMove(e);
            if (this.model.allowComments && !this.XLComment._isCommentEdit && (this.getSheetElement(this.getActiveSheetIndex()).find(".e-commentcell").length > 0))
                this.XLComment._commentMouseMove(e);
            if (!ej.isNullOrUndefined(e.target.parentNode))
                ((e.target.id.indexOf('_svg') < 0) && this._isString(e.target.parentNode.className) && e.target.parentNode.className.indexOf('e-content') < 0 && !$(e.target).is('td.e-rowcell')) && this.XLShape._shapeMouseUp(e);
            if (this._isTouchEvt && !this._isSelected(e.target) && !this._isTouchMoveSel && this._touchArgs && !this._isUniqueTarget(this._touchArgs, e) && trgt.parents(".e-table").length && trgt.parents(".e-spreadsheetcontentcontainer").length && !this.XLDragDrop._allowDragAndDrop) {
                clientDiff = this._getClientDiff(this._startXY, xy);
                this._scrollContent(clientDiff);
                this._startXY = xy;
                this._touchArgs = e;
                this._isTouchScroll = true;
            }
        },

        _mouseLeaveHandler: function (e) {
            if (this._hasClass(e.target, "e-viewhdrlbl") || this._hasClass(e.target, "e-vheading"))
                this.element.find(".e-vheading .e-chk-act, .e-vheading .e-chk-inact").removeClass("e-chkhover");
            else if (this._hasClass(e.target, "e-viewlinlbl") || this._hasClass(e.target, "e-vgridlines"))
                this.element.find(".e-vgridlines .e-chk-act,.e-vgridlines .e-chk-inact").removeClass("e-chkhover");
            else if (this.model.allowResizing)
                $(".e-ss-colresize, .e-ss-rowresize").removeClass("e-ss-colresize e-ss-rowresize");
        },

        _mouseUpHandler: function (e) {
            var trgt = $(e.target), sheetIdx = this.getActiveSheetIndex(), vScroll = this.XLScroll._vScroller(sheetIdx), hScroll = this.XLScroll._hScroller(sheetIdx);
            if (this.model.allowResizing) {
                if (this.XLResize._resizeType === "Col")
                    this.XLResize._cMouseUp(e);
                else if (this.XLResize._resizeType === "Row")
                    this.XLResize._rMouseUp(e);
                else if (this.XLResize._resizeType === "AP")
                    this.XLResize._apMouseUp(e);
            }
            if (this.model.showRibbon && !this._phoneMode) {
                if (this.element.find('.e-ribbonpin').is(':visible') && $(e.target).parents('.e-ribbon').length <= 0)
                    $("#" + this._id + "_Ribbon").ejRibbon("collapse");
            }
            if (this.model.allowDragAndDrop && this.XLDragDrop._allowDragAndDrop)
                this.XLDragDrop._dMouseUp(e);
            if (this.model.allowComments && this.XLComment._isCommentEdit)
                this.getActiveCellElem().find("textarea").focus();
            if (this._isSheetRename)
                $("#" + this._id + "_Sheet_RenamePanel").focus();
            if (this.model.pictureSettings.allowPictures)
                this.XLShape._shapeMouseUp(e);
            if (this.model.enablePivotTable)
                this.XLPivot._pivotMouseUp(e);
            if (this._hasClass(trgt[0], "e-vhandle") || this._hasClass(trgt[0], "e-vhandlespace") || this._hasClass(trgt[0], "e-vup") || this._hasClass(trgt[0], "e-vdown")) {
                if (this._trigger("scrollStop", { scrollData: vScroll._scrollData, position: vScroll.model.value, reqType: "vertical" }));
                return;
            }
            if (this._hasClass(trgt[0], "e-hhandle") || this._hasClass(trgt[0], "e-hhandlespace") || this._hasClass(trgt[0], "e-hdown") || this._hasClass(trgt[0], "e-hup")) {
                if (this._trigger("scrollStop", { scrollData: vScroll._scrollData, position: hScroll.model.value, reqType: "horizontal" }));
                return;
            }
        },

        _scrollContent: function (clientPos, isActPos) {
            var diff, scroll, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
            if (clientPos.x) {
                diff = (isActPos) ? clientPos.x : sheet._scrollLeft + clientPos.x;
                scroll = this.XLScroll._hScroller(sheetIdx);
                if (diff < 0)
                    diff = 0;
                else {
                    if (this.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal) {
                        if (clientPos.x > 0 && scroll.model.maximum < diff + scroll._scrollData.handle)
                            diff = scroll.model.maximum;
                    }
                    else
                        scroll._scrollData.step = clientPos.x < 0 ? -1 : 1;
                }
                if (sheet._scrollLeft != diff)
                    scroll.scroll(diff);
            }
            if (clientPos.y) {
                diff = (isActPos) ? clientPos.y : sheet._scrollTop + clientPos.y;
                scroll = this.XLScroll._vScroller(sheetIdx);
                if (diff < 0)
                    diff = 0;
                else {
                    if (this.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal) {
                        if (clientPos.y > 0 && scroll.model.maximum < diff)
                            diff = scroll.model.maximum;
                    }
                    else
                        scroll._scrollData.step = clientPos.y < 0 ? -1 : 1;
                }
                if (diff || (sheet._scrollTop != diff))
                    scroll.scroll(diff);
            }
        },

        _keyDownHandler: function (e) {
            var tid, text, tname, actElemId, editText, isNavigate = true, imgNavigate = false, sheetIdx = this.getActiveSheetIndex(), aComplete = this.element.find("#" + this._id + "_AutoComplete").data("ejAutocomplete"),
                robj = $('#' + this._id + '_Ribbon').data('ejRibbon'), sheet = this.getSheet(sheetIdx), activeCell = sheet._activeCell, selCells, rowIdx, colIdx, range, value, formulaRng;
            if (this._trigger("keyDown", { event: e, isEdit: this.model.allowEditing && this.XLEdit._isEdit, isCommentEdit: this.model.allowComments && this.XLComment._isCommentEdit, isSheetRename: this._isSheetRename, sheetIndex: this._getSheetIndex(), activeCell: this.getActiveCell(), keyCode: e.keyCode }))
                return;
            if (this._getContent(sheetIdx).find(".e-ss-activeimg").length) {
                if ($(e.target).hasClass("e-numerictextbox") && e.keyCode === 13)
                    e.preventDefault();
                imgNavigate = true;
                actElemId = document.activeElement.id;
                actElemId.indexOf(this._id + "_Ribbon_Format_Size_PictureHeight") < 0 && actElemId.indexOf(this._id + "_Ribbon_Format_Size_PictureWidth") < 0 && this.XLShape._imgKeyDown(e);
            }
            if (navigator.platform.toLowerCase().indexOf('mac') > -1 && e.metaKey) {
                if (e.keyCode == 67)
                    this.XLClipboard.copy();
                else if (e.keyCode == 86)
                    this.XLClipboard.paste();
                else if (e.keyCode == 88)
                    this.XLClipboard.cut();
                return;
            }
            if (aComplete.showSuggestionBox && aComplete.suggestionList) {
                if (e.keyCode === 38) {
                    aComplete._removeListHover();
                    if (aComplete._activeItem > 1)
                        aComplete._activeItem = aComplete._activeItem - 1;
                    else
                        aComplete._activeItem = aComplete._listSize;
                    aComplete._addListHover();
                    aComplete._targetFocus();
                    return;
                }
                else if (e.keyCode === 40) {
                    aComplete._removeListHover();
                    if (aComplete._activeItem < aComplete._listSize)
                        aComplete._activeItem = aComplete._activeItem + 1;
                    else
                        aComplete._activeItem = 1;
                    aComplete._addListHover();
                    return;
                }
            }
            if (e.target.id.indexOf("_Edit") > -1)
                this.model.allowKeyboardNavigation && (this.XLCellNav._canKeyBoardNavigate = true);
            if (this.XLEdit._editElem)
                editText = this.XLEdit._editElem.text();
            if (e.target.id.indexOf("_Edit") > -1 && e.keyCode === 9 && editText.indexOf("=") === 0 && editText.indexOf(")") != editText.length - 1) {
                e.preventDefault();
                if (!aComplete.suggestionList.is(":visible") && this.model.allowKeyboardNavigation) {
                    if (this._isFormulaSuggestion && (e.keyCode === 39 || e.keyCode === 37 || (e.keyCode === 13 && !e.altKey)))
                        this.XLEdit.saveCell();
                    this.XLCellNav._selectionKeyDownHandler(e);
                    activeCell = this.getSheet(sheetIdx)._activeCell;
                    return;
                }
                text = value = aComplete.getActiveText();
                if (value.indexOf("(worksheet)") > -1)
                    value = text.split(" (worksheet)")[0];
                if (editText.endsWith("[") && this._tableRangesFormula[editText.split("[")[0].slice(1)])
                    text = editText + text.slice(1);
                else if (!this.XLEdit._isNamedRange(value))
                    text += "(";
                this.XLEdit._editElem.text(text);
                if (this.model.allowFormulaBar)
                    this._getInputBox().val(text);
                if (e.target.id.indexOf("_Edit") > -1)
                    this.XLEdit._editElem.focusEnd();
                this.XLCellNav._canKeyBoardNavigate = false;
                return;
            }
            if (this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, 'wrap') && this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, 'merge') && e.keyCode === 46) {
                this.getCell(activeCell.rowIndex, activeCell.colIndex, sheetIdx).find('#' + this._id + '_Merge')[0].textContent = "";
            }
            if (e.target.id.indexOf("_Custom") < 0 && e.target.id.indexOf("_Ribbon") < 0) {
                e.stopImmediatePropagation();
                if (this.model.allowFiltering && this.XLFilter._isSearchEdit && e.keyCode !== 27)
                    return true;
                if ($(e.target).parents(".e-formulabar").length && this.XLEdit._isEdit && this.model.allowKeyboardNavigation)
                    this.XLCellNav._isNavigate = e.keyCode === 13;
                !this._isSheetRename && !this.XLEdit._isEdit && !(this.XLComment && this.XLComment._isCommentEdit) && this.model.allowClipboard && this.XLClipboard._copyPasteHandler(e);
                if (!imgNavigate && !this._isSheetRename)
                    !(this.XLComment && this.XLComment._isCommentEdit) ? this.model.allowEditing && (document.activeElement.id.indexOf('_inputbox') === -1 || e.keyCode === 27) && this.XLEdit._editingHandler(e) : this.model.allowKeyboardNavigation && (this.XLCellNav._isNavigate = false);
                if (this.isFormula(editText) && e.ctrlKey && e.shiftKey && e.keyCode === 13) {
                    this._hasFormulaArray = true;
                    selCells = this._getSelectedCells(); range = selCells.range; formulaRng = this._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                    if (ej.isNullOrUndefined(sheet.formulaRange[editText]))
                        sheet.formulaRange[formulaRng] = editText;
                    for (var i = 0, len = selCells.selCells.length; i < len; i++) {
                        if (len > 1)
                            this._hasMultipleFormulaArray = true;
                        rowIdx = selCells.selCells[i].rowIndex;
                        colIdx = selCells.selCells[i].colIndex;
                        if ((activeCell.rowIndex == rowIdx && activeCell.colIndex == colIdx))
                            this.XLEdit.saveCell();
                        this.XLEdit._updateCellValue({ rowIndex: rowIdx, colIndex: colIdx }, editText);
                        this._dataContainer.sheets[sheetIdx][rowIdx][colIdx]["formulaRange"] = formulaRng;
                    }
                    this._hasFormulaArray = false;
                    this._hasMultipleFormulaArray = false;
                }
                if ((e.keyCode == 27) && this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "hasFormulaArray")) {
                    var arrayFormula, multipleArrayFormula;
                    arrayFormula = this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "hasFormulaArray");
                    multipleArrayFormula = this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "hasMultipleFormulaArray");
                    if (arrayFormula || multipleArrayFormula) {
                        this._formulaArray = true;
                        this.model.allowFormulaBar && this.updateFormulaBar();
                        this._formulaArray = false;
                    }
                }
                else if (this._isFormulaSuggestion && (e.keyCode === 39 || e.keyCode === 37 || (e.keyCode === 13 && !e.altKey)))
                    this.XLEdit.saveCell();
                else if (!this.XLEdit._isFormulaEdit && (e.keyCode === 9 || (e.keyCode === 13 && !e.altKey) || e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40))
                    isNavigate = this.XLEdit._isEdit && this.model.allowKeyboardNavigation && this.XLCellNav._isNavigate ? this.XLEdit.saveCell() : true;
                if ($(e.target).hasClass("e-field-validation-error") || (e.target.id == this._id + '_Ribbon_Home_Font_FontFamily_wrapper' || e.target.id == this._id + '_Ribbon_Home_Number_NumberFormat_wrapper' || e.target.id == this._id + '_Ribbon_Home_Font_FontSize_wrapper'))
                    return true;
                if (this.model.allowDataValidation && this.XLValidate._isErrorVisible && (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 38 || e.keyCode === 40)) {
                    this.XLValidate._isErrorVisible = false;
                    return true
                }
                if ((!isNavigate && !this.XLEdit._isFormulaEdit) || (e.keyCode === 13 && e.altKey))
                    return false;
                if (this.model.allowKeyboardNavigation && !imgNavigate && !this._isSheetRename) {
                    if (!(this.model.allowComments && this.XLComment._isCommentEdit))
                        if ((!$(e.target).parents(".e-formulabar").length || e.keyCode === 9 || (e.keyCode === 13 && !e.altKey))) {
                            if (this.XLEdit._isFormulaEdit) {
                                var clsSheet = this.XLEdit._editElem.closest(".e-sheet"), editSheetIdx = clsSheet.length && this._getSheetIdxFromSheetValue(clsSheet[0].id.replace(this._id + "_", ""));
                                if (sheetIdx != editSheetIdx && (e.keyCode === 9 || (e.keyCode === 13))) {
                                    this.XLSelection._clearBorder(this._formulaBorder.join(" ").replace(/,/g, " ") + " " + this._ctrlFormulaBorder.join(" ").replace(/,/g, " "));
                                    this.gotoPage(editSheetIdx);
                                }
                            }
                            this.XLCellNav._selectionKeyDownHandler(e);
                        }
                    activeCell = this.getSheet(sheetIdx)._activeCell;
                    this._keyboardShortCuts(e);
                }
                if (this.model.allowUndoRedo)
                    if (this.model.allowComments && !this.XLComment._isCommentEdit)
                        this._undoRedoOperation(e);
                    else if (!this.model.allowComments)
                        this._undoRedoOperation(e);
                if (this.XLEdit._isFormulaEdit && e.keyCode === 9 && !this.XLCellNav._canKeyBoardNavigate) // enabling tab key while selecting formula
                    this.XLCellNav._canKeyBoardNavigate = true;
            }
            if (e.target.id === this._id + "_Ribbon_Analyze_PivotTable_PivotTableName") {
                this._isPvtNameEdit = true;
                return true;
            }
            else if (this._isPvtNameEdit) {
                this._isPvtNameEdit = false;
                this.XLPivot._changePvtName();
            }
            if ((e.target.tagName === "DIV") && !this.XLEdit._isEdit) {
                if (!ej.isNullOrUndefined(this._ddlCell)) {
                    this.element.find("#" + this._id + "ddl").ejDropDownList("hidePopup");
                    this.element.find("#" + this._id + "ddlspan").remove();
                    this._ddlCell = null;
                }
            }
            tname = this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "tableName", sheetIdx);
            if (e.target.id === this._id + "_Ribbon_Design_Properties_TableName") {
                this._isTableRename = true;
                this._tableClassName = this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "tableName") || "";
                if (this._isTableRename && (e.keyCode === 13 || e.keyCode === 9 || e.keyCode === 27)) {
                    if (e.keyCode === 13)
                        e.preventDefault();
                    this.XLFormat._renameTable(this._tableClassName);
                }
                else
                    return;
            }
            if (tname && this._getContent(sheetIdx).find('.e-ss-activeimg').length === 0) {
                tid = this._getTableID(tname);
                this.isNumber(tid) && this.XLRibbon._designTabUpdate(tid, activeCell);
            }
            else if (this.model.showRibbon && (robj.model.selectedItemIndex === this.XLRibbon._getTabIndex("design") || robj.isVisible(this._getLocStr("Design"))))
                this.XLRibbon._toggleDesignTab(activeCell);
            if (!this.XLEdit._isEdit && !ej.isNullOrUndefined(this.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, 'rule', sheetIdx)))
                this._setddlCell(e);

            if (this._isSheetRename && (e.keyCode === 13 || e.keyCode === 9 || e.keyCode === 27)) {
                e.preventDefault();
                this._updateSheetNames(null, e.keyCode === 27) && this._setSheetFocus();
            }
            if (aComplete.suggestionList.is(":visible") && (this.XLEdit._editElem.text() === "" || e.keyCode === 13))
                aComplete._hideResult();
            this.model.showRibbon && this.XLRibbon._updateRibbonIcons();
        },

        _keyUpHandler: function (e) {
            var formulatext = this.element.find("#" + this._id + "_Edit").text();
            if (this.model.allowEditing && this.XLEdit._isEdit) {
                if (formulatext.indexOf("=") > -1 && formulatext.length > 0 && formulatext.indexOf(")") == -1) {
                    if (!this.XLEdit._isFEdit)
                        this.XLCellNav._isNavigate = true;
                    if (e.keyCode !== 40 && e.keyCode !== 38 && formulatext.length > 1) {
                        formulatext = formulatext.replace("=", "");
                        if (formulatext.endsWith("[") && this._tableRangesFormula[formulatext.split("[")[0]]) {
                            this.XLEdit._refreshAutoComplete(formulatext.split("[")[0]);
                            this._isFormulaCln = true
                            this.XLEdit._captureEditing(true);
                        } else {
                            if (this._isFormulaCln) {
                                this.XLEdit._refreshAutoComplete();
                                this._isFormulaCln = false;
                            }
                            this.XLEdit._captureEditing();
                        }
                    }
                }
            }
            this._trigger("keyUp", { event: e, isEdit: this.model.allowEditing && this.XLEdit._isEdit, isCommentEdit: this.model.allowComments && this.XLComment._isCommentEdit, isSheetRename: this._isSheetRename, sheetIndex: this._getSheetIndex(), activeCell: this.getActiveCell(), keyCode: e.keyCode });
        },

        _dblClickHandler: function (e) {
            var sheetCont, trgt, cellIdx, sheetIdx, sheet;
            this.XLEdit._isFEdit = false;
            if (e.target.tagName === "A")
                return;
            if (this._hasClass(e.target, "e-numericitem")) {
                if (this.XLEdit && this.XLEdit._isEdit) {
                    if (this.getActiveCellElem().find(".e-error").length)
                        return;
                }
                if (!this._isSheetRename)
                    this._renameSheet();
            }
            else {
                if (e.target.id.indexOf("chart") > -1 || this._hasClass(e.target, "e-comment-txtarea") || this._hasClass(e.target, "e-filterspan") || $(e.target).parents(".e-ss-pivot").length)
                    return;
                if (e.target.classList.contains('e-iconsetspan')) {
                    e.target = e.target.closest('td');
                }
                sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
                e.target = this._changeTargetWithOffset(e);
                if (!this.model.allowEditing || !this.model.allowSelection)
                    return;
                if (this.XLSelection._isOutsideBordering || this.XLSelection._isGridBordering) {
                    sheetCont = this._getContent(sheetIdx).find("div:first-child");
                    sheetCont.addClass("e-ss-cursor");
                    sheetCont.removeClass("e-ss-drwbrdrcursor e-ss-drwbrdrgridcursor");
                    this.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                    if (this.model.allowAutoFill)
                        this.XLDragFill.positionAutoFillElement();
                    this.XLSelection._isOutsideBordering = this.XLSelection._isGridBordering = false;
                    return;
                }
                if (!this.XLEdit._isEdit && ($(e.target).hasClass("e-rowcell") || $(e.target).parents("td").hasClass("e-rowcell")) && (!this._hasClass($(e.target), "e-readonly") && !$(e.target).hasClass("e-cellreadonly"))) {
                    var clkCellObj = this._clkCellObj;
                    if (this._isTouchEvt)
                        e.preventDefault();
                    if ($('.e-cdata').length)
                        $('.e-cutright, .e-cutbottom').removeClass('e-cutright e-cutbottom');
                    trgt = $(e.target);
                    if (trgt.closest("#" + this._id + "EditForm").length)
                        return;
                    if (e.target.id.length < 1)
                        cellIdx = this._getCellIdx(e.target);
                    else
                        cellIdx = this._getCellIdx($(e.target).parents('td')[0]);
                    if (clkCellObj.rowIndex == cellIdx.rowIndex && clkCellObj.colIndex == cellIdx.colIndex)
                        this.XLEdit.editCell(cellIdx.rowIndex, cellIdx.colIndex, true);
                }
                if (this.model.allowResizing && ($(e.target).hasClass("e-headercell") || $(e.target).hasClass("e-headercelldiv")) && ($(e.target).css("cursor") === "col-resize" || this._isTouchEvt)) {
                    if ($(e.target).hasClass("e-headercelldiv"))
                        e.target = e.target.parentNode;
                    this.XLResize._resizeToFitWidth(e);
                }
                if (this.model.allowResizing && ($(e.target).hasClass("e-ss-rowresize") || (this._isTouchEvt && $(e.target).hasClass("e-rowheader"))))
                    this.XLResize._resizeToFitHeight(e);
            }
        },

        _setAndSelectActiveCell: function (rowIndex, colIndex, scrollOpt) {
            this.setActiveCell(rowIndex, colIndex);
            this._selectActiveCell(rowIndex, colIndex, '', scrollOpt);
        },

        _selectActiveCell: function (rowIndex, colIndex, range, scrollOpt) {
            var sheetIdx = this.getActiveSheetIndex(), obj = range ? { rowIndex: range.rowIndex, colIndex: range.colIndex } : { rowIndex: rowIndex, colIndex: colIndex }, sheet = this.getSheet(sheetIdx);
            if (this.model.allowSelection && this.model.allowKeyboardNavigation && this.model.scrollSettings.allowScrolling) {
                if (this.XLEdit.getPropertyValue(rowIndex, colIndex, "mergeIdx")) {
                    sheet._activeCell = sheet._endCell = sheet._startCell = obj;
                    this.XLSelection._processBoundary();
                    sheet._activeCell = sheet._startCell;
                    this.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                }
                else
                    this.XLSelection.selectRange(this._getAlphaRange(sheetIdx, rowIndex, colIndex, obj.rowIndex, obj.colIndex));
                if (this.model.allowAutoFill)
                    this.XLDragFill.positionAutoFillElement();
                switch (scrollOpt) {
                    case "Home":
                        this._scrollContent({ x: [range ? (range.colIndex * sheet.columnWidth) : 0] - sheet._scrollLeft }); break;
                    case "End":
                        if (sheet._isFreezed)
                            this.XLCellNav._navToCell(rowIndex, colIndex);
                        else
                            if ((rowIndex < sheet._topRow.idx || rowIndex > sheet._bottomRow.idx) || colIndex < sheet._leftCol.idx || colIndex > sheet._rightCol.idx)
                                this.XLScroll.scrollToCell(this._getAlphaRange(sheetIdx, rowIndex, colIndex, obj.rowIndex, obj.colIndex));
                        break;
                    case "Ctrl + Home":
                    case "Ctrl + Shift + Home":
                        this.XLScroll.scrollToCell(this._getAlphaRange(sheetIdx, rowIndex, colIndex, obj.rowIndex, obj.colIndex)); break;
                }
                this.XLScroll._getFirstColumn(sheetIdx);
            }
        },

        _pageUpDown: function (isUp) {
            if (this._isAutoWHMode)
                return;
            var top, endCell, actTop, bottomRow, topRow, fdiff = 0, rowdiff, activeCell = this.getActiveCell(), sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling;
            actTop = sheet._rowHeightCollection[activeCell.rowIndex];
            if ((sheet.rowCount - 1 === sheet._bottomRow.idx && isUp === 1) || ((this._isFrozen(sheet.frozenRows) ? (activeCell.rowIndex > sheet.frozenRows && sheet._ftopRowIdx === sheet.frozenRows) : sheet._topRow.idx === 0) && isUp === -1))
                return;
            bottomRow = sheet._bottomRow.value + sheet.rowsHeightCollection[sheet._bottomRow.idx];
            if (this._isFrozen(sheet.frozenRows)) {
                if (activeCell.rowIndex < sheet.frozenRows && isUp === 1)
                    actTop = sheet._rowHeightCollection[sheet.frozenRows];
                fdiff = (isUp === 1) ? (this._getRowOffsetTop(sheet, sheet.frozenRows)) : this._getIdxWithOffset(sheet._ftopRowIdx, null, false, ["freeze"]).yOffset;
            }
            topRow = isUp * (bottomRow - (fdiff ? fdiff : sheet._topRow.value));
            top = (actTop + topRow) > 0 ? (actTop + topRow) : 0;
            if (fdiff) {
                if ((isUp === 1)) {
                    rowdiff = (activeCell.rowIndex > sheet._ftopRowIdx) ? this._getIdxWithOffset(activeCell.rowIndex).yOffset - sheet._frozenHeight : 0;
                    if (activeCell.rowIndex < sheet.frozenRows)
                        this._scrollContent({ 'y': isUp * ((bottomRow - sheet.rowsHeightCollection[sheet._bottomRow.idx]) - fdiff) + 1 });
                    else
                        this._scrollContent({ 'y': (this._getIdxWithOffset(sheet._bottomRow.idx, null, false, ["freeze"]).yOffset - sheet._frozenHeight) }, true);
                    top = this._getIdxWithOffset(sheet._ftopRowIdx).yOffset + rowdiff;
                }
                else {
                    rowdiff = (activeCell.rowIndex > sheet._ftopRowIdx) ? this._getIdxWithOffset(activeCell.rowIndex).yOffset - sheet._frozenHeight : 0;
                    if (activeCell.rowIndex > sheet.frozenRows && isVirtualScroll)
                        this._scrollContent({ 'y': (fdiff - (bottomRow - sheet.rowsHeightCollection[sheet._bottomRow.idx]) + 1) }, true);
                    else
                        this._scrollContent({ 'y': ((top + sheet.rowsHeightCollection[sheet._bottomRow.idx]) - sheet._frozenHeight + 1) }, true);
                    top = this._getIdxWithOffset(sheet._ftopRowIdx).yOffset + rowdiff;
                }
            }
            else {
                if (isUp === 1 && this.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal && sheet._bottomRow.value + this.model.rowHeight + sheet._vPortHgt >= sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1])
                    top = sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1];
                else
                    this._scrollContent({ 'y': isUp * (bottomRow - sheet._scrollTop) });
            }
            endCell = this._getIdxWithOffset(top, sheet._colWidthCollection[activeCell.colIndex], true);
            this._setAndSelectActiveCell(endCell.rowIdx, endCell.colIdx);
        },

        _keyboardShortCuts: function (e) {
            if (this.model.allowEditing && this.XLEdit._isEdit || (this.model.allowComments && this.XLComment._isCommentEdit && e.keyCode !== 27)) //!Esc key
                return false;
            var activeCell, startCell, endCell, xlFormat = this.XLFormat, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), selCells = sheet._selectedCells, protect = false;
            if (this.model.allowLockCell && sheet.isSheetProtected)
                protect = true;
            if (!e.ctrlKey && !e.shiftKey) {
                switch (e.keyCode) {
                    case 33:  // PAGE UP
                        e.preventDefault();
                        this._pageUpDown(-1);
                        break;
                    case 34:  // PAGE DOWN
                        e.preventDefault();
                        this._pageUpDown(1);
                        break;
                    case 36: // HOME
                        e.preventDefault();
                        this._setAndSelectActiveCell(this.getActiveCell(sheetIdx).rowIndex, this._isFrozen(sheet.frozenColumns) ? sheet._frozenColumns - 1 : 0, "Home");
                        break;
                }
            }
            if (e.ctrlKey && !e.shiftKey) {
                if (!this.element.find("#" + this._id + "_Ribbon .e-ribbonbackstagepage").is(":visible")) {
                    switch (e.keyCode) {
                        case 65:  // Ctrl + A
                            e.preventDefault();
                            if (this.model.allowSelection) {
                                activeCell = this.getActiveCellElem();
                                this.selectAll();
                                !ej.isNullOrUndefined(this.XLCellNav) && this.XLCellNav._updateActiveCell($(activeCell[0]).closest('tr').index(), activeCell[0].cellIndex, { keyCode: e.keyCode });
                                if (this.model.allowAutoFill)
                                    this.XLDragFill.positionAutoFillElement();
                            }
                            break;
                        case 66:  // Ctrl + B
                            e.preventDefault();
                            if (!protect)
                                this._toggleFontPrpty("bold");
                            break;
                        case 68: // Ctrl + D
                        case 82: // Ctrl + R
                            e.preventDefault();
                            if (this.model.allowAutoFill)
                                this.XLDragFill._fillRange(e.keyCode === 68);
                            break;
                        case 73: // Ctrl + I
                            e.preventDefault();
                            if (!protect)
                                this._toggleFontPrpty("italic");
                            break;
                        case 75: // Ctrl + K  
                            e.preventDefault();
                            if (this.model.allowHyperlink && !protect)
                                this._showDialog(this._id + "_Ribbon_Insert_Links_Hyperlink");
                            break;
                        case 85: // Ctrl + U
                            e.preventDefault();
                            if (!protect)
                                this._toggleFontPrpty("underline");
                            break;
                        case 32: // Ctrl + space
                            e.preventDefault();
                            if (!this.model.allowSelection)
                                return;
                            var sColIdx = selCells[0].colIndex, eColIdx = selCells[selCells.length - 1].colIndex;
                            startCell = { rowIndex: 0, colIndex: sColIdx }, endCell = { rowIndex: sheet.rowCount - 1, colIndex: eColIdx };
                            this.model.allowSelection && this.XLSelection.selectRange(startCell, endCell);
                            sheet._startCell = startCell;
                            sheet._endCell = endCell;
                            sheet._isColSelected = true;
                            !ej.isNullOrUndefined(this.XLCellNav) && this.XLCellNav._updateActiveCell(selCells[0].rowIndex, sColIdx);
                            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
                            break;
                        case 35:  // Ctrl + End
                            e.preventDefault();
                            endCell = this._getUsedRangeFromSheet(sheetIdx).endCell;
                            this._setAndSelectActiveCell(endCell.rowIndex, endCell.colIndex, "End");
                            break;
                        case 36:  // Ctrl + Home
                            e.preventDefault();
                            this._setAndSelectActiveCell(this._isFrozen(sheet.frozenRows) ? sheet._frozenRows - 1 : 0, this._isFrozen(sheet.frozenColumns) ? sheet._frozenColumns - 1 : 0, "Ctrl + Home");
                            break;
                        case 49: // Ctrl + 1
                            e.preventDefault();
                            this._showDialog(this._id + "_FormatCells");
                            break;
                        case 53: // Ctrl + 5
                            e.preventDefault();
                            if (!protect)
                                this._toggleFontPrpty("line-through");
                            break;
                        case 56: // Ctrl + 8 
                            if (!e.shiftKey && !protect) {
                                e.preventDefault();
                                this._hideColumn(sheet._startCell.colIndex, sheet._endCell.colIndex);
                            }
                            break;
                        case 57: // Ctrl + 9 
                            if (!e.shiftKey) {
                                e.preventDefault();
                                if (!protect)
                                    this._hideRow(sheet._startCell.rowIndex, sheet._endCell.rowIndex, "isRHide");
                            }
                            break;
                        case 220: // Ctrl + \ 
                            if (!e.shiftKey) {
                                e.preventDefault();
                                if (this.model.allowSearching)
                                    this.XLSearch._applyGotoRowDiff();
                            }
                            break;
                        case 90:
                            e.preventDefault();
                            break;
                        case 89:
                            e.preventDefault();
                            break;
                        case 114://ctrl + f3
                            e.preventDefault();
                            if (this.model.showRibbon && !protect)
                                this.XLRibbon._openNameManagerDlg();
                            break;
                        case 70: //Ctrl + F
                            e.preventDefault();
                            this._showDialog(this._id + "_Ribbon_Others_Editing_FindSelect");
                            $("#" + this._id + "_FRDialog").ejDialog("open");
                            this.XLRibbon._refreshFRDlg();
                            $("#" + this._id + "_FRDialog_FPDlgTab").ejTab("option", "selectedItemIndex", 0);
                            break;
                        case 71: //Ctrl + G
                            e.preventDefault();
                            this._showDialog(this._id + "_Ribbon_Others_Editing_FindSelect");
                            $("#" + this._id + "_GoDialog").ejDialog("open");
                            $("#" + this._id + "_GoToDlgTab").ejTab("option", "selectedItemIndex", 0);
                            break;
                        case 72: //Ctrl + H
                            e.preventDefault();
                            this._showDialog(this._id + "_Ribbon_Others_Editing_FindSelect");
                            $("#" + this._id + "_FRDialog").ejDialog("open");
                            this.XLRibbon._refreshFRDlg();
                            $("#" + this._id + "_FRDialog_FPDlgTab").ejTab("option", "selectedItemIndex", 1);
                            break;
                    }
                }
                switch (e.keyCode) {
                    case 80: // Ctrl + P
                        e.preventDefault();
                        this.XLPrint.printSheet();
                        break;
                    case 79: //Ctrl + O
                        e.preventDefault();
                        if (this.model.allowImport) {
                            if (this.model.importSettings.importMapper.length < 1) {
                                this._showAlertDlg("Alert", "ImportExportUrl", "", 266);
                                return;
                            }
                            else if (this.isDirty && this._browserDetails.name !== "msie")
                                this._showAlertDlg("", "ImportAlert", "Open", 470, 135);
                            else
                                $("#" + this._id + "_file .e-uploadinput").click();
                        }
                        break;
                    case 83: //Ctrl + S
                        e.preventDefault();
                        if (this.model.exportSettings.allowExporting) {
                            this._showDialog("exportxl");
                            $("#" + this._id + "_ExportFileNameDialog").ejDialog("open");
                            this.XLExport._exportType = "Excel";
                        }
                        break;
                }
            }
            if (e.ctrlKey && e.shiftKey) //Ctrl + Shift
            {
                if (!this.element.find("#" + this._id + "_Ribbon .e-ribbonbackstagepage").is(":visible")) {
                    if (this._browserDetails.name === "mozilla" && e.keyCode === 173)   // keycode for ( _ ) is 173 in firefox
                        e.keyCode = 189;
                    switch (e.keyCode) {
                        case 192:  // Ctrl + Shift + ~
                            e.preventDefault();
                            if (!protect)
                                xlFormat.format({ "type": "general" });
                            break;
                        case 52:  // Ctrl + Shift + $
                            e.preventDefault();
                            if (!protect)
                                xlFormat.format({ "type": "currency" });
                            break;
                        case 53:  // Ctrl + Shift + %
                            e.preventDefault();
                            if (!protect)
                                xlFormat.format({ "type": "percentage" });
                            break;
                        case 54:  // Ctrl + Shift + ^
                            e.preventDefault();
                            if (!protect)
                                xlFormat.format({ "type": "scientific" });
                            break;
                        case 51:  // Ctrl + Shift + #
                            e.preventDefault();
                            if (!protect)
                                xlFormat.format({ "type": "shortdate" });
                            break;
                        case 50: // Ctrl + Shift + @
                            e.preventDefault();
                            if (!protect)
                                xlFormat.format({ "type": "time" });
                            break;
                        case 49:  // Ctrl + Shift + ! 
                            e.preventDefault();
                            if (!protect)
                                xlFormat.format({ "type": "number" });
                            break;
                        case 55: // Ctrl + Shift + &    
                            e.preventDefault();
                            if (this.model.allowCellFormatting && this.model.formatSettings.allowCellBorder && !protect)
                                this.XLFormat.applyBorder({ top: '1px solid #000000', right: '1px solid #000000', bottom: '1px solid #000000', left: '1px solid #000000' });
                            break;
                        case 189: // Ctrl + Shift + _
                            e.preventDefault();
                            if (this.model.allowCellFormatting && this.model.formatSettings.allowCellBorder && !protect)
                                this.XLFormat.applyBorder('noborder');
                            break;
                        case 73: // Ctrl + Shift + I   
                            e.preventDefault();
                            if (this.model.allowInsert && !protect)
                                this._showDialog(this._id + "_Ribbon_Others_Cells_InsertCellOptions");
                            break;
                        case 68: // Ctrl + Shift + D 
                            e.preventDefault();
                            if (this.model.allowDelete && !protect)
                                this._showDialog(this._id + "_Ribbon_Others_Cells_DeleteCellOptions");
                            break;
                        case 113: // Ctrl + Shift + F2
                            e.preventDefault();
                            var rObj = $('#' + this._id + '_Ribbon').data('ejRibbon');
                            if (this.model.showRibbon) {
                                if (rObj._isCollapsed) {
                                    rObj.expand();
                                    rObj._removeRibbonPin();
                                    this._isKeyCtrlShftF2 = true;
                                }
                                else rObj.collapse();
                            }
                            break;
                        case 56: // Ctrl + Shift + 8  
                            e.preventDefault();
                            if (!protect && this.model.allowSelection)
                                this._showColumn(selCells[0].colIndex, selCells[selCells.length - 1].colIndex);
                            break;
                        case 57: // Ctrl + Shift + 9   
                            e.preventDefault();
                            if (!protect && this.model.allowSelection)
                                this._showRow(selCells[0].rowIndex, selCells[selCells.length - 1].rowIndex, "isRHide");
                            break;
                        case 79: // Ctrl + Shift + O
                            e.preventDefault();
                            this.XLSearch._applyGotoComments();
                            break;
                        case 220: // Ctrl + Shift + | 
                            e.preventDefault();
                            this.XLSearch._applyGotoColDiff();
                            break;
                        case 36: //Ctrl + Shift + Home
                            e.preventDefault();
                            endCell = this.getActiveCell(sheetIdx);
                            this._selectActiveCell(0, 0, endCell, 'Ctrl + Shift + Home');
                            break;
                    }
                }
            }
            else if (e.shiftKey) {
                if (e.keyCode === 32) {  // Shift + space           
                    e.preventDefault();
                    if (this.model.allowSelection) {
                        var sRowIdx = selCells[0].rowIndex, eRowIdx = selCells[selCells.length - 1].rowIndex;
                        startCell = { rowIndex: sRowIdx, colIndex: 0 }, endCell = { rowIndex: eRowIdx, colIndex: sheet.colCount - 1 };
                        this.XLSelection.selectRange(startCell, endCell);
                        sheet._startCell = startCell;
                        sheet._endCell = endCell;
                        sheet._isRowSelected = true;
                        !ej.isNullOrUndefined(this.XLCellNav) && this.XLCellNav._updateActiveCell(sRowIdx, selCells[0].colIndex);
                        this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
                    }
                }
                else if (e.keyCode === 113) {  // Shift + F2
                    this._dupDetails = true;
                    e.preventDefault();
                    activeCell = this.getActiveCellElem();
                    if (this.model.allowComments && !protect) {
                        this._isRibbonClick = true;
                        activeCell.hasClass("e-commentcell") ? this.XLComment.editComment() : this.XLComment.setComment();
                        this._isRibbonClick = false;
                    }
                    this._dupDetails = false;
                }
                else if (e.keyCode === 122) {  // Shift + F11    
                    e.preventDefault();
                    this.addNewSheet();
                }
            }
            else if (e.keyCode === 27) { // Esc
                if (this.model.allowComments && this.XLComment._isCommentEdit) {
                    this.XLComment._updateCurCmntVal();
                    this.XLComment._updateCmntRibIcons();
                }
                if (this.model.allowContextMenu)
                    if (this.XLCMenu._isMenuOpened || $("#" + this._id + "_contextMenuColumnHeader").is(":visible") || $("#" + this._id + "_contextMenuRowHeader").is(":visible"))
                        this.XLCMenu.hideCMenu();
                if (this.model.allowFiltering)
                    if (this._excelFilter && this._excelFilter._openedFltr && $(this._excelFilter._openedFltr).is(":visible")) {
                        var mObj = this._excelFilter._menuWrap.data("ejMenu");
                        if (mObj.element.find(".e-mhover li:visible").length) {
                            if (!mObj._isContextMenuOpen)
                                mObj._closeMenu();
                            return;
                        }
                        this.XLFilter._isSearchEdit = false;
                        this._excelFilter.closeXFDialog();
                    }
                this._setSheetFocus();
            }
            else if (e.altKey) {
                if (e.keyCode === 112 && this.model.showRibbon && this.model.allowCharts && !protect)//alt +f1-Create chart
                {
                    e.preventDefault();
                    this.XLChart.createChart(null, { type: "column", enable3D: false, marker: { visible: false } });
                }
                else if (e.keyCode === 84 && this.model.showRibbon && !this.XLRibbon._isDirtySelect && !protect && this.model.allowFormatAsTable)//alt+T-create a table
                {
                    this._showDialog(this._id + "_Ribbon_Insert_Tables_Table");
                    e.preventDefault();
                    this.XLRibbon._openFATDlg();
                }
            }
        },

        _triggerTBtnClick: function (id) {
            var btnObj = $('#' + id).data("ejToggleButton");
            btnObj.buttontag.click();
        },

        _toggleFontPrpty: function (type) {
            var actCell = this.getActiveCell(), xlFormat = this.XLFormat, style = { "style": {} }, formatCode, fontPrpty, format, id;
            formatCode = this.XLEdit.getPropertyValue(actCell.rowIndex, actCell.colIndex, "format");
            format = !this.isUndefined(formatCode) && this.XLFormat.getFormatFromHashCode(formatCode);
            if (type === "bold")
                fontPrpty = "font-weight";
            else if (type === "italic")
                fontPrpty = "font-style";
            else
                fontPrpty = "text-decoration";
            id = type.charAt(0).toUpperCase() + type.slice(1).toLowerCase();
            if (id === "Line-through")
                id = "StrikeThrough";
            if (format[fontPrpty] === type) {
                this.model.showRibbon && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).length && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).ejToggleButton("option", "toggleState", false);
                style.style[fontPrpty] = "none";
            }
            else if (fontPrpty === "text-decoration" && (format[fontPrpty] === "underline" || format[fontPrpty] === "line-through")) {
                this.model.showRibbon && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).length && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).ejToggleButton("option", "toggleState", true);
                style.style[fontPrpty] = (format[fontPrpty] === "underline") ? type + " " + format[fontPrpty] : format[fontPrpty] + " " + type;
            }
            else if (fontPrpty === "text-decoration" && (format[fontPrpty] === "line-through underline" || format[fontPrpty] === "underline line-through")) {
                this.model.showRibbon && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).length && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).ejToggleButton("option", "toggleState", false);
                format[fontPrpty] = format[fontPrpty].split(" ").join("");
                style.style[fontPrpty] = format[fontPrpty].replace(type, "");
            }
            else {
                this.model.showRibbon && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).length && this.element.find("#" + this._id + "_Ribbon_Home_Font_" + id).ejToggleButton("option", "toggleState", true);
                style.style[fontPrpty] = type;
            }
            xlFormat.format(style);
        },

        _getLocStr: function (prop) {
            return this.localizedLabels[prop];
        },

        _checkIndicesInContainer: function (sheetIdx, rowIdx, colIdx, property) {
            var sheets = this._dataContainer.sheets;
            if (sheetIdx in sheets && rowIdx in sheets[sheetIdx] && colIdx in sheets[sheetIdx][rowIdx]) {
                if (property) {
                    if (property in sheets[sheetIdx][rowIdx][colIdx])
                        return true;
                    else
                        return false;
                }
                else
                    return true;
            }
            return false;
        },

        //Text Wrapping
        _textFormatting: function (operation) {
            switch (operation) {
                case 'wrapText':
                    var wrapToggle = $("#" + this._id + "_Ribbon_Home_Alignment_WrapText").data("ejToggleButton");
                    if (wrapToggle)
                        this.setWrapText(wrapToggle.model.toggleState ? "wrap" : "unwrap", null);
                    break;
            }
        },

        wrapText: function (range) {
            if (!this.model.allowWrap || this.model.isReadOnly)
                return;
            this.setWrapText("wrap", range);
        },

        unWrapText: function (range) {
            if (!this.model.allowWrap || this.model.isReadOnly)
                return;
            this.setWrapText("unwrap", range);
        },

        setWrapText: function (operation, range) {
            if (!this.model.allowWrap || this.model.isReadOnly)
                return;
            var selCell, rge, cell, sheetIdx = this.getActiveSheetIndex(), wRowIdx, wColIdx, sheet = this.getSheet(sheetIdx), cellheight = 0, cellHt, rowHt = this.model.rowHeight, filterIcon, rowColl = this.getRows(sheetIdx), rowhdrrows = rowColl[0], aRange,
                rowHtColl = sheet.rowsHeightCollection, wrapHtColl = sheet._wrapHtCollection, isWrap = false, clrWrap = sheet._clrWrapColl, frmtCellHt,
                modifiedRows = [], isIE8 = (this._browserDetails.name === "msie" && this._browserDetails.version === "8.0"), container, keys;
            rge = this._getRangeArgs(range, "object");
            selCell = this._getSelectedCells(sheetIdx, rge).selCells;
            if (selCell.length === 0)
                return;
            else if (selCell.length > 1)
                aRange = this._getProperAlphaRange(sheetIdx, selCell[0].rowIndex, selCell[0].colIndex, selCell[selCell.length - 1].rowIndex, selCell[selCell.length - 1].colIndex)
            else
                aRange = this._getAlphaRange(sheetIdx, selCell[0].rowIndex, selCell[0].colIndex, selCell[selCell.length - 1].rowIndex, selCell[selCell.length - 1].colIndex);
            this._updateWrapCol(operation, selCell, sheet, sheetIdx);
            for (var i = 0, len = selCell.length; i < len; i++) {
                isWrap = this.XLEdit.getPropertyValue(selCell[i].rowIndex, selCell[i].colIndex, "wrap");
                if (selCell[i].colIndex === rge[1]) {
                    container = this._dataContainer.sheets[sheetIdx];
                    keys = this.getObjectKeys(container[selCell[i].rowIndex]);
                }
                if (!this._isPaste && ((operation === "unwrap" && !isWrap) || (operation === "wrap" && isWrap)))
                    continue;
                if (operation === "unwrap" && isWrap) {
                    (!this._isUndoRedo) && clrWrap.push({ rowIdx: selCell[i].rowIndex, colIdx: selCell[i].colIndex });
                    if (this._isRowViewable(sheetIdx, selCell[i].rowIndex)) {
                        cell = this.getCell(selCell[i].rowIndex, selCell[i].colIndex);
                        wRowIdx = selCell[i].rowIndex; wColIdx = selCell[i].colIndex;
                        if (cell)
                            this._removeClass(cell[0], "e-sswraptext");
                        this._removeClass(rowhdrrows[wRowIdx], "e-sswraprow");
                        if (this.XLEdit.getPropertyValue(selCell[i].rowIndex, selCell[i].colIndex, "altTxt"))
                            this.addClass(cell[0], "e-alt-unwrap");
                        if (wRowIdx in sheet._wrapColl)
                            if (wColIdx in sheet._wrapColl[wRowIdx]) {
                                delete sheet._wrapColl[wRowIdx][wColIdx];
                                cellHt = ej.max(this._getObjectValues(sheet._wrapColl[wRowIdx]));
                                frmtCellHt = this._getFormattedHeight(sheetIdx, wRowIdx);
                                if (!cellHt || cellHt < frmtCellHt)
                                    cellHt = frmtCellHt;
                                $.isEmptyObject(sheet._wrapColl[wRowIdx]) && delete sheet._wrapColl[wRowIdx];
                            }
                    }
                    this.XLEdit._clearDataContainer({ cellIdx: selCell[i], property: ["wrap"] });
                    this.XLEdit._clearDataContainer({ cellIdx: { rowIndex: selCell[i].rowIndex, colIndex: 0 }, property: ["wrapRow"] });
                    this.XLEdit._clearDataContainer({ cellIdx: { rowIndex: 0, colIndex: selCell[i].colIndex }, property: ["wrapCol", "wrapWidth"] });
                    cellheight = this._getWrapCellHeight(sheetIdx, selCell[i].rowIndex, selCell[i].colIndex, cellHt);
                    this._textClip(selCell[i].rowIndex, selCell[i].colIndex, 'add', null, null, keys);
                }
                else if (operation === "wrap" && !isWrap) {
                    if (this.XLEdit.getPropertyValue(selCell[i].rowIndex, selCell[i].colIndex, 'isFilterHeader'))
                        continue;
                    this._textClip(selCell[i].rowIndex, selCell[i].colIndex, 'delete', null, null, keys);
                    this._wrapCollection(selCell[i].rowIndex, selCell[i].colIndex, rowHtColl[selCell[i].rowIndex], sheetIdx);
                    this.XLEdit._updateDataContainer({ rowIndex: selCell[i].rowIndex, colIndex: selCell[i].colIndex }, { dataObj: { wrap: true } });
                    if (this._isRowViewable(sheetIdx, selCell[i].rowIndex)) {
                        cell = this.getCell(selCell[i].rowIndex, selCell[i].colIndex);
                        if (cell && cell.length > 0 && ((isIE8 ? cell.is(":visible") : window.getComputedStyle(cell[0]).display == "table-cell") || this._isPaste) && (this.model.allowResizing && !this.XLResize._preventRowResize(selCell[i].rowIndex))) {
                            this.addClass(cell[0], "e-sswraptext");
                            if (this.XLEdit.getPropertyValue(selCell[i].rowIndex, selCell[i].colIndex, "altTxt"))
                                this._removeClass(cell[0], "e-alt-unwrap");
                        }
                    }
                    if (this.XLEdit.getPropertyValue(selCell[i].rowIndex, selCell[i].colIndex, "mergeIdx"))
                        cellheight = this._getWrapCellHeight(sheetIdx, selCell[i].rowIndex, selCell[i].colIndex, sheet.rowsHeightCollection[selCell[i].rowIndex]);
                    else
                        cellheight = this._getWrapCellHeight(sheetIdx, selCell[i].rowIndex, selCell[i].colIndex);
                    (cellheight.rowHt < rowHt) && (cellheight.rowHt = rowHt);
                    rowHt = cellheight.rowHt;
                    this._wrapCollection(selCell[i].rowIndex, selCell[i].colIndex, cellheight.cellHt, sheetIdx);
                    this.XLEdit._updateDataContainer({ rowIndex: selCell[i].rowIndex, colIndex: selCell[i].colIndex }, { dataObj: { wrap: true } });
                    wrapHtColl[selCell[i].rowIndex] = (i > 0 && (selCell[i].rowIndex === selCell[i - 1].rowIndex)) ? wrapHtColl[selCell[i - 1].rowIndex] : wrapHtColl[selCell[i].rowIndex] = rowHtColl[selCell[i].rowIndex];
                    if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(selCell[i].rowIndex, 0, "wrapCol")))
                        this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: selCell[i].colIndex }, { dataObj: { wrapCol: true, wrapWidth: this.getSheet(sheetIdx).columnsWidthCollection[selCell[i].colIndex] } });
                }
                if (cellheight.rowHt > 0) {
                    if (selCell[i].colIndex === rge[3] || this.XLEdit.getPropertyValue(selCell[i].rowIndex, selCell[i].colIndex, "merge")) {
                        modifiedRows.push({ rowIndex: selCell[i].rowIndex, height: cellheight.rowHt });
                        rowHt = 0;
                        if (operation === 'wrap' && !isWrap)
                            if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(selCell[i].rowIndex, 0, "wrapRow")))
                                this.XLEdit._updateDataContainer({ rowIndex: selCell[i].rowIndex, colIndex: 0 }, { dataObj: { wrapRow: true } });
                    }
                }
                (selCell[i].colIndex === rge[3]) && (rowHt = 0);
                cellheight = 0;
            }
            this._setHeightToRows(modifiedRows, true);
            if (this.model.allowFreezing && sheet.frozenRows) {
                this.XLFreeze._refreshFRowResize(sheet.frozenRows - 1);
                !(this.isImport || this.model.isImport) && sheet._isLoaded && this.XLFreeze._refreshSelection();
            }
            if (this.model.allowComments)
                this.XLComment._updateCmntArrowPos(); //Comments position update
            if (this.model.scrollSettings.allowScrolling)
                this.XLScroll._getRowHeights(sheetIdx, selCell[0].rowIndex + 1, null, true);
            if (!sheet._isImported || sheet._isLoaded) {
                var details = { sheetIndex: sheetIdx, selectedCell: selCell, reqType: "textwrap", operation: operation, range: aRange };
                if (this.model.scrollSettings.allowScrolling)
                    this.XLScroll._refreshScroller(sheetIdx, "refresh", "all");
                this.model.allowSelection && this.XLSelection._refreshBorder();
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
                if (!this._isUndoRedo && !this._dupDetails) {
                    this._completeAction(details);
                    this._trigActionComplete(details);
                }
            }
        },

        _getWrapCellHeight: function (sheetIdx, rowIdx, colIdx, cellHeight) {
            var j, merge, rowHt = 0, colWt = 0, cellHt, sheet = this.getSheet(sheetIdx), rowHtColl = sheet.rowsHeightCollection, colWtColl = sheet.columnsWidthCollection, heightVal;
            merge = this.XLEdit.getPropertyValue(rowIdx, colIdx, "merge");
            rowHt = rowHtColl[rowIdx];
            colWt = colWtColl[colIdx];
            if (merge) {
                for (j = rowIdx + 1; j < rowIdx + merge.mSpan.rowSpan; j++)
                    rowHt = rowHt + rowHtColl[j];
                for (j = colIdx + 1; j < colIdx + merge.mSpan.colSpan; j++)
                    colWt = colWt + colWtColl[j];
            }
            if (merge) {
                rowHt = this._getRowHeight(rowIdx, sheetIdx);
                cellHt = cellHeight ? cellHeight : rowHt;
            }
            else {
                if (!sheet._wrapValColl["rows"][rowIdx] || !sheet._wrapValColl["rows"][rowIdx][colIdx])
                    heightVal = this.model.rowHeight;
                else
                    heightVal = this._detailsFromGlobalSpan(rowIdx, colIdx, "height", this.XLEdit.getPropertyValue(rowIdx, colIdx, "value2"), colWt);
                cellHt = cellHeight ? cellHeight : heightVal;
                cellHt = cellHt < this.model.rowHeight ? this.model.rowHeight : cellHt;
                rowHt = cellHt;
            }
            return { cellHt: cellHt, rowHt: rowHt };
        },
        // JavaScript source code
        _wrapTextLenCln: function (cellIndex, sheet, operation, sheetIdx) {
            var i, j, cellLen = cellIndex.length - 1, data = this.getRangeData({ range: [cellIndex[0].rowIndex, cellIndex[0].colIndex, cellIndex[cellLen].rowIndex, cellIndex[cellLen].colIndex], property: ['value2', "formats", "altTxt", "type"] }), rowCnt = cellIndex[cellLen].rowIndex - cellIndex[0].rowIndex, colCnt = cellIndex[cellLen].colIndex - cellIndex[0].colIndex, cells = 0, width, colsWidthCln = sheet.columnsWidthCollection, isIE8Bwsr, spanElem, tempWidth = 0, isFitWidth = false, tempColIdx = 0, isWrapValCln;
            if (this.model.scrollSettings.allowVirtualScrolling)
                rowCnt = (rowCnt > sheet._virtualBlockRowCnt) ? this._getRowIdx((sheet._virtualContBlockIdx * sheet._virtualBlockRowCnt) + (sheet._virtualBlockRowCnt - 1), sheetIdx, true) : rowCnt;
            if (operation === "isFitWidth")
                isFitWidth = true;
            isIE8Bwsr = (this._browserDetails.name === "msie" && this._browserDetails.version === "8.0");
            if (isIE8Bwsr) {
                spanElem = $('#' + this._id + '_emptySpan');
                var cssobj = {};
                for (i = 0; i <= rowCnt; i++) {
                    for (j = 0; j <= colCnt; j++) {
                        cssobj = {};
                        if (data[cells].value2) {
                            if (!isFitWidth)
                                tempWidth = sheet._wrapValColl["rows"][cellIndex[cells].rowIndex] ? this._getObjectValues(sheet._wrapValColl["rows"][cellIndex[cells].rowIndex])[0] : colsWidthCln[cellIndex[cells].colIndex];
                            if (data[cells].formats) {
                                cssobj['font-size'] = data[cells].formats["font-size"] ? data[cells].formats["font-size"] : "11pt";
                                cssobj['font-family'] = data[cells].formats["font-family"] ? data[cells].formats["font-family"] : "Calibri";
                                cssobj['font-weight'] = data[cells].formats["font-weight"] ? data[cells].formats["font-weight"] : "normal";
                            }
                            else
                                cssobj = { 'font-size': "11pt", 'font-family': "Calibri", 'font-weight': "normal" }
                            spanElem.css(cssobj);
                            width = spanElem.text(data[cells].value2).width();
                            if (!isFitWidth && operation != "wrap" && sheet._wrapColl[cellIndex[cells].rowIndex] && sheet._wrapColl[cellIndex[cells].rowIndex][cellIndex[cells].colIndex] <= this.model.rowHeight && colsWidthCln[cellIndex[cells].colIndex] < width)
                                this._wrapCollection(cellIndex[cells].rowIndex, cellIndex[cells].colIndex, this._detailsFromGlobalSpan(cellIndex[cells].rowIndex, cellIndex[cells].colIndex, "height", data[cells].value2, colsWidthCln[cellIndex[cells].colIndex]), sheetIdx);
                            if (tempWidth < width || data[cells].altTxt) {
                                tempWidth = width;
                                if (isFitWidth) {
                                    sheet._wrapValColl["cols"][cellIndex[cells].colIndex] = {};
                                    sheet._wrapValColl["cols"][cellIndex[cells].colIndex][cellIndex[cells].rowIndex] = width;
                                }
                                else {
                                    sheet._wrapValColl["rows"][cellIndex[cells].rowIndex] = {};
                                    sheet._wrapValColl["rows"][cellIndex[cells].rowIndex][cellIndex[cells].colIndex] = width;
                                }
                            }
                        }
                        cells++;
                    }

                }
            }
            else {
                for (i = 0; i <= rowCnt; i++) {
                    for (j = 0; j <= colCnt; j++) {
                        isWrapValCln = true;
                        if (data[cells].value2) {
                            if (!isFitWidth)
                                tempWidth = colsWidthCln[cellIndex[cells].colIndex];
                            width = this._getTextContentWidth(data[cells], data[cells].type == 'accounting' ? $.trim(data[cells].value2) : data[cells].value2);
                            if (operation == "wrap" && sheet._wrapValColl["rows"][cellIndex[cells].rowIndex] && sheet._wrapValColl["rows"][cellIndex[cells].rowIndex][tempColIdx] > width)
                                isWrapValCln = false;
                            if (!isFitWidth && operation != "wrap" && sheet._wrapColl[cellIndex[cells].rowIndex] && sheet._wrapColl[cellIndex[cells].rowIndex][cellIndex[cells].colIndex] <= this.model.rowHeight && colsWidthCln[cellIndex[cells].colIndex] < width)
                                this._wrapCollection(cellIndex[cells].rowIndex, cellIndex[cells].colIndex, this._detailsFromGlobalSpan(cellIndex[cells].rowIndex, cellIndex[cells].colIndex, "height", data[cells].value2, colsWidthCln[cellIndex[cells].colIndex]), sheetIdx);
                            if (tempWidth < width && isWrapValCln) {
                                tempWidth = width;
                                if (isFitWidth) {
                                    sheet._wrapValColl["cols"][cellIndex[cells].colIndex] = {};
                                    sheet._wrapValColl["cols"][cellIndex[cells].colIndex][cellIndex[cells].rowIndex] = width;
                                }
                                else {
                                    sheet._wrapValColl["rows"][cellIndex[cells].rowIndex] = {};
                                    sheet._wrapValColl["rows"][cellIndex[cells].rowIndex][cellIndex[cells].colIndex] = width;
                                    tempColIdx = cellIndex[cells].colIndex;
                                }
                            }
                        }
                        cells++;
                    }
                }
            }
        },

        _getTextContentWidth: function (data, value) {
            var cavsElem, cavsTxt, cssclass = "", width;
            cavsElem = document.createElement("canvas");
            cavsTxt = cavsElem.getContext("2d");
            if (!ej.isNullOrUndefined(data.formats)) {
                if (data.formats["font-weight"])
                    cssclass += data.formats["font-weight"] + " ";
                cssclass += data.formats["font-size"] ? data.formats["font-size"] + " " : "11pt ";
                cssclass += data.formats["font-family"] ? data.formats["font-family"] + " " : "Calibri ";
            }
            else
                cssclass = "11pt Calibri";
            cavsTxt.font = cssclass;
            width = cavsTxt.measureText(value).width + 5; //Added 2 pixel for border and the 3 pixel for character diff
            return width;
        },

        _updateWrapCol: function (operation, selCell, sheet, sheetIdx, rowIdx) {
            if (operation === "wrap")
                this._wrapTextLenCln(selCell, sheet, operation, sheetIdx);
            else {
                var tempWrapCol = sheet._wrapColl, selCellLen = selCell.length, i, j;
                for (i = selCell[0].rowIndex; i <= selCell[selCellLen - 1].rowIndex; i++) {
                    if (operation === "unwrap") {
                        sheet._wrapValColl["rows"][i] && delete sheet._wrapValColl["rows"][i];
                        tempWrapCol = $.extend(true, {}, sheet._wrapColl)
                        for (j = selCell[0].colIndex; j <= selCell[selCellLen - 1].colIndex; j++)
                            tempWrapCol[i] && tempWrapCol[i][j] && delete tempWrapCol[i][j];
                    }
                    if (tempWrapCol[i]) {
                        var wrapColKeys = this.getObjectKeys(tempWrapCol[i]), wrapKeysLen = wrapColKeys.length;
                        for (j = 0; j < wrapKeysLen; j++) {
                            this._wrapTextLenCln([{ rowIndex: i, colIndex: wrapColKeys[j] }], sheet, operation, sheetIdx);
                        }
                    }
                }
            }
            if (operation === "updatecellvalue") {
                if (this._isRowViewable(sheetIdx, rowIdx))
                    this.getRows(sheetIdx)[1][this._getRowIdx(rowIdx)].style.height = sheet.rowsHeightCollection[rowIdx] + "px";
                this.model.allowSelection && this.XLSelection._refreshBorder();
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
            }
        },

        _wrapCollection: function (rowIdx, colIdx, cheight, sIdx) {
            var sheet = this.getSheet(sIdx ? sIdx : this.getActiveSheetIndex());
            if (this.model.scrollSettings.allowVirtualScrolling && rowIdx > this._getRowIdx((sheet._virtualContBlockIdx * sheet._virtualBlockRowCnt) + (sheet._virtualBlockRowCnt - 1), sIdx, true))
                return;
            !sheet._wrapColl[rowIdx] && (sheet._wrapColl[rowIdx] = {});
            sheet._wrapColl[rowIdx][colIdx] = cheight;
            if (sheet.rowsHeightCollection[rowIdx] < cheight && !this._isInMrgeRnge(rowIdx, colIdx, !sheet._isLoaded)) {
                sheet.rowsHeightCollection[rowIdx] = cheight;
                if (this.model.scrollSettings.allowScrolling)
                    this.XLScroll._getRowHeights(sIdx, rowIdx, true);
                this._getRowHdrTBody(sIdx).find('tr[data-idx="' + rowIdx + '"]').height(cheight);
            }
        },

        _isInMrgeRnge: function (rIdx, cIdx, isOnImport) {
            if (!isOnImport)
                return this.XLEdit.getPropertyValue(rIdx, cIdx, "merge");
            var i, range, sheetIdx = this._getSheetIndex(), mergedCells = this._impData ? this._impData.model.sheets[sheetIdx].mergedCells : [];
            !mergedCells && (mergedCells = []);
            for (i = 0; i < mergedCells.length; i++) {
                range = this.getRangeIndices(mergedCells[i]["range"]);
                if (range[0] <= rIdx && range[2] >= rIdx) {
                    if (range[1] <= cIdx && range[3] >= cIdx) {
                        return true;
                    }
                }
            }
            return false;
        },

        _setWrapHeight: function (sheetIdx, rowIdx, detachedRows, rowHdrs, emptyTable, status) {
            var rHt, newRow, tr = detachedRows[rowIdx], sheet = this.getSheet(sheetIdx), rowHtColl = sheet.rowsHeightCollection;
            if (rowHtColl[rowIdx] > 0)
                rHt = rowHtColl[rowIdx];
            else {
                if (sheet.hideRowsCollection.indexOf(rowIdx) === -1 || status === "visible") {
                    newRow = $(detachedRows[rowIdx].outerHTML).attr("id", "ss");
                    emptyTable[0].insertBefore(newRow[0], emptyTable[0].childNodes[0]);
                    rHt = emptyTable[0].rows[0].getBoundingClientRect().height;
                    emptyTable[0].rows[0].parentNode.removeChild(emptyTable[0].rows[0]);
                }
            }
            rHt = rHt < 20 ? 20 : rHt;
            if (parseInt(tr.style.height) < rHt) {
                tr.style.height = rHt + "px";
                $(rowHdrs[rowIdx])[0].style.height = rHt + "px";
                sheet.rowsHeightCollection[rowIdx] = rHt;
            }
        },

        _setRowHdrHeight: function (sheetIdx, rowIdx) {
            var dupRowIdx = this._getRowIdx(rowIdx), isIntrnlReq, ht;
            var sheet = this.getSheet(sheetIdx), rows = this.getRows(sheetIdx), height = sheet.rowsHeightCollection[rowIdx];
            if (this._isRowViewable(sheetIdx, rowIdx)) {
                ht = parseInt(rows[0][dupRowIdx].style.height);
                if (ht != height) {
                    rows[0][dupRowIdx].style.height = height + "px";
                    if (this.model.allowSelection) {
                        isIntrnlReq = this._intrnlReq;
                        this._intrnlReq = true;
                        this.XLSelection.refreshSelection();
                        if (sheet._isFreezed)
                            this.XLFreeze._refreshSelection();
                        this._intrnlReq = isIntrnlReq;
                    }
                    if ((!sheet._isImported || sheet._isLoaded) && this.model.allowAutoFill)
                        this.XLDragFill.positionAutoFillElement();
                }
            }
        },

        _refreshRangeTRHght: function (sheetIdx, range) {
            var i, sIdx = range[0] < 1 ? range[0] : range[0] - 1, sheet = this.getSheet(sheetIdx); // - 1 for border refresh
            for (i = sIdx; i <= range[2]; i++)
                this._setRowHdrHeight(sheetIdx, i);
            this.XLScroll._getRowHeights(sheetIdx, sIdx);
            if (!sheet._isImported || sheet._isLoaded)
                this.model.allowSelection && this.XLSelection._refreshBorder();
        },

        //Alert Dialog
        _renderAlertdlg: function () {
            var alertokBtn, alertbtndiv, confirmbtndiv, okCanButton, parent, str, cntrDiv = "<div class='e-dlg-btnctnr' id=", dlgId = this._id + "_alertdlg",
                opts = { text: this._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._alertOkClick, this), enabled: true, cssClass: "e-ss-okbtn" };
            if (document.getElementById(this._id + '_alertdlg'))
                return;
            okCanButton = "<input id=" + this._id + "_dialog_Ok ></input><input id=" + this._id + "_dialog_Can style= 'margin-left: 10'; ></input>";
            alertokBtn = "<input id=" + this._id + "_dialog_alertOk > </input>";
            confirmbtndiv = cntrDiv + dlgId + "_condiv >" + okCanButton + "</div>";
            alertbtndiv = cntrDiv + dlgId + "_alertdiv >" + alertokBtn + "</div>";
            str = "<div class='e-alertdlgcontent' id=" + dlgId + "_dlgcontent > </div>";
            str = str + "<div class='e-dlg-btnfields' id=" + dlgId + "_dlgbtncontent >" + confirmbtndiv + alertbtndiv + "</div>";
            parent = $("<div id=" + dlgId + " class='e-alertdlg' style= 'display : none;'>" + str + "</div>");
            this.element[0].appendChild(parent[0]);
            $("#" + this._id + "_dialog_alertOk").ejButton(opts);
            $("#" + this._id + "_dialog_Ok").ejButton(opts);
            $("#" + this._id + "_dialog_Can").ejButton({ text: this._getLocStr("Cancel"), showRoundedCorner: true, width: 60, click: ej.proxy(this._alertCanClick, this) });
        },

        alert: function (statusText) {
            var alertDlg = $("#" + this._id + "_alertdlg");
            this._renderAlertDlgContent(alertDlg, "Alert", statusText);
            alertDlg.ejDialog("open");
        },

        _renderAlertDlgContent: function ($dlg, type, content, targetName, dlgWidth, className) {
            var contentdiv = $dlg.find("#" + this._id + "_alertdlg_dlgcontent");
            var confirmdiv = $dlg.find("#" + this._id + "_alertdlg_condiv");
            var alertdiv = $dlg.find("#" + this._id + "_alertdlg_alertdiv");
            if (this._tabMode || this._phoneMode) {
                if (dlgWidth > (this._responsiveWidth / 1.2))
                    dlgWidth = (this._responsiveWidth / 1.2);
            }
            else
                dlgWidth = dlgWidth || 400;
            className = className || "";
            if (type === "Alert") {
                confirmdiv.hide();
                alertdiv.show();
            }
            else {
                confirmdiv.show();
                alertdiv.hide();
            }
            contentdiv.text("");
            contentdiv.html(content);
            $dlg.ejDialog({ showOnInit: false, enableModal: true, enableResize: false, enableAnimation: false, allowKeyboardNavigation: false, title: this._getLocStr("Title"), width: dlgWidth, height: "auto", minHeight: 0, cssClass: "e-ss-dialog e-" + this._id + "-dlg" + className, open: ej.proxy(this._alertDlgOpen) });
            this._alertDialog = { element: $dlg, action: targetName };
        },

        _alertDlgOpen: function () {
            this.element.find("input:visible:first").focus();
        },

        _alertOkClick: function () {
            var shtModel, sheetIdx = this.getActiveSheetIndex(), isUndoRedo = this._isUndoRedo;
            this._alertDialog.element.ejDialog("close");
            switch (this._alertDialog.action) {
                case "findPrevComment":
                    this.gotoPage(this.model.sheetCount, false);
                    shtModel = this.model.sheets[this.model.sheetCount];
                    this.XLComment._updateCurrentCell(shtModel.rowCount - 1, shtModel.colCount - 1);
                    this.XLComment.findPrevComment();
                    this._alertDialog.action = null;
                    break;
                case "findNextComment":
                    this.gotoPage(1, false);
                    this.XLComment._updateCurrentCell(0, 0);
                    this.XLComment.findNextComment();
                    this._alertDialog.action = null;
                    break;
                case "sheetRenameActn":
                    $("#" + this._id + "_Sheet_RenamePanel").select().focus();
                    break;
                case "sheetDeleteActn":
                    this._removeSheet(sheetIdx);
                    this._alertDialog.action = null;
                    break;
                case "New":
                    this.blankWorkbook();
                    break;
                case "Open":
                    $("#" + this._id + "_file .e-uploadinput").click();
                    break;
                case "MergeCells":
                    this._mergeCells(sheetIdx, this.model.sheets[sheetIdx]._selectedCells, {}, []);
                    this._alertDialog.action = null;
                    break;
                case "MergeAcrossCells":
                    this._mergeAcrossCells(sheetIdx, this.model.sheets[sheetIdx]._selectedCells);
                    this._alertDialog.action = null;
                    break;
                case "MergeInsertDelete":
                    this._refreshMergeCells();
                    this._alertDialog.action = null;
                    break;
                case "InvalidChartTitleActn":
                    $('#' + this._id + '_chartnamedlg').find("input:first").focus();
                    break;
                case "ConvertToRange":
                    this.XLFormat._convertToRange({});
                    break;
                case "TotalRow":
                    this._isUndoRedo = this._dupDetails = true;
                    this.insertEntireRow(this._insRows.startRow, this._insRows.endRow);
                    this.XLFormat._calculateTotalRow(sheetIdx, null, true, false, true);
                    this._isUndoRedo = isUndoRedo;
                    break;
                case "Drop":
                    var sheet = this.getSheet(sheetIdx);
                    this.XLDragDrop.moveRangeTo([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex], [this._dStartCell.rowIndex, this._dStartCell.colIndex, this._dEndCell.rowIndex, this._dEndCell.colIndex]);
                    sheet._startCell = this._dStartCell;
                    sheet._endCell = this._dEndCell;
                    this._trigger("drop", { sheetIndex: sheetIdx, target: this.XLDragDrop._target, currentCell: this.XLDragDrop._dragAndDropCell, dragAndDropRange: { startCell: sheet._startCell, endCell: sheet._endCell } });
                    break;
                case "FormulaAlert":
                    this.XLEdit._editElem.focus();
                    break;
                case "NMUniqueNameAlert":
                case "NMNameAlert":
                    document.getElementById(this._id + "_nmgridname") && document.getElementById(this._id + "_nmgridname").focus();
                    break;
                case "NMRangeAlert":
                    document.getElementById(this._id + "_nmgridrefersto") && document.getElementById(this._id + "_nmgridrefersto").focus();
                    break;
                case "OpenValDlg":
                    $("#" + this._id + "_ValDialog").ejDialog("open");
                    break;
                case "cellStyleAlert":
                    this._showDialog(this._id + "_CustomCellDialog");
                    break;
                case "multipleArrayFormula":
                    var trgtTd = this.XLEdit._editCell, rowIndex = this.getActiveCell(sheetIdx).rowIndex, colIndex = this.getActiveCell(sheetIdx).colIndex, value = this.XLEdit.getPropertyValue(rowIndex, colIndex, "value2");
                    this.element.find("#" + this._id + "_Edit").hide();
                    this.XLEdit._refreshTextNode(trgtTd[0], value);
                    this.model.showRibbon && this.XLRibbon._enableRibbonIcons();
                    this._formulaArray = true;
                    this.model.allowFormulaBar && this.updateFormulaBar();
                    this._formulaArray = false;
                    this.XLEdit._isEdit = false;
                    break;
                default:
                    this._setSheetFocus();
                    break;
            }
        },
        blankWorkbook: function () {
            var i = 1, prtctWrkBk;
            this._isNew = true;
            this._destroy();
            this._dataContainer.sheets[i] = {};
            this.clearUndoRedo();
            this._updateCellType();
            this.model.sheetCount = i;
            this.model.activeSheetIndex = i;
            this._sheetSettings(i);
            this._newSIndex++;
            this._initCSSTag();
            this.gotoPage(i, false);
            if (this.model.allowLockCell)
                this.protectSheet(false);
            prtctWrkBk = $("#" + this._id + "_Ribbon_Review_Changes_ProtectWorkbook").data("ejToggleButton");
            if (prtctWrkBk) {
                prtctWrkBk.option("toggleState", false);
                this.model.exportSettings.password = null;
                $("#" + this._id + "_AddSheet").removeClass("e-disable");
            }
            this.XLRibbon._toggleFormatTab();
            this.XLRibbon._toggleChartDesignTab();
            this.XLRibbon._toggleAnalyzeTab();
            this._refreshSpreadSheetPager();
            this.hideWaitingPopUp();
            this._isNew = false;
        },
        _alertCanClick: function () {
            var dlg = this._alertDialog;
            if (dlg.action == "findNextComment" || dlg.action == "findPrevComment")
                $(this.getActiveCellElem()).find('.e-comment-txtarea').css('display', 'inline-table');
            if (dlg.action == "TotalRow" && $("#" + this._id + "_Ribbon_Design_TableStyleOptions_TotalRow").length) {
                this.XLRibbon._isSetModel = true;
                $("#" + this._id + "_Ribbon_Design_TableStyleOptions_TotalRow").data("ejCheckBox").option("checked", false);
                this.XLRibbon._isSetModel = false;
            }
            dlg.element && dlg.element.ejDialog("close");
            switch (dlg.action) {
                case "Drop":
                    var sheet = this.getSheet(this.getActiveSheetIndex());
                    this.performSelection(sheet._startCell, sheet._endCell);
                    break;
            }
            this.hideWaitingPopUp();
        },

        _showAlertDlg: function (type, prop, targetName, dlgWidth, className) {
            var alertDlg = $("#" + this._id + "_alertdlg"), alert = "Alert", text, args = { reqType: "alert", action: targetName };
            if (prop instanceof Array) {
                if (prop[0] === "SheetRenameEmptyAlert")
                    text = "<ul><li>" + this._getLocStr(prop[0]) + "</li><li>" + this._getLocStr(prop[1]) + "</li><li>" + this._getLocStr(prop[2]) + "\\ \/ ? * [" + this._getLocStr("OR") + "  ] </li><li>" + this._getLocStr(prop[3]) + "</li></ul>";
                else if (prop[0] === "ClipboardAccessError")
                    text = this._getLocStr(prop[0]) + "<br /><br />" + this._getLocStr(prop[1]) + "  = Ctrl + X <br />" + this._getLocStr(prop[2]) + "  = Ctrl + C <br />" + this._getLocStr(prop[3]) + "  = Ctrl + V";
            }
            else {
                text = (prop.indexOf("T-") === 0) ? prop.slice(2) : this._getLocStr(prop);
                if (!text)
                    text = prop;
            }
            if (this._trigActionBegin(args)) {
                this._alertDialog.action = targetName;
                this._alertCanClick();
                return;
            }
            if (type === alert)
                this._renderAlertDlgContent(alertDlg, alert, text, targetName, dlgWidth, className);
            else
                this._renderAlertDlgContent(alertDlg, "", text, targetName, dlgWidth, className);
            alertDlg.ejDialog("open");
        },

        _isSheetsDirty: function () {
            var i = 1, sheets = this._dataContainer.sheets, len = this.getObjectLength(sheets) + 1;
            if (this.model.nameManager.length || this.getObjectLength(sheets) > 1)
                return true;
            while (i < len) {
                if (this.getObjectLength(sheets[i]))
                    return true;
                i++;
            }
            return false;
        },

        getCell: function (rowindex, columnindex, sheetIdx) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            var index = 0, sheet = this.getSheet(sheetIdx);
            if (this.model.scrollSettings.allowVirtualScrolling) {
                index = 1;
                rowindex = this._getRowIdx(rowindex, sheetIdx);
                if (rowindex === -1)
                    return null;
            }
            if ((this.isImport || this.model.isImport || sheet._isImported || this._isPrint) && this._detachTable)
                return $(this._detachTable[0].tBodies[index].rows[rowindex].cells[columnindex]);
            else {
                if (this._getContTBody(sheetIdx))
                    return $(this._getContTBody(sheetIdx)[0].rows[rowindex].cells[columnindex]);
                else
                    return null;
            }
        },

        getRange: function (range, sheetIdx, skipHiddenRow) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            range = this._getRangeArgs(range, "object", sheetIdx);
            var startRIndex = range[0], startCIndex = range[1], endRIndex = range[2], endCIndex = range[3], i, rowIdx, rows,
                rowCells, temp, len, tempCells, cells = [], sheet = this.getSheet(sheetIdx);
            if ((this.isImport || this.model.isImport || sheet._isImported) && this._detachTable)
                rows = $(this._detachTable[0].tBodies[1].rows);
            else
                rows = $(this._getContTBody(sheetIdx)[0].rows);
            if (startRIndex > endRIndex) {
                temp = startRIndex;
                startRIndex = endRIndex;
                endRIndex = temp;
            }
            if (startCIndex > endCIndex) {
                temp = startCIndex;
                startCIndex = endCIndex;
                endCIndex = temp;
            }
            if (this.model.scrollSettings.allowVirtualScrolling) {
                for (i = startRIndex; i <= endRIndex; i++) {
                    rowIdx = this._getRowIdx(i);
                    if (rowIdx > -1) {
                        rowCells = $(rows[rowIdx].cells);
                        tempCells = (endCIndex === startCIndex) ? [rowCells[endCIndex]] : this._browserDetails.version === "8.0" ? rowCells.slice(startCIndex, endCIndex + 1).toArray() : rowCells.slice(startCIndex, endCIndex + 1);
                        ej.merge(cells, tempCells);
                    }
                }
            }
            else {
                rows = (endRIndex !== startRIndex) ? rows.slice(startRIndex, endRIndex + 1) : rows.eq(endRIndex);
                len = rows.length;
                for (i = 0; i < len; i++) {
                    if (!skipHiddenRow || !this._isHiddenRow(i, sheetIdx)) {
                        rowCells = $(rows[i].cells);
                        tempCells = (endCIndex === startCIndex) ? [rowCells[endCIndex]] : this._browserDetails.version === "8.0" ? rowCells.slice(startCIndex, endCIndex + 1).toArray() : rowCells.slice(startCIndex, endCIndex + 1);
                        ej.merge(cells, tempCells);
                    }
                }
            }
            return $(cells);
        },

        getRangeIndices: function (range) {
            range = range.indexOf(":") === -1 ? range + ":" + range : range;
            range = range.replace(/\$/g, "");
            var rangeIndex = range.split(":"), rangeData, cells = [];
            rangeData = rangeIndex[0].split(/[A-Z]/i);
            cells.push(parseInt(rangeData[rangeData.length - 1]) - 1);
            cells.push(this._generateColCount(rangeIndex[0].split(/[0-9]/)[0].toUpperCase()) - 1);
            rangeData = rangeIndex[1].split(/[A-Z]/i);
            cells.push(parseInt(rangeData[rangeData.length - 1]) - 1);
            cells.push(this._generateColCount(rangeIndex[1].split(/[0-9]/)[0].toUpperCase()) - 1);
            this.swapRange(cells);
            return cells;
        },

        swapRange: function (cells) {
            if (cells[0] > cells[2])
                ej.dataUtil.swap(cells, 0, 2);
            if (cells[1] > cells[3])
                ej.dataUtil.swap(cells, 1, 3);
            return cells;
        },

        updateRange: function (sheetIdx, rangeSettings) {
            this._updateRangeValue(sheetIdx, rangeSettings, !rangeSettings.range);
        },

        _updateRangeValue: function (sheetIdx, rangeSettings, isRangeSettings) {
            if (this.model.isReadOnly)
                return;
            var i, r, len, obj, cont, rangeData, startCell, rangeCells, contTable, range = [], data = [], dataSource = rangeSettings.dataSource,
                rowCount = dataSource.length, colCount = this.getObjectLength(dataSource[0]);
            startCell = rangeSettings.startCell;
            if (rangeSettings.range)
                range = rangeSettings.range;
            else {
                rangeData = startCell.split(/[A-Z]/i);
                range.push(parseInt(rangeData[rangeData.length - 1]) - 1);
                range.push(this._generateColCount(startCell.split(/[0-9]/)[0].toUpperCase()) - 1);
                range.push(range[0] + rowCount - (rangeSettings.showHeader ? 0 : 1));
                range.push(range[1] + colCount - 1);
            }
            rangeCells = this._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
            cont = this._getContent(sheetIdx);
            contTable = this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content >table");
            if (!this.model.allowAutoCellType || !this.model.allowCellType)
                contTable.detach();
            if (rangeSettings.showHeader) {
                for (obj in dataSource[0])
                    data.push(obj);
            }
            for (r = 0; r < rowCount; r++) {
                if (dataSource[r] != undefined)
                    for (obj in dataSource[0])
                        data.push(dataSource[r][obj]);
            }
            this._dupDetails = true;
            for (i = 0, len = rangeCells.length; i < len; i++) {
                this.XLEdit._updateCell(rangeCells[i], data[i], sheetIdx);
                if (rangeSettings.showHeader && i < colCount) {
                    range = rangeSettings.startCell + ":" + (this._generateHeaderText(rangeCells[rangeCells.length - 1].colIndex + 1) + (rangeCells[0].rowIndex + 1));
                    if (rangeSettings.headerStyles)
                        this.XLFormat.format({ style: rangeSettings.headerStyles }, range);
                }
            }
            if (isRangeSettings) {
                this.model.sheets[sheetIdx].rangeSettings.push(rangeSettings);
                this._initRangeSettings(sheetIdx);
                rangeSettings.count = rangeSettings._jsonData.length;
                this._isPublic = true;
                this._initDataRange(sheetIdx);
                this._isPublic = false;
            }
            this._dupDetails = false;
            if (!this.model.allowAutoCellType || !this.model.allowCellType)
                cont.find(".e-content").append(contTable);
            if (!this._isUndoRedo) {
                var details = { sheetIndex: sheetIdx, reqType: "update-range", rangeSettings: rangeSettings, isHighlightData: false };
                this._completeAction(details);
                this._trigActionComplete(details);
            }
            if (details.isHighlightData) {
                this._pushHighlightData([rangeCells[0].rowIndex, rangeCells[0].colIndex, rangeCells[rangeCells.length - 1].rowIndex, rangeCells[rangeCells.length - 1].colIndex]);
                if (this.XLClipboard._highLightRange.length && details.operation != "hl-data") {
                    len = this.XLClipboard._highLightRange.length;
                    for (i = 0; i < len; i++)
                        this.XLValidate.highlightInvalidData(this.XLClipboard._highLightRange[i]);
                    this.XLClipboard._highLightRange = [];
                }
            }
        },

        editRange: function (rangeName, fn) {
            var i, j, len, cell, cont, data, contTable, $cell, sheetIdx = this.getActiveSheetIndex(),
                rangeInfo = this.getSheet(sheetIdx).rangeSettings[rangeName], range = this.getRangeIndices(rangeInfo.range),
                rangeCells = this.getRange(range);
            this._trigger("editRangeBegin", { range: rangeInfo, sheetIndex: sheetIdx });
            if (rangeInfo.cssClass)
                rangeCells.addClass(rangeInfo.cssClass);
            if (rangeInfo.readOnly)
                rangeCells.addClass("e-readonly");
            cont = this._getContent(sheetIdx);
            contTable = this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content >table");
            contTable.detach();
            for (i = 0, len = rangeCells.length; i < len; i++) {
                cell = rangeCells[i], $cell = $(cell);
                if ($.trim(rangeName).length)
                    this.XLEdit._updateDataContainer({ rowIndex: cell.parentNode.rowIndex, colIndex: cell.cellIndex }, { dataObj: { range: rangeName } });
                data = fn(cell, cell.cellIndex, i);
                if (typeof data === 'string')
                    this.XLEdit._updateCell({ rowIndex: cell.parentNode.rowIndex, colIndex: cell.cellIndex }, data);
                else if (typeof data === 'object') {
                    if (data.Value.indexOf("=") !== 0)
                        this.XLEdit._updateCell({ rowIndex: cell.parentNode.rowIndex, colIndex: cell.cellIndex }, data.Value);
                    else
                        this.XLEdit._updateCellValue({ rowIndex: cell.parentNode.rowIndex, colIndex: cell.cellIndex }, data.Value);
                    $cell.data("value2", data.Value2);
                    $cell.data("type", data.NumberFormat);
                    if (data.StyleIndex > 1)
                        $cell.addClass(this._styleColl[data.StyleIndex]);
                }
            }
            cont.find(".e-content").append(contTable);
            for (j = range[0]; j < range[2] + 1; j++)
                this._setRowHdrHeight(sheetIdx, j);
            this._trigger("editRangeComplete", { range: rangeInfo, sheetIndex: sheetIdx });
            this.XLScroll._getRowHeights(sheetIdx, range[0]);
        },

        removeRange: function (rangeName) {
            this.clearRange(rangeName);
            delete this.getSheet(this.getActiveSheetIndex()).rangeSettings[rangeName];
        },

        clearRange: function (rangeName) {
            if (this.model.isReadOnly)
                return;
            var range, rangeCells, rangeInfo = this.getSheet(this.getActiveSheetIndex()).rangeSettings[rangeName];
            range = this.getRangeIndices(rangeInfo.range);
            rangeCells = this.getRange(range);
            if (rangeInfo.cssClass)
                rangeCells.removeClass(rangeInfo.cssClass);
            if (rangeInfo.readOnly)
                rangeCells.removeClass("e-readonly");
            this.clearRangeData(null, ["range", "value", "type", "value2"], rangeCells);
            rangeCells.empty();
        },

        getObjectLength: function (obj) {
            var i, cnt = 0;
            obj = Object.prototype.toString.call(obj) === Object.prototype.toString() ? obj : {};
            if (Object.keys)
                return Object.keys(obj).length;
            for (i in obj) {
                if (obj.hasOwnProperty(i))
                    cnt++;
            }
            return cnt;
        },

        getObjectKeys: function (obj) {
            var i, keys = [];
            obj = Object.prototype.toString.call(obj) === Object.prototype.toString() ? obj : {};
            if (!Object.keys) {
                for (i in obj) {
                    if (obj.hasOwnProperty(i))
                        keys.push(i);
                }
                return keys;
            }
            if (Object.keys)
                return Object.keys(obj);
        },

        toArrayLowerCase: function (args) {
            for (var i = 0; i < args.length; i++)
                args[i] = args[i].toString().toLowerCase();
            return args;
        },

        _isValueAlreadyExist: function (arrObj, key, value) {
            var i = 0, len = arrObj.length;
            while (i < len) {
                if (arrObj[i][key] === value)
                    return true;
                i++;
            }
            return false;
        },

        addClass: function (elem, classname) {
            if (!elem || elem.localName === "svg" || elem.localName === "path" || elem.localName === "rect")
                return;
            if (elem instanceof jQuery || elem instanceof Array)
                elem = elem[0];
            var classes = elem.className;
            if (classes.indexOf(classname) === -1)
                elem.className = classes + " " + classname;
        },

        _removeClass: function (elem, className) {
            if (!elem)
                return;
            if (elem instanceof jQuery || elem instanceof Array)
                elem = elem[0];
            elem.className = className ? elem.className.replace(new RegExp(className, "g"), '').replace(/ +/g, ' ') : "";
        },

        _hasClass: function (elem, className) {
            if (!elem)
                return false;
            if (elem instanceof jQuery || elem instanceof Array)
                elem = elem[0];
            if (!elem || this._isAnimatedString(elem.className))
                return false;
            return elem.className.indexOf(className) > -1;
        },

        isUndefined: function (val) {
            return val === undefined;
        },

        _isString: function (obj) {
            return typeof obj === "string";
        },

        _isEmptyString: function (val) {
            return !val.toString().length;
        },

        _isObject: function (obj) {
            if (typeof obj !== "object")
                return false;
            return Object.prototype.toString.call(obj) === "[object Object]";
        },
        _getObjectValues: function (obj) {
            var i, values = [];
            obj = Object.prototype.toString.call(obj) === Object.prototype.toString() ? obj : {};
            for (i in obj)
                obj.hasOwnProperty(i) && values.push(obj[i]);
            return values;
        },

        _isAnimatedString: function (className) {
            return Object.prototype.toString.call(className) === "[object SVGAnimatedString]";
        },

        _isBool: function (val) {
            val = val + '';
            val = val.toUpperCase();
            return (val === "TRUE" || val === "FALSE");
        },

        isRange: function (range) {
            return range && (range[0] !== range[2] || range[1] !== range[3]);
        },

        _isMultiRange: function (range) {
            return !this._isString(range) && !this.isNumber(range[0]);
        },

        inRange: function (range, rowIdx, colIdx) {
            return range && (rowIdx >= range[0] && rowIdx <= range[2] && colIdx >= range[1] && colIdx <= range[3]);
        },

        _inRow: function (range, rowIdx) {
            return range && (rowIdx >= range[0] && rowIdx <= range[2]);
        },

        _inColumn: function (range, colIdx) {
            return range && (colIdx >= range[1] && colIdx <= range[3]);
        },

        _isUniqueRange: function (oldRange, newRange) {
            return oldRange.toString() === newRange.toString();
        },

        _isUniqueTarget: function (sevt, eevt) {
            var epos = this._getOriginalEvt(eevt), etrgt = document.elementFromPoint(epos.clientX, epos.clientY);
            return sevt.target === etrgt;
        },

        _getClientDiff: function (sXY, eXY) {
            return {
                x: sXY[0] - eXY[0],
                y: sXY[1] - eXY[1]
            };
        },

        hasSpan: function (cellIdx) {
            return this.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "merge") ? true : false;
        },

        _isFrozen: function (idx) {
            return idx > 0;
        },

        _isSelected: function (trgt) {
            if (this._hasClass(trgt, "e-selected") || this._hasClass(trgt, "e-rowselected") || this._hasClass(trgt, "e-colselected") || $(trgt).parents(".e-colselected").length)
                return true;
            return false;
        },

        _getMergedIdx: function (rowIdx, colIdx) {
            var range, minr, maxr, minc, maxc, i, sheet, rcount, ccount, sheetIdx = this.getActiveSheetIndex(), merge = this.XLEdit.getPropertyValue(rowIdx, colIdx, "merge", sheetIdx);
            rcount = ccount = 0;
            if (merge) {
                if (merge.mRange) {
                    range = this.getRangeIndices(merge.mRange);
                    sheet = this.getSheet(sheetIdx);
                    if (sheet.hideRowsCollection.length) {
                        minr = range[0], maxr = range[2];
                        if (maxr - minr > 1) {
                            i = minr + 1;
                            while (i < maxr) {
                                if (this.XLEdit.getPropertyValue(i, 0, ["isRHide"], sheetIdx))
                                    rcount++;
                                i++;
                            }
                        }
                    }
                    if (this.getObjectLength(sheet.hideColsCollection)) {
                        minc = range[1], maxc = range[3];
                        if (maxc - minc > 1) {
                            i = minc + 1;
                            while (i < maxc) {
                                if (this.XLEdit.getPropertyValue(0, i, ["isCHide"], sheetIdx))
                                    ccount++;
                                i++;
                            }
                        }
                    }
                }
                if (merge.mSpan) {
                    return { rowIndex: rowIdx + merge.mSpan.rowSpan + rcount - 1, colIndex: colIdx + merge.mSpan.colSpan + ccount - 1 };
                }
            }
            return { rowIndex: rowIdx, colIndex: colIdx };
        },

        _getMergeParent: function (rowIdx, colIdx) {
            var mIndex = this.XLEdit.getPropertyValue(rowIdx, colIdx, "mergeIdx");
            if (mIndex)
                return { rowIndex: mIndex.rowIndex, colIndex: mIndex.colIndex };
            return { rowIndex: rowIdx, colIndex: colIdx };
        },

        _getCellInfo: function (cellIdx, sheetIdx) {
            var sheet = this.getSheet(this._getSheetIndex(sheetIdx)), top, left, merge, width = 0, height = 0, mSpan, i;
            top = (this.model.allowFreezing && (cellIdx.rowIndex >= sheet._frozenRows)) ? sheet._rowHeightCollection[cellIdx.rowIndex] - (sheet._rowHeightCollection[sheet._ftopRowIdx] - sheet._rowHeightCollection[sheet._frozenRows - 1]) : sheet._rowHeightCollection[cellIdx.rowIndex];
            left = (this.model.allowFreezing && (cellIdx.colIndex >= sheet._frozenColumns)) ? sheet._colWidthCollection[cellIdx.colIndex] - (sheet._colWidthCollection[sheet._fleftColIdx] - sheet._colWidthCollection[sheet._frozenColumns - 1]) : sheet._colWidthCollection[cellIdx.colIndex];
            merge = this.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "merge");
            if (merge) {
                mSpan = merge.mSpan;
                for (i = 0; i < mSpan.rowSpan; i++)
                    height += sheet.hideRowsCollection.indexOf(cellIdx.rowIndex + i) === -1 ? sheet.rowsHeightCollection[cellIdx.rowIndex + i] : 0;
                for (i = 0; i < mSpan.colSpan; i++)
                    width += sheet.columnsWidthCollection[cellIdx.colIndex + i];
            }
            else {
                height = sheet.hideRowsCollection.indexOf(cellIdx.rowIndex) === -1 ? sheet.rowsHeightCollection[cellIdx.rowIndex] : 0,
                    width = sheet.columnsWidthCollection[cellIdx.colIndex];
            }
            return {
                top: top - 1,
                left: left - 1,
                height: height,
                width: width
            };
        },

        _getRowIdx: function (rowIdx, sheetIdx, isArrIdx, isRowIdx) {
            var idx, sheet = this.getSheet(sheetIdx);
            if (isArrIdx) {
                idx = sheet._rowIdxColl[rowIdx];
                rowIdx = this.isUndefined(idx) ? sheet._rowIdxColl[sheet._rowIdxColl.length - 1] : idx;
            }
            else if (isRowIdx) {
                idx = sheet._rowIdxColl.indexOf(rowIdx);
                rowIdx = idx === -1 ? rowIdx : idx;
            }
            else if (this.model.scrollSettings.allowScrolling && this.model.scrollSettings.allowVirtualScrolling)
                rowIdx = sheet._virtualRowIdx.indexOf(rowIdx);
            return rowIdx;
        },

        _getMinRowIdx: function (sheet) {
            for (var i = 0; i < sheet.rowCount; i++) {
                if (sheet.hideRowsCollection.indexOf(i) === -1 && sheet._hiddenFreezeRows.indexOf(i) === -1)
                    return i;
            }
            return 0;
        },

        _arrayAsString: function (arr) {
            return arr.join(" ").replace(/,/g, " ");
        },

        _rangeHasData: function (range) {
            var cells, i, cellIdx;
            range = this.swapRange(range);
            cells = this._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
            i = cells.length;
            while (i--) {
                cellIdx = cells[i];
                if (this.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex))
                    return true;
            }
            return false;
        },

        _isTableRange: function (rowIdx, colIdx, sheetIdx) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            var i, tmngr = this.getSheet(sheetIdx).tableManager;
            for (i in tmngr) {
                if (this.inRange(tmngr[i].range, rowIdx, colIdx))
                    return true;
            }
            return false;
        },

        _hasCellStyle: function (rowIdx, colIdx, sheetIdx) {
            var style, props = ["borders", "formats"], i = props.length;
            while (i--) {
                style = this.XLEdit.getPropertyValue(rowIdx, colIdx, props[i], sheetIdx);
                if (style)
                    return true;
            }
            return false;
        },

        _isHiddenRow: function (rowIdx, sheetIdx) {
            return (this.XLEdit.getPropertyValue(rowIdx, 0, "isFilterHide", sheetIdx) || this.XLEdit.getPropertyValue(rowIdx, 0, "isRHide", sheetIdx)) || false;
        },

        _refreshViewVar: function (top, left, sheetIdx) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            var sheet = this.getSheet(sheetIdx);
            if (!ej.isNullOrUndefined(top)) {
                sheet._topRow.idx = this.XLShape._getCellIndexFromOffset(top, null, sheetIdx).rowIndex;
                sheet._topRow.value = this._getRowOffsetTop(sheet, sheet._topRow.idx);
                sheet._bottomRow.idx = sheet._rowIdxColl[sheet._topRow.idx + (sheet._virtualBlockRowCnt - this._bufferCnt - 1)]; // -1 as virtualblockrowcnt is 1 index based.
                sheet._bottomRow.value = this._getRowOffsetTop(sheet, sheet._bottomRow.idx);
                sheet.topLeftCell = this.getAlphaRange(sheet._topRow.idx, sheet._leftCol.idx);
            }
            if (!ej.isNullOrUndefined(left)) {
                sheet._leftCol.idx = this.XLShape._getCellIndexFromOffset(null, left, sheetIdx).colIndex;
                sheet._leftCol.value = this._getColOffsetLeft(sheet, sheet._leftCol.idx);
                sheet._rightCol.idx = this.XLShape._getCellIndexFromOffset(null, left + sheet._vPortWth, sheetIdx).colIndex || sheet.colCount - 1;
                sheet._rightCol.value = this._getColOffsetLeft(sheet, sheet._rightCol.idx);
                sheet.topLeftCell = this.getAlphaRange(sheet._topRow.idx, sheet._leftCol.idx);
            }
        },

        _getFormatString: function (type, decimalplace) {
            var formatstr = ej.Spreadsheet.CellFormat[type];
            if (this.isNumber(decimalplace) && !ej.isNullOrUndefined(formatstr))
                formatstr = "{0:" + formatstr.substr(3, 1) + decimalplace + "}";
            return formatstr || "";
        },

        _refreshVrtlBlocks: function (sheetIdx) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            var rowIdx, i, idx, cnt = 3, arr = ["_virtualTopTBodyOffset", "_virtualContTBodyOffset", "_virtualBottomTBodyOffset"],
                sheet = this.getSheet(sheetIdx);
            i = idx = 0;
            while (i < cnt) {
                if ((!i && !sheet._isVirtualTopReached) || i === 1 || (i === 2 && !sheet._isVirtualEndReached)) {
                    rowIdx = sheet._virtualRowIdx[idx];
                    sheet[arr[i]].top = this._getRowOffsetTop(sheet, rowIdx);
                    idx += sheet._virtualBlockRowCnt;
                    rowIdx = sheet._virtualRowIdx[idx - 1];
                    sheet[arr[i]].bottom = this._getRowOffsetBottom(rowIdx, sheetIdx);
                }
                i++;
            }
            sheet._virtualTBodyHgt = sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1] + sheet.rowsHeightCollection[sheet.rowsHeightCollection.length - 1];
        },

        getRangeDataAsObject: function (startcell, endcell, skipHiddenRow) {
            var i, columnName, celldata, temp, formatTemp, ctype = ej.Spreadsheet.CellType, container = this._dataContainer,
                sheetdata = container.sheets[this.getActiveSheetIndex()], minrindex, maxrindex, mincindex, maxcindex, rangeData = [], formattedRangeData = [], data = [];
            startcell.rowIndex > endcell.rowIndex ? (minrindex = endcell.rowIndex, maxrindex = startcell.rowIndex) : (minrindex = startcell.rowIndex, maxrindex = endcell.rowIndex);
            startcell.colIndex > endcell.colIndex ? (mincindex = endcell.colIndex, maxcindex = startcell.colIndex) : (mincindex = startcell.colIndex, maxcindex = endcell.colIndex);
            while (minrindex <= maxrindex) {
                if (!skipHiddenRow || !this._isHiddenRow(minrindex)) {
                    temp = {}, formatTemp = {};
                    for (i = mincindex; i <= maxcindex; i++) {
                        columnName = this._generateHeaderText(i + 1);
                        if (minrindex in sheetdata && i in sheetdata[minrindex]) {
                            celldata = sheetdata[minrindex][i];
                            temp[columnName] = container.sharedData[celldata.value];
                            formatTemp[columnName] = [ctype.General, ctype.Text].indexOf(container.cellType[celldata.type]) === -1 ? celldata.value2 : container.sharedData[celldata.value2];
                        }
                    }
                    rangeData.push(temp);
                    formattedRangeData.push(formatTemp);
                }
                minrindex++;
            }
            data.push(rangeData);
            data.push(formattedRangeData);
            return data;
        },

        getRangeDataAsJSON: function (startcell, endcell, skipHiddenRow, sheetIdx) {
            var i, columnName, celldata, formatTemp, ctype = ej.Spreadsheet.CellType, container = this._dataContainer, sheetdata = container.sheets[sheetIdx ? sheetIdx : this.getActiveSheetIndex()], minrindex, maxrindex, mincindex, maxcindex;
            var formattedRangeData = [], isHeader = true, columns = [], value;
            if (startcell.rowIndex > endcell.rowIndex) {
                minrindex = endcell.rowIndex;
                maxrindex = startcell.rowIndex;
            }
            else {
                minrindex = startcell.rowIndex;
                maxrindex = endcell.rowIndex;
            }
            if (startcell.colIndex > endcell.colIndex) {
                mincindex = endcell.colIndex;
                maxcindex = startcell.colIndex;
            }
            else {
                mincindex = startcell.colIndex;
                maxcindex = endcell.colIndex;
            }
            while (minrindex <= maxrindex) {
                if (!skipHiddenRow || !this._isHiddenRow(minrindex)) {
                    formatTemp = {};
                    for (i = mincindex; i <= maxcindex; i++) {
                        if (!isHeader) {
                            columnName = columns[i];
                            if (minrindex in sheetdata && i in sheetdata[minrindex]) {
                                celldata = sheetdata[minrindex][i];
                                if (!this.isUndefined(celldata.type) && ([ctype.General, ctype.Text].indexOf(container.cellType[celldata.type]) === -1)) {
                                    if ([ctype.Currency, ctype.Accounting, ctype.Percentage].indexOf(container.cellType[celldata.type]) > -1)
                                        value = container.sharedData[celldata.value];
                                    else
                                        value = celldata.value2;
                                }
                                else
                                    value = container.sharedData[celldata.value2];
                                if (!ej.isNullOrUndefined(value))
                                    formatTemp[columnName] = this.isNumber(value) ? parseInt(value) : value;
                                else
                                    formatTemp[columnName] = "";
                            }
                            else
                                formatTemp[columnName] = "";
                        }
                        else if (minrindex in sheetdata && i in sheetdata[minrindex]) {
                            celldata = sheetdata[minrindex][i];
                            if (!this.isUndefined(celldata.type) && ([ctype.General, ctype.Text].indexOf(container.cellType[celldata.type]) === -1))
                                columns[i] = celldata.value2;
                            else
                                columns[i] = container.sharedData[celldata.value2];
                        }
                    }
                    if (!isHeader && this.getObjectLength(formatTemp)) {
                        formattedRangeData.push(formatTemp);
                    }
                }
                minrindex++;
                if (isHeader)
                    isHeader = false;
            }
            return formattedRangeData;
        },

        _getColorFromFormat: function (format) {
            var color = [], hashCode, fgcolor, bgcolor;
            if (!ej.isNullOrUndefined(format)) {
                hashCode = format.replace("e-format", "").toLowerCase();
                (hashCode.startsWith("6n")) ? fgcolor = "#" + hashCode.substr(2, 6) : fgcolor = "#" + hashCode.substr(6, 6);
                bgcolor = "#" + hashCode.substr(0, 6);
                color.push(bgcolor);
                color.push(fgcolor);
            }
            return color;
        },

        getRangeData: function (options) {
            options = options || {};
            options.sheetIdx = this._getSheetIndex(options.sheetIdx);
			var sheet = this.getSheet(options.sheetIdx);
            options.range = this._toIntrnlRange(options.range, options.sheetIdx);
			var settings = this.getDataSettings(options.sheetIdx);
			if (!sheet._isLoaded && settings && !sheet._hasDataSrc) {
				settings[0].count = settings[0]._jsonData.length;
				this._initDataRange(options.sheetIdx);
				this._refreshRowColCnt(options.sheetIdx);
				this._initViewPort(options.sheetIdx);
				this._refreshDataSrc(options.range, options.sheetIdx);
				sheet._renderedRange = $.extend(true, sheet._renderedRange, sheet._virtualDataLoadedBlks);
				sheet._hasDataSrc = false;
			}
            options.property = options.property || ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "range", "format", "border", "comment", "hyperlink", "picture", "cFormatRule", "rule", "chart", "isLocked", "wrap", "formats", "cellType", "altTxt"];
            var i = 0, len, minc, minr, maxr, maxc, isHiddenRow, skipVirtualHiddenRow, rowIdx = [], arr = [];
            if (options.rowIdxs) {
                len = options.rowIdxs.length;
                while (i < len) {
                    this._pushRowData(options, options.rowIdxs[i], 0, sheet.colCount - 1, arr, rowIdx);
                    i++;
                }
            }
            else {
                skipVirtualHiddenRow = false;
                if (this.model.scrollSettings.allowVirtualScrolling && options.skipHiddenRow && !ej.isNullOrUndefined(options.virtualRowIdx)) {
                    skipVirtualHiddenRow = true;
                    minr = options.virtualRowIdx;
                    maxr = minr + (options.virtualRowCount - 1);
                    maxc = sheet.colCount - 1;
                }
                else {
                    minr = options.range[0];
                    maxr = options.range[2];
                    maxc = options.range[3];
                }
                while (minr <= maxr) {
                    isHiddenRow = this._isHiddenRow(minr, options.sheetIdx);
                    if (skipVirtualHiddenRow && isHiddenRow)
                        maxr++;
                    else if (!options.skipHiddenRow || !isHiddenRow) {
                        minc = skipVirtualHiddenRow ? 0 : options.range[1];
                        this._pushRowData(options, minr, minc, maxc, arr, rowIdx, true);
                    }
                    minr++;
                }
            }
            return options.withRowIdx ? { rowIdx: rowIdx, data: arr } : arr;
        },

        _pushRowData: function (options, minr, minc, maxc, arr, rowIdx, isDataSrcEnsured) {
            var val, obj, prop, cellData, sharedData, value = "value", intrnlUpdate = this._intrnlUpdate, container = this._dataContainer, sheetdata = container.sheets[options.sheetIdx];
            if (!isDataSrcEnsured)
                this.XLEdit._refreshContainer(minr, options.sheetIdx);
            if (sheetdata[minr]) {
                if (options.valueOnly) {
                    while (minc <= maxc) {
                        val = "";
                        cellData = sheetdata[minr][minc];
                        if (cellData && value in cellData) {
                            sharedData = container.sharedData;
                            val = sharedData[cellData[value]];
                            if (options.skipDateTime && this._isDateTime(val))
                                val = this.XLEdit.getPropertyValue(minr, minc, "value2", options.sheetIdx);
                            else if (options.skipFormula && this.isFormula(val)) {
                                val = this.XLEdit.getPropertyValue(minr, minc, "calcValue", options.sheetIdx) || this.XLEdit.getPropertyValue(minr, minc, "value2", options.sheetIdx);
                                if (this.isUndefined(val)) {
                                    val = this.XLEdit.getPropertyValue(minr, minc, "value2", options.sheetIdx);
                                    val = this.XLEdit._parseValue(val).value;
                                }
                            }
                        }
                        if (!options.skipEmptyCell || (!this.isUndefined(val) && val.toString().length))
                            arr.push(val);
                        minc++;
                    }
                }
                else {
                    this._intrnlUpdate = true;
                    while (minc <= maxc) {
                        cellData = sheetdata[minr][minc];
                        if (cellData) {
                            obj = {};
                            for (prop in cellData) {
                                if (options.property.indexOf(prop) > -1)
                                    obj[prop] = this.XLEdit.getPropertyValue(minr, minc, prop, options.sheetIdx);
                            }
                            if (!options.skipEmptyCell || this.getObjectLength(obj))
                                arr.push(obj);
                        }
                        else if (!options.skipEmptyCell)
                            arr.push({});
                        minc++;
                    }
                    this._intrnlUpdate = intrnlUpdate;
                }
            }
            else if (!options.skipEmptyCell) {
                while (minc <= maxc) {
                    options.valueOnly ? arr.push("") : arr.push({});
                    minc++;
                }
            }
            rowIdx.push(minr);
        },

        _processBindings: function (args) {
            this.model.query = new ej.Query();
            if (this._trigger("actionBegin", args))
                return true;
            this._ensureDataSource(args);
            if (args.action === "sorting") {
                this.XLSort._sortComplete(args);
                if (!this._isUndoRedo) {
                    this._completeAction(args);
                    this._trigActionComplete(args);
                }
                if (args.isHighlightData) {
                    this._pushHighlightData([args.range[0], args.range[1], args.range[2], args.range[3]]);
                    if (this.XLClipboard._highLightRange.length && args.operation != "hl-data") {
                        for (var i = 0, len = this.XLClipboard._highLightRange.length; i < len; i++)
                            this.XLValidate.highlightInvalidData(this.XLClipboard._highLightRange[i]);
                        this.XLClipboard._highLightRange = [];
                    }
                }
            }
            else {
                this._completeAction(args);
                this._trigActionComplete(args);
            }
        },

        _ensureDataSource: function (args) {
            var dataSource, dataSrc, prop, predicate, predicates, obj, result, tblrange, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
            if (args.action === "filtering" || args.action === "clearfiltering" || args.requestType === "filterbycell") {
                dataSource = (sheet.filterSettings.filteredRange == null) ? this._dataSource(sheetIdx) : sheet.filterSettings.filteredRange;
                tblrange = sheet.filterSettings.tableRange;
                for (var i = 0, len = tblrange.length; i < len; i++) {
                    if (tblrange[i].tableID === args.tableID) {
                        tblrange[i].filteredRange = dataSource;
                        break;
                    }
                }
                this._dataManager = ej.DataManager(dataSource);
                if (!(dataSource instanceof ej.DataManager))
                    this.model.currentViewData = dataSource;
                this.model.query.requiresCount();
                if (args.filteredcolumns.length) {
                    predicates = this._excelFilter._predicates[sheetIdx];
                    dataSrc = dataSource[0];
                    for (prop in predicates) {
                        (dataSrc.hasOwnProperty(prop)) && (obj = predicates[prop]);
                        obj = predicates[prop];
                        predicate = predicate != undefined ? predicate["and"](obj) : obj;
                    }
                    if (!ej.isNullOrUndefined(predicate))
                        this.model.query.where(predicate);
                    if (!(dataSource instanceof ej.DataManager)) {
                        result = this._dataManager.executeLocal(this.model.query);
                        this._filteredRecordsCount = result.count;
                        this.model.currentViewData = result.result;
                    }
                }
            }
            else if (args.requestType === "sorting") {
                this._dataManager = ej.DataManager(args.rangeData);
                if (!(args.rangeData instanceof ej.DataManager))
                    this.model.currentViewData = args.rangeData;
                this.model.query.sortBy(args.columnName, args.sortDirection);
                if (!(args.rangeData instanceof ej.DataManager)) {
                    result = this._dataManager.executeLocal(this.model.query);
                    this.model.currentViewData = result;
                }
            }
            this._dataManager = null;
        },

        _toArrayData: function (args) {
            var prop, obj, i = 0, temp = [], len = args.length;
            while (i < len) {
                obj = args[i];
                if (this.getObjectLength(obj)) {
                    for (prop in obj)
                        temp.push(obj[prop]);
                }
                else
                    temp.push("");
                i++;
            }
            return temp;
        },

        _updateRangeStyle: function (range, data, status) {
            var cells = this._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
            for (var i = 0; i < cells.length; i++) {
                if (this.model.allowCellFormatting && this.XLFormat._hasFormat(data[i].format)) {
                    this.XLFormat._updateFormatClass(cells[i], data[i].format);
                    this.XLEdit._updateDataContainer(cells[i], { dataObj: { formats: data[i].formats }, sheetIdx: this.getActiveSheetIndex(), status: status });
                }
            }
        },

        updateRangeData: function (range, data) {
            if (this.model.isReadOnly)
                return;
            range = this._getRangeArgs(range, "object");
            if (range.length) {
                range.startCell = { rowIndex: range[0], colIndex: range[1] };
                range.endCell = { rowIndex: range[2], colIndex: range[3] };
            }
            var cells = this._getSelectedRange(range.startCell, range.endCell), dataArray = this._toArrayData(data);
            if (dataArray.length === cells.length) {
                for (var i = 0; i < cells.length; i++) {
                    if (!ej.isNullOrUndefined(dataArray[i]))
                        this.XLEdit._updateCellValue(this.getCell(cells[i].rowIndex, cells[i].colIndex), dataArray[i]);
                }
            }
        },
        dataSource: function (data, fieldAsColumnHeader) {
            var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), setting;
            this._isDataSrcMethod = true;
            if (data.dataSource) {
                sheet.rangeSettings = [];
                sheet._virtualDataLoadedBlks = [];
                sheet._virtualRowIdx = [];
                sheet.dataSource = data;     // refresh the spreadsheet based on the datamanager
                sheet._dataManager = data;
                this._isInitLoad = true;
                this.model.allowOverflow = false;  // to set the skipcell
                sheet._isVPRendered = false;
                sheet.fieldAsColumnHeader = fieldAsColumnHeader || false;
                setting = this.getDataSettings(sheetIdx);
                setting._dataManager = data;
                var i = 0, len = setting.length;
                while (i < len) {
                    this._initDataSrc(sheetIdx, sheet, setting[i]);
                    i++;
                }
            }
            else {
                sheet.rangeSettings = [{ dataSource: data }]; // refresh the spreadsheet based on the datasource
                sheet._isVPRendered = false;
                sheet._virtualRowIdx = [];
                this._dataContainer.sheets[sheetIdx] = {};
                sheet.fieldAsColumnHeader = fieldAsColumnHeader || false;
                this._initRangeSettings(sheetIdx);
                sheet.rangeSettings[0].count = sheet.rangeSettings[0]._jsonData.length;
                sheet._virtualDataLoadedBlks = [];
                if (this.model.scrollSettings.allowScrolling)
                    this._refreshContent(sheetIdx);
                else if (!this.model.scrollSettings.allowScrolling) {
                    this._initDataRange(sheetIdx);
                    this._setScrolling(this.model.scrollSettings.allowScrolling);
                }
                if (this.model.scrollSettings.allowVirtualScrolling)
                    this._setVirtualScrolling(true);
                else if (!this.model.scrollSettings.allowVirtualScrolling) {
                    this._initDataRange(sheetIdx);
                    sheet._isDataMoved = true;
                    this._canOverflow = false;
                    this._refreshDataSrc(null, sheetIdx);
                    this._refreshCellData(null, sheetIdx);
                    this._canOverflow = true;
                    this._refreshOverflow();
                    this._setVirtualScrolling(false);
                }
            }
            if (this._isAutoWHMode) {
                this._setElemDimension();
            }
        },
        _setElemDimension: function () {
            var dimension = this._getElementDimension();
            this.element.css({ height: dimension.height, width: dimension.width });
        },
        updateData: function (datas, range, status) {
            if (this.model.isReadOnly)
                return;
            var i, j, k, l, val, cell, isWrap, temp, data, hlData, m = 0, clrFrmt = "clear-format", formatObj = {}, props = this._cellProp,
                sheetIdx = this.getActiveSheetIndex();
            range = this._getRangeArgs(range, "object");
            i = range[0], j = range[2], l = range[3];
            while (i <= j) {
                k = range[1];
                while (k <= l) {
                    data = datas[m];
                    temp = data['value'];
                    cell = this.getCell(i, k, sheetIdx);
                    if ("wrap" in data) {
                        isWrap = true;
                        delete data["wrap"];
                    }
                    if (this._ddCellSave) {
                        var args = { cellIndex: { rowIndex: i, colIndex: k }, value: data['value'], sheetIdx: sheetIdx, reqType: "drag-drop" }
                        if (this._trigger("cellSave", args))
                            return;
                        if (args.value)
                            data['value'] = args.value;
                        else
                            delete data["value"];
                        temp != args.value && (data['value2'] = args.value && args.value.toString());
                    }
                    this.XLEdit._updateDataContainer({ rowIndex: i, colIndex: k }, { dataObj: data });
                    isWrap && this.setWrapText("wrap", range);
                    isWrap = false;
                    if (cell) {
                        if (props[13] in data) {
                            hlData = data.hyperlink;
                            if (hlData) {
                                if (status === clrFrmt)
                                    cell.find("a").css({ "color": this._hlColor, "text-decoration": "underline" }).addClass("e-hyperlinks");
                                else
                                    hlData.webAddr ? (cell.html(ej.buildTag("a", data.value2, "", { href: hlData.webAddr, target: "_blank", "class": "e-hyperlinks" }))) : (cell.html(ej.buildTag("a", data.value2, "", { "class": "e-hyperlinks" })));
                            }
                        }
                        if (props[6] in data) {
                            if (data.rule.isApply)
                                this.addClass(cell[0], 'e-hlcell');
                            else
                                this._removeClass(cell[0], 'e-hlcell');
                        }
                        if (status === clrFrmt) {
                            if (data.formatStr)
                                formatObj.formatStr = data.formatStr;
                            if (data.type)
                                formatObj.type = data.type;
                            if (!ej.isNullOrUndefined(data.decimalPlaces))
                                formatObj.decimalPlaces = data.decimalPlaces;
                            if (!ej.isNullOrUndefined(data.thousandSeparator))
                                formatObj.thousandSeparator = data.thousandSeparator;
                            this.XLFormat.format(formatObj, [i, k, i, k]);
                        }
                        if (props[21] in data)
                            this.XLComment._updateCmntFrmCntnr(i, k);
                        if (props[0] in data) {
                            val = data.value;
                            this.XLEdit._refreshCalcEngine(i, k, this.isFormula(val), val);
                        }
                    }
                    m++;
                    k++;
                }
                i++;
            }
        },

        updateUniqueData: function (data, range, skipCell, sheetIndex) {
            if (this.model.isReadOnly)
                return;
            range = this._getRangeArgs(range, "object");
            var minc, args = { dataObj: data }, minr = range[0], maxr = range[2], maxc = range[3];
            if (skipCell)
                args.skipCell = skipCell;
            args.sheetIdx = sheetIndex;
            while (minr <= maxr) {
                minc = range[1];
                while (minc <= maxc) {
                    this.XLEdit._updateDataContainer({ rowIndex: minr, colIndex: minc }, args);
                    minc++;
                }
                minr++;
            }
        },

        _getCellValue: function (rIdx, cIdx, sIdx) {
            var dC = this._dataContainer, sharedData = this._dataContainer.sharedData, sIdx = sIdx ? sIdx : this.getActiveSheetIndex(), val = dC.sheets[sIdx][rIdx] && dC.sheets[sIdx][rIdx][cIdx];
            return { value: val && val.value && sharedData[val.value], value2: val && val.value2 && sharedData[val.value2] };
        },

        clearRangeData: function (range, property, cells, skipHiddenRow, status, skipCell) {
            if (this.model.isReadOnly)
                return;
            var minr, minc, maxr, maxc, sheetIdx = this.getActiveSheetIndex(), cellIdx, args, val;
            range = this._getRangeArgs(range, "object", sheetIdx);
            property = property ? property : ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "hyperlink", "isFilterHighlight"];
            minr = range[0], maxr = range[2], maxc = range[3];
            while (minr <= maxr) {
                if (!skipHiddenRow || !this._isHiddenRow(minr)) {
                    minc = range[1];
                    while (minc <= maxc) {
                        cellIdx = { rowIndex: minr, colIndex: minc };
                        val = this._getCellValue(cellIdx.rowIndex, cellIdx.colIndex).value;
                        this._overFlowRowIdx = true;
                        if (this._isTrigCellSave && val != '' && !ej.isNullOrUndefined(val) && property.indexOf("value") > -1) {
                            args = { cellIndex: cellIdx, value: '', prevValue: this._getCellValue(cellIdx.rowIndex, cellIdx.colIndex).value, sheetIdx: sheetIdx, reqType: "clear" }
                            if (this._trigger("cellSave", args))
                                return;
                        }
                        this.XLEdit._clearDataContainer({ cellIdx: { rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex }, property: property, status: status, skipCell: skipCell });
                        minc++;
                    }
                }
                this._overFlowRowIdx = false;
                if (property.indexOf("wrap") > -1)
                    this._setRowHdrHeight(sheetIdx, minr);
                minr++;
            }
            this._isTrigCellSave = false;
        },

        _getArrayRangeCells: function (range) {  // return cells if range specified else selected cells will returned
            return range ? (range = this.swapRange(range), this.getRange(range)) : this._getContent(this.getActiveSheetIndex()).find(".e-selected");
        },

        _getAlphaRangeCells: function (range, sheetIdx) { // get range cells by alpha range input
            return range ? (range = this.getRangeIndices(range), this.getRange(range, sheetIdx)) : this._getContent(this.getActiveSheetIndex()).find(".e-selected");
        },

        _getMultiRangeCells: function (range) {
            var i, val, cells, arr, len;
            if (!range) {
                range = this._getRangeArgs(range, "object");
                cells = this._getSelectedCells(this.getActiveSheetIndex(), range).selCells;
            }
            else {
                i = 0, cells = [], arr = [];
                if (this._isString(range))
                    arr.push(this.getRangeIndices(range));
                else {
                    if (this.isNumber(range[0]))
                        arr.push(range);
                    else {
                        len = range.length;
                        while (i < len) {
                            val = range[i];
                            arr.push(Array.isArray(val) ? val : this.getRangeIndices(val));
                            i++;
                        }
                    }
                }
                i = 0, len = arr.length;
                while (i < len) {
                    val = arr[i];
                    cells = cells.concat(this._getSelectedRange({ rowIndex: val[0], colIndex: val[1] }, { rowIndex: val[2], colIndex: val[3] }));
                    i++;
                }
            }
            return cells;
        },

        _completeAction: function (args) {
            var len, sheetIndex = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIndex), details, fltrdIdxes, fltrdVal;
            if (args.reqType === "filter" || args.reqType === "filterbycolor") {
                if (args.operation !== "apply-filter" && args.operation !== "remove-filter" && args.operation !== "clearfilter") {
                    fltrdVal = args.model.currentViewData;
                    details = {
                        sheetIndex: sheetIndex,
                        range: sheet._selectedRange,
                        currentViewData: fltrdVal,
                        fieldName: args.currentFilteringColumn,
                        ejpredicate: args.ejpredicate,
                        activeCell: args.activeCell,
                        filteredValue: args.filteredValue,
                        filterCollection: args.filteredcolumns,
                        requestType: args.requestType,
                        reqType: args.reqType,
                        selectedCell: args.selectedCell,
                        action: args.action,
                        operation: "filter",
                        selectedDataSource: sheet.selectedDataSource,
                        tableID: args.tableID,
                        filteredCells: args.filteredCells,
                        fltrdIdxes: [],
                        selRange: args.selRange
                    };
                    for (i = 0, len = fltrdVal.length; i < len; i++)
                        details.fltrdIdxes.push(details.range.startRow + sheet.filterSettings.filteredRange.indexOf(fltrdVal[i]));
                }
                else if (args.operation === "remove-filter" || args.operation === "clearfilter")
                    details = args;
                else
                    details = { sheetIndex: sheetIndex, filteredCells: args.filteredCells, reqType: "filter", operation: "apply-filter", tableID: args.tableID, fRange: this.getSheet(sheetIndex).filterSettings.range };
                details.rowIndex = args.rowIndex;
                details.colIndex = args.colIndex;
            }
            else if (args.requestType === ej.Spreadsheet.Actions.Sorting) {
                var prevIcon, currIcon, fltrspan, rowIndex, filterIcons = [];
                rowIndex = (args.filterIcon.length > 0) ? args.range[0] - 1 : args.range[0];
                for (var i = 0; i < args.filterIcon.length; i++) {
                    fltrspan = this.XLFilter._getFilterHeader(sheetIndex, rowIndex, args.filterIcon[i].colIndex);
                    if (!ej.isNullOrUndefined(fltrspan)) {
                        if (fltrspan.status.indexOf("-asc") > -1)
                            prevIcon = "-asc";
                        else if (fltrspan.status.indexOf("-dsc") > -1)
                            prevIcon = "-dsc";
                        else
                            prevIcon = "";
                    } else
                        prevIcon = "";
                    if (args.filterIcon[i].colIndex === this._generateColCount(args.columnName) - 1)
                        currIcon = args.sortDirection === "ascending" ? "-asc" : "-dsc";
                    else
                        currIcon = "";
                    filterIcons.push({ rowIdx: rowIndex, colIdx: args.filterIcon[i].colIndex, prevIcon: prevIcon, currIcon: currIcon });
                }
                details = { sheetIndex: sheetIndex, filterIcons: filterIcons, isSortByFilter: args.isSortByFilter, colSelected: args.colSelected, range: args.range, columnName: args.columnName, rangeData: args.rangeData, reqType: "sort", direction: args.sortDirection, operation: "unsort" };
            }
            else if (args.requestType === "sortbycolor" || args.requestType === "filterbycolor") {
                details = { sheetIndex: sheetIndex, operation: args.operation, oprType: args.oprType, requestType: args.requestType, action: args.action, bgcolor: args.bgcolor, fgcolor: args.fgcolor, tableID: args.tableID, reqType: args.requestType, sortRange: args.sortRange };
                details.columnName = (args.requestType === "sortbycolor") ? args.sortColumn : args.filterColumn;
                var color;
                if (args.requestType === "filterbycolor") {
                    var colIdx = this._generateColCount(details.columnName);
                    fltrdIdxes = [];
                    for (i = args.range.endRow; i >= args.range.startRow; i--) {
                        color = this.XLEdit.getPropertyValue(i, colIdx - 1, "formats");
                        if (!ej.isNullOrUndefined(color)) {
                            if (args.operation === "filterbgcolor") {
                                if (!ej.isNullOrUndefined(color["background-color"]))
                                    (args.bgcolor.toLowerCase() === color["background-color"].toLowerCase()) && fltrdIdxes.push(i);
                            }
                            else {
                                if (!ej.isNullOrUndefined(color["color"]))
                                    (args.fgcolor.toLowerCase() === color["color"].toLowerCase()) && fltrdIdxes.push(i);
                            }
                        }
                    }
                    details.fltrdIdxes = fltrdIdxes;
                    details.rowIndex = args.range.startRow - 1;
                    details.colIndex = colIdx - 1;
                }
            }
            else
                details = args;
            if (this.model.allowUndoRedo && !this._isPublic && !(details.requestType === "sortbycolor") && !this._dupDetails)
                this.updateUndoRedoCollection(details);
            if (args.requestType === "filtering" || args.requestType === "filterbycolor" || args.requestType === "sortbycolor" || args.requestType === "filterbycell")
                (args.operation !== "apply-filter" && args.operation !== "remove-filter") && this.sendDataRenderingRequest(details, this.getActiveSheetIndex());
            if (this.model.allowAutoFill && args.reqType !== "find-replace" && this.element.find('.e-ss-activeimg').length < 1 && !sheet._isFreezed)
                this.XLDragFill.positionAutoFillElement();
            if (this.model.allowUndoRedo && !this._isPublic && !(this.XLComment && this.XLComment._isCommentEdit))
                this._updateUndoRedoIcons();
            if (args.reqType !== "paging")
                if (args.reqType === "edit" && args.hasValidation)
                    this._trigrDdlActnCmplt(args.cValue, args.pValue);
        },

        updateUndoRedoCollection: function (details) {
            if (!this._isUndoRedo && details.reqType !== 'update-range') {
                this._undoCollection.push(details);
                this._redoCollection = [];
            }
            if (this._undoCollection.length > this.undoRedoStep)
                this._undoCollection.splice(0, 1);
            if (this.model.showRibbon)
                this.XLRibbon._updateRibbonIcons();
            this._updateUndoRedoIcons();
        },

        _trigActionBegin: function (args) {
            return (!this._isSaveAsJSON && !this._isRefresh) && this._trigger("actionBegin", args);
        },

        _trigActionComplete: function (args) {
            return (!this._isSaveAsJSON && !this._isRefresh) && this._trigger("actionComplete", args);
        },

        _updateUndoRedoIcons: function () {
            if (!this.model.showRibbon || !this.model.allowUndoRedo) {
                if (!(this.XLComment && this.XLComment._isCommentEdit))
                    this._setSheetFocus();
                return;
            }
            if ($("#" + this._id + "_Ribbon_Home_Actions_Undo").length && $("#" + this._id + "_Ribbon_Home_Actions_Redo").length && !this.model.isReadOnly) {
                var undoBtn = $("#" + this._id + "_Ribbon_Home_Actions_Undo").data("ejButton"), redoBtn = $("#" + this._id + "_Ribbon_Home_Actions_Redo").data("ejButton");
                if (undoBtn)
                    this._undoCollection.length ? undoBtn.enable() : undoBtn.disable();
                if (redoBtn)
                    this._redoCollection.length ? redoBtn.enable() : redoBtn.disable();
                if (!this.XLEdit._isEdit && !(this.XLComment && this.XLComment._isCommentEdit) && !this._isSheetRename && (document.activeElement && document.activeElement.id.indexOf(this._id + "_Ribbon") < 0))
                    this._setSheetFocus();
            }
        },

        _filterMergeCells: function (rowIdx, status) {
            var sheetIdx = this.getActiveSheetIndex(), dataContainer = this._dataContainer.sheets[sheetIdx], dataKeys = this.getObjectKeys(dataContainer[rowIdx]),
                rc, mCell, isMerge = false, mCells;
            for (var i = 0; i < dataKeys.length; i++) {
                mCells = this.XLEdit.getPropertyValue(rowIdx, dataKeys[i], "mergeIdx");
                if (mCells) {
                    rc = mCells;
                    isMerge = true;
                }
            }
            if (isMerge) {
                mCell = this.getCell(rc.rowIndex, rc.colIndex)[0];
                mCell.rowSpan = (status === "incr") ? (mCell.rowSpan + 1) : (mCell.rowSpan - 1);
            }
        },

        _isRowVisible: function (sheetIdx, rowIdx) {
            var container = this._dataContainer.sheets[sheetIdx];
            if (rowIdx in container)
                if (0 in container[rowIdx] && (container[rowIdx][0].isRHide || container[rowIdx][0].isFRHide))
                    return false;
                else
                    return true;
            else
                return true;
        },

        _selectFirstCell: function (sheetIdx, rowIdx, colIdx, isSelect) {
            var sheet = this.getSheet(sheetIdx);
            if ((!sheet._isImported || sheet._isLoaded) && !isSelect) {
                isSelect = !isSelect;
                this.performSelection({ rowIndex: rowIdx, colIndex: colIdx }, { rowIndex: rowIdx, colIndex: colIdx });
            }
            return isSelect;
        },

        _clearAllMergeCells: function (sheetIdx, rowIdx, rowCount, colIdx, colCount, status) {
            var mergeObj, sheet = this.getSheet(sheetIdx), isAlert = false, dupDetail = this._dupDetails, mRange, mCells = sheet._mergeColl,
                umCells = sheet._unmergeColl, rKeys, cKeys, chkObj = { isCancel: false, isAlert: true };
            this._dupDetails = true;
            rKeys = this.getObjectKeys(mCells);
            if (rKeys.length < 1)
                isAlert = true;
            for (var i = 0, len = rKeys.length; i < len; i++) {
                cKeys = this.getObjectKeys(mCells[rKeys[i]]);
                for (var j = 0; j < cKeys.length; j++) {
                    mergeObj = $.extend(true, {}, this.XLEdit.getPropertyValue(rKeys[i], cKeys[j], "merge"));
                    mRange = this.getRangeIndices(mergeObj.mRange);
                    chkObj = this._checkFilterMerge(sheetIdx, mRange, rowIdx, rowCount, colIdx, colCount, status, "merge", isAlert, rKeys[i], cKeys[j], mergeObj);
                    if (chkObj.isClear) {
                        if (!(rKeys[i] in umCells))
                            sheet._unmergeColl[rKeys[i]] = {};
                        sheet._unmergeColl[rKeys[i]][cKeys[j]] = { type: mCells[rKeys[i]][cKeys[j]], merge: mergeObj, isClear: true };
                        this.unmergeCells(mergeObj.mRange, true);
                    }
                    chkObj.isClear = false;
                }
            }
            this._dupDetails = dupDetail;
            return { isCancel: chkObj.isCancel, isAlert: chkObj.isAlert };
        },

        _checkFilterMerge: function (sheetIdx, range, rowIdx, rowCount, colIdx, colCount, status, operation, isAlert, rKey, cKey, mergeObj) {
            var isCancel, rng = this._getSelectedCells(sheetIdx, [rowIdx, colIdx, rowIdx + rowCount - 1, colIdx + colCount - 1]).range, mCells, isClear = false;
            if (status.indexOf("shift") > -1 || (operation != "merge" && (status.indexOf("insert") > -1 || status.indexOf("delete") > -1))) {
                (operation === "merge") && (this._removeMergeColl = []);
                if (status.indexOf("Bottom") > -1 || status.indexOf("Up") > -1 || (operation != "merge" && status.indexOf("Row") > -1)) {
                    if (((colIdx >= range[1]) || range[3] >= (colIdx + colCount - 1)) || status.indexOf("Row") > -1) {
                        if ((rowIdx >= range[2]) || (rowIdx <= range[2])) {
                            if (colIdx < range[1] && (colIdx + colCount - 1) < range[1])
                                isAlert = true;
                            else if (colIdx > range[3] && (colIdx + colCount - 1) > range[3])
                                isAlert = true;
                            else if (!this._isTotalRow && (colIdx === range[1] && range[3] === (colIdx + colCount - 1))) {
                                isClear = true;
                                isAlert = true;
                            }
                            if (!isAlert && (rowIdx >= range[2]))
                                isAlert = true;
                        }
                    }
                    else if (colIdx < range[1] && range[3] < (colIdx + colCount - 1)) {
                        isAlert = true;
                        isClear = true;
                    }
                    if (operation === "merge" && !this._isUndoRedo)
                        if (status.indexOf("Up") > -1 && this.XLEdit._rangeHasProperty(rng, "merge")) {
                            this._showAlertDlg("Alert", "MergePreventInsertDelete", "MergePreventInsertDelete", 450);
                            isClear = false;
                            isCancel = true;
                        }
                }
                else if (status.indexOf("Right") > -1 || status.indexOf("Left") > -1 || (operation != "merge" && status.indexOf("Column") > -1)) {
                    if (((rowIdx >= range[0]) || range[2] >= (rowIdx + rowCount - 1)) || status.indexOf("Column") > -1) {
                        if ((colIdx >= range[3]) || (colIdx <= range[3])) {
                            if (rowIdx < range[0] && (rowIdx + rowCount - 1) < range[0])
                                isAlert = true;
                            else if (rowIdx > range[2] && (rowIdx + rowCount - 1) > range[2])
                                isAlert = true;
                            else if (rowIdx === range[0] && range[2] === (rowIdx + rowCount - 1)) {
                                isClear = true;
                                isAlert = true;
                            }
                            if (!isAlert && (colIdx > range[3]))
                                isAlert = true;
                        }
                    }
                    else if (rowIdx < range[0] && range[2] < (rowIdx + rowCount - 1)) {
                        isAlert = true;
                        isClear = true;
                    }
                    if (operation === "merge" && !this._isUndoRedo)
                        if (status.indexOf("Left") > -1 && this.XLEdit._rangeHasProperty(rng, "merge")) {
                            this._showAlertDlg("Alert", "CtrlKeyErrorAlert", "CtrlKeyErrorAction", 450);
                            isClear = false;
                            isCancel = true;
                        }
                }
                if ((operation === "merge") && !isAlert && !isClear)
                    this._removeMergeColl.push({ type: mCells[rKey][cKey], merge: mergeObj });
            }
            else {
                this._isUndoRedo && (isAlert = true);
                if ((rowIdx === -1) || ((rowIdx != -1) && ((range[0] <= rowIdx) && (range[2] > rowIdx))))
                    isClear = true;
                if ((colIdx === -1) || ((colIdx != -1) && ((range[1] <= colIdx) && (range[3] > colIdx))))
                    isClear = true;
            }
            return { isClear: isClear, isAlert: isAlert, isCancel: isCancel };
        },

        _checkTableApplied: function (sheetIdx, rowIdx, rowCount, colIdx, colCount, status) {
            var chkObj, sheet = this.getSheet(sheetIdx), range, tblManager = sheet.tableManager, tblKeys = this.getObjectKeys(tblManager);
            this._isTableApplied = false;
            for (var i = 0, len = tblKeys.length; i < len; i++) {
                range = tblManager[tblKeys[i]].range;
                chkObj = this._checkFilterMerge(sheetIdx, range, rowIdx, rowCount, colIdx, colCount, status, "filter", false);
                this._isTableApplied = !chkObj.isAlert;
                if (this._isTableApplied)
                    return true;
            }
            return false;
        },

        _checkChartApplied: function (sheetIdx, rowIndex, colIndex, rowCount, colCount) {
            var j = 0, k = 0, cRange, cObj, sheet = this.getSheet(sheetIdx), chartMngr = sheet.shapeMngr.chart, chartKeys = this.getObjectKeys(chartMngr), isChartSeries = false;
            for (var i = 0, len = chartKeys.length; i < len; i++) {
                cObj = chartMngr[chartKeys[i]];
                isChartSeries = cObj.isChartSeries;
                cRange = cObj.range;
                while (j < colCount) {
                    if (this._inColumn(cRange, colIndex) || (isChartSeries && this.XLChart._isSeriesRange(cObj, rowIndex, colIndex))) {
                        return true;
                    }
                    colIndex++;
                    j++;
                }
                while (k < rowCount) {
                    if (this._inRow(cRange, rowIndex) || (isChartSeries && this.XLChart._isSeriesRange(cObj, rowIndex, colIndex))) {
                        return true;
                    }
                    rowIndex++;
                    k++;
                }
                return false;
            }
            return false;
        },

        _refreshAllMergeCells: function (sheetIdx, rowIdx, rowCount, colIdx, colCount, status) {
            var mergeObj, mRange, sheet = this.getSheet(sheetIdx), isSingleMerge = false, mCells = sheet._unmergeColl, dupDetail = this._dupDetails, rKeys, cKeys, range, stRng, endRng, isClear;
            rKeys = this.getObjectKeys(mCells);
            this._dupDetails = true;
            for (var i = 0, len = rKeys.length; i < len; i++) {
                cKeys = this.getObjectKeys(mCells[rKeys[i]]);
                for (var j = 0; j < cKeys.length; j++) {
                    mergeObj = sheet._unmergeColl[rKeys[i]][cKeys[j]].merge;
                    this.mergeCenter = (sheet._unmergeColl[rKeys[i]][cKeys[j]].type === "center");
                    isClear = sheet._unmergeColl[rKeys[i]][cKeys[j]].isClear;
                    range = this.getRangeIndices(mergeObj.mRange);
                    if (rowIdx > -1 || colIdx > -1) {
                        if (!ej.isNullOrUndefined(range)) {
                            if (status.indexOf("Shift") > -1) {
                                this._unMergeRange = mergeObj.mRange;
                                this._showAlertDlg("", "MergeCellsAlert", "MergeCellsInsertAlert", 498);
                            }
                            else {
                                if (rowIdx > -1) {
                                    if (range[0] === range[2])
                                        isSingleMerge = true;
                                    if (!isSingleMerge || isClear) {
                                        stRng = range[0];
                                        endRng = range[2];
                                        if (rowIdx <= range[0])
                                            stRng = (status === "insert") ? range[0] + rowCount : range[0] - rowCount;
                                        if (rowIdx <= range[2])
                                            endRng = (status === "insert") ? range[2] + rowCount : range[2] - rowCount;
                                        if (stRng <= endRng)
                                            range[0] = stRng;
                                        if (endRng >= stRng)
                                            range[2] = endRng;
                                    }
                                }
                                if (colIdx > -1) {
                                    if (range[1] === range[3])
                                        isSingleMerge = true;
                                    if (!isSingleMerge || isClear) {
                                        stRng = range[1];
                                        endRng = range[3];
                                        if (colIdx <= range[1])
                                            stRng = (status === "insert") ? range[1] + colCount : range[1] - colCount;
                                        if (colIdx <= range[3])
                                            endRng = (status === "insert") ? range[3] + colCount : range[3] - colCount;
                                        if (stRng <= endRng)
                                            range[1] = stRng;
                                        if (endRng >= stRng)
                                            range[3] = endRng;
                                    }
                                }
                                if (!isSingleMerge || (isSingleMerge && status === "insert")) {
                                    mRange = this._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                                    this.mergeCells(mRange, true);
                                    delete sheet._unmergeColl[rKeys[i]][cKeys[j]];
                                    isSingleMerge = false;
                                }
                                else
                                    sheet._unmergeColl[rKeys[i]][cKeys[j]]["isClear"] = false;
                            }
                        }
                    }
                }
            }
            this._dupDetails = dupDetail;
        },

        _clearMergeColl: function (mergeColl, rowIdx, colIdx) {
            mergeColl[rowIdx] && delete mergeColl[rowIdx][colIdx];
            if (this.getObjectKeys(mergeColl[rowIdx]).length < 1)
                delete mergeColl[rowIdx];
        },

        _refreshSHMergeCells: function (sheetIdx, idxColl, count, action, operation) {
            var k, klen, iLen, jLen, mcellValue, hideColl, isMerge, stIdx, enIdx, diff, mergeType, sheet = this.getSheet(sheetIdx), stRng, endRng, mCells = $.extend(true, {}, sheet._mergeColl), rKeys, cKeys,
                diffIdx = 0, mergeObj, mRange, isMergeCell, isFullMerge = false, hideCount, kIdx, rowColl = [],
                hideIdx, stRowIdx, stColIdx, endRowIdx, endColIdx, isWithinMerge = false, remRng, oldRange, oldRng, stOldRng, enOldRng;
            rKeys = this.getObjectKeys(mCells);
            if (sheet._isFreezed)
                hideColl = (action === "column") ? sheet._fHMergeCols : sheet._fHMergeRows;
            else
                hideColl = (action === "column") ? this.getObjectKeys(sheet.hideColsCollection) : sheet.hideRowsCollection;
            if (operation === "hide") {
                for (var i = 0, ilen = rKeys.length; i < ilen; i++) {
                    cKeys = this.getObjectKeys(mCells[rKeys[i]]);
                    for (var j = 0, jlen = cKeys.length; j < jlen; j++) {
                        isMerge = false;
                        mergeObj = this.XLEdit.getPropertyValue(rKeys[i], cKeys[j], "merge");
                        if (this.getObjectKeys(mergeObj).length < 1)
                            continue;
                        mRange = this.getRangeIndices(mergeObj.mRange);
                        stRng = (action === "column") ? mRange[1] : mRange[0];
                        endRng = (action === "column") ? mRange[3] : mRange[2];
                        for (k = stRng; k <= endRng; k++) {
                            if (idxColl.indexOf(k) > -1) {
                                isMerge = true;
                                break;
                            }
                        }
                        if (!isMerge)
                            continue;
                        this._dupDetails = true;
                        stIdx = idxColl[0]; enIdx = idxColl[idxColl.length - 1];
                        diff = (enIdx - stIdx) + 1;
                        this.mergeCenter = (mCells[rKeys[i]][cKeys[j]]["type"] === "center");
                        oldRng = mCells[rKeys[i]][cKeys[j]]["oldRange"];
                        remRng = oldRng ? oldRng : mergeObj.mRange;
                        this.unmergeCells(mergeObj.mRange);
                        if (enIdx < stRng) {
                            stRng = stRng + diff;
                            endRng = endRng + diff;
                        }
                        else if (endRng < stIdx)
                            continue;
                        else {
                            diffIdx = 0; isMergeCell = false; hideIdx = 0;
                            klen = idxColl.length;
                            for (k = 0; k < klen; k++) {
                                if (idxColl[k] >= stRng && idxColl[k] <= endRng)
                                    diffIdx++;
                                if (idxColl[k] === stRng)
                                    isMergeCell = true;
                                kIdx = (action === "column") ? idxColl[k].toString() : idxColl[k];
                                if (hideColl.indexOf(kIdx) > -1)
                                    hideIdx++;
                            }
                            if (idxColl.indexOf(stRng) > -1)
                                isMergeCell = true;
                            hideCount = 0;
                            for (var l = stRng; l <= endRng; l++) {
                                (action === "column") && (l = l.toString());
                                if (hideColl.indexOf(l) > -1)
                                    hideCount++;

                            }
                            if ((stRng === endRng) || (hideCount === (endRng - stRng) + 1))
                                isFullMerge = true;
                            if (isMergeCell && !isFullMerge)
                                stRng = (stRng + diffIdx) + (hideCount - hideIdx);
                        }
                        mcellValue = this.XLEdit.getPropertyValue(parseInt(rKeys[i]), parseInt(cKeys[j]), "value2");
                        stRowIdx = (action === "row") ? stRng : mRange[0];
                        endRowIdx = (action === "row") ? endRng : mRange[2];
                        stColIdx = (action === "column") ? stRng : mRange[1];
                        endColIdx = (action === "column") ? endRng : mRange[3];
                        if (!isFullMerge) {
                            if (!(stRowIdx == endRowIdx && stColIdx == endColIdx))
                                this.mergeCells(this._getAlphaRange(sheetIdx, stRowIdx, stColIdx, endRowIdx, endColIdx), true);
                            else {
                                if (rKeys[i] in sheet._delmergeColl)
                                    sheet._delmergeColl[rKeys[i]][cKeys[j]] = { type: mCells[rKeys[i]][cKeys[j]]["type"], merge: mergeObj, oldRange: remRng };
                                else {
                                    sheet._delmergeColl[rKeys[i]] = {};
                                    sheet._delmergeColl[rKeys[i]][cKeys[j]] = { type: mCells[rKeys[i]][cKeys[j]]["type"], merge: mergeObj, oldRange: remRng };
                                }
                            }
                            if (sheet._mergeColl[stRowIdx] && sheet._mergeColl[stRowIdx][stColIdx])
                                sheet._mergeColl[stRowIdx][stColIdx]["oldRange"] = remRng;
                            this._updateMergeColl(sheetIdx, stRowIdx, stColIdx, mCells[rKeys[i]][cKeys[j]]["type"], operation === "hide");
                            if (((enIdx + 1 === stRowIdx && action === "row") || (enIdx + 1 === stColIdx && action === "column")) && ej.isNullOrUndefined(this.XLEdit.getPropertyValue(stRowIdx, stColIdx))) {
                                this.XLEdit.updateCellValue({ rowIndex: stRowIdx, colIndex: stColIdx }, mcellValue);
                                if (sheet._wrapColl[parseInt(rKeys[i])] && sheet._wrapColl[parseInt(rKeys[i])][parseInt(cKeys[j])]) {
                                    this._wrapCollection(stRowIdx, stColIdx, sheet._wrapColl[parseInt(rKeys[i])][parseInt(cKeys[j])], sheetIdx);
                                    if (this._isRowViewable(sheetIdx, stRowIdx))
                                        rowColl.push({ rowIndex: stRowIdx, height: sheet.rowsHeightCollection[parseInt(rKeys[i])] });
                                    else
                                        sheet.rowsHeightCollection[stRowIdx] = sheet.rowsHeightCollection[parseInt(rKeys[i])];
                                }
                            }
                        }
                        else {
                            if (rKeys[i] in sheet._delmergeColl)
                                sheet._delmergeColl[rKeys[i]][cKeys[j]] = { type: mCells[rKeys[i]][cKeys[j]]["type"], merge: mergeObj, oldRange: remRng };
                            else {
                                sheet._delmergeColl[rKeys[i]] = {};
                                sheet._delmergeColl[rKeys[i]][cKeys[j]] = { type: mCells[rKeys[i]][cKeys[j]]["type"], merge: mergeObj, oldRange: remRng };
                            }
                        }
                        this.mergeCenter = false;
                    }
                }
            }
            if (operation === "show") {
                if (this.getObjectLength(sheet._delmergeColl) > 0)
                    mCells = $.extend(true, mCells, sheet._delmergeColl);
                rKeys = this.getObjectKeys(mCells);
                iLen = rKeys.length;
                for (i = 0; i < iLen; i++) {
                    cKeys = this.getObjectKeys(mCells[rKeys[i]]);
                    jLen = cKeys.length;
                    for (j = 0; j < jLen; j++) {
                        isMerge = false;
                        mergeType = mCells[rKeys[i]][cKeys[j]].mergeType;
                        mergeObj = mCells[rKeys[i]][cKeys[j]].merge;
                        if (this.getObjectKeys(mergeObj).length < 1)
                            mergeObj = this.XLEdit.getPropertyValue(rKeys[i], cKeys[j], "merge");
                        if (this.getObjectKeys(mergeObj).length > 0) {
                            mRange = this.getRangeIndices(mergeObj.mRange);
                            stRng = (action === "column") ? mRange[1] : mRange[0];
                            endRng = (action === "column") ? mRange[3] : mRange[2];
                            oldRng = mCells[rKeys[i]][cKeys[j]]["oldRange"];
                            if (oldRng) {
                                oldRange = this.getRangeIndices(oldRng);
                                stOldRng = (action === "column") ? oldRange[1] : oldRange[0];
                                enOldRng = (action === "column") ? oldRange[3] : oldRange[2];
                            }
                            else {
                                stOldRng = stRng;
                                enOldRng = endRng;
                            }
                            stIdx = idxColl[0]; enIdx = idxColl[idxColl.length - 1];
                            for (k = stIdx; k <= enIdx; k++) {
                                if (k >= stOldRng && k <= enOldRng) {
                                    isMerge = true;
                                    break;
                                }
                            }
                            if (!isMerge)
                                continue;
                            if (mergeType === "merge-cells") {
                                this._dupDetails = true;
                                diff = (enIdx - stIdx) + 1;
                                if (enIdx < stRng) {
                                    this.mergeCenter = mergeObj.isCenterAlign;
                                    this.unmergeCells(mergeObj.mRange);
                                    if (diff != count)
                                        endRng = endRng - diff;
                                    stRng = stRng - diff;
                                    stRowIdx = (action === "row") ? stRng : mRange[0];
                                    endRowIdx = (action === "row") ? endRng : mRange[2];
                                    stColIdx = (action === "column") ? stRng : mRange[1];
                                    endColIdx = (action === "column") ? endRng : mRange[3];
                                    if (!(stRowIdx == endRowIdx && stColIdx == endColIdx))
                                        this.mergeCells(this._getAlphaRange(sheetIdx, stRowIdx, stColIdx, endRowIdx, endColIdx), true);
                                    this._updateMergeColl(sheetIdx, stRowIdx, stColIdx, mCells[rKeys[i]][cKeys[j]]["type"], operation === "hide");
                                    sheet._mergeColl[stRowIdx][stColIdx]["oldRange"] = oldRng;
                                }
                            }
                            isWithinMerge = false;
                            klen = idxColl.length;
                            for (k = 0; k < klen; k++) {
                                if (((action === "row") && mRange[0] <= idxColl[k]) || ((action === "column") && mRange[1] <= idxColl[k])) {
                                    isWithinMerge = true;
                                    break;
                                }
                            }
                            if (isWithinMerge) {
                                this.mergeCenter = mergeObj.isCenterAlign;
                                this.unmergeCells(mergeObj.mRange);
                                mRange = this.getRangeIndices(mergeObj.mRange);
                                diff = 0;
                                for (l = stRng; l <= endRng; l++) {
                                    (action === "column") && (l = l.toString());
                                    if (hideColl.indexOf(l) > -1)
                                        diff++;
                                    else
                                        break;
                                }
                                stRng = stRng + diff;
                                if (action === "column")
                                    mRange[1] = stRng;
                                else
                                    mRange[0] = stRng;
                                if (!(mRange[0] == mRange[2] && mRange[1] == mRange[3]))
                                    this.mergeCells(this._getAlphaRange(sheetIdx, mRange[0], mRange[1], mRange[2], mRange[3]), true);
                                this._updateMergeColl(sheetIdx, mRange[0], mRange[1], mCells[rKeys[i]][cKeys[j]]["type"], true);
                                sheet._mergeColl[mRange[0]][mRange[1]]["oldRange"] = oldRng;
                                if (!(mRange[0] == mRange[2] && mRange[1] == mRange[3]))
                                    this._clearMergeColl(sheet._delmergeColl, rKeys[i], cKeys[j]);
                            }
                        }
                        this.mergeCenter = false;
                    }
                }
            }
            if (this.model.showRibbon && this._isScrolling)
                this.XLRibbon._updateRibbonIcons();
            this._dupDetails = false;
        },

        _getSpanFromMCells: function (rowIdx, colIdx, span) {
            var sheet = this.getSheet(this.getActiveSheetIndex()), hideMColl = sheet._hideMergeColl;
            if (!this.isUndefined(hideMColl[rowIdx]) && !this.isUndefined(hideMColl[rowIdx][colIdx])) {
                if (span === "row")
                    return hideMColl[rowIdx][colIdx]["rowspan"];
                else
                    return hideMColl[rowIdx][colIdx]["colspan"];
            }
            return 0;
        },

        _setSpanToMCells: function (rowIdx, colIdx, span, value) {
            var sheet = this.getSheet(this.getActiveSheetIndex()), hideMColl = sheet._hideMergeColl;
            this.isUndefined(hideMColl[rowIdx]) && (hideMColl[rowIdx] = {});
            this.isUndefined(hideMColl[rowIdx][colIdx]) && (hideMColl[rowIdx][colIdx] = {});
            (span === "row") ? (hideMColl[rowIdx][colIdx]["rowspan"] = value) : (hideMColl[rowIdx][colIdx]["colspan"] = value);
        },

        sendDataRenderingRequest: function (args, sheetIdx) {
            var i, j, k, idx, isSelect = false, hideRowColl, len, filteredValue, fltrRange, ln, ralign = this._rAlign, sheet = this.getSheet(sheetIdx), isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling,
                range = sheet._selectedRange, fltrdIdxes = [], cellIdx, activeCell, filteredRowsColl = sheet.filteredRowsCollection, stRow, isHidden, tabIdx, tab = sheet.filterSettings.tableRange, hiddenIdx = [],
                filterColumn, predicate, valColl = [], filtered, colHdr = this.getSheetElement(sheetIdx)[0].querySelectorAll('.e-spreadsheetcolumnheader'), colgrp = $(this._getJSSheetHeader(sheetIdx)[0].querySelectorAll('colgroup')[0].outerHTML).attr("id", "ss"),
                rowHdrTd = this.getSheetElement(sheetIdx)[0].querySelectorAll(".e-rowheadercontent td");
            for (i = 0, len = tab.length; i < len; i++) {
                if (tab[i].tableID == args.tableID) {
                    tabIdx = i;
                    break;
                }
            }
            if (isVirtualScroll)
                hideRowColl = sheet.hideRowsCollection;
            this._dupDetails = true;
            if (!(ej.isNullOrUndefined(args)) && (args.reqType == "filter" || (args.action.indexOf("clearfiltering") > -1 && args.reqType == "filterbycolor"))) {
                cellIdx = this._generateColCount(args.fieldName) - 1;
                idx = $.inArray(args.fieldName, sheet._filteredColumns);
                if (args.action.indexOf("clearfiltering") > -1)
                    sheet._filteredColumns.splice(idx, 1);
                else if (idx < 0)
                    sheet._filteredColumns.push(args.fieldName);
                range = args.range;
                hiddenIdx = tab[tabIdx].hiddenIdx;
                filteredValue = args.currentViewData;
                if (args.requestType.indexOf("filtering") > -1 || args.requestType.indexOf("filterbycell") > -1 || args.action.indexOf("clearfiltering") === -1 || ((args.action.indexOf("clearfiltering") > -1 && args.reqType == "filterbycolor"))) {
                    fltrRange = sheet.filterSettings.filteredRange;
                    (filteredValue.length < 1) && fltrdIdxes.push(fltrRange[fltrRange.length - 1].idx + 1);
                    for (i = 0, len = filteredValue.length; i < len; i++) {
                        idx = fltrRange.indexOf(filteredValue[i]);
                        if (idx > -1)
                            fltrdIdxes.push(fltrRange[idx].idx);
                    }
                    tab[tabIdx].fltrdIdxes = fltrdIdxes;
                    stRow = (range.startRow === 0) ? 0 : range.startRow;
                    for (k = stRow; k <= range.endRow; k++) {
                        filtered = false;
                        for (j = 0, ln = fltrdIdxes.length; j < ln; j++)
                            (fltrdIdxes[j] == k) && (filtered = true);
                        if (filtered) {
                            if (!ej.isNullOrUndefined(this._dataContainer.sheets[sheetIdx][k])) {
                                if (!ej.isNullOrUndefined(this._dataContainer.sheets[sheetIdx][k][0])) {
                                    delete this._dataContainer.sheets[sheetIdx][k][0]["isFilterHide"];
                                    delete this._dataContainer.sheets[sheetIdx][k][0]["filterID"];
                                    if (sheet._filterHRowsColl.indexOf(k) > -1)
                                        sheet._filterHRowsColl.splice(sheet._filterHRowsColl.indexOf(k), 1);
                                }
                            }
                            if (!isVirtualScroll) {
                                this._dupDetails = this._isFilter = true;
                                this._showRow(k + 1, k, undefined, undefined, colHdr, colgrp, rowHdrTd);
                                this._dupDetails = this._isFilter = false;
                                if (filteredRowsColl.indexOf(k) > -1)
                                    filteredRowsColl.splice(filteredRowsColl.indexOf(k), 1);
                                if ((!sheet._isImported || sheet._isLoaded) && !isSelect) {
                                    isSelect = !isSelect;
                                    this.performSelection({ rowIndex: k, colIndex: cellIdx }, { rowIndex: k, colIndex: cellIdx });
                                }
                            }
                            else {
                                if (hideRowColl.indexOf(k) > -1) {
                                    this._refreshSHMergeCells(sheetIdx, [k], 1, "row", "show");
                                    hideRowColl.splice(hideRowColl.indexOf(k), 1);
                                }
                                stRow = (k === 0) ? 0 : k - 1;
                                if (this.XLEdit.getPropertyValue(stRow, 0, "hRow")) {
                                    delete this._dataContainer.sheets[sheetIdx][stRow][0]["hRow"];
                                    (filteredRowsColl.indexOf(k) > -1) && filteredRowsColl.splice(filteredRowsColl.indexOf(k), 1);
                                }
                            }
                        }
                        else {
                            if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(k, 0, "isRHide")) && ej.isNullOrUndefined(this.XLEdit.getPropertyValue(k, 0, "isFHide")) && ej.isNullOrUndefined(this.XLEdit.getPropertyValue(k, 0, "isFilterHide"))) {
                                this.XLEdit._updateDataContainer({ rowIndex: k, colIndex: 0 }, { dataObj: { "isFilterHide": true, "filterID": args.tableID } });
                                (filteredRowsColl.indexOf(k) < 0) && filteredRowsColl.push(k);
                                isHidden = true;
                            }
                            if (!isVirtualScroll) {
                                this._dupDetails = this._isFilter = true;
                                this._hideRow(k, k, "isFilterHide");
                                this._dupDetails = this._isFilter = false;
                                (filteredRowsColl.indexOf(k) === -1) && filteredRowsColl.push(k);
                            }
                            else {
                                if (isHidden) {
                                    hideRowColl.push(k);
                                    isHidden = false;
                                    this._refreshSHMergeCells(sheetIdx, [k], 1, "row", "hide");
                                }
                                stRow = (k === 0) ? 0 : k - 1;
                                this.XLEdit._updateDataContainer({ rowIndex: stRow, colIndex: 0 }, { dataObj: { hRow: true } });
                                (filteredRowsColl.indexOf(k) < 0) && filteredRowsColl.push(k);
                            }
                        }
                    }
                    stRow = (range.startRow === 0) ? 0 : range.startRow - 1;
                    if (isVirtualScroll && (!sheet._isImported || sheet._isLoaded)) {
                        this.refreshContent(sheetIdx);
                        this.performSelection({ rowIndex: stRow, colIndex: cellIdx }, { rowIndex: stRow, colIndex: cellIdx });
                    }
                    if (!isVirtualScroll && this._hideRowColl.length) {
                        this._getRowHdrTBody(sheetIdx).append(this._renderRowHdr(this._hideRowColl, sheetIdx));
                        this._getContTBody(sheetIdx).append($(this._renderData(undefined, sheetIdx, 0, sheet.colCount, false, this._hideRowColl[0], this._hideRowColl.length)));
                        this._hideRowColl = [];
                    }
                    this.XLScroll._getRowHeights(sheetIdx, stRow);
                    if (args.action === "clearfiltering") {
                        sheet._filteredByColor = -1;
                        this._excelFilter.closeXFDialog();
                    }
                    this.model.allowFiltering && this.XLFilter._updateFilterIcons(stRow, range.startRow, cellIdx, args.action);
                    tab[tabIdx].hiddenIdx = $.extend(true, [], hiddenIdx);
                    hiddenIdx = [];
                }
            }
            else if (!(ej.isNullOrUndefined(args)) && (args.requestType === "sortbycolor" || args.requestType === "filterbycolor")) {
                var count = [], color, tableFilteredColumn = [], rng, rangeData;
                cellIdx = this._generateColCount(args.columnName) - 1;
                args.prev = {}; args.cur = {};
                if (args.oprType.indexOf("Put") < 0) {
                    if (sheet._filterColl[range.startRow - 1][cellIdx].status.indexOf("e-ssfilter") > -1 && args.requestType === "filterbycolor") {
                        if (this._isRowViewable(sheetIdx, range.startRow - 1)) {
                            activeCell = this.getCell(range.startRow - 1, cellIdx);
                            activeCell.removeClass(ralign);
                            this.XLFilter._changeFilterIcon({ rowIndex: range.startRow - 1, colIndex: cellIdx }, "filter", this.XLEdit.getPropertyValue(range.startRow - 1, cellIdx, "filterState"));
                        }
                    }
                    else if (sheet._filterColl[range.startRow - 1][cellIdx].status.indexOf("-asc")) {
                        args.prev.icon = sheet._filterColl[range.startRow - 1][cellIdx].status;
                        if (this._isRowViewable(sheetIdx, range.startRow - 1)) {
                            activeCell = this.getCell(range.startRow - 1, cellIdx);
                            this.XLFilter._changeSortIcon({ rowIndex: range.startRow - 1, colIndex: cellIdx }, "ascending");
                        }
                        args.cur.icon = sheet._filterColl[range.startRow - 1][cellIdx].status;
                    }
                }
                if (args.requestType === "sortbycolor") {
                    rng = [range.startRow, cellIdx, range.endRow, cellIdx];
                    rangeData = this.getRangeData({ range: rng, skipHiddenRow: true });
                    ln = rangeData.length;
                    for (i = 0; i < ln; i++) {
                        color = rangeData[i].formats;
                        if (!ej.isNullOrUndefined(color)) {
                            if (args.operation === "sortbgcolor") {
                                if (!ej.isNullOrUndefined(color["background-color"]))
                                    (args.bgcolor === color["background-color"].toLowerCase()) && count.push(i);
                            }
                            else {
                                if (!ej.isNullOrUndefined(color["color"]))
                                    (args.fgcolor === color["color"].toLowerCase()) && count.push(i);
                            }
                        }
                    }
                    var multifilterIdx, remData, totData, c;
                    if (args.oprType === "PutCellColor" || args.oprType === "PutFontColor")
                        rng = args.sortRange;
                    if (this.isUndefined(args.tableID)) {
                        multifilterIdx = [];
                        for (var col = rng[1]; col <= rng[3]; col++)
                            multifilterIdx.push(col);
                    }
                    else
                        multifilterIdx = tab[tabIdx].multifilterIdx;
                    rng = [range.startRow, multifilterIdx[0], range.endRow, multifilterIdx[multifilterIdx.length - 1]];
                    rangeData = this.getRangeData({ range: rng, skipHiddenRow: true });
                    args.prev.data = $.extend(true, [], rangeData);
                    rng.colIndex = cellIdx;
                    args.range = rng;
                    for (j = 0, len = multifilterIdx.length; j < len; j++) {
                        remData = [], totData = [];
                        rng = [range.startRow, multifilterIdx[j], range.endRow, multifilterIdx[j]];
                        rangeData = this.getRangeData({ range: rng, skipHiddenRow: true });
                        for (c = count.length - 1; c >= 0; c--)
                            remData.push(rangeData.splice(count[c], 1)[0]);
                        totData = remData.reverse().concat(rangeData);
                        if (remData.length > 0) {
                            this._isSort = true;
                            this._dupDetails = true;
                            this.XLComment.deleteComment(rng, null, true, null);
                            this._removeHyperlink(null, null, true, rng);
                            this.clearRangeData(rng, ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "comment", "hyperlink", "format"], null, true);
                            this.XLFormat.removeStyle(rng, { cellStyle: true, tableStyle: true, format: true, skipHiddenRow: true });
                            this._isSort = false;
                            this._dupDetails = false;
                            this.XLEdit.updateCellWithContainer(totData, rng, sheetIdx, true);
                        }
                    }
                    rng = [range.startRow, multifilterIdx[0], range.endRow, multifilterIdx[multifilterIdx.length - 1]];
                    args.cur.data = $.extend(true, [], this.getRangeData({ range: rng, skipHiddenRow: true }));
                    this.updateUndoRedoCollection(args);
                }
                else {
                    var firstVal, isTake, fltrText;
                    tableFilteredColumn = [], hiddenIdx = [];
                    tab[tabIdx].fltrdIdxes = fltrdIdxes = args.fltrdIdxes;
                    stRow = (range.startRow === 0) ? 0 : range.startRow;
                    for (k = stRow; k <= range.endRow; k++) {
                        filtered = false;
                        for (j = 0, ln = fltrdIdxes.length; j < ln; j++)
                            (fltrdIdxes[j] == k) && (filtered = true);
                        if (filtered) {
                            fltrText = this.XLEdit.getPropertyValue(k, cellIdx, "value2");
                            fltrText = ej.isNullOrUndefined(fltrText) ? "" : fltrText;
                            filterColumn = { field: args.columnName, value: fltrText, predicate: "or", operator: "equal", matchcase: false };
                            predicate = ej.Predicate(args.columnName, "equal", fltrText);
                            if (this.XLEdit.getPropertyValue(k, 0, "filterID") === args.tableID) {
                                delete this._dataContainer.sheets[sheetIdx][k][0]["isFilterHide"];
                                delete this._dataContainer.sheets[sheetIdx][k][0]["filterID"];
                                if (!isVirtualScroll) {
                                    this._dupDetails = this._isFilter = true;
                                    this._showRow(k + 1, k, undefined, undefined, colHdr, colgrp, rowHdrTd);
                                    this._dupDetails = this._isFilter = false;
                                    if (filteredRowsColl.indexOf(k) > -1)
                                        filteredRowsColl.splice(filteredRowsColl.indexOf(k), 1);
                                    if ((!sheet._isImported || sheet._isLoaded) && !isSelect) {
                                        isSelect = !isSelect;
                                        this.performSelection({ rowIndex: k, colIndex: cellIdx }, { rowIndex: k, colIndex: cellIdx });
                                    }
                                }
                                else {
                                    hideRowColl.splice(hideRowColl.indexOf(k), 1);
                                    this._refreshSHMergeCells(sheetIdx, [k], 1, "row", "show");
                                }
                            }
                            tableFilteredColumn.push(filterColumn);
                            valColl.push(filterColumn);
                            firstVal = valColl[0]; isTake = firstVal["from"];
                        }
                        else {
                            if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(k, 0, "isRHide")) && ej.isNullOrUndefined(this.XLEdit.getPropertyValue(k, 0, "isFHide")) && ej.isNullOrUndefined(this.XLEdit.getPropertyValue(k, 0, "isFilterHide"))) {
                                this.XLEdit._updateDataContainer({ rowIndex: k, colIndex: 0 }, { dataObj: { "isFilterHide": true, "filterID": args.tableID } });
                                isHidden = true;
                            }
                            if (!isVirtualScroll) {
                                this._dupDetails = this._isFilter = true;
                                this._hideRow(k, k, "isFilterHide");
                                this._dupDetails = this._isFilter = false;
                                (filteredRowsColl.indexOf(k) === -1) && filteredRowsColl.push(k);
                            }
                            else {
                                if (isHidden) {
                                    hideRowColl.push(k);
                                    this._refreshSHMergeCells(sheetIdx, [k], 1, "row", "hide");
                                }
                            }
                            isHidden = false;
                        }
                    }
                    if (isVirtualScroll && (!sheet._isImported || sheet._isLoaded)) {
                        this.refreshContent(sheetIdx);
                        this.performSelection({ rowIndex: fltrdIdxes[0], colIndex: cellIdx }, { rowIndex: fltrdIdxes[0], colIndex: cellIdx });
                    }
                    if (!isVirtualScroll && this._hideRowColl.length) {
                        this._getRowHdrTBody(sheetIdx).append(this._renderRowHdr(this._hideRowColl, sheetIdx));
                        this._getContTBody(sheetIdx).append($(this._renderData(undefined, sheetIdx, 0, sheet.colCount, false, this._hideRowColl[0], this._hideRowColl.length)));
                        this._hideRowColl = [];
                    }
                    this.XLScroll._getRowHeights(sheetIdx, stRow); args.filterCollection = tableFilteredColumn;
                    predicate = firstVal["ejpredicate"] ? firstVal["ejpredicate"] : ej.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchcase);
                    for (j = 1; j < valColl.length; j++)
                        predicate = valColl[j].ejpredicate != undefined ? predicate[valColl[j].predicate](valColl[j].ejpredicate) : predicate[valColl[j].predicate](valColl[j].field, valColl[j].operator, valColl[j].value, !valColl[j].matchcase);
                    if (ej.isNullOrUndefined(tab[tabIdx].predicate[args.columnName]))
                        tab[tabIdx].predicate[args.columnName] = {};
                    tab[tabIdx].filteredColumns = tableFilteredColumn;
                    tab[tabIdx].predicate[args.columnName] = !isTake ? predicate : { from: firstVal["from"], take: firstVal["take"] };
                    tab[tabIdx].hiddenIdx = $.extend(true, [], hiddenIdx);
                    hiddenIdx = [];
                }
            }
            if (!(ej.isNullOrUndefined(args)) && (args.action === "filter" || args.action === "filtering" || args.action === "filterbycolor")) {
                if (args.tableID > -1)
                    sheet.filterSettings.tableRange[tabIdx].filterColumnName.push(args.fieldName);
                this.XLFilter._fltrRowHighlight(range.startRow, range.endRow, "add", args.tableID, args.filterCollection.length);
            }
            else if (args.action === "clearfiltering") {
                if (args.tableID > -1)
                    sheet.filterSettings.tableRange[tabIdx].filterColumnName.pop(args.fieldName);
                this.XLFilter._fltrRowHighlight(range.startRow, range.endRow, "clear", args.tableID, args.filterCollection.length);
            }
            this._dupDetails = false;
            if (this.model.showRibbon && this.model.allowFiltering) {
                var btnObj = $("#" + this._id + "_Ribbon_Data_SortFilter_ClearFilter").data("ejButton"), target = { rowIndex: this.getActiveCell().rowIndex, colIndex: this.getActiveCell().colIndex };
                this.XLRibbon._changeClrFltrStatus(btnObj, "button", target);
            }
            if (this.model.scrollSettings.allowScrolling)
                this.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical", "filter");
        },

        _filterClose: function (target) {
            if (!this.model.allowFiltering)
                return;
            if (!this._hasClass(target, "e-filterspan") && $(target).parents(".e-excelfilter").length < 1 && this._excelFilter._openedFltr && $(this._excelFilter._openedFltr).is(":visible")) {
                this._excelFilter.closeXFDialog();
                this.XLFilter._isSearchEdit = false;
            }
        },

        showPager: function (status) {
            this.model.showPager = status;
            this.element.find(".e-spreadsheetfooter").css("display", status ? "block" : "none");
            this._setSheetWidthHeight(this.getActiveSheetIndex(), { width: this._responsiveWidth, height: this._responsiveHeight });
        },

        _refreshClipboard: function (rObjElem, operation) {
            var model = this.model, xlId = this._id;
            if (rObjElem.length) {
                if (!model.allowFormatPainter || !model.allowCellFormatting)
                    rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard")[operation]();
                rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard_1")[operation]();
                rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard_Home_Clipboard_Cut")[operation]();
                rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard_Home_Clipboard_Copy")[operation]();
            }
        },

        _setScrolling: function (allowScrolling) {
            var sheet, i = 1, cnt = this.model.sheetCount, actSheet = this.getActiveSheetIndex(), settings = {}, sheetElem;
            settings.width = this._responsiveWidth;
            settings.height = this._responsiveHeight;
            if (allowScrolling) {
                while (i <= cnt) {
                    sheet = this.getSheet(i);
                    sheetElem = this.getSheetElement(i);
                    if (sheet._isLoaded) {
                        this._isAutoWHMode = !allowScrolling;
                        this.model.scrollSettings.scrollMode = "infinite";
                        this._renderScroller(i, settings, "initial");
                        $.extend(true, settings, this.model.scrollSettings);
                        this.element.height(settings.height).width(settings.width);
                        $("#" + this._id + "_Ribbon").ejRibbon("option", { width: settings.width });
                        this._updateResponsiveSettings();
                        this._setSheetWidthHeight(i, { height: this._responsiveHeight, width: this._responsiveWidth });
                        sheetElem.find("#" + this._id + "_content").removeClass("e-rmvrghtbdr");
                    }
                    i++;
                }
            }
            else {
                this._isAutoWHMode = !allowScrolling;
                this._isallowScrollingSetModel = true;
                this.model.scrollSettings.isResponsive = allowScrolling;
                while (i <= cnt) {
                    sheet = this.getSheet(i), sheetElem = this.getSheetElement(i);
                    if (sheet._isLoaded) {
                        sheet._isVPRendered = false;
                        this.model.scrollSettings.isResponsive = false;
                        this.model.scrollSettings.scrollMode = "normal";
                        this.model.scrollSettings.allowVirtualScrolling = false;
                        this._isAutoWHMode = !allowScrolling;
                        this.setActiveSheetIndex(i);
                        this._isInitLoad = true;
                        sheet._isDataMoved = true;
                        sheetElem.find("#" + this._id + "_content").find(".e-table").empty();
                        this._sheets[i]._contTBody = null;
                        this._refreshDataSrc(null, i);
                        this._refreshCellData(null, i);
                        this._canOverflow = true;
                        this._refreshOverflow();
                        this.refreshContent(i);
                        sheetElem.find(".e-spreadsheetrowheader")[0].style.height = "";
                        sheetElem.find(".e-rowheadercontent")[0].style.height = "";
                        this.element.find(".e-spreadsheetmainpanel")[0].style.height = "";
                        this.element.find(".e-spreadsheetgrppanel")[0].style.height = "";
                        sheetElem.find(".e-spreadsheetcontent")[0].style.height = "";
                        sheetElem.find(".e-spreadsheetcontentcontainer")[0].style.height = "";
                        sheetElem.find("#" + this._id + "_content")[0].style.height = "";
                        $("#" + this._id)[0].style.minHeight = "";
                        this._updateResponsiveSettings();
                        if (i == actSheet)
                            this._autoSSWidthHeight(i);
                        this._setElemDimension();
                    }
                    i++;
                }
                this._isInitLoad = false;
                this.setActiveSheetIndex(actSheet);
            }
        },

        _setScrollMode: function (scrollMode) {
            var i = 1, actSheet = this.getActiveSheetIndex(), settings = {};
            settings.width = this._responsiveWidth;
            settings.height = this._responsiveHeight;
            (scrollMode === "normal") ? ej.Spreadsheet.scrollMode.Normal : ej.Spreadsheet.scrollMode.Infinite;
            this.setActiveSheetIndex(i);
            this.refreshContent(i);
            this.setActiveSheetIndex(actSheet);
        },

        _setVirtualScrolling: function (allowVirtualScrolling) {
            var sheet, i = 1, cnt = this.model.sheetCount, actSheet = this.getActiveSheetIndex(), settings = {};
            settings.width = this._responsiveWidth;
            settings.height = this._responsiveHeight;
            if (allowVirtualScrolling) {
                while (i <= cnt) {
                    sheet = this.getSheet(i);
                    if (sheet._isLoaded) {
                        sheet._virtualBlockRowCnt = Math.ceil(sheet._vPortHgt / sheet.rowHeight) + this._bufferCnt;
                        this._isInitLoad = true;
                        this.setActiveSheetIndex(i);
                        this.refreshContent(i);
                    }
                    i++;
                }
            }
            else {
                this._isallowVirtualScrollingSetModel = true;
                while (i <= cnt) {
                    sheet = this.getSheet(i);
                    if (sheet._isLoaded) {
                        this.setActiveSheetIndex(i);
                        this.refreshContent(i);
                    }
                    i++;
                }
            }
            this.setActiveSheetIndex(actSheet);
        },

        _setModel: function (options) {
            var val, option, formulaBar, expProp, picProp, autofillProp, importProp, sheetIdx = this.getActiveSheetIndex(), model = this.model, xlId = this._id,
                rObj = $("#" + xlId + "_Ribbon").ejRibbon("instance"), rObjElem = this.model.showRibbon ? rObj.element : [];
            for (option in options) {
                val = options[option];
                switch (option) {
                    case "allowClipboard":
                        if (val) {
                            this._refreshClipboard(rObjElem, "show");
                            if (ej.isNullOrUndefined(this.XLClipboard))
                                this.XLClipboard = new ej.spreadsheetFeatures.clipboard(this);
                            this.XLClipboard._initCopyPaste();
                        }
                        else
                            this._refreshClipboard(rObjElem, "hide");
                        break;
                    case "activeSheetIndex":
                        this.gotoPage(val, false);
                        break;
                    case "pageSettings":
                        !this.isUndefined(options.pageSettings.currentPage) && this.gotoPage(options.pageSettings.currentPage, false);
                        if (!this.isUndefined(options.pageSettings.pageCount)) {
                            this.getPager().ejPager("option", "pageCount", options.pageSettings.pageCount);
                            this._refreshSpreadSheetPager(true);
                        }
                        break;
                    case "allowComments":
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLComment))
                                this.XLComment = new ej.spreadsheetFeatures.comments(this);
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_review_Comments").show();
                            this.XLComment._updateCmntRibIcons();
                        }
                        else
                            this.model.showRibbon && rObjElem.find("#" + xlId + "_Ribbon_review_Comments").hide();
                        break;
                    case "allowFormatPainter":
                        if (model.allowCellFormatting) {
                            if (val) {
                                if (!model.allowClipboard)
                                    rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard").show();
                                if (ej.isNullOrUndefined(this.XLFormat))
                                    this.XLFormat = new ej.spreadsheetFeatures.cellFormatting(this);
                                rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard_Home_Clipboard_FormatPainter").show();
                            }
                            else if (rObjElem.length) {
                                if (!model.allowClipboard)
                                    rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard").hide();
                                rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard_Home_Clipboard_FormatPainter").hide();
                            }
                        }
                        break;
                    case "allowFormulaBar":
                        if (val) {
                            formulaBar = $("#" + this._id + "_formulabar");
                            if (!formulaBar.length) {
                                this._renderFormulaBar(true);
                                this._setSheetWidthHeight(sheetIdx, { width: this._responsiveWidth, height: this._responsiveHeight });
                            }
                            else
                                this.showFormulaBar();
                        }
                        else
                            this.hideFormulaBar();
                        break;
                    case "allowHyperlink":
                        if (rObjElem.length)
                            if (val)
                                rObjElem.find("#" + xlId + "_Ribbon_insert_Links").show();
                            else
                                rObjElem.find("#" + xlId + "_Ribbon_insert_Links").hide();
                        break;
                    case "enableContextMenu":
                        if (val && ej.isNullOrUndefined(this.XLCMenu)) {
                            this.XLCMenu = new ej.spreadsheetFeatures.contextmenu(this);
                            this.XLCMenu._initContextMenu();
                            this.XLCMenu._initColorDialog();
                            this.XLCMenu._initCMenuFooter();
                        }
                        break;
                    case "allowEditing":
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLEdit))
                                this.XLEdit = new ej.spreadsheetFeatures.editing(this);
                            this.model.showRibbon && rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_home_Editing").show();
                            this.XLEdit._processEditing();
                            this.model.enableContextMenu && this.XLCMenu._enableMenuOpt(["RenameSheet"], "contextMenuFooter");
                        }
                        else {
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_home_Editing").hide();
                            this.model.enableContextMenu && this.XLCMenu._disableMenuOpt(["RenameSheet"], "contextMenuFooter");
                        }
                        break;
                    case "allowResizing":
                        if (val && ej.isNullOrUndefined(this.XLResize))
                            this.XLResize = new ej.spreadsheetFeatures.resizing(this);
                        break;
                    case "allowDataValidation":
                        if (val) {
                            rObjElem.find("#" + xlId + "_Ribbon_data_DataTools").show();
                            if (ej.isNullOrUndefined(this.XLValidate)) {
                                this.XLValidate = new ej.spreadsheetFeatures.validation(this);
                                this.XLRibbon._renderValDialog(this.XLRibbon._initValDialog());
                                this.XLValidate._addDVMethod();
                            }
                        }
                        else
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_data_DataTools").hide();
                        break;
                    case "allowConditionalFormats":
                        if (val) {
                            rObjElem.find("#" + xlId + "_Ribbon_home_Styles_Home_Styles_ConditionalFormatting").show();
                            this.XLRibbon._initCFDialog();
                            if (ej.isNullOrUndefined(this.XLCFormat))
                                this.XLCFormat = new ej.spreadsheetFeatures.cFormat(this);
                        }
                        else
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_home_Styles_Home_Styles_ConditionalFormatting").hide();
                        break;
                    case "allowSearching":
                        this.model.allowSearching = val;
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLSearch))
                                this.XLSearch = new ej.spreadsheetFeatures.findnreplace(this);
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_others_Editing").show();
                        }
                        else
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_others_Editing").hide();

                        break;
                    case "pictureSettings":
                        for (picProp in val) {
                            switch (picProp) {
                                case "allowPictures":
                                    model.pictureSettings.allowPictures = val[picProp];
                                    if (val[picProp]) {
                                        if (ej.isNullOrUndefined(this.XLShape))
                                            this.XLShape = new ej.spreadsheetFeatures.shape(this);
                                        rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_insert_Illustrations").show();
                                    }
                                    else
                                        rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_insert_Illustrations").hide();
                                    break;
                            }
                        }
                        break;
                    case "showRibbon":
                        this.model.showRibbon = val;
                        var ribbonDiv = $("#" + xlId + "_Ribbon"), i, len;
                        if (val) {
                            ribbonDiv.length ? ribbonDiv.show() : this.XLRibbon._renderRibbon(true);
                            rObj = $("#" + xlId + "_Ribbon").ejRibbon("instance");
                            rObjElem = rObj.element;
                            if (rObjElem[0].style.overflow === "hidden")
                                rObjElem[0].style.overflow = "";
                            if (!$._data($(".e-ss-" + this._id + ".e-chartcell")[0], 'events'))
                                this._on($(".e-ss-" + this._id + ".e-chartcell"), "click", this._chartClickHandler);
                            if (!$._data($('#' + this._id + '_cellstyles')[0], 'events'))
                                this._on($('#' + this._id + '_cellstyles'), "click", this._cellStyleClick);
                            if (!$._data($('#' + this._id + '_formatastable')[0], 'events'))
                                this._on($('#' + this._id + '_formatastable'), "click", this._formatAsTableClick);
                        }
                        else
                            ribbonDiv.hide();
                        this.refreshSpreadsheet();
                        for (i = 1, len = model.sheets.length; i < len; i++)
                            model.sheets[i]._isResized = (i != sheetIdx);
                        break;
                    case "isGridMode":
                        ribbonDiv = $("#" + xlId + "_Ribbon"); formulaBar = $("#" + this._id + "_formulabar");
                        if (val) {
                            this.model.showRibbon = !val;
                            this.model.allowFormulaBar = !val;
                            if (ribbonDiv.length)
                                ribbonDiv.hide();
                            if (formulaBar.length)
                                this.hideFormulaBar();
                        }
                        else {
                            ribbonDiv.show();
                            this.showFormulaBar();
                        }
                        break;
                    case "exportSettings":
                        if (model.ribbonSettings.applicationTab.type === "menu")
                            var menuObj = $('#' + xlId + '_Menu').data("ejMenu");
                        for (expProp in val) {
                            switch (expProp) {
                                case "allowExporting":
                                    model.exportSettings.allowExporting = val[expProp];
                                    if (val[expProp]) {
                                        if (model.exportSettings.excelUrl || model.exportSettings.csvUrl || model.exportSettings.pdfUrl) {
                                            rObjElem.length && rObjElem.find("#saveas_backStageTab").show();
                                            if (menuObj)
                                                menuObj.enableItemByID("Save");
                                        }
                                        if (ej.isNullOrUndefined(this.XLExport))
                                            this.XLExport = new ej.spreadsheetFeatures.exporting(this);
                                    }
                                    else {
                                        rObjElem.length && rObjElem.find("#saveas_backStageTab").hide();
                                        rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_BackStage_saveas").hide();
                                        if (menuObj)
                                            menuObj.disableItemByID("Save");
                                    }
                                    break;
                                case "excelUrl":
                                    model.exportSettings.excelUrl = val[expProp];
                                    if (val[expProp]) {
                                        rObjElem.length && rObjElem.find("#saveas_backStageTab").show();
                                        rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(0)').show();
                                        if (menuObj)
                                            menuObj.enableItemByID("ExportXL");
                                    }
                                    else {
                                        rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(0)').hide();
                                        if (menuObj)
                                            menuObj.disableItemByID("ExportXL");
                                    }
                                    break;
                                case "csvUrl":
                                    model.exportSettings.csvUrl = val[expProp];
                                    if (val[expProp]) {
                                        rObjElem.length && rObjElem.find("#saveas_backStageTab").show();
                                        rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(1)').show();
                                        if (menuObj)
                                            menuObj.enableItemByID("ExportCsv");
                                    }
                                    else {
                                        rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(1)').hide();
                                        if (menuObj)
                                            menuObj.disableItemByID("ExportCsv");
                                    }
                                    break;
                                case "pdfUrl":
                                    model.exportSettings.pdfUrl = options[option][expProp];
                                    if (val[expProp]) {
                                        rObjElem.length && rObjElem.find("#saveas_backStageTab").show();
                                        rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(2)').show();
                                        if (menuObj)
                                            menuObj.enableItemByID("ExportPdf");
                                    }
                                    else {
                                        rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(2)').hide();
                                        if (menuObj)
                                            menuObj.disableItemByID("ExportPdf");
                                    }
                                    break;

                            }
                        }
                        break;
                    case "allowKeyboardNavigation":
                        if (val && ej.isNullOrUndefined(this.XLCellNav))
                            this.XLCellNav = new ej.spreadsheetFeatures.cellNavigation(this);
                        break;
                    case "allowAutoFill":
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLDragFill)) {
                                this.XLDragFill = new ej.spreadsheetFeatures.dragFill(this);
                                this._createAutoFillElement();
                            }
                            else
                                this.getAutoFillElem().show();
                            this.XLDragFill.positionAutoFillElement();
                        }
                        else {
                            this.getAutoFillElem().hide();
                            this.XLDragFill.hideAutoFillOptions()
                        }
                        break;
                    case "autoFillSettings":
                        for (autofillProp in val) {
                            switch (autofillProp) {
                                case "fillType":
                                    if (model.allowAutoFill)
                                        model.autoFillSettings.fillType = val[autofillProp];
                                    break;
                                case "showFillOptions":
                                    if (model.allowAutoFill) {
                                        val.showFillOptions ? this._removeClass(this._getAutoFillOptElem(), "e-hide") : this.XLDragFill.hideAutoFillOptions();
                                        model.autoFillSettings.showFillOptions = val.showFillOptions;
                                    }
                                    break;
                            }
                        }
                        break;
                    case "allowSelection":
                        if (val && ej.isNullOrUndefined(this.XLSelection)) {
                            this.XLSelection = new ej.spreadsheetFeatures.selection(this);
                            this._initSelection();
                        }
                        break;
                    case "allowDragAndDrop":
                        if (val && ej.isNullOrUndefined(this.XLDragDrop))
                            this.XLDragDrop = new ej.spreadsheetFeatures.dragAndDrop(this);
                        break;
                    case "allowCellFormatting":
                        if (val) {
                            if (model.allowConditionalFormats || model.allowFormatAsTable)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Styles").show();
                            if (rObjElem.length) {
                                rObjElem.find("#" + xlId + "_Ribbon_home_Font").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Number").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_TopAlign").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_MiddleAlign").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_BottomAlign").show();
                                rObjElem.find("#" + xlId + "_Ribbon_separator_Home_Alignment_BottomAlign").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_AlignLeft").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_AlignCenter").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_AlignRight").show();
                                rObjElem.find("#" + xlId + "_Ribbon_separator_Home_Alignment_AlignRight").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_DecreaseIndent").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_IncreaseIndent").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Styles_Home_Styles_CellStyles").show();
                                if (model.allowFormatPainter)
                                    rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard_Home_Clipboard_FormatPainter").show();
                                if (model.allowClipboard)
                                    rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard").show();
                            }
                            if (ej.isNullOrUndefined(this.XLFormat))
                                this.XLFormat = new ej.spreadsheetFeatures.cellFormatting(this);
                            if (ej.isNullOrUndefined(this.XLCellFrmtDlg))
                                this.XLCellFrmtDlg = new ej.spreadsheetFeatures.formatCellDialog(this);
                            if ($('#' + xlId + "_formatdlg").length === 0)
                                this.XLCellFrmtDlg._renderCellFrmtDlg();
                        }
                        else if (rObjElem.length) {
                            rObjElem.find("#" + xlId + "_Ribbon_home_Font").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Number").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_TopAlign").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_MiddleAlign").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_BottomAlign").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_separator_Home_Alignment_BottomAlign").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_AlignLeft").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_AlignCenter").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_AlignRight").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_separator_Home_Alignment_AlignRight").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_DecreaseIndent").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_IncreaseIndent").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Styles_Home_Styles_CellStyles").hide();
                            rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard_Home_Clipboard_FormatPainter").hide();
                            if (!model.allowClipboard)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Clipboard").hide();
                            if (!model.allowConditionalFormats && !model.allowFormatAsTable)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Styles").hide();
                        }
                        break;
                    case "allowImport":
                        if (rObjElem.length)
                            if (val)
                                rObjElem.find("#open_backStageTab").show();
                            else
                                rObjElem.find("#open_backStageTab").hide();
                        break;
                    case "importSettings":
                        if (model.ribbonSettings.applicationTab.type === "menu")
                            menuObj = $('#' + xlId + '_Menu').data("ejMenu");
                        for (importProp in val) {
                            switch (importProp) {
                                case "importMapper":
                                    if (val[importProp]) {
                                        model.importSettings.importMapper = val[importProp];
                                        rObjElem.length && rObjElem.find("#open_backStageTab").show();
                                        if (menuObj)
                                            menuObj.enableItemByID("Open");
                                    }
                                    else {
                                        rObjElem.length && rObjElem.find("#open_backStageTab").hide();
                                        if (menuObj)
                                            menuObj.disableItemByID("Open");
                                    }
                                    break;
                                case "importUrl":
                                    model.importSettings.importUrl = val[importProp];
                                    break;
                                case "password":
                                    model.importSettings.password = val[importProp];
                                    break;
                            }
                        }
                        break;
                    case "allowSorting":
                        var numberDlg = document.getElementById(xlId + "number_MenuItem"), stringDlg = document.getElementById(xlId + "string_MenuItem");
                        menuObj = $("#" + xlId + "_Ribbon_SortFilter").data("ejMenu");
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLSort))
                                this.XLSort = new ej.spreadsheetFeatures.sorting(this);
                            if (rObjElem.length) {
                                rObjElem.find("#" + xlId + "_Ribbon_data_SortFilter_1").show();
                                rObjElem.find("#" + xlId + "_Ribbon_data_Sort").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_1").show();
                            }
                            menuObj && menuObj.enableItemByID('Ribbon_SortAtoZ');
                            menuObj && menuObj.enableItemByID('Ribbon_SortZtoA');
                        }
                        else if (rObjElem.length) {
                            rObjElem.find("#" + xlId + "_Ribbon_data_SortFilter_1").hide();
                            if (!this.model.allowFiltering) {
                                rObjElem.find("#" + xlId + "_Ribbon_data_Sort").hide();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_1").hide();
                            }
                            menuObj && menuObj.disableItemByID('Ribbon_SortAtoZ');
                            menuObj && menuObj.disableItemByID('Ribbon_SortZtoA');
                        }
                        if (this.model.allowFiltering) {
                            for (i = 0; i < 3; i++) {
                                if (!ej.isNullOrUndefined(numberDlg))
                                    numberDlg.childNodes[i].style.display = this.model.allowSorting ? (i === 2 ? "block" : "inline") : "none";
                                if (!ej.isNullOrUndefined(stringDlg))
                                    stringDlg.childNodes[i].style.display = this.model.allowSorting ? (i === 2 ? "block" : "inline") : "none";
                            }
                        }
                        break;
                    case "formatSettings":
                        if (model.allowCellFormatting) {
                            for (var formatSetting in val) {
                                switch (formatSetting) {
                                    case "allowFontFamily":
                                        model.formatSettings.allowFontFamily = val[formatSetting];
                                        if (rObjElem.length)
                                            if (val[formatSetting])
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Font_Home_Font_FontFamily").show();
                                            else
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Font_Home_Font_FontFamily").hide();
                                        break;
                                    case "allowDecimalPlaces":
                                        model.formatSettings.allowDecimalPlaces = val[formatSetting];
                                        if (rObjElem.length)
                                            if (val[formatSetting]) {
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Number_Home_Number_IncreaseDecimal").show();
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Number_Home_Number_DecreaseDecimal").show();
                                                rObjElem.find("#" + xlId + "_Ribbon_separator_Home_Number_CommaStyle").show();
                                            }
                                            else {
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Number_Home_Number_IncreaseDecimal").hide();
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Number_Home_Number_DecreaseDecimal").hide();
                                                rObjElem.find("#" + xlId + "_Ribbon_separator_Home_Number_CommaStyle").hide();
                                            }
                                        break;
                                    case "allowCellBorder":
                                        model.formatSettings.allowCellBorder = val[formatSetting];
                                        if (rObjElem.length)
                                            if (val[formatSetting]) {
                                                rObjElem.find("#" + xlId + "_Ribbon_separator_border").show();
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Font_Home_Font_Border").show();
                                            }
                                            else {
                                                rObjElem.find("#" + xlId + "_Ribbon_separator_border").hide();
                                                rObjElem.find("#" + xlId + "_Ribbon_home_Font_Home_Font_Border").hide();
                                            }
                                        break;
                                }
                            }
                        }
                        break;
                    case "sheets":
                        len = val.length;
                        for (i = 0; i < len; i++) {
                            for (var oper in val[i]) {
                                if ((this.model.sheetCount < i + 1) && val.length > sheetIdx)
                                    return;
                                switch (oper) {
                                    case "showGridlines":
                                        if (i + 1 === sheetIdx)
                                            this._showGridlines(val[i].showGridlines, sheetIdx);
                                        else
                                            this.getSheet(i + 1).showGridlines = val[i].showGridlines;
                                        break;
                                    case "showHeadings":
                                        if (i + 1 === sheetIdx)
                                            this._showHeadings(val[i].showHeadings, sheetIdx);
                                        else
                                            this.getSheet(i + 1).showHeadings = val[i].showHeadings;
                                        break;
                                }
                            }
                        }
                        break;
                    case "scrollSettings":
                        if (!ej.isNullOrUndefined(options["scrollSettings"])) {
                            if (!ej.isNullOrUndefined(options["scrollSettings"]["allowScrolling"])) {
                                model.scrollSettings.allowScrolling = options["scrollSettings"]["allowScrolling"];
                                this._setScrolling(options["scrollSettings"]["allowScrolling"]);
                            }
                            if (!ej.isNullOrUndefined(options["scrollSettings"]["allowVirtualScrolling"])) {
                                model.scrollSettings.allowVirtualScrolling = options["scrollSettings"]["allowVirtualScrolling"];
                                this._setVirtualScrolling(options["scrollSettings"]["allowVirtualScrolling"]);
                            }
                            if (!ej.isNullOrUndefined(options["scrollSettings"]["isResponsive"]))
                                model.scrollSettings.isResponsive = options["scrollSettings"]["isResponsive"];

                            if (!ej.isNullOrUndefined(options["scrollSettings"]["scrollMode"])) {
                                this._setScrollMode(options["scrollSettings"]["scrollMode"]);
                            }
                            if (!ej.isNullOrUndefined(options["scrollSettings"]["width"]))
                                model.scrollSettings.width = options["scrollSettings"]["width"];
                            if (!ej.isNullOrUndefined(options["scrollSettings"]["height"]))
                                model.scrollSettings.height = options["scrollSettings"]["height"];
                        }
                        break;
                    case "allowFiltering":
                        menuObj = $("#" + xlId + "_Ribbon_SortFilter").data("ejMenu");
                        if (val) {
                            if (rObjElem.length) {
                                rObjElem.find("#" + xlId + "_Ribbon_data_SortFilter_2").show();
                                rObjElem.find("#" + xlId + "_Ribbon_data_Sort").show();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_1").show();
                            }
                            menuObj && menuObj.enableItemByID('Ribbon_Filter');
                            if (ej.isNullOrUndefined(this.XLFilter))
                                this.XLFilter = new ej.spreadsheetFeatures.filter(this);
                            this.XLFilter._renderExcelFilter();
                        }
                        else if (rObjElem.length) {
                            if (!this.model.allowSorting) {
                                rObjElem.find("#" + xlId + "_Ribbon_data_Sort").hide();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_1").hide();
                            }
                            rObjElem.find("#" + xlId + "_Ribbon_data_SortFilter_2").hide();
                            menuObj && menuObj.disableItemByID('Ribbon_Filter');
                        }
                        break;
                    case "allowInsert":
                        if (val) {
                            if (rObjElem.length && !model.allowDelete)
                                rObjElem.find("#" + xlId + "_Ribbon_others_Cells").show();
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_others_Cells_1").show();
                            this.getPager().find(".e-new").removeClass("e-disable");
                            if (model.enableContextMenu) {
                                this.XLCMenu._enableMenuOpt(["InsertSheet", "MoveorCopy"], "contextMenuFooter");
                                this.XLCMenu._enableMenuOpt(["Insert"], "contextMenuCell");
                                this.XLCMenu._enableMenuOpt(["Insert"], "contextMenuColumnHeader");
                                this.XLCMenu._enableMenuOpt(["Insert"], "contextMenuRowHeader");
                            }

                        }
                        else {
                            if (rObjElem.length && !model.allowDelete)
                                rObjElem.find("#" + xlId + "_Ribbon_others_Cells").hide();
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_others_Cells_1").hide();
                            this.getPager().find(".e-new").addClass("e-disable");
                            if (model.enableContextMenu) {
                                this.XLCMenu._disableMenuOpt(["InsertSheet", "MoveorCopy"], "contextMenuFooter");
                                this.XLCMenu._disableMenuOpt(["Insert"], "contextMenuCell");
                                this.XLCMenu._disableMenuOpt(["Insert"], "contextMenuColumnHeader");
                                this.XLCMenu._disableMenuOpt(["Insert"], "contextMenuRowHeader");
                            }
                        }
                        break;
                    case "allowDelete":
                        if (val) {
                            if (!model.allowInsert && rObjElem.length)
                                rObjElem.find("#" + xlId + "_Ribbon_others_Cells").show();
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_others_Cells_2").show();
                            if (model.enableContextMenu && this._getSheetNames(true).length > 1) {
                                this.XLCMenu._enableMenuOpt(["DeleteSheet"], "contextMenuFooter");
                                this.XLCMenu._enableMenuOpt(["Delete"], "contextMenuCell");
                                this.XLCMenu._enableMenuOpt(["Delete"], "contextMenuColumnHeader");
                                this.XLCMenu._enableMenuOpt(["Delete"], "contextMenuRowHeader");
                            }
                        }
                        else {
                            if (!model.allowInsert && rObjElem.length)
                                rObjElem.find("#" + xlId + "_Ribbon_others_Cells").hide();
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_others_Cells_2").hide();
                            if (model.enableContextMenu) {
                                this.XLCMenu._disableMenuOpt(["DeleteSheet"], "contextMenuFooter");
                                this.XLCMenu._disableMenuOpt(["Delete"], "contextMenuCell");
                                this.XLCMenu._disableMenuOpt(["Delete"], "contextMenuColumnHeader");
                                this.XLCMenu._disableMenuOpt(["Delete"], "contextMenuRowHeader");
                            }
                        }
                        break;
                    case "allowFreezing":
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLFreeze)) {
                                this.XLFreeze = new ej.spreadsheetFeatures.freezepane(this);
                                this.XLFreeze._initFreeze();
                            }
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_others_Window").show();
                        }
                        else if (rObjElem.length)
                            rObjElem.find("#" + xlId + "_Ribbon_others_Window").hide();
                        break;
                    case "allowMerging":
                        if (rObjElem.length)
                            if (val)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_Merge").show();
                            else
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_Merge").hide();
                        break;
                    case "allowWrap":
                        if (rObjElem.length)
                            if (val)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_WrapText").show();
                            else
                                rObjElem.find("#" + xlId + "_Ribbon_home_Alignment_Home_Alignment_WrapText").hide();
                        break;
                    case "allowUndoRedo":
                        if (rObjElem.length)
                            if (val)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Actions").show();
                            else
                                rObjElem.find("#" + xlId + "_Ribbon_home_Actions").hide();
                        break;
                    case "frozenRows":
                        if (model.allowFreezing)
                            this.XLFreeze.freezeRows(val);
                        break;
                    case "frozenColumns":
                        if (model.allowFreezing)
                            this.XLFreeze.freezeColumns(val);
                        break;
                    case "freezePanes":
                        if (model.allowFreezing)
                            this.XLFreeze.freezePanes(val.rowIndex, val.colIndex);
                        break;
                    case "allowFormatAsTable":
                        if (val) {
                            if (!model.enablePivotTable)
                                rObjElem.find("#" + xlId + "_Ribbon_insert_Tables").show();
                            if (ej.isNullOrUndefined(this.XLFormat))
                                this.XLFormat = new ej.spreadsheetFeatures.cellFormatting(this);
                            if (rObjElem.length) {
                                rObjElem.find("#" + xlId + "_Ribbon_home_Styles_Home_Styles_FormatAsTable").show();
                                rObjElem.find("#" + xlId + "_Ribbon_insert_Tables_Insert_Tables_Table").show();
                            }
                        }
                        else {
                            if (rObjElem.length) {
                                if (!model.enablePivotTable)
                                    rObjElem.find("#" + xlId + "_Ribbon_insert_Tables").hide();
                                rObjElem.find("#" + xlId + "_Ribbon_home_Styles_Home_Styles_FormatAsTable").hide();
                                rObjElem.find("#" + xlId + "_Ribbon_insert_Tables_Insert_Tables_Table").hide();
                            }
                        }
                        break;
                    case "enablePivotTable":
                        if (rObjElem.length)
                            if (val) {
                                if (ej.isNullOrUndefined(this.XLPivot))
                                    this.XLPivot = new ej.spreadsheetFeatures.pivot(this);
                                rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_insert_Tables_Insert_Tables_PivotTable").show();
                            }
                            else {
                                rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_insert_Tables_Insert_Tables_PivotTable").hide();
                                this.hideActivationPanel();
                                this.XLRibbon._toggleAnalyzeTab();
                                this.getSheetElement(sheetIdx).find(".e-ss-activepivot").removeClass("e-ss-activepivot");
                            }
                        break;
                    case "allowAutoSum":
                        if (rObjElem.length)
                            if (val)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_Home_Editing_AutoSum").show();
                            else
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_Home_Editing_AutoSum").hide();
                        break;
                    case "allowCharts":
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLChart) || ej.isNullOrUndefined(this.XLShape)) {
                                this.XLShape = new ej.spreadsheetFeatures.shape(this);
                                this.XLChart = new ej.spreadsheetFeatures.chart(this);
                            }
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_insert_Charts").show();
                        }
                        else
                            rObjElem.length && rObjElem.find("#" + xlId + "_Ribbon_insert_Charts").hide();
                        break;
                    case "allowSparkline":
                        if (val) {
                            if (ej.isNullOrUndefined(this.XLSparkline))
                                this.XLSparkline = new ej.spreadsheetFeatures.sparkLine(this);
                            rObj = $('#' + this._id + '_Ribbon').data('ejRibbon');
                            if (this.XLRibbon._contextualTabCollection[4] && this.XLRibbon._tabCollection[1].groups[4]) {
                                rObj.hideTab("Sparkline Design");
                                rObjElem.find("#" + xlId + "_Ribbon_insert_SparklineCharts").show();
                            }
                            else if (!this.XLRibbon._contextualTabCollection[4] && !this.XLRibbon._tabCollection[1].groups[4]) {
                                this.XLSparkline._renderSparklineTab();
                                rObj.addTabGroup(2, this.XLSparkline._tabInsert(), 4);
                                this.XLRibbon._tabCollection[1].groups.push(this.XLSparkline._tabInsert());
                                rObj.addContextualTabs(this.XLSparkline._contextualTabInsert(), 11);
                                this.XLRibbon._contextualTabCollection.push(this.XLSparkline._contextualTabInsert());
                                rObj.hideTab("Sparkline Design");
                            }
                        }
                        else {
                            rObjElem.find("#" + xlId + "_Ribbon_insert_SparklineCharts").hide();
                            rObj.hideTab("Sparkline Design");
                        }
                        break;
                    case "printSettings":
                        for (var pageProp in val) {
                            switch (pageProp) {
                                case "allowPrinting":
                                    model.printSettings.allowPrinting = val[pageProp];
                                    if (val[pageProp]) {
                                        this.XLPrint = new ej.spreadsheetFeatures.print(this);
                                        if (rObjElem.length) {
                                            rObjElem.find("#" + xlId + "_Ribbon_pagelayout_Print").show();
                                            rObjElem.find("#print_backStageTab").show();
                                        }
                                    }
                                    else if (rObjElem.length) {
                                        rObjElem.find("#print_backStageTab").hide();
                                        rObjElem.find("#" + xlId + "_Ribbon_pagelayout_Print").hide();
                                    }
                                    break;
                                case "allowPageSize":
                                    model.printSettings.allowPageSize = val[pageProp];
                                    if (rObjElem.length)
                                        if (val[pageProp])
                                            rObjElem.find("#" + xlId + "_Ribbon_pagelayout_PageLayout").show();
                                        else
                                            rObjElem.find("#" + xlId + "_Ribbon_pagelayout_PageLayout").hide();
                                    break;
                            }
                        }
                        break;
                    case "allowLockCell":
                        if (rObjElem.length)
                            if (val) {
                                rObjElem.find("#" + xlId + "_Ribbon_review_Changes_Review_Changes_ProtectSheet").show();
                                rObjElem.find("#" + xlId + "_Ribbon_review_Changes_Review_Changes_LockCell").show();
                            }
                            else {
                                rObjElem.find("#" + xlId + "_Ribbon_review_Changes_Review_Changes_ProtectSheet").hide();
                                rObjElem.find("#" + xlId + "_Ribbon_review_Changes_Review_Changes_LockCell").hide();
                            }
                        break;
                    case "undoRedoStep":
                        this.undoRedoStep = val;
                        break;
                    case "enableTouch":
                        this._wireTouchEvts(val ? "_on" : "_off");
                        break;
                    case "showPager":
                        this.showPager(options[option]);
                        this._refreshSpreadSheetPager();
                        break;
                    case "allowOverflow":
                        this._refreshOverflow();
                        break;
                    case "allowClear":
                        if (rObjElem.length)
                            if (val)
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_Home_Editing_Clear").show();
                            else
                                rObjElem.find("#" + xlId + "_Ribbon_home_Editing_Home_Editing_Clear").hide();
                        break;
                    case "isReadOnly":
                        this._readOnly();
                        break;
                    case "locale":
                        this.model.locale = options[option];
                        this._destroy();
                        this.model.sheets.splice(0, 1);
                        this.addClass(this.element[0], this._rootCSS + ' e-js');
                        this._init();
                        break;
                    case "allowCellType":
                        if (val)
                            this.XLCellType = new ej.spreadsheetFeatures.cellType(this);
                        break;
                    case "activationPanelWidth":
                        this.model.apWidth = val;
                        this.getActivationPanel().width(val - 1)
                        break;
                    case "cssClass":
                        this.element.removeClass(this._cssClass).addClass(options[option]);
                        break;
                    case "ribbonSettings":
                        this.model.ribbonSettings.applicationTab.type = options.ribbonSettings.applicationTab.type;
                        $("#" + this._id + "_Menu")[0].style.display = (options.ribbonSettings.applicationTab.type === "menu") ? "block" : "none";
                        this.XLRibbon._refreshBSItems(options.ribbonSettings.applicationTab.type);
                        this.XLRibbon._menuCustomize();
                        rObj.setModel({ applicationTab: this.XLRibbon._appTabCollection });
                        if (options.ribbonSettings.applicationTab.type === "backstage")
                            this.XLRibbon._isAppTabCreate = false;
                        break;
                }
            }
            if (rObjElem.length && rObj.model) {
                if (!model.allowAutoSum && !model.allowFiltering && !model.allowUndoRedo && !model.allowSorting && !model.allowClipboard && !model.allowFormatPainter && !model.allowCellFormatting && !model.allowMerging && !model.allowWrap && !model.allowConditionalFormats && !model.allowFormatAsTable)
                    rObj.hideTab(this._getLocStr("HOME"));
                else
                    rObj.showTab(this._getLocStr("HOME"));
                if (!model.allowFormatAsTable && !model.allowPictures && !model.allowHyperlink && !model.allowCharts && !model.allowSparkline)
                    rObj.hideTab(this._getLocStr("INSERT"));
                else
                    rObj.showTab(this._getLocStr("INSERT"));
                if (!model.allowDataValidation && !model.allowFiltering && !model.allowSorting)
                    rObj.hideTab(this._getLocStr("DATATAB"));
                else
                    rObj.showTab(this._getLocStr("DATATAB"));
                if (!model.printSettings.allowPrinting)
                    rObj.hideTab(this._getLocStr("PAGELAYOUT"));
                else
                    rObj.showTab(this._getLocStr("PAGELAYOUT"));
                if (!model.allowComments && !model.allowLockCell)
                    rObj.hideTab(this._getLocStr("REVIEW"));
                else
                    rObj.showTab(this._getLocStr("REVIEW"));
                if (!model.allowFreezing && !model.allowInsert && !model.allowDelete && !model.allowSearching)
                    rObj.hideTab(this._getLocStr("OTHERS"));
                else
                    rObj.showTab(this._getLocStr("OTHERS"));
            }
        },

        // Importing
        "import": function (options) {
            if (!this.model.allowImport)
                return;
            var args = {}, otherOptns = {};
            if (!options.dataContainer) {
                if (this.model.allowCellFormatting && this.XLFormat && (this.getObjectLength(this.XLFormat._customFontFamily) > 0))
                    otherOptns["customFontFamily"] = this.XLFormat._customFontFamily;
                if (this._isDefaultLocked)
                    otherOptns["ExcelLikeLockedCells"] = true;
                if (this.getObjectLength(otherOptns))
                    options.dataContainer = JSON.stringify(otherOptns);
            }
            if (options.password && options.password.length)
                args["password"] = options.password;
            if (options.file && options.file.name)
                args["fileName"] = options.file.name;
            if (this.model.beforeImport && this._trigger("beforeImport", args))
                return false;
            if (args.password && args.password.length)
                options.password = args.password;
            var proxy = this,
                opts = {
                    type: "POST",
                    data: this._import(options),
                    async: this.isUndefined(options.async) ? true : options.async,
                    url: this.model["importSettings"].importMapper,
                    success: function (response) {
                        if (proxy.element)
                            proxy._importSuccess(response);
                    },
                    error: function (err, type) {
                        proxy._importFailed({ type: type, xhr: { status: err.status, statusText: err.statusText } });
                    }
                };
            if (this._browserDetails.name !== "msie" || this._browserDetails.version !== "9.0" || opts.data.append) { // !IE9 with for form only
                opts.processData = false;
                opts.contentType = false;
            }
            $('#' + this._id + "_Ribbon_BackStage").hide();
            proxy.showWaitingPopUp();
            $.ajax(opts);
        },

        _import: function (options) {
            if (window.FormData && this._isObject(options)) {
                var prop, formData = new FormData();
                for (prop in options) {
                    if (prop != "async")
                        formData.append(prop, options[prop]);
                }
                return formData;
            }
            else
                return options;
        },

        _importSuccess: function (response) {
            var error = ["UnsupportedFile", "IncorrectPassword", "InvalidUrl", "NeedPassword", "CancellationRequested", "ImportPreventedOnUnknownFormula"], args;
            this._renderAlertdlg();
            if (error.indexOf(response) > -1) {
                switch (response) {
                    case error[0]:
                    case error[1]:
                    case error[2]:
                    case error[4]:
                    case error[5]:
                        this._showAlertDlg("Alert", response, "", null, 110);
                        break;
                    case error[3]:
                        this._showDialog(this._id + "_ImportPasswordDialog");
                        this.model.importSettings.password = "";
                        break;
                }
                this.hideWaitingPopUp();
            }
            else {
                args = { data: response, reqType: "importing" };
                if (this._trigActionBegin(args)) {
                    this.hideWaitingPopUp();
                    return;
                }
                response = args.data;
                this.loadFromJSON(JSON.parse(response));
            }
        },

        loadFromJSON: function (response) {
            this.isImport = true;
            this.model.isImport = true;
            var isReadOnly = this.model.isReadOnly;
            if (isReadOnly)
                this.model.isReadOnly = false;
            $("#" + this._id + "_file").ejUploadbox("option", "autoUpload", true);
            if (this._isSheetReq) {
                sheetIdx = Number(this.getObjectKeys(response.dataContainer.sheets)[0]);
                this._refreshImpStyles(response.dataContainer.hashCode);
                this._impData.dataContainer = $.extend(true, {}, response.dataContainer);
                this._impData.dataContainer.sheets = this._dataContainer.sheets;
                this._impData.dataContainer.cellType = this._dataContainer.cellType;
                this._impData.dataContainer.sheets[sheetIdx] = response.dataContainer.sheets[sheetIdx];
                this._impData.model.sheets[sheetIdx] = response.sheet;
                this._dataContainer = $.extend(true, {}, this._impData.dataContainer);
                this._dataContainer.sheetCellType = {};
                this._refreshModel(response.sheet, true, sheetIdx);
                this._sheetSettings(sheetIdx);
                if (!this._intrnlReq)
                    this.gotoPage(sheetIdx, false);
                this._isSheetReq = false;
            }
            else {
                if (typeof response.model === "string")
                    response["model"] = JSON.parse(response.model);
                if (typeof response.dataContainer === "string")
                    response["dataContainer"] = JSON.parse(response.dataContainer);
                if (this.getObjectLength(response.model.sheets[0]))
                    response.model.sheets.unshift({});
                var sheetIdx, cnts, i = 1, args, nmgr = response.model && response.model.nameManager, j, nmgrLen, sheet, len, tmgr, sheetCnt;
                if (nmgr && nmgr.length) {
                    for (j = 0, nmgrLen = nmgr.length; j < nmgrLen; j++)
                        nmgr[j].refersto = this._decode(nmgr[j].refersto);
                }
                if (!this.model.scrollSettings.allowVirtualScrolling)
                    cnts = this._getMaxRowColCnt(response.model.sheets, true);
                if (this.model.scrollSettings.allowVirtualScrolling || (response.dataContainer.sharedData.length < 50001 && cnts.rowCount < 10001 && cnts.colCount < 126)) {
                    this._impData = response;
                    args = { importData: response };
                    if (this._trigger("onImport", args))
                        return false;
                    if (this._isInitLoad)
                        this._initBase();
                    else {
                        this._destroy();
                        this._refreshModel(response.model);
                        this._dataContainer = $.extend(true, {}, response.dataContainer);
                        this._dataContainer.sheetCellType = {};
                        this._initCSSTag();
                        while (i <= this.model.sheetCount) {
                            this._sheetSettings(i);
                            this._newSIndex++;
                            i++;
                        }
                        i = 1;
                        while (i <= this.model.sheetCount) {
                            if (!this.model.scrollSettings.allowVirtualScrolling && !this.model.importSettings.allowSheetOnDemand)
                                this._initSheet(i);
                            i++;
                        }
                        this._refreshNameMngr(response.model.nameManager);
                        sheetIdx = this.getActiveSheetIndex();
                        sheetCnt = this.model.sheetCount;
                        // for unloaded sheets table references
                        for (i = 1; i <= sheetCnt; i++) {
                            if (i != sheetIdx) {
                                sheet = this._impData.model.sheets[i], tmgr = sheet.tableManager, len = this.getObjectLength(tmgr);
                                for (j = 0; j < len; j++)
                                    this.XLFormat._updateTableFormula("addRange", tmgr[j], i);
                            }
                        }
                        this.gotoPage(sheetIdx, false);
                        this._isRibbonDestroyed = false;
                    }
                    this._calcEngine.setCalculatingSuspended(response.model.isManualCalculation || false);
                    this._trigger("loadComplete");
                    this.clearUndoRedo();
                }
                else
                    this._showAlertDlg("Alert", "HugeDataAlert");
            }
            var keys = this.getObjectKeys(response.dataContainer.customCellStyle);
            for (i = 0; i < keys.length; i++)
                this.XLFormat.addNewCustomStyle(keys[i], response.dataContainer.customCellStyle[keys[i]]);
            if (!this._intrnlReq) {
                this.isImport = false;
                this.model.isImport = false;
            }
            this._intrnlReq = false;
            this._renderDDownList();
            this.hideWaitingPopUp();
            this.model.showRibbon && this.XLRibbon._updateRibbonIcons();
            this.model.isReadOnly = isReadOnly;
            this._isSSLoaded = true;
        },

        _importFailed: function (response) {
            var args = { failureType: response.type };
            if (response.xhr) {
                args.status = response.xhr.status;
                args.statusText = response.xhr.statusText;
            }
            else
                args.statusText = response.error;
            this.hideWaitingPopUp();
            this._trigger("openFailure", args);
        },

        _importSheet: function (sheetIdx, async) {
            var opts = {}, isettings = this.model.importSettings;
            this._isSheetReq = true;
            opts = { sheetIndex: sheetIdx, allowSheetOnDemand: isettings.allowSheetOnDemand, password: isettings.password, async: async };
            opts.dataContainer = JSON.stringify({ hashCode: this._dataContainer.hashCode, sharedData: this._dataContainer.sharedData, valData: this._dataContainer.valData, cFormatData: this._dataContainer.cFormatData });
            this["import"](opts);
            this.getSheet(sheetIdx)._isRequested = true;
        },
        _decode: function (value) {
            return $('<div/>').html(value).text();
        },

        _refreshModel: function (options, isSheet, sheetIdx) {
            var len, prop, sheet, i = 1;
            if (options) {
                if (isSheet) {
                    sheet = this.model.sheets[this._getSheetIndex(sheetIdx)];
                    sheet.rowCount = options.rowCount || this.defaults.rowCount;
                    sheet.colCount = options.colCount || this.defaults.colCount;
                }
                else {
                    this.model.sheetCount = options.sheetCount || this.defaults.sheetCount;
                    this.model.activeSheetIndex = options.activeSheetIndex || this.defaults.activeSheetIndex;
                    this.model.rowHeight = options.rowHeight || this.defaults.rowHeight;
                    this.model.columnWidth = options.columnWidth || this.defaults.columnWidth;
                    if (!this._isRefresh) {
                        this.model.sheets = [{}];
                        len = options.sheets.length;
                        while (i < len) {
                            sheet = options.sheets[i];
                            prop = {
                                rowCount: sheet.rowCount || this.defaults.rowCount,
                                colCount: sheet.colCount || this.defaults.colCount
                            };
                            this.model.sheets.push(prop);
                            i++;
                        }
                    }
                    if (options.nameManager && options.nameManager.length)
                        this.model.nameManager = options.nameManager;
                }
            }
            else {
                len = this.model.sheets.length;
                if (this.model.sheetCount < len)
                    this.model.sheetCount = len;
            }
            if (this.model.apWidth === 300 && this.model.activationPanelWidth !== 300)
                this.model.apWidth = this.model.activationPanelWidth;
            else if (this.model.apWidth !== 300 && this.model.activationPanelWidth === 300)
                this.model.activationPanelWidth = this.model.apWidth;
        },

        _refreshImpStyles: function (hashcode) {
            var format, code, i = 0, len = hashcode.length;
            while (i < len) {
                code = hashcode[i];
                if (this._dataContainer.hashCode.indexOf(code) === -1) {
                    if (code.indexOf("e-format") === -1) {
                        this._dataContainer.hashCode.push(code);
                        if (code.length < 25) // default border hashcode max len 24 
                            this.XLFormat._writeCssRules(code, this.XLFormat._getCssPropertyAsString({ border: this.XLFormat.getBorderFromHashCode(code) }));
                    }
                    else {
                        format = this.XLFormat.getFormatFromHashCode(code);
                        this.XLFormat._createFormatClass(format);
                    }
                }
                i++;
            }
        },

        _refreshImpSheets: function (sheetIdx) {
            var sheet = this._impData.model.sheets[sheetIdx];
            this._refreshImpTable(sheet.tableManager);
            this._refreshImpCells(sheetIdx);
            this._refreshImpCF(sheetIdx);
            if (this.model.allowMerging && sheet.mergedCells)
                this._refreshImpMC(sheet.mergedCells); //possible
            if (this.model.allowFiltering && sheet.filterSettings && sheet.filterSettings.range)
                this.XLFilter._filterCellRange(sheetIdx, sheet.filterSettings.range);
            this._refreshImpHC(sheet.hideColsCollection);
            this._refreshImpHR(sheet.hideRowsCollection);
            this._refreshOverflow();
            if (this.model.allowCellType)
                this._refreshSheetCellTypes(this._impData.dataContainer.sheetCellType, sheetIdx);
            this._refreshShapePosOnImp(sheet.shapeMngr, sheetIdx);
            this._refreshImpCharts(sheet.shapeMngr.chart);
            this._refreshImpSparkline(sheet.shapeMngr.sparkline, sheetIdx)
            this._refreshImpPics(sheet.shapeMngr, sheetIdx);
            this._refreshImpPvts(sheet.pivotMngr, sheetIdx);
            this.XLComment._updateCmntArrowPos();
            if (sheet.showGridlines === false)
                $("#" + this._id + "_Ribbon_PageLayout_Show_Gridlines").ejCheckBox({ checked: sheet.showGridlines });
            if (sheet.isSheetProtected)
                this.protectSheet(true);
        },

        _refreshImpCells: function (sheetIdx) {
            var cellData, data, len, i = 0, sheet = this.getSheet(sheetIdx), usedRange = sheet.usedRange, formulaRange, newVal, rowIdx, colIdx,
                datas = this.XLEdit._getPropWithCellIdx([0, 0, usedRange.rowIndex, usedRange.colIndex], "value", sheetIdx, true);
            len = datas.length;
            while (i < len) {
                data = datas[i];
                formulaRange = this.XLEdit.getPropertyValue(data.rowIdx, data.colIdx, "formulaRange");
                if (formulaRange)
                    this.XLEdit._formulaArrayRange = this.getRangeIndices(formulaRange);
                this.XLEdit._refreshCalcEngine(data.rowIdx, data.colIdx, true, data.value, sheetIdx);
                this.XLEdit._formulaArrayRange = "";
                i++;
            }
            if (this.model.allowCellFormatting) {
                i = 0, datas = this.XLEdit._getPropWithCellIdx([0, 0, usedRange.rowIndex, usedRange.colIndex], "type", sheetIdx), len = datas.length;
                while (i < len) {
                    data = datas[i], rowIdx = data.rowIdx, colIdx = data.colIdx,
                        cellData = this.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], property: ["value", "formatStr"] })[0];
                    if (data.value == "accounting" && sheet.columnsWidthCollection[colIdx] > sheet.columnWidth && cellData.value && !this.isFormula(cellData.value)) {
                        newVal = this.toAccounting(cellData.formatStr, cellData.value);
                        this.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { type: "accounting", value2: newVal }, sheetIdx: sheetIdx });
                    }
                    i++;
                }
                if (this.model.formatSettings.allowCellBorder) {
                    i = 0, datas = this.XLEdit._getPropWithCellIdx([0, 0, usedRange.rowIndex, usedRange.colIndex], "borders", sheetIdx), len = datas.length;
                    while (i < len) {
                        data = datas[i];
                        this.XLFormat.applyBorder(data.value, [data.rowIdx, data.colIdx, data.rowIdx, data.colIdx]);
                        i++;
                    }
                }
            }

        },

        _refreshSheetCellTypes: function (sheets, sheetIdx) {
            var arr = [], i, len;
            if (this.getObjectLength(sheets) < 1)
                return;
            for (i = 1, len = this.getObjectLength(sheets[sheetIdx]); i <= len; i++)
                arr.push({ "range": sheets[sheetIdx][i].settings.range, "settings": sheets[sheetIdx][i].settings });
            this.XLCellType._rangeCellTypes(arr, sheetIdx, true);
        },

        _refreshImpCF: function (sheetIdx) {
            if (this.model.allowConditionalFormats) {
                var split, i, idx, len = this._impData.dataContainer.cFormatData.length, ranges, j, jLen;
                for (i = 0; i < len; i++) {
                    split = this._impData.dataContainer.cFormatData[i].split("_");
                    if (!ej.isNullOrUndefined(split[6]))
                        ranges = split[6].split(',');
                    idx = Number(split[5]);
                    if (idx === sheetIdx) {
						for(j = 0, jLen = ranges.length; j < jLen; j++) {
							this.XLCFormat._cFormat(split[0], split[1], split[2], split[3], split[4], ranges[j], idx, this.getRangeIndices(split[6]));
						}
                        this._impData.dataContainer.cFormatData.splice(i, 1);
                        len = this._impData.dataContainer.cFormatData.length;
                        i--;
                    }
                }
            }
        },

        _refreshImpMC: function (mergeCells) {
            var mergeCell, i = mergeCells.length;
            if (i) {
                while (i--) {
                    mergeCell = mergeCells[i];
                    if (mergeCell.isCenterAlign)
                        this.mergeCenter = true;
                    this.mergeCells(mergeCell.range, true);
                    this.mergeCenter = false;
                }
            }
        },

        _refreshImpHC: function (hideCols) {
            var colIdx, hideIdxCln = this.getObjectKeys(hideCols), i = hideIdxCln.length;
            if (i) {
                while (i--) {
                    colIdx = parseInt(hideIdxCln[i]);
                    this._hideColumn(colIdx, colIdx);
                }
            }
        },

        _refreshImpResRowHght: function (sheetIdx) {
            var i, k, span, cls, cIdx, rIdx, hashIdx, cellsData, sheet = this.getSheet(sheetIdx), rowsCols = sheet._restrictedHeightRows, sheetData = this._dataContainer.sheets[sheetIdx],
                hashCodes = this._dataContainer.hashCode, range, height, canRefresh = true, mRangeCol = [], val, mergedCells, j, mRangeColLen;
            if (this._impData && this._impData.model.sheets[sheetIdx] && this._impData.model.sheets[sheetIdx].mergedCells)
                mergedCells = this._impData.model.sheets[sheetIdx].mergedCells;
            else if (this._copySheet)
                mergedCells = sheet.mergedCells;
            else
                mergedCells = [];
            for (k = 0; k < mergedCells.length; k++) {
                range = this.getRangeIndices(mergedCells[k]["range"]);
                mRangeCol.push(range);
            }
            span = this.element.find("#" + this._id + "_emptyDiv");
            for (i = 0; i < rowsCols.length; i++) {
                rIdx = rowsCols[i];
                cellsData = sheetData[rIdx];
                for (cIdx in cellsData) {
                    val = this._dataContainer.sharedData[cellsData[cIdx].value];
                    if (!val || this.isFormula(val))
                        continue;
                    hashIdx = cellsData[cIdx].formats;
                    if (hashIdx) {
                        cls = hashCodes[hashIdx];
                        if (cellsData[cIdx].wrap) {
                            for (j = 0, mRangeColLen = mRangeCol.length; j < mRangeColLen; j++) {
                                range = mRangeCol[j];
                                if (range[0] <= rIdx && range[2] >= rIdx) {
                                    if (range[1] <= cIdx && range[3] >= cIdx) {
                                        canRefresh = false;
                                        break;
                                    }
                                }
                            }
                            if (canRefresh) {
                                span.width(sheet.columnsWidthCollection[cIdx] - 3); //3 - td padding (left = 2, right = 1)
                                cls += " e-sswraptext";
                            }
                        }
                        this.addClass(span[0], cls);
                        span.text(val);
                        height = span[0].offsetHeight + 1; // 1 - td bottom border
                        if (sheet.rowsHeightCollection[rIdx] < height)
                            sheet.rowsHeightCollection[rIdx] = height;
                        this._refreshGlobalSpan(null, true);
                        canRefresh = true;
                    }
                }
            }
        },

        _refreshImpHR: function (hideRows) {
            var i, idx, preRowIdx, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
            hideRows = hideRows || []
            var rowColl = this.getRows(sheetIdx), rows = rowColl[1], hdrRows = rowColl[0], rowHdrCon = this._getJSSheetRowHeaderContent(sheetIdx), rowHdrElem = rowHdrCon.find("tr"), len;
            for (i = 0, len = hideRows.length; i < len; i++) {
                idx = parseInt(hideRows[i]);
                preRowIdx = idx ? idx - 1 : 0;
                if (this.isUndefined(this.XLEdit.getPropertyValue(preRowIdx, 0, "isRHide")))
                    this.XLEdit._updateDataContainer({ rowIndex: preRowIdx, colIndex: 0 }, { dataObj: { "hRow": true } });
                if (this.model.scrollSettings.allowVirtualScrolling)
                    this.addClass(rowHdrCon.find("[idx =" + preRowIdx + "] .e-rowheader")[0], "e-hrow");
                else {
                    this.addClass(rowHdrElem.find(".e-rowheader")[preRowIdx], "e-hrow");
                    this.addClass(rows[idx], "e-r-hide");
                    this.addClass(hdrRows[idx], "e-r-hide");
                }
                this.XLScroll._getRowHeights(sheetIdx, sheet.hideRowsCollection.sort()[0]);
            }
        },

        _refreshImpTable: function (tmngr) {
            var range, format, table, i = this.getObjectLength(tmngr);
            if (this.model.allowFormatAsTable && i) {
                while (i--) {
                    table = tmngr[i];
                    range = table.range;
                    format = this.XLFormat._getTableLayoutFromName(table.formatName);
                    if (!format) {
                        format = this.XLFormat._formatAsTableStyle;
                        table.formatName = format.formatName;
                    }
                    if (table.totalRow)
                        range[2] = range[2] - 1;
                    this.XLFormat._isTableNameAdded = true;
                    this.XLFormat.createTable({ header: true, name: table.name, format: format.format, formatName: table.formatName, showHeaderRow: table.showHeaderRow, totalRow: table.totalRow }, this._getAlphaRange(this.getActiveSheetIndex(), range[0], range[1], range[2], range[3]));
                    this.XLFormat._isTableNameAdded = false;
                }
            }
        },

        _refreshImpCharts: function (charts) {
            if (this.model.allowCharts) {
                var sheet, chart, i = 0, len = this.getObjectLength(charts), isTrendline, seriesName, rng, sIdx;
                while (i < len) {
                    isTrendline = false;
                    chart = charts["chart" + i];
                    sheet = this.getSheet(chart.dataSheetIdx);
                    if (chart.dataSheetIdx != this.getActiveSheetIndex() && sheet._isImported && !sheet._isRequested) {
                        this._intrnlReq = true;
                        this._importSheet(chart.dataSheetIdx, false);
                    }
                    if (!ej.isNullOrUndefined(chart.series)) {
                        for (var s = 0, serLen = chart.series.length; s < serLen; s++) {
							seriesName = chart.series[s].name.toString().trim();
							if (seriesName.indexOf('=') == 0) {
								seriesName = seriesName.slice(1);
								if(seriesName.indexOf('!') > -1) {
									sIdx =  this._getSheetIndexByName(seriesName.split('!')[0]);
									rng = this.getRangeIndices(seriesName.split('!')[1]);
								}
								else {
									sIdx =  this.getActiveSheetIndex();
									rng = this.getRangeIndices(seriesName);
								}
								seriesName = this.XLEdit.getPropertyValue(rng[0],rng[1], 'value2',sIdx);
							}
							chart.series[s].name = seriesName;
                            if (!ej.isNullOrUndefined(chart.series[s].trendlines)) {
                                if (chart.series[s].trendlines.length > 0) {
                                    isTrendline = true;
                                    break;
                                }
                            }
                        }
                    }
                    isTrendline ? this.XLChart.createChart(chart.range, { type: chart.commonSeriesOptions.type, enable3D: chart.enable3D, marker: chart.commonSeriesOptions.marker, top: chart.top, left: chart.left, height: chart.size.height, width: chart.size.width, title: chart.title, legend: chart.legend, primaryYAxis: chart.primaryYAxis, primaryXAxis: chart.primaryXAxis || { labelIntersectAction: 'wrapByWord' }, dataSheetIdx: chart.dataSheetIdx, series: chart.series, seriesRange: chart.seriesRange, isRowColSwitched: chart.isRowColSwitched }) : this.XLChart.createChart(chart.series ? null : chart.range, { type: chart.commonSeriesOptions.type, enable3D: chart.enable3D, marker: chart.commonSeriesOptions.marker, top: chart.top, left: chart.left, height: chart.size.height, width: chart.size.width, title: chart.title, legend: chart.legend, primaryYAxis: chart.primaryYAxis, primaryXAxis: chart.primaryXAxis || { labelIntersectAction: 'wrapByWord' }, dataSheetIdx: chart.dataSheetIdx, series: chart.series, seriesRange: chart.seriesRange, isRowColSwitched: chart.isRowColSwitched });
                    i++;
                }
            }
        },

        _refreshImpSparkline: function (sparkline, sheetIdx) {
            if (this.model.allowSparkline) {
                var i = 0, j, cellInfo, dataRngeValue, len, sparklineObj = this.getObjectKeys(sparkline), arr = [], sparklineChart;
                while (i < sparklineObj.length) {
                    sparklineChart = sparkline[sparklineObj[i]];
                    cellInfo = this._getCellInfo({ rowIndex: sparklineChart.rowIndex, colIndex: sparklineChart.colIndex }, sparklineChart.sheetIdx);
                    dataRngeValue = this.getRangeData({ range: this._getRangeArgs(sparklineChart.DataRange, Array, sparklineChart.SheetIndex), property: ["value"], sheetIdx: sparklineChart.SheetIndex });
                    for (j = 0, len = dataRngeValue.length; j < len; j++)
                        arr.push(parseInt(dataRngeValue[j].value));
                    sparklineChart["dataSource"] = arr;
                    this.XLSparkline._createSparkline(sparklineChart, cellInfo, sheetIdx);
                    arr = [];
                    i++;
                }
            }
        },

        _refreshImpPics: function (shapeMngr, sheetIdx) {
            if (this.model.pictureSettings.allowPictures) {
                var pic, i = 0, picCln = this.getObjectKeys(shapeMngr.picture), len = picCln.length;
                while (i < len) {
                    pic = shapeMngr.picture[picCln[i]];
                    pic.sheetIdx = sheetIdx;
                    if (!this.getSheet(sheetIdx)._isUpdated)
                        this.XLShape._createPicture(sheetIdx, null, shapeMngr.sharedPics[pic.data], pic.top, pic.left, pic.width, pic.height, null, pic.bcolor, pic.bstyle, pic.bwidth, pic);
                    else {
                        pic.imgData = shapeMngr.sharedPics[pic.data];
                        this.XLShape._refreshPictureElement(pic);
                    }
                    i++;
                }
            }
        },

        _refreshShapePosOnImp: function (shapeMngr, sheetIdx) {
            var chartMngr = shapeMngr.chart, picMngr = shapeMngr.picture, i, diff, key, orgHght, topVal, sheet = this.getSheet(sheetIdx), rowHghtColl = sheet._rowHeightCollection, sRowHght = sheet.rowsHeightCollection, impRowHght = this._impData ? this._impData.model.sheets[sheetIdx].rowsHeightCollection : [];
            if (!this.getObjectLength(picMngr) && !this.getObjectLength(chartMngr))
                return false;
            for (i = 0; i < impRowHght.length; i++) {
                if (impRowHght[i] !== sRowHght[i]) {
                    diff = sRowHght[i] - impRowHght[i];
                    orgHght = rowHghtColl[i + 1] - diff;
                    for (key in picMngr) {
                        topVal = picMngr[key].top;
                        if (topVal > orgHght)
                            picMngr[key].top = topVal + diff;
                    }
                    for (key in chartMngr) {
                        topVal = chartMngr[key].top;
                        if (topVal > orgHght)
                            chartMngr[key].top = topVal + diff;
                    }
                }
            }
        },

        _refreshImpPvts: function (pivotMngr, sheetIdx) {
            if (this.model.enablePivotTable && pivotMngr) {
                var pvt, i = 0, len = this.getObjectLength(pivotMngr.pivot), objKeys = this.getObjectKeys(pivotMngr.pivot), settings;
                while (i < len) {
                    pvt = pivotMngr.pivot[objKeys[i]];
                    settings = {
                        rows: pvt.rows,
                        columns: pvt.columns,
                        values: pvt.values,
                        filters: pvt.filters
                    };
                    if (!this.getSheet(sheetIdx)._isUpdated)
                        this.XLPivot.createPivotTable(pvt.dataSheetName + "!" + this._getProperAlphaRange(this._getSheetIndexByName(pvt.dataSheetName), pvt.dataRange[0], pvt.dataRange[1], pvt.dataRange[2], pvt.dataRange[3]), this.getSheet(pvt.sheetIdx).sheetInfo.text + "!" + this._getProperAlphaRange(pvt.sheetIdx, pvt.rowIndex, pvt.colIndex, pvt.rowIndex, pvt.colIndex), objKeys[i], settings, pvt);
                    else
                        this.XLPivot._refreshPivotElement(pvt.dataSheetName + "!" + this._getProperAlphaRange(this._getSheetIndexByName(pvt.dataSheetName), pvt.dataRange[0], pvt.dataRange[1], pvt.dataRange[2], pvt.dataRange[3]), this.getSheet(pvt.sheetIdx).sheetInfo.text + "!" + this._getProperAlphaRange(pvt.sheetIdx, pvt.rowIndex, pvt.colIndex, pvt.rowIndex, pvt.colIndex), objKeys[i], settings, pvt);
                    i++;
                }
            }
            (!this._isExport) && this._getContent(sheetIdx).find(".e-ss-activepivot").removeClass("e-ss-activepivot");
            this.hideActivationPanel();
        },

        _refreshNameMngr: function (nameMgr) {
            nameMgr = nameMgr || this.model.nameManager;
            var i = nameMgr.length;
            if (this.model.showRibbon) {
                if (i) {
                    while (i--)
                        this.XLRibbon._addNamedRange(nameMgr[i].name, nameMgr[i].refersto, nameMgr[i].comment, nameMgr[i].sheetIndex, nameMgr[i].scope);
                }
                this.XLRibbon._updateUseInFormulaTrgt();
            }
            this.model.nameManager = nameMgr;
            this.XLEdit._refreshAutoComplete();
        },

        _getBorderInput: function (str) {
            str = str.split("_");
            var i = 4, obj = {}, arr = ["top", "right", "bottom", "left"];
            while (i--) {
                if (str[i].length)
                    obj[arr[i]] = str[i];
            }
            return obj;
        },

        _refreshHashCode: function (hashCode) {
            hashCode = hashCode || this._dataContainer.hashCode;
            var code, i = hashCode.length;
            while (i--) {
                code = hashCode[i];
                if (code.indexOf("e-format") === -1 && code.indexOf("e-border") === -1)
                    hashCode[i] = "";
            }
        },

        clearUndoRedo: function () {
            this._undoCollection = [];
            this._redoCollection = [];
            this._updateUndoRedoIcons();
        },

        _initializePicture: function (sheetIdx) {
            this._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").append(ej.buildTag("div.e-ss-imgvisual"));
        },

        _getShapePositionInManager: function (rowIndex, colIndex, id, shapeType) {
            var sheetIdx = this.getActiveSheetIndex(), cellObj = this._dataContainer.sheets[sheetIdx][rowIndex][colIndex], i, len;
            for (i = 0, len = cellObj.length; i < len; i++)
                if (cellObj[shapeType][i].id === id)
                    break;
            return i;
        },

        _swapVal: function (val) {
            var temp = val.prev;
            val.prev = val.cur;
            val.cur = temp;
        },

        _getValue: function (coll, key) {
            var obj, i = coll.length;
            while (i--) {
                obj = coll[i];
                if (obj.value === key)
                    return obj.value;
            }
        },

        _isRowViewable: function (sheetIdx, rowIdx) {
            var sheet = this.getSheet(sheetIdx), isInView = sheet._isVPRendered;
            if (this.model.scrollSettings.allowVirtualScrolling)
                isInView = sheet._virtualRowIdx.indexOf(rowIdx) > -1;
            return isInView;
        },

        _isColumnViewable: function () {
            return true;
        },

        _undoRedoOperation: function (evtobj) {
            var val, undoVal, actCell = this.getActiveCell();
            if ((evtobj.which === 90 || evtobj.keyCode === 90) && evtobj.ctrlKey) {
                evtobj.preventDefault();
                if (evtobj.target.id.indexOf("_Edit") > -1 || evtobj.target.id.indexOf("_input") > -1) {
                    val = this.XLEdit.getCurrentEditCellData();
                    if (val !== this._cureditedCell) {
                        undoVal = val;
                        if (evtobj.target.id.indexOf("_Edit") > -1)
                            evtobj.target.textContent = this._cureditedCell;
                        else
                            $("#" + this._id + "_Edit")[0].textContent = this._cureditedCell;
                        if (this.model.allowFormulaBar)
                            this._getInputBox().val(this._cureditedCell);
                        this._undoInputobj = { value: undoVal, rowIndex: actCell.rowIndex, colIndex: actCell.colIndex };
                    }
                }
                else {
                    this._isUndo = true;
                    this._performUndoRedo();
                }
            }
            else if ((evtobj.which === 89 || evtobj.keyCode === 89) && evtobj.ctrlKey) {
                evtobj.preventDefault();
                if (evtobj.target.id.indexOf("_Edit") > -1 || evtobj.target.id.indexOf("_input") > -1) {
                    if (actCell.rowIndex === this._undoInputobj.rowIndex && actCell.colIndex === this._undoInputobj.colIndex) {
                        if (evtobj.target.id.indexOf("_Edit") > -1)
                            evtobj.target.textContent = this._undoInputobj.value;
                        else
                            $("#" + this._id + "_Edit")[0].textContent = this._undoInputobj.value;
                        if (this.model.allowFormulaBar)
                            this._getInputBox().val(this._undoInputobj.value);
                    }
                }
                else {
                    this._isUndo = false;
                    this._performUndoRedo();
                }
            }
        },
        undo: function () {
            this._isUndo = true;
            this._performUndoRedo();
        },
        redo: function () {
            this._isUndo = false;
            this._performUndoRedo();
        },

        _performUndoRedo: function () {
            var val = (this._isUndo) ? this._undoCollection.pop() : this._redoCollection.pop(), args;
            if (!ej.isNullOrUndefined(val)) {
                if (val.sheetIndex !== this.getActiveSheetIndex())
                    this.gotoPage(val.sheetIndex, null);
                this._isUndoRedo = true;
                switch (val.reqType) {
                    case "auto-fill":
                        this._undoForAutoFill(val);
                        break;
                    case "auto-sum":
                        this._undoForAutoSum(val);
                        break;
                    case "cell-format":
                        this._undoForFormat(val);
                        break;
                    case "cell-styles":
                        this._undoForStyle(val);
                        break;
                    case "clear-all":
                        this._undoForClAll(val);
                        break;
                    case "clear-comment":
                        this._undoForClComment(val);
                        break;
                    case "clear-content":
                        this._undoForClContent(val);
                        break;
                    case "clear-format":
                        this._undoForClFormat(val);
                        break;
                    case "clear-link":
                        this._undoForCLLink(val);
                        break;
                    case "comment":
                        this._undoForComment(val);
                        break;
                    case "cond-format":
                        this._undoForCondFormat(val);
                        break;
                    case "copy-paste": {
                        this._isCopyPaste = true;
                        this._undoForCopyPaste(val);
                        this._isCopyPaste = false;
                        break;
                    }
                    case "cut-paste":
                        this._isCopyPaste = true;
                        this._undoForCutPaste(val);
                        this._isCopyPaste = false;
                        break;
                    case "delete":
                        this._undoForDel(val);
                        break;
                    case "edit":
                        this._undoForEdit(val);
                        break;
                    case "filter":
                        this._undoForFilter(val);
                        break;
                    case "filterbycolor":
                        this._undoForFilterByColor(val);
                        break;
                    case "find-replace":
                        this._undoForFind(val);
                        break;
                    case "format-painter":
                        this._undoForFormatPaint(val);
                        break;
                    case "format-table":
                        this._undoForFormatTable(val);
                        break;
                    case "hyperlink":
                        this._undoForHyperlink(val);
                        break;
                    case "insert":
                        this._undoForIns(val);
                        break;
                    case "merge-cells":
                        this._undoForMerge(val);
                        break;
                    case "paging":
                        var tmpIdx = val.nSheetIndex;
                        val.nSheetIndex = val.sheetIndex;
                        val.sheetIndex = tmpIdx;
                        break;
                    case "pivotgrid":
                        this._undoForPivot(val);
                        break;
                    case "resize-column":
                        this._undoForResizeCol(val);
                        break;
                    case "resize-row":
                        this._undoForResizeRow(val);
                        break;
                    case "resize-fit-height":
                        this._undoForResizeFHeight(val);
                        break;
                    case "resize-fit-width":
                        this._undoForResizeFWidth(val);
                        break;
                    case "reorder-cells":
                        this._undoForReOrder(val);
                        break;
                    case "show-hide":
                        this._undoForShowHide(val);
                        break;
                    case "shape":
                        this._undoForShape(val);
                        break;
                    case "sort":
                        this._undoForSort(val);
                        break;
                    case "sortbycolor":
                        this._undoForSortByColor(val);
                        break;
                    case "textwrap":
                        this._undoForTextWrap(val);
                        break;
                    case "validation":
                        this._undoForValidation(val);
                        break;
                    case "sparkline":
                        this.XLSparkline._undoForSparkline(val);
                        break;
                }
                (this._isUndo) ? this._redoCollection.push(val) : this._undoCollection.push(val);
                args = { sheetIdx: val.sheetIndex, reqType: this._isUndo ? "undo" : "redo", operation: val };
                if (this._undoCollection.length > this.undoRedoStep)
                    this._undoCollection.splice(0, 1);
                if (this._redoCollection.length > this.undoRedoStep)
                    this._redoCollection.splice(0, 1);
                this._updateUndoRedoIcons();
                if (this.model.showRibbon)
                    this.XLRibbon._updateRibbonIcons();
                this._isUndoRedo = false;
                this._isUndo = false;
                (this.model.allowSelection && val.reqType != "shape") && this.XLSelection._refreshBorder();
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
                if (this._trigActionComplete(args))
                    return;
            }
        },

        _undoForAutoFill: function (val) {
            var sheet = this.getSheet(val.sheetIndex), i;
            if (this._isUndo) {
                this.clearRangeData(val.range, this._cellProp);
                if (this.model.allowCellFormatting) {
                    this.XLFormat.removeStyle(val.range);
                    this.XLFormat.updateFormat(val.bFormat, val.range);
                    if (this.XLResize)
                        for (i = val.range[0]; i <= val.range[2]; i++)
                            this.XLResize.setRowHeight(i, val.bHeight[i]);
                }
                this.updateData($.extend(true, [], val.bData), val.range);
                val.actionType == "flash-fill" && this.updateData($.extend(true, [], val.bdData), val.bRange);
                if (val.colSel)
                    this.XLSelection.selectColumns(sheet._startCell.colIndex, sheet._endCell.colIndex);
                else if (val.rowSel)
                    this.XLSelection.selectRows(sheet._startCell.rowIndex, sheet._endCell.rowIndex);
                else
                    this.performSelection({ rowIndex: val.bRange[0], colIndex: val.bRange[1] }, { rowIndex: val.bRange[2], colIndex: val.bRange[3] });
            }
            else {
                if (this.model.allowCellFormatting) {
                    this.XLFormat.removeStyle(val.range);
                    this.XLFormat.updateFormat(val.aFormat, val.range);
                }
                this.updateData($.extend(true, [], val.aData), val.range);
                this.XLCFormat.refreshCFormat();
                val.actionType == "flash-fill" && this.updateData($.extend(true, [], val.adData), val.bRange);
                for (i = val.range[0]; i <= val.range[2]; i++)
                    this.XLResize.setRowHeight(i, val.aHeight[i]);
                this.performSelection({ rowIndex: val.bRange[0], colIndex: val.bRange[1] }, { rowIndex: val.range[2], colIndex: val.range[3] });
            }
        },

        _undoForAutoSum: function (val) {
            var container = this._dataContainer.sheets[val.sheetIndex], cell, pObj;
            if (this._isUndo) {
                for (var i = 0, len = val.updCell.length; i < len; i++) {
                    cell = this.getCell(val.updCell[i].rowIndex, val.updCell[i].colIndex, val.sheetIndex);
                    this._clearFormula(val.updCell[i].rowIndex, val.updCell[i].colIndex);
                    this.clearRangeData([val.updCell[i].rowIndex, val.updCell[i].colIndex, val.updCell[i].rowIndex, val.updCell[i].colIndex], ["value2"], null, true);
                    pObj = $.extend(true, {}, val.updCell[i].pObj)
                    container[val.updCell[i].rowIndex][val.updCell[i].colIndex] = pObj;
                    cell.text(val.updCell[i].pValue);
                }
                this.performSelection(val.range);
            }
            else
                this.XLRibbon.autoSum(val.oprType, val.range);
        },

        _undoForClAll: function (val) {
            var i, len;
            this._isPaste = this._dupDetails = true;
            if (this._isUndo) {
                this.updateData($.extend(true, [], val.bData), val.range);
                this.XLFormat.updateFormat($.extend(true, [], val.bBorder), val.range);
                for (i = 0, len = val.wrapColl.length; i < len; i++)
                    this.setWrapText("wrap", [val.wrapColl[i].rowIdx, val.wrapColl[i].colIdx, val.wrapColl[i].rowIdx, val.wrapColl[i].colIdx]);
                for (i = 0, len = val.mergeColl.length; i < len; i++) {
                    this.mergeCenter = val.mergeColl[i].mergeObj.isCenterAlign;
                    this.mergeCells(val.mergeColl[i].mergeObj.mRange, true);
                }
            }
            else {
                if (this.model.showRibbon && this.XLRibbon._isMergeSelect && this.XLRibbon._isFilterSelect.status) {
                    this.clearRangeData(val.range, ["value", "value2", "hyperlink", "cFormatRule", "comment"], "", false);
                    this.XLFormat.removeStyle(null, { cellStyle: true, format: true });
                }
                else
                    this.clearRangeData(val.range, ["value", "value2", "format", "formats", "type", "formatStr", "decimalPlaces", "thousandSeparator", "hyperlink", "comment", "cFormatRule", "border"]);
                this.setWrapText("unwrap", val.range);
                this.unmergeCells(val.range);
            }
            this._isPaste = this._dupDetails = false;
            if (val.tblObj) {
                if (this._isUndo) {
                    this.XLClipboard._isCut = true;
                    this.XLFormat.createTable(val.tblObj, val.tblObj.range);
                    this.XLClipboard._isCut = false;
                }
                else {
                    this.XLFormat.removeTable(val.tblObj.tblId);
                    this.clearRangeData(val.range, ["value", "value2", "format", "formats", "type", "formatStr", "decimalPlaces", "thousandSeparator", "hyperlink", "comment", "cFormatRule"]);
                    this.XLFormat.removeStyle(val.range, { cellStyle: true, tableStyle: true, format: true, border: true });
                    this.XLRibbon._toggleDesignTab(this.getActiveCell());
                }
            }
            if (this.model.allowConditionalFormats)
                this.XLCFormat.refreshCFormat(val.range);
            (this.model.allowDataValidation && !this._isUndo) && this.XLValidate.clearDV();
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        _undoForClComment: function (val) {
            var cell, startCell, endCell;
            if (!val.selectedCell.length)
                return;
            startCell = { rowIndex: val.selectedCell[0].rowIndex, colIndex: val.selectedCell[0].colIndex };
            endCell = { rowIndex: val.selectedCell[val.selectedCell.length - 1].rowIndex, colIndex: val.selectedCell[val.selectedCell.length - 1].colIndex };
            if (this._isUndo) {
                for (var i = 0, len = val.selectedCell.length; i < len; i++) {
                    cell = { rowIndex: val.selectedCell[i].rowIndex, colIndex: val.selectedCell[i].colIndex };
                    this.XLEdit._updateDataContainer({ rowIndex: val.selectedCell[i].rowIndex, colIndex: val.selectedCell[i].colIndex }, { dataObj: { "comment": val.selectedCell[i].prevComment } });
                    this.XLSelection.selectRange(cell, cell);
                    this.XLComment.setComment();
                    this.XLComment._updateCurCmntVal();
                }
            }
            else {
                this.XLSelection.selectRange(startCell, endCell);
                this.XLComment.deleteComment(undefined, null, false, "clear");
            }
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
        },

        _undoForClContent: function (val) {
            (this._isUndo) ? this.updateData($.extend(true, [], val.bData), val.range) : this.clearRangeData(val.range, ["value", "value2", "type", "hyperlink"], val.reqType);
            if (this.model.allowConditionalFormats)
                this.XLCFormat.refreshCFormat(val.range);
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        _undoForClFormat: function (val) {
            if (this._isUndo) {
                for (var i = 0, len = val.wrapColl.length; i < len; i++)
                    this.setWrapText("wrap", [val.wrapColl[i].rowIdx, val.wrapColl[i].colIdx, val.wrapColl[i].rowIdx, val.wrapColl[i].colIdx]);
                for (i = 0, len = val.mergeColl.length; i < len; i++) {
                    this.mergeCenter = val.mergeColl[i].mergeObj.isCenterAlign;
                    this.mergeCells(val.mergeColl[i].mergeObj.mRange, true);
                }
                this.updateData($.extend(true, [], val.bData), val.range, val.reqType);
            }
            else {
                if (this.XLRibbon._isMergeSelect && this.XLRibbon._isFilterSelect.status) {
                    this.clearRangeData(val.range, ["decimalPlaces", "thousandSeparator", "hyperlink", "cFormatRule"], "", false, val.reqType);
                    this.XLFormat.removeStyle(null, { cellStyle: true, format: true })
                }
                else
                    this.clearRangeData(val.range, ["format", "formats", "border", "type", "formatstr", "decimalPlaces", "thousandSeparator", "hyperlink", "cFormatRule"], "", false, val.reqType);
                this.setWrapText("unwrap", val.range);
                this.unmergeCells(val.range);
            }
            if (this.model.allowConditionalFormats)
                this.XLCFormat.refreshCFormat(val.range);
        },

        _undoForCLLink: function (val) {
            var i, len, startCell = { rowIndex: val.selectedCell[0].rowIndex, colIndex: val.selectedCell[0].colIndex }, temp, currentCell,
                endCell = { rowIndex: val.selectedCell[val.selectedCell.length - 1].rowIndex, colIndex: val.selectedCell[val.selectedCell.length - 1].colIndex };
            this.setActiveCell(val.selectedCell[0].rowIndex, val.selectedCell[0].colIndex);
            this.XLSelection.selectRange(startCell, endCell);
            if (this._isUndo) {
                for (i = 0, len = val.selectedCell.length; i < len; i++) {
                    if (val.selectedCell[i].prevLink) {
                        currentCell = this.getCell(val.selectedCell[i].rowIndex, val.selectedCell[i].colIndex);
                        (!(val.selectedCell[i].prevLink.webAddr) ? currentCell.html(ej.buildTag("a.e-hyperlinks", val.selectedCell[i].prevText, "")) : currentCell.html(ej.buildTag("a.e-hyperlinks", val.selectedCell[i].prevText, "", { href: val.selectedCell[i].prevLink.webAddr, target: "_blank" })));
                        (this.isUndefined(val.selectedCell[i].prevLink.cellAddr)) ? this.XLEdit._updateDataContainer({ rowIndex: val.selectedCell[i].rowIndex, colIndex: val.selectedCell[i].colIndex }, { dataObj: { hyperlink: { "webAddr": val.selectedCell[i].prevLink.webAddr } } }) : this.XLEdit._updateDataContainer({ rowIndex: val.selectedCell[i].rowIndex, colIndex: val.selectedCell[i].colIndex }, { dataObj: { hyperlink: { "cellAddr": val.selectedCell[i].prevLink.cellAddr } } });
                    }
                }
            }
            else
                this._removeHyperlink("clear", val.selectedCell);
            this.XLSelection.selectRange(startCell, endCell);
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
            for (i = 0, len = val.selectedCell.length; i < len; i++) {
                temp = val.selectedCell[i].prevLink;
                val.selectedCell[i].prevLink = val.selectedCell[i].curLink;
                val.selectedCell[i].curLink = temp;
            }
        },

        _undoForComment: function (val) {
            var cell, startCell, endCell, cmnt;
            startCell = { rowIndex: val.selectedCell[0].rowIndex, colIndex: val.selectedCell[0].colIndex };
            endCell = { rowIndex: val.selectedCell[val.selectedCell.length - 1].rowIndex, colIndex: val.selectedCell[val.selectedCell.length - 1].colIndex };
            for (var i = 0, len = val.selectedCell.length; i < len; i++) {
                cell = { rowIndex: val.selectedCell[i].rowIndex, colIndex: val.selectedCell[i].colIndex };
                this.XLSelection.selectRange(cell, cell);
                this.getSheet(val.sheetIndex)._startCell = cell;
                if (val.action === "add") {
                    val.selectedCell[i].prevComment = this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "comment");
                    this.XLComment && this.XLComment.deleteComment();
                }
                else if (val.action === "edit") {
                    if (this._isRowViewable(val.sheetIndex, cell.rowIndex))
                        this.getCell(cell.rowIndex, cell.colIndex).find('.e-comment-txtarea').val(val.selectedCell[i].prevComment.value);
                    this.XLComment._updateCurCmntVal();
                    cmnt = val.selectedCell[i].prevComment;
                    val.selectedCell[i].prevComment = val.selectedCell[i].curComment;
                    val.selectedCell[i].curComment = cmnt;
                }
                else {
                    this.XLEdit._updateDataContainer(cell, { dataObj: { "comment": val.selectedCell[i].prevComment } });
                    this.XLComment.setComment([cell.rowIndex, cell.colIndex, cell.rowIndex, cell.colIndex], null, false);
                    this.XLSelection.selectRange(cell, cell);
                    this.XLComment._updateCurCmntVal();
                    cmnt = val.selectedCell[i].prevComment;
                    val.selectedCell[i].prevComment = val.selectedCell[i].curComment;
                    val.selectedCell[i].curComment = cmnt;
                }
            }
            if (val.action === "add")
                val.action = "delete";
            else if (val.action === "delete")
                val.action = "add";
            this.XLSelection.selectRange(startCell, endCell);
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
        },

        _undoForCondFormat: function (val) {
            var i, j, len, jLen, ln, sRule, rules, rule, totRules = [], allRules, actCell;
            val.range = val.data;
            if (this._isUndo) {
                if (val.action === "add") {
                    var selCells = this._getSelectedRange({ rowIndex: val.range[0], colIndex: val.range[1] }, { rowIndex: val.range[2], colIndex: val.range[3] });
                    rules = this.XLEdit.getPropertyValue(selCells[0].rowIndex, selCells[0].colIndex, 'cFormatRule');
                    val.poppedRule = rules[rules.length - 1];
                    for (i = 0, len = selCells.length; i < len; i++) {
                        allRules = this.XLEdit.getPropertyValue(selCells[i].rowIndex, selCells[i].colIndex, 'cFormatRule');
                        if (!this.isUndefined(allRules)) {
                            allRules.pop();
                            for (j = 0, ln = allRules.length; j < ln; j++) {
                                sRule = allRules[j];
                                if (totRules.length === 0) {
                                    rule = sRule.indexOf("true") > -1 ? sRule.replace("_true", "") : sRule.replace("_false", "");
                                    totRules.push(rule);
                                }
                                else
                                    totRules = this._addCondFormatRule(totRules, sRule);
                            }
                        }
                        if (this._isRowViewable(val.sheetIndex, selCells[i].rowIndex)) {
                            actCell = this.getCell(selCells[i].rowIndex, selCells[i].colIndex, val.sheetIndex);
                            actCell.removeClass("e-redft e-yellowft e-greenft e-redf e-redt");
                            actCell[0].style.color = "";
                            actCell[0].style.backgroundColor = "";
                            actCell.removeClass("e-cformat");
                            var dataBarVal = actCell.children().find('.e-databar-value');
                            var cellvalue = dataBarVal[0] && dataBarVal[0].textContent;
                            if (actCell.children().hasClass('e-cf-databar')) {
                                actCell.find('.e-cf-databar').remove();
                                this.XLEdit._refreshTextNode(actCell[0], cellvalue);
                            }
                            if (actCell.hasClass('e-iconset') || actCell.children().find('.e-iconsetspan').length > 0) {
                                actCell.removeClass('.e-iconset');
                                actCell.find('.e-iconsetspan').remove();
                            }
                        }
                    }
                    this.clearRangeData(val.range, ["cFormatRule"], selCells);
                    for (i = 0, len = totRules.length; i < len; i++) {
                        rule = totRules[i].split("_");
                        this.XLCFormat._cFormat(rule[0], rule[2], rule[3], rule[4], rule[5], rule[6], val.sheetIndex, val.range);
                    }
                }
                else if (val.action === "clear") {
                    for (i = 0, len = val.rule.length; i < len; i++)
                        for (j = 0, jLen = val.rule[i].length; j < jLen; j++)
                            this.XLCFormat.setCFRule(val.rule[i][j]);
                }
            }
            else {
                if (val.action === "add") {
                    if (!ej.isNullOrUndefined(val.poppedRule)) {
                        rule = val.poppedRule.split("_");
                        this.XLCFormat._cFormat(rule[0], rule[2], rule[3], rule[4], rule[5], rule[6], val.sheetIndex, val.range);
                    }
                }
                else if (val.action === "clear") {
                    val.selection ? this.XLCFormat.clearCF(val.range) : this.XLCFormat.clearCF();
                }
            }
        },

        _getCopyText: function (text) {
            var i, j, ln, len, selText = [], splitVal;
            for (i = 0, len = text.length; i < len; i++) {
                splitVal = text[i].split("\t");
                for (j = 0, ln = splitVal.length; j < ln; j++)
                    selText.push(splitVal[j]);
            }
            return selText;
        },

        _cutShape: function (cellObj, cutCell, shapeMgr, pSheetIndex) {
            var shape = ["picture", "chart"], shapeObj;
            for (var i = 0, len = shape.length; i < len; i++) {
                if (shape[i] in cellObj) {
                    this.XLShape._picCellIdx = { rowIndex: cutCell.rowIndex, colIndex: cutCell.colIndex };
                    for (var m = 0, rLen = cellObj[shape[i]].length; m < rLen; m++) {
                        shapeObj = $.extend(true, {}, shapeMgr[shape[i]][cellObj[shape[i]][m]]);
                        this.XLShape._deleteShape(pSheetIndex, this.element.find("#" + shapeObj.id));
                    }
                }
            }
        },

        _pasteShape: function (cellObj, pasteCell, shapeMgr, pSheetIdx) {
            var shape = ["picture", "chart"], shapeObj, range, repStr;
            for (var i = 0, len = shape.length; i < len; i++) {
                if (shape[i] in cellObj) {
                    for (var m = 0, rLen = cellObj.picture.length; m < rLen; m++) {
                        shapeObj = $.extend(true, {}, shapeMgr[shape[i]][cellObj[shape[i]][m]]);
                        !(this.XLChart._shapeCnt === 1) && this.XLChart._shapeCnt--;
                        if (shape[i] === "picture") {
                            repStr = this._id + "_picture";
                            this.XLShape._createPicture(pSheetIdx, { rowIndex: pasteCell.rowIndex, colIndex: pasteCell.colIndex }, shapeMgr.sharedPics[shapeObj.data], shapeObj.top, shapeObj.left, shapeObj.width, shapeObj.height, parseInt(shapeObj.id.replace(repStr, "")));
                        }
                        else {
                            range = shapeObj.range;
                            this.XLChart.createChart(this._getAlphaRange(pSheetIdx, range[0], range[1], range[2], range[3]), shapeObj);
                        }
                    }
                    (shape[i] === "chart") && this.XLSelection.selectRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, pSheetIdx);
                }
            }
        },

        _undoForCopyPaste: function (val) {
            var shapeObj = {}, container = this._dataContainer, type, shapeMgr = this.getSheet(val.pSheetIndex).shapeMngr, cellObj, m, rLen;
            if (val.operation === "shape") {
                type = val.pShapeId.indexOf("picture") > -1 ? "picture" : "chart";
                cellObj = $.extend(true, {}, val.pasteCell.obj);
                if (!ej.isNullOrUndefined(cellObj)) {
                    this.XLShape._picCellIdx = { rowIndex: val.pasteCell.rowIndex, colIndex: val.pasteCell.colIndex };
                    if (type === "chart") {
                        if ("chart" in cellObj) {
                            if (this._isUndo) {
                                shapeObj = $.extend(true, {}, shapeMgr.chart[val.pShapeId]);
                                if (ej.isNullOrUndefined(container.sheets[val.pSheetIndex][val.pasteCell.rowIndex]))
                                    container.sheets[val.pSheetIndex][val.pasteCell.rowIndex] = {};
                                container.sheets[val.pSheetIndex][val.pasteCell.rowIndex][val.pasteCell.colIndex] = cellObj;
                                this.XLShape._deleteShape(val.pSheetIndex, this.element.find("#" + shapeObj.id));
                            }
                            else {
                                this.setActiveCell(val.pasteCell.rowIndex, val.pasteCell.colIndex, val.pSheetIndex);
                                shapeObj = $.extend(true, {}, val.pasteCell.shapeObj);
                                if (shapeObj.isChartSeries) {
                                    this.XLChart.createChart(null, shapeObj);
                                }
                                else {
                                    range = shapeObj.range;
                                    this.XLChart.createChart(this._getAlphaRange(val.sheetIndex, range[0], range[1], range[2], range[3]), shapeObj);
                                    this.XLSelection.selectRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, val.cSheetIndex);
                                }
                            }
                        }
                    }
                    else {
                        if ("picture" in cellObj) {
                            if (this._isUndo) {
                                shapeObj = $.extend(true, {}, shapeMgr.picture[val.pShapeId]);
                                if (ej.isNullOrUndefined(container.sheets[val.pSheetIndex][val.pasteCell.rowIndex]))
                                    container.sheets[val.pSheetIndex][val.pasteCell.rowIndex] = {};
                                container.sheets[val.pSheetIndex][val.pasteCell.rowIndex][val.pasteCell.colIndex] = cellObj;
                                this.XLShape._deleteShape(val.pSheetIndex, this.element.find("#" + shapeObj.id));
                            }
                            else {
                                shapeObj = $.extend(true, {}, val.pasteCell.shapeObj);
                                repStr = this._id + "_picture";
                                this.XLShape._createPicture(val.pSheetIndex, { rowIndex: val.pasteCell.rowIndex, colIndex: val.pasteCell.colIndex }, shapeMgr.sharedPics[shapeObj.data], shapeObj.top, shapeObj.left, shapeObj.width, shapeObj.height, parseInt(shapeObj.id.replace(repStr, "")), shapeObj.bcolor, shapeObj.bstyle, shapeObj.bwidth);
                            }
                        }
                    }
                }
                this.XLScroll._getRowHeights(val.pSheetIndex, val.pasteCell.rowIndex);
            }
            else {
                var sparklineId, i, len, cell, addr, pObj, nBrdr, range, rowIdx, colIdx, repStr, overflow, settings, pasteCell, isViewed = false, selTxt = [], cellInfo;
                container = this._dataContainer,
                    this._getCopyText(val.text);
                this._dupDetails = true;
                this.element.find(".e-cdata").length && $('td.e-cutright, td.e-cutbottom').removeClass('e-cutright e-cutbottom');
                this.setActiveSheetIndex(val.pSheetIndex);
                for (i = 0, len = val.pasteCells.length; i < len; i++) {
                    pasteCell = val.pasteCells[i];
                    cellObj = ej.isNullOrUndefined(container.sheets[val.pSheetIndex][pasteCell.rowIndex]) ? {} : container.sheets[val.pSheetIndex][pasteCell.rowIndex][pasteCell.colIndex];
                    if (!this._isUndo) {
                        if ("merge" in pasteCell.prevObj) {
                            this.mergeCenter = pasteCell.prevObj.merge.isCenterAlign;
                            this.mergeCells(pasteCell.prevObj.merge.mRange, true);
                        }
                    }
                    if (this._isRowViewable(val.pSheetIndex, pasteCell.rowIndex)) {
                        cell = this.getCell(pasteCell.rowIndex, pasteCell.colIndex, val.pSheetIndex)[0];
                        if (!this._isUndo) {
                            if (cellObj && !cellObj.selIdxChange) {
                                cell.textContent = selTxt[i];
                                this._removeClass(cell, "e-cellreadonly");
                            }
                        }

                        isViewed = true;
                    }
                    if (!ej.isNullOrUndefined(cellObj)) {
                        this._cutShape(cellObj, pasteCell, shapeMgr, val.pSheetIndex);
                        addr = this._generateHeaderText(pasteCell.colIndex + 1) + (pasteCell.rowIndex + 1);
                        ("wrap" in cellObj) && this.setWrapText("unwrap", addr + ":" + addr);
                        if (this.model.allowSparkline) {
                            if ("sparkline" in cellObj) {
                                this.XLSparkline._removeSparklineElem(pasteCell.rowIndex, pasteCell.colIndex, val.pSheetIndex);
                                sparklineId = this.XLEdit.getPropertyValue(pasteCell.rowIndex, pasteCell.colIndex, "sparkline", val.pSheetIndex);
                                pasteCell.newSparklineProp = $.extend(true, {}, this.getSheet(val.pSheetIndex).shapeMngr.sparkline[sparklineId]);
                            }
                        }
                        if ("merge" in cellObj) {
                            if (this._isUndo) {
                                pasteCell.newObj = $.extend(true, {}, container.sheets[val.pSheetIndex][pasteCell.rowIndex][pasteCell.colIndex]);
                                this.unmergeCells(this._getAlphaRange(val.pSheetIndex, pasteCell.rowIndex, pasteCell.colIndex, pasteCell.rowIndex, pasteCell.colIndex));
                                this.getCell(pasteCell.rowIndex, pasteCell.colIndex, val.pSheetIndex).prop("rowspan", 1).prop("colspan", 1);
                                if ("merge" in pasteCell.prevObj) {
                                    this.mergeCenter = pasteCell.prevObj.merge.isCenterAlign;
                                    this.mergeCells(pasteCell.prevObj.merge.mRange, true);
                                    this.mergeCenter = false;
                                }
                            }
                        }
                    }
                    if (isViewed && this._isUndo) {
                        !("cellType" in cellObj) && (cell.textContent = "");
                        this._removeClass(cell, 'e-commentcell');
                    }
                    ej.isNullOrUndefined(container.sheets[val.pSheetIndex][pasteCell.rowIndex]) && (container.sheets[val.pSheetIndex][pasteCell.rowIndex] = {});
                    !ej.isNullOrUndefined(container.sheets[val.pSheetIndex][pasteCell.rowIndex][pasteCell.colIndex]) && (overflow = container.sheets[val.pSheetIndex][pasteCell.rowIndex][pasteCell.colIndex]['overflow']);
                    if (this.model.allowCellFormatting)
                        this.XLFormat.removeStyle(val.pasteBorder.range, { cellStyle: true, tableStyle: true, format: true, border: true });
                    container.sheets[val.pSheetIndex][pasteCell.rowIndex][pasteCell.colIndex] = $.extend(true, {}, pasteCell.prevObj);
                    (overflow) && (container.sheets[val.pSheetIndex][pasteCell.rowIndex][pasteCell.colIndex]['overflow'] = overflow);
                    this._textClip(pasteCell.rowIndex, pasteCell.colIndex, 'delete');
                    this._setRowHdrHeight(val.pSheetIndex, pasteCell.rowIndex);
                    cellObj = !ej.isNullOrUndefined(container.sheets[val.pSheetIndex][pasteCell.rowIndex]) ? container.sheets[val.pSheetIndex][pasteCell.rowIndex][pasteCell.colIndex] : {};
                    rowIdx = pasteCell.rowIndex; colIdx = pasteCell.colIndex;
                    this._applyCommentLink(cellObj, { rowIndex: pasteCell.rowIndex, colIndex: pasteCell.colIndex }, rowIdx, colIdx);
                    this._isPaste = true;
                    if (!ej.isNullOrUndefined(cellObj)) {
                        this._pasteShape(cellObj, { rowIndex: rowIdx, colIndex: colIdx }, shapeMgr, val.pSheetIndex);
                        if ('cellType' in cellObj) {
                            if (this._isUndo) {
                                this._removeClass(cell, 'e-cellreadonly');
                                if (cellObj.cTypeObj && this.model.allowCellType) {
                                    settings = this._dataContainer.sheetCellType[cellObj['cellType']];
                                    settings.text = '';
                                    settings.dataSource && (settings.field = "text");
                                }
                                this.XLCellType._renderControls(pasteCell.rowIndex, pasteCell.colIndex, val.pSheetIndex, settings, true);
                            }
                            else {
                                settings = this._dataContainer.sheetCellType[cellObj['cellType']];
                                settings.text = '';
                                this.model.allowCellType && this.XLCellType._renderControls(pasteCell.rowIndex, pasteCell.colIndex, val.pSheetIndex, settings, true);
                            }
                        }
                        if (this.model.allowSparkline && 'sparkline' in cellObj) {
                            this.getSheet(val.pSheetIndex).shapeMngr.sparkline[cellObj['sparkline'][0]] = pasteCell.prevSparklineProp;
                            if (this._isRowViewable(val.cSheetIndex, pasteCell.rowIndex)) {
                                if (!this._getContent(val.cSheetIndex).find("#" + pasteCell.prevSparklineProp.id).length) {
                                    cellInfo = this._getCellInfo({ rowIndex: pasteCell.rowIndex, colIndex: pasteCell.colIndex }, val.cSheetIndex)
                                    this.XLSparkline._createSparkline(pasteCell.prevSparklineProp, cellInfo, val.pSheetIndex);
                                }
                            }
                        }
                        addr = this._generateHeaderText(pasteCell.colIndex + 1) + (pasteCell.rowIndex + 1);
                        if ("wrap" in cellObj) {
                            this.XLEdit._clearDataContainer({ cellIdx: pasteCell, property: ['wrap'] });
                            this.setWrapText("wrap", addr + ":" + addr);
                        }
                        this._isPaste = false;
                    }
                    pObj = pasteCell.prevObj;
                    pasteCell.prevObj = pasteCell.newObj;
                    pasteCell.newObj = pObj;
                    var prevSparkObj = pasteCell.prevSparklineProp;
                    pasteCell.prevSparklineProp = pasteCell.newSparklineProp;
                    pasteCell.newSparklineProp = prevSparkObj;
                }
                if (val.isSpecial) {
                    if (this.model.allowCellFormatting) {
                        this.XLFormat.removeStyle(val.pasteBorder.range, { cellStyle: true, tableStyle: true, format: true });
                        !this.isUndefined(val.pasteBorder.prevBorder) && this.XLFormat.updateFormat(val.pasteBorder.prevBorder, val.pasteBorder.range, "format"); //commented due to border issues
                    }
                    nBrdr = val.pasteBorder.prevBorder;
                    val.pasteBorder.prevBorder = val.pasteBorder.newBorder;
                    val.pasteBorder.newBorder = nBrdr;
                }
                //table and filter
                if (!ej.isNullOrUndefined(val.pfat)) {
                    var tab = val.pfat.ptable;
                    for (m = 0, rLen = tab.length; m < rLen; m++) {
                        if (!ej.isNullOrUndefined(val.pSheetIndex)) {
                            this.setActiveSheetIndex(val.pSheetIndex);
                            if (this._isUndo) {
                                this.XLFormat.removeTable(tab[m].id);
                                this.XLFormat.removeStyle(tab[m].range);
                            }
                            else {
                                tab[m].header = true;
                                this.XLFormat.createTable(tab[m], tab[m].range);
                            }
                        }
                    }
                }
                if (!ej.isNullOrUndefined(val.filter)) {
                    this.XLFilter.clearFilter();
                    this.XLFilter.filter(val.filter);
                }
                this._dupDetails = false;
            }
            if (val.operation !== "shape") {
                if (this._isUndo) {
                    (!ej.isNullOrUndefined(val.cSheetIndex)) && this.setActiveSheetIndex(val.cSheetIndex);
                    (val.cutCells.length > 0) && this.XLSelection._focusBorder(val.cutCells[0], val.cutCells[val.cutCells.length - 1], this._cutFocus);
                    this.setActiveSheetIndex(val.pSheetIndex);
                    this.XLSelection.selectRange(val.pasteCells[0], val.pasteCells[val.pasteCells.length - 1]);
                }
                else {
                    (!ej.isNullOrUndefined(val.cSheetIndex)) && this.setActiveSheetIndex(val.cSheetIndex);
                    (val.cutCells.length > 0) && this.XLSelection._focusBorder(val.cutCells[0], val.cutCells[val.cutCells.length - 1], this._cutFocus);
                    this.setActiveSheetIndex(val.pSheetIndex);
                    (val.pasteCells.length > 0) && this.XLSelection.selectRange(val.pasteCells[0], val.pasteCells[val.pasteCells.length - 1]);

                }
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
                this.XLScroll._getRowHeights(val.pSheetIndex, val.pasteCells[0].rowIndex);
            }

        },

        _undoForCutPaste: function (val) {
            var type, cellObj, overflow, m, rLen, nBrdr, shapeObj = {}, container = this._dataContainer, shapeMgr = this.getSheet(val.pSheetIndex).shapeMngr, repStr, cell, cellwrap;
            if (val.operation === "shape") {
                type = val.pShapeId.indexOf("picture") > -1 ? "picture" : "chart";
                cellObj = $.extend(true, {}, val.pasteCell.obj);
                if (!ej.isNullOrUndefined(cellObj)) {
                    this.XLShape._picCellIdx = { rowIndex: val.pasteCell.rowIndex, colIndex: val.pasteCell.colIndex };
                    shapeObj = $.extend(true, {}, shapeMgr[type][val.pShapeId]);
                    if (ej.isNullOrUndefined(container.sheets[val.pSheetIndex][val.pasteCell.rowIndex]))
                        container.sheets[val.pSheetIndex][val.pasteCell.rowIndex] = {};
                    container.sheets[val.pSheetIndex][val.pasteCell.rowIndex][val.pasteCell.colIndex] = cellObj;
                    this.XLShape._deleteShape(val.pSheetIndex, this.element.find("#" + shapeObj.id));
                }
                cellObj = $.extend(true, {}, val.cutCell.obj);
                type = val.cShapeId.indexOf("picture") > -1 ? "picture" : "chart";
                if (!ej.isNullOrUndefined(cellObj)) {
                    this.setActiveCell(val.cutCell.rowIndex, val.cutCell.colIndex, val.cSheetIndex);
                    if (type === "chart") {
                        if ("chart" in cellObj) {
                            shapeObj = $.extend(true, {}, val.cutCell.shapeObj);
                            range = shapeObj.range;
                            this.setActiveSheetIndex(val.cSheetIndex);
                            this.XLChart.createChart(shapeObj.isChartSeries ? null : this._getAlphaRange(val.sheetIndex, range[0], range[1], range[2], range[3]), shapeObj);
                            this.setActiveSheetIndex(val.sheetIndex);
                            if (!shapeObj.isChartSeries)
                                this.XLSelection.selectRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, val.cSheetIndex);
                        }
                    }
                    else {
                        if ("picture" in cellObj) {
                            shapeObj = $.extend(true, {}, val.cutCell.shapeObj);
                            repStr = this._id + "_picture";
                            this.XLShape._createPicture(val.cSheetIndex, { rowIndex: val.cutCell.rowIndex, colIndex: val.cutCell.colIndex }, shapeMgr.sharedPics[shapeObj.data], shapeObj.top, shapeObj.left, shapeObj.width, shapeObj.height, parseInt(shapeObj.id.replace(repStr, "")), shapeObj.bcolor, shapeObj.bstyle, shapeObj.bwidth);
                        }
                    }
                }
                this.XLShape._picCellIdx = { rowIndex: val.cutCell.rowIndex, colIndex: val.cutCell.colIndex };
                var pasteCell = val.pasteCell;
                val.pasteCell = val.cutCell;
                val.cutCell = pasteCell;
                var pShapeId = val.pShapeId;
                val.pShapeId = val.cShapeId;
                val.cShapeId = pShapeId;

            }
            else {
                var i, len, pObj, addr, range, cutCel, rowIdx, colIdx, curCell, selTxt = [], settings, sparklineId;
                this.element.find(".e-cdata").length && $('td.e-cutright, td.e-cutbottom').removeClass('e-cutright e-cutbottom');
                this._getCopyText(val.text);
                for (i = 0, len = val.pasteCells.length; i < len; i++) {
                    if (!ej.isNullOrUndefined(val.pSheetIndex)) {
                        if (!this.isUndefined(container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex]))
                            cellObj = container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex];
                        addr = this._generateHeaderText(val.pasteCells[i].colIndex + 1) + (val.pasteCells[i].rowIndex + 1);
                        ('wrap' in cellObj) && this.setWrapText("unwrap", addr + ":" + addr);
                        if (this._isRowViewable(val.pSheetIndex, val.pasteCells[i].rowIndex)) {
                            cell = this.getCell(val.pasteCells[i].rowIndex, val.pasteCells[i].colIndex, val.pSheetIndex)[0];
                            if (this.model.allowSparkline && 'sparkline' in cellObj) {
                                this.XLSparkline._removeSparklineElem(val.pasteCells[i].rowIndex, val.pasteCells[i].colIndex, val.pSheetIndex);
                                sparklineId = this.XLEdit.getPropertyValue(val.pasteCells[i].rowIndex, val.pasteCells[i].colIndex, "sparkline", val.pSheetIndex);
                                val.pasteCells[i].newSparklineProp = $.extend(true, {}, this.getSheet(val.pSheetIndex).shapeMngr.sparkline[sparklineId]);
                            }
                            cell.textContent = "";
                            this._removeClass(cell, 'e-commentcell');
                        }
                        if (!this.isUndefined(cellObj)) {
                            this._cutShape(cellObj, val.pasteCells[i], shapeMgr, val.pSheetIndex);
                            if ("merge" in cellObj) {
                                if (this._isUndo) {
                                    $.extend(true, val.pasteCells[i].newObj, container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex]);
                                    this.setActiveSheetIndex(val.pSheetIndex);
                                    this.unmergeCells(cellObj.merge.mRange);
                                    this.getCell(val.pasteCells[i].rowIndex, val.pasteCells[i].colIndex, val.pSheetIndex).prop("rowspan", 1).prop("colspan", 1);
                                    if ("merge" in val.pasteCells[i].prevObj) {
                                        this.mergeCenter = val.pasteCells[i].prevObj.merge.isCenterAlign;
                                        this.mergeCells(val.pasteCells[i].prevObj.merge.mRange, true);
                                        this.mergeCenter = false;
                                    }
                                }
                                else {
                                    this.setActiveSheetIndex(val.pSheetIndex);
                                    this.unmergeCells(cellObj.merge.mRange, true);
                                    if ("merge" in val.pasteCells[i].prevObj) {
                                        this.mergeCenter = val.pasteCells[i].prevObj.merge.isCenterAlign;
                                        this.mergeCells(val.pasteCells[i].prevObj.merge.mRange, true);
                                        this.mergeCenter = false;
                                    }
                                    this.setActiveSheetIndex(val.cSheetIndex);
                                    this.unmergeCells(this._getAlphaRange(val.pSheetIndex, val.cutCells[i].rowIndex, val.cutCells[i].colIndex, val.cutCells[i].rowIndex, val.cutCells[i].colIndex));
                                    range = this.getRangeIndices(val.cutCells[i].prevObj.merge.mRange);
                                    this.XLSelection.selectRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, val.sheetIndex);
                                }
                            }
                            if ('cellType' in cellObj) {
                                this._removeClass(cell, 'e-cellreadonly');
                                if (cellObj.cTypeObj && this.model.allowCellType) {
                                    settings = this._dataContainer.sheetCellType[cellObj['cellType']];
                                    settings.text = '';
                                    settings.dataSource && (settings.field = "text");
                                }
                                this.XLCellType._renderControls(pasteCell.rowIndex, pasteCell.colIndex, val.pSheetIndex, settings, true);
                            }
                        }
                        if (this.isUndefined(container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex]))
                            container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex] = {};
                        !ej.isNullOrUndefined(container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex]) && (overflow = container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex]['overflow']);
                        if (this.model.allowCellFormatting)
                            this.XLFormat.removeStyle(val.pasteBorder.range, { cellStyle: true, tableStyle: true, format: true, border: true });
                        if (container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex].wrap)
                            cellwrap = true;
                        container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex] = $.extend(true, {}, val.pasteCells[i].prevObj);
                        this._textClip(val.pasteCells[i].rowIndex, val.pasteCells[i].colIndex, 'delete');
                        if (!this.isUndefined(container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex])) {
                            (overflow) && (container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex]['overflow'] = overflow);
                            this._setRowHdrHeight(val.pSheetIndex, val.pasteCells[i].rowIndex);
                            cellObj = container.sheets[val.pSheetIndex][val.pasteCells[i].rowIndex][val.pasteCells[i].colIndex];
                            rowIdx = val.pasteCells[i].rowIndex, colIdx = val.pasteCells[i].colIndex;
                            this._applyCommentLink(cellObj, { rowIndex: rowIdx, colIndex: colIdx }, rowIdx, colIdx);
                            (cellwrap) && (cellObj.wrap = cellwrap);
                            this._isPaste = true;
                            if (!ej.isNullOrUndefined(cellObj)) {
                                this._pasteShape(cellObj, { rowIndex: rowIdx, colIndex: colIdx }, shapeMgr, val.pSheetIndex, val.sheetIndex);
                                addr = this._generateHeaderText(colIdx + 1) + (rowIdx + 1);
                                if ("wrap" in cellObj) {
                                    this.XLEdit._clearDataContainer({ cellIdx: val.pasteCells[i], property: ['wrap'] });
                                    this.setWrapText("wrap", addr + ":" + addr);
                                }
                            }
                        }
                        pObj = val.pasteCells[i].prevObj;
                        val.pasteCells[i].prevObj = val.pasteCells[i].newObj;
                        val.pasteCells[i].newObj = pObj;
                        prevSparkObj = val.pasteCells[i].prevSparklineProp;
                        val.pasteCells[i].prevSparklineProp = val.pasteCells[i].newSparklineProp;
                        val.pasteCells[i].newSparklineProp = prevSparkObj;
                        this._isPaste = false;
                    }
                }
                var prevSparkObj;
                for (i = 0; i < val.cutCells.length; i++) {
                    if (!ej.isNullOrUndefined(val.cSheetIndex)) {
                        cutCel = val.cutCells[i];
                        if (this._isRowViewable(val.cSheetIndex, cutCel.rowIndex)) {
                            curCell = this.getCell(cutCel.rowIndex, cutCel.colIndex, val.cSheetIndex)[0];
                            curCell.textContent = selTxt[i];
                        }
                        this.setActiveSheetIndex(val.cSheetIndex);
                        cellObj = ej.isNullOrUndefined(container.sheets[val.cSheetIndex][cutCel.rowIndex]) ? {} : container.sheets[val.cSheetIndex][cutCel.rowIndex][cutCel.colIndex];
                        if (!ej.isNullOrUndefined(cellObj))
                            this._cutShape(cellObj, cutCel, shapeMgr, val.cSheetIndex);
                        (ej.isNullOrUndefined(container.sheets[val.cSheetIndex][cutCel.rowIndex])) && (container.sheets[val.cSheetIndex][cutCel.rowIndex] = {});
                        !ej.isNullOrUndefined(container.sheets[val.cSheetIndex][cutCel.rowIndex][cutCel.colIndex]) && (overflow = container.sheets[val.cSheetIndex][cutCel.rowIndex][cutCel.colIndex]['overflow']);
                        (cutCel.prevObj.tableName) && delete cutCel.prevObj.tableName;
                        container.sheets[val.cSheetIndex][cutCel.rowIndex][cutCel.colIndex] = $.extend(true, {}, cutCel.prevObj);
                        if (this.getObjectLength(overflow) > 0)
                            (container.sheets[val.cSheetIndex][cutCel.rowIndex][cutCel.colIndex]['overflow'] = overflow) && (overflow = {});
                        pObj = cutCel.prevObj;
                        cutCel.prevObj = cutCel.newObj;
                        cutCel.newObj = pObj;
                        prevSparkObj = cutCel.prevSparklineProp;
                        cutCel.prevSparklineProp = cutCel.newSparklineProp;
                        cutCel.newSparklineProp = prevSparkObj;
                        rowIdx = cutCel.rowIndex; colIdx = cutCel.colIndex;
                        this._setRowHdrHeight(val.cSheetIndex, rowIdx);
                        this.XLScroll._getRowHeights(val.cSheetIndex, rowIdx);
                        cellObj = ej.isNullOrUndefined(container.sheets[val.cSheetIndex][rowIdx]) ? {} : container.sheets[val.cSheetIndex][rowIdx][colIdx];
                        this._applyCommentLink(cellObj, { rowIndex: rowIdx, colIndex: colIdx }, rowIdx, colIdx);
                        this._isPaste = true;
                        if (!ej.isNullOrUndefined(cellObj)) {
                            this._pasteShape(cellObj, { rowIndex: rowIdx, colIndex: colIdx }, shapeMgr, val.cSheetIndex);
                            if ("merge" in cellObj) {
                                this.mergeCenter = cellObj.merge.isCenterAlign;
                                this.mergeCells(cellObj.merge.mRange, true);
                                this.mergeCenter = false;
                            }
                            if ('cellType' in cellObj) {
                                settings = this._dataContainer.sheetCellType[cellObj['cellType']];
                                settings.text = '';
                                this.model.allowCellType && this.XLCellType._renderControls(cutCel.rowIndex, cutCel.colIndex, val.pSheetIndex, settings, true);
                            }
                            if (this.model.allowSparkline && 'sparkline' in cellObj) {
                                this.getSheet(val.pSheetIndex).shapeMngr.sparkline[cellObj['sparkline'][0]] = cutCel.newSparklineProp;
                                if (this._isRowViewable(val.cSheetIndex, cutCel.rowIndex)) {
                                    if (!this._getContent(val.cSheetIndex).find("#" + cutCel.newSparklineProp.id).length)
                                        this.XLSparkline._refreshSparklineClipboard(cutCel.rowIndex, cutCel.colIndex, val.pSheetIndex, val.cSheetIndex, true);
                                }
                            }
                            this._dupDetails = true;
                            addr = this._generateHeaderText(cutCel.colIndex + 1) + (cutCel.rowIndex + 1);
                            if ("wrap" in cellObj) {
                                this.XLEdit._clearDataContainer({ cellIdx: cutCel, property: ['wrap'] });
                                this.setWrapText("wrap", addr + ":" + addr);
                            }
                            this._dupDetails = false;
                        }
                        this._isPaste = false;
                    }
                }
                this.XLScroll._getRowHeights(val.pSheetIndex, (val.pasteCells[0].rowIndex < val.cutCells[0].rowIndex) ? val.pasteCells[0].rowIndex : val.cutCells[0].rowIndex);
                if (this.model.allowCellFormatting && !ej.isNullOrUndefined(val.pSheetIndex)) {
                    this.setActiveSheetIndex(val.pSheetIndex);
                    this.XLFormat.removeStyle(val.pasteBorder.range, { cellStyle: true, tableStyle: true, format: true });
                    !this.isUndefined(val.pasteBorder.prevBorder) && this.XLFormat.updateFormat(val.pasteBorder.prevBorder, val.pasteBorder.range, "format");      //commented due to border issues
                }
                nBrdr = val.pasteBorder.prevBorder;
                val.pasteBorder.prevBorder = val.pasteBorder.newBorder;
                val.pasteBorder.newBorder = nBrdr;
                if (this.model.allowCellFormatting && !ej.isNullOrUndefined(val.cSheetIndex)) {
                    this.setActiveSheetIndex(val.cSheetIndex);
                    if (val.isSpecial)
                        this.XLFormat.removeStyle(val.cutBorder.range, { cellStyle: true, tableStyle: true, format: true });
                    if (val.cutBorder.prevBorder)
                        this.XLFormat.updateFormat(val.cutBorder.prevBorder, val.cutBorder.range, "format");
                }
                nBrdr = val.cutBorder.prevBorder;
                val.cutBorder.prevBorder = val.cutBorder.newBorder;
                val.cutBorder.newBorder = nBrdr;

                //table and filter
                if (!ej.isNullOrUndefined(val.pfat)) {
                    var rng, tab = val.pfat.table, tblRange, minRowIdx = val.pfat.minRowIdx, minColIdx = val.pfat.minColIdx, tblId, prange = val.pfat.range;
                    for (m = 0, rLen = tab.length; m < rLen; m++) {
                        tblRange = tab[m].range;
                        if (!ej.isNullOrUndefined(val.pSheetIndex)) {
                            this.setActiveSheetIndex(val.pSheetIndex);
                            tblId = tab[m].tblObj.tblId;
                            rng = val.pfat.ptable[m].range;
                            this.XLFormat.removeTable(tblId);
                            this.XLFormat.removeStyle(rng);
                        }
                        if (!ej.isNullOrUndefined(val.cSheetIndex)) {
                            this.setActiveSheetIndex(val.cSheetIndex);
                            this.XLClipboard._isCut = true;
                            if (this._isUndo) {
                                this.XLFormat.createTable(tab[m].tblObj, tab[m].range);
                                tab[m].tblObj.totalRow && this.XLFormat._updateTotalRow(val.sheetIndex, tblId, tab[m].tblObj.fnNumber, tab[m].range, true);
                            }
                            else {
                                rng = this.getRangeIndices(this._getAlphaRange(val.cSheetIndex, tblRange[0] + minRowIdx - prange[0], tblRange[1] + minColIdx - prange[1], minRowIdx - prange[0] + tblRange[2], minColIdx - prange[1] + tblRange[3]));
                                this.XLFormat.createTable(tab[m].tblObj, rng);
                                tab[m].tblObj.totalRow && this.XLFormat._updateTotalRow(val.sheetIndex, tblId, tab[m].tblObj.fnNumber, rng, true);
                            }
                            this.XLClipboard._isCut = false;
                        }
                    }
                }
                if (!ej.isNullOrUndefined(val.filter)) {
                    this.XLFilter.clearFilter();
                    this.XLFilter.filter(val.filter);
                }
            }
            if (val.operation !== "shape") {
                if (this._isUndo) {
                    if (!ej.isNullOrUndefined(val.cSheetIndex)) {
                        this.setActiveSheetIndex(val.cSheetIndex);
                        this.XLSelection.selectRange(val.cutCells[0], val.cutCells[val.cutCells.length - 1]);
                    }
                    if (!ej.isNullOrUndefined(val.pSheetIndex)) {
                        this.setActiveSheetIndex(val.pSheetIndex);
                        this.XLSelection.selectRange(val.pasteCells[0], val.pasteCells[val.pasteCells.length - 1]);
                    }
                }
                else {
                    if (!ej.isNullOrUndefined(val.pSheetIndex)) {
                        this.setActiveSheetIndex(val.pSheetIndex);
                        this.XLSelection._focusBorder(val.pasteCells[0], val.pasteCells[val.pasteCells.length - 1], this._cutFocus);
                        this.XLSelection.selectRange(val.pasteCells[0], val.pasteCells[val.pasteCells.length - 1]);
                    }
                    if (!ej.isNullOrUndefined(val.cSheetIndex)) {
                        this.setActiveSheetIndex(val.cSheetIndex);
                        this.XLSelection.selectRange(val.cutCells[0], val.cutCells[val.cutCells.length - 1]);
                    }
                }
            }
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
            var pasteCells = val.pasteCells;
            val.pasteCells = val.cutCells;
            val.cutCells = pasteCells;
            var pasteBorder = val.pasteBorder;
            val.pasteBorder = val.cutBorder;
            val.cutBorder = pasteBorder;
            var tempIdx = val.cSheetIndex;
            val.cSheetIndex = val.pSheetIndex;
            val.pSheetIndex = tempIdx;
        },

        _undoForDel: function (val) {
            this._delCells = $.extend(true, [], val.delCells);
            this._deletedText = $.extend(true, [], val.text);
            this._removeMergeColl = $.extend(true, [], val.removeMerge);
            this._deletedDimension = $.extend(true, [], val.deletedDimension);
            if (this._isUndo) {
                this._fRow.fRowCnt = val.fRow.fRowCnt;
                this._fCol.fColCnt = val.fCol.fColCnt;
                this._fRow.rowAdj = val.fRow.rowAdj;
                this._fCol.colAdj = val.fCol.colAdj;
                this._nmRef = val.nmref;
            }
            $.extend(true, this._cellTypesUndo, val.prevCellTypes);
            $.extend(true, this._cellTypesRedo, val.curCellTypes);
            $.extend(true, this._chartUndo, val.prevChartDetails);
            $.extend(true, this._chartRedo, val.curChartDetails);
            $.extend(true, this._valDataUndo, val.prevValData);
            $.extend(true, this._valDataRedo, val.curValData);
            switch (val.action) {
                case "deleteShiftUp":
                    this.deleteShiftUp(val.startCell, val.endCell);
                    break;
                case "deleteShiftLeft":
                    this.deleteShiftLeft(val.startCell, val.endCell);
                    break;
                case "deleteRow":
                    this.deleteEntireRow(val.startCell.rowIndex, val.endCell.rowIndex);
                    break;
                case "deleteColumn":
                    this.deleteEntireColumn(val.startCell.colIndex, val.endCell.colIndex);
                    break;
            }
        },

        _undoForEdit: function (val) {
            var i, hLink, curVal, fObj, temp, cFormatStr, len, cFormatRule = val.cFormatRule, selCell = { rowIndex: val.rowIndex, colIndex: val.colIndex }, cmnt, cell, textDecoration, rows = this.getRows(val.sheetIndex);
            this.setActiveCell(val.rowIndex, val.colIndex, val.sheetIndex);
            this.XLSelection.selectRange(val.startCell, val.endCell);
            if (this._isRowViewable(val.sheetIndex, val.rowIndex)) {
                cell = this.getCell(val.rowIndex, val.colIndex);
                textDecoration = cell.find("a").css("text-decoration");
                if (val.altwrap)
                    if (this._isUndo) {
                        this.XLEdit._clearDataContainer({ cellIdx: selCell, property: ["altTxt"] });
                        this.unWrapText([val.rowIndex, val.colIndex, val.rowIndex, val.colIndex]);
                    }
                    else {
                        this.XLEdit._updateDataContainer(selCell, { dataObj: { altTxt: true } });
                        this.wrapText([val.rowIndex, val.colIndex, val.rowIndex, val.colIndex]);
                    }
            }
            hLink = this.XLEdit.getPropertyValue(val.rowIndex, val.colIndex, "hyperlink", val.sheetIndex);
            if (!ej.isNullOrUndefined(hLink)) {
                curVal = this.XLEdit.getPropertyValue(val.rowIndex, val.colIndex, "value2");
                val.action = (curVal.length < 1) ? "add" : "delete";
                val.reqType = "edit";
                selCell.prevLink = hLink;
                selCell.prevText = curVal;
                val.selectedCell = [];
            }
            cmnt = this.XLEdit.getPropertyValue(val.rowIndex, val.colIndex, "comment");
            this.XLEdit._updateCellValue({ rowIndex: val.rowIndex, colIndex: val.colIndex }, val.pValue);
            this._dupDetails = true;
            if (cFormatRule && cFormatRule.length) {
                for (i = 0, len = cFormatRule.length; i < len; i++) {
                    cFormatStr = cFormatRule[i].split("_");
                    this.XLCFormat._cFormat(cFormatStr[0], cFormatStr[2], cFormatStr[3], cFormatStr[4], cFormatStr[5], cFormatStr[6]);
                }
                this.XLCFormat.refreshCFormat(this._getAlphaRange(val.sheetIndex, val.rowIndex, val.colIndex, val.rowIndex, val.colIndex));
            }
            if (val.prevFrmtObj && val.curFrmtObj) {
                fObj = this._isUndo ? val.prevFrmtObj : val.curFrmtObj;
                this.XLFormat.format(fObj, this._getAlphaRange(val.sheetIndex, val.rowIndex, val.colIndex, val.rowIndex, val.colIndex));
            }
            this._dupDetails = false;
            this._textClip(val.rowIndex, val.colIndex, (val.pValue.length > 0) ? 'add' : 'delete');
            if (!ej.isNullOrUndefined(cmnt)) {
                this.XLEdit._updateDataContainer({ rowIndex: val.rowIndex, colIndex: val.colIndex }, { dataObj: { "comment": cmnt } });
                this.XLComment.setComment();
                this.XLComment._updateCurCmntVal();
            }
            if (this._isRowViewable(val.sheetIndex, val.rowIndex)) {
                if (hLink) {
					hLink.webAddr ? cell.html(ej.buildTag("a", cell.text(), "", { href: hLink.webAddr, target: "_blank", "class": "e-hyperlinks" })) : cell.html(ej.buildTag("a", cell.text(), "", { "class": "e-hyperlinks" }));
				}
				cell.find("a").css("text-decoration", textDecoration);
				cell.removeClass("e-commentcell");
            }
            if (!ej.isNullOrUndefined(hLink)) {
                selCell.curLink = this.XLEdit.getPropertyValue(val.rowIndex, val.colIndex, "hyperlink");
                selCell.curText = this.XLEdit.getPropertyValue(val.rowIndex, val.colIndex, "value2");
                val.selectedCell.push(selCell);
            }
            if (val.prevHeight != val.newHeight) {
                this.getSheet(val.sheetIndex).rowsHeightCollection[val.rowIndex] = val.prevHeight;
                if (this._isRowViewable(val.sheetIndex, val.rowIndex)) {
                    rows[0][val.rowIndex].style.height = val.prevHeight + "px";
                    rows[1][val.rowIndex].style.height = val.prevHeight + "px";
                }
                this._setRowHdrHeight(val.sheetIndex, val.rowIndex);
                this.XLScroll._getRowHeights(val.sheetIndex, val.rowIndex);
                temp = val.newHeight;
                val.newHeight = val.prevHeight;
                val.prevHeight = temp;
            }
            temp = val.cValue;
            val.cValue = val.pValue;
            val.pValue = temp;
            this.XLEdit._isEdit = false;
            temp = val.previousValue;
            val.previousValue = val.value;
            val.value = temp;
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
        },

        _undoForFilter: function (val) {
            var fltrChk = false, filterdCol = [], prevFltr, cell, selCells = [], i, len, rIdx, cIdx, filterCell, sheetIdx = val.sheetIndex || this.getActiveSheetIndex(), container = this._dataContainer.sheets[sheetIdx];
            if (val.operation === "filter" && val.requestType !== "filterbycell") {
                if (this._isUndo) {
                    for (i = this._undoCollection.length - 1; i >= 0; i--) {
                        if (this._undoCollection[i].reqType === "filter" && this._undoCollection[i].tableID === val.tableID && this._undoCollection[i].action === "filtering" && this._undoCollection[i].status !== "apply-filterIcon") {
                            if (this._undoCollection[i].rowIndex === val.rowIndex && this._undoCollection[i].colIndex === val.colIndex) {
                                delete this._excelFilter._predicates[val.sheetIndex][val.fieldName];
                                prevFltr = this._undoCollection[i];
                                this.XLFilter._clearFilterColumn(val.fieldName, "", "", "Or", null, null, prevFltr.tableID);
                                for (i = 0, len = prevFltr.filterCollection.length; i < len; i++)
                                    filterdCol.push(prevFltr.filterCollection[i]);
                                this.model.sheets[prevFltr.sheetIndex].filterSettings.filteredColumns = filterdCol;
                                if (ej.isNullOrUndefined(this._excelFilter._predicates[prevFltr.sheetIndex][prevFltr.fieldName]))
                                    this._excelFilter._predicates[prevFltr.sheetIndex][prevFltr.fieldName] = {};
                                this._excelFilter._predicates[prevFltr.sheetIndex][prevFltr.fieldName] = prevFltr.ejpredicate;
                                this.model.sheets[prevFltr.sheetIndex]._selectedRange = prevFltr.range;
                                this.XLFilter._filterHandler(prevFltr);
                                fltrChk = true;
                                break;
                            }
                        }
                        if (this._undoCollection[i].reqType === "filter" && this._undoCollection[i].tableID === val.tableID && this._undoCollection[i].action === "clearfiltering") {
                            delete this._excelFilter._predicates[val.sheetIndex][val.fieldName];
                            prevFltr = this._undoCollection[i];
                            this.XLFilter._clearFilterColumn(val.fieldName, "", "", "Or", null, null, prevFltr.tableID);
                            fltrChk = true;
                            break;
                        }
                        if (this._undoCollection[i].requestType === "filterbycell") {
                            if (this._undoCollection[i].rowIndex === val.rowIndex && this._undoCollection[i].colIndex === val.colIndex) {
                                prevFltr = this._undoCollection[i];
                                delete this._excelFilter._predicates[prevFltr.sheetIndex][prevFltr.fieldName];
                                this.XLFilter._clearFilterColumn(prevFltr.fieldName, "", "", "Or", null, null, prevFltr.tableID);
                                $.extend(true, selCells, prevFltr.selCells);
                                this.XLFilter._filterActiveCell(prevFltr.sheetIndex, prevFltr.activeCell, selCells, prevFltr.filteredValue, prevFltr.selRange);
                                fltrChk = true;
                                break;
                            }
                        }
                    }
                    if (!fltrChk) {
                        delete this._excelFilter._predicates[val.sheetIndex][val.fieldName];
                        this.XLFilter._clearFilterColumn(val.fieldName, "", "", "Or", null, null, val.tableID);
                    }
                }
                else {
                    filterdCol = [];
                    delete this._excelFilter._predicates[val.sheetIndex][val.fieldName];
                    this.XLFilter._clearFilterColumn(val.fieldName, "", "", "Or", null, null, val.tableID);
                    for (i = 0, len = val.filterCollection.length; i < len; i++)
                        filterdCol.push(val.filterCollection[i]);
                    this.model.sheets[val.sheetIndex].filterSettings.filteredColumns = filterdCol;
                    (ej.isNullOrUndefined(this._excelFilter._predicates[val.sheetIndex][val.fieldName])) && (this._excelFilter._predicates[val.sheetIndex][val.fieldName] = {});
                    this._excelFilter._predicates[val.sheetIndex][val.fieldName] = val.ejpredicate;
                    if (val.filterCollection.length)
                        this.XLFilter._filterHandler(val);
                }
            }
            else {
                if (this._isUndo) {
                    if (val.operation === "apply-filter" && val.requestType !== "filterbycell") {
                        for (i = 0, len = val.filteredCells.length; i < len; i++) {
                            rIdx = val.filteredCells[i].rowIndex; cIdx = val.filteredCells[i].colIndex;
                            filterCell = this.getCell(rIdx, cIdx, val.sheetIndex);
                            filterCell.find(".e-ssfilter").remove();
                            this._removeClass(filterCell[0], "e-filterhdr");
                            this.addClass(filterCell[0], "e-wrapword");
                            (this.isNumber(filterCell.text()) || this.XLEdit._parseValue(filterCell.text(), { rowIndex: rIdx, colIndex: cIdx }).type === "datetime" || this.XLEdit._parseValue(filterCell.text(), { rowIndex: rIdx, colIndex: cIdx }).type === "currency" || this.XLEdit._parseValue(filterCell.text()).type === "percentage") && filterCell.addClass(this._rAlign);
                            delete container[rIdx][cIdx]["isFilterHeader"];
                            delete container[rIdx][cIdx]["filterState"];
                            delete container[rIdx][cIdx]["isFilterVisible"];
                            if (this.XLEdit.getPropertyValue(rIdx, cIdx, "isFilterWrap"))
                                this.setWrapText("wrap", this._getAlphaRange(sheetIdx, rIdx, cIdx, rIdx, cIdx));
                        }
                    }
                    if (val.requestType === "filterbycell") {
                        delete this._excelFilter._predicates[val.sheetIndex][val.fieldName];
                        this.XLFilter._clearFilterColumn(val.fieldName, "", "", "Or", null, null, val.tableID);
                        if (!this.isUndefined(val.filteredCells)) {
                            for (i = 0, len = val.filteredCells.length; i < len; i++) {
                                filterCell = this.getCell(val.filteredCells[i].rowIndex, val.filteredCells[i].colIndex, val.sheetIndex);
                                filterCell.find(".e-ssfiltered, .e-ssfilter").remove();
                                this._removeClass(filterCell[0], "e-filterhdr");
                                this.addClass(filterCell[0], "e-wrapword");
                                (this.isNumber(filterCell.text()) || this.XLEdit._parseValue(filterCell.text(), { rowIndex: val.filteredCells[i].rowIndex, colIndex: val.filteredCells[i].colIndex }).type === "datetime" || this.XLEdit._parseValue(filterCell.text(), { rowIndex: val.filteredCells[i].rowIndex, colIndex: val.filteredCells[i].colIndex }).type === "currency" || this.XLEdit._parseValue(filterCell.text(), { rowIndex: val.filteredCells[i].rowIndex, colIndex: val.filteredCells[i].colIndex }).type === "percentage") && filterCell.addClass(this._rAlign);
                            }
                        }
                    }
                    this.model.sheets[val.sheetIndex].filterSettings.range = "";
                    if ((val.operation === "apply-filter" && val.requestType != "filterbycell") || (val.requestType === "filterbycell" && !this.isUndefined(val.filteredCells))) {
                        var tabRange = this.model.sheets[val.sheetIndex].filterSettings.tableRange, tabIdx;
                        for (i = 0, len = tabRange.length; i < len; i++) {
                            if (tabRange[i].tableID === val.tableID) {
                                tabIdx = i;
                                break;
                            }
                        }
                        val.filterRange = tabRange.splice(tabIdx, 1)[0];
                    }
                    if (val.operation === "remove-filter") {
                        var pCol = this._undoCollection[this._undoCollection.length - 1], sheet = this.getSheet(val.sheetIndex);
                        if (pCol.requestType === "filterbycell") {
                            $.extend(true, selCells, pCol.selCells);
                            this.XLFilter._filterActiveCell(pCol.sheetIndex, pCol.activeCell, selCells, pCol.filteredValue, pCol.selRange);
                        }
                        else {
                            var filterIcon;
                            for (i = 0, len = val.filteredCells.length; i < len; i++) {
                                filterIcon = this.XLFilter._getFilterIcon();
                                this.XLFilter._applyFilterIcon(val.filteredCells[i], filterIcon);
                            }
                        }
                        sheet._selectedRange = val.selRange;
                        sheet.filterSettings.filteredRange = val.fltrdRange;
                        sheet.filterSettings.filteredColumns = val.filteredCols;
                        sheet.filterSettings.range = val.fRange;
                        sheet.filterSettings.tableRange.push(val.filterRange);
                        for (var k = 0, kLen = val.filterCollection.length; k < kLen; k++) {
                            this._excelFilter._predicates[val.sheetIndex][val.filterCollection[k].fieldName] = val.filterCollection[k].predicate;
                            this.XLFilter._filterHandler(val.filterCollection[k]);
                        }
                    }
                }
                else {
                    if (val.operation === "remove-filter") {
                        if (val.requestType === "filterbycell") {
                            if (this._isRowViewable(val.sheetIndex, val.activeCell.rowIndex)) {
                                cell = this.getCell(val.activeCell.rowIndex, val.activeCell.colIndex);
                                cell.find("span.e-ssfilter").remove();
                            }
                            delete this._excelFilter._predicates[val.sheetIndex][val.fieldName];
                            this.XLFilter._clearFilterColumn(val.fieldName, "", "", "Or", null, null, val.tableID);
                            $.extend(true, selCells, val.selectedCell);
                            this.XLFilter._filterActiveCell(val.sheetIndex, val.activeCell, selCells, val.filteredValue, val.selRange);
                        }
                        else
                            this.XLFilter.clearFilter("remove");
                    }
                    if (val.operation === "filter") {
                        if (val.requestType === "filterbycell") {
                            delete this._excelFilter._predicates[val.sheetIndex][val.fieldName];
                            this.XLFilter._clearFilterColumn(val.fieldName, "", "", "Or", null, null, val.tableID);
                            $.extend(true, selCells, val.selectedCell);
                            this.XLFilter._filterActiveCell(val.sheetIndex, val.activeCell, selCells, val.filteredValue, val.selRange);
                        }
                    }
                    if (val.operation === "apply-filter") {
                        sheet = this.getSheet(val.sheetIndex);
                        for (i = 0, len = val.filteredCells.length; i < len; i++) {
                            filterIcon = this.XLFilter._getFilterIcon();
                            this.XLFilter._applyFilterIcon({ rowIndex: val.filteredCells[i].rowIndex, colIndex: val.filteredCells[i].colIndex }, filterIcon);
                        }
                        sheet.filterSettings.range = val.fRange;
                        sheet.filterSettings.tableRange.push(val.filterRange);
                    }
                }
            }
        },

        _undoForFilterByColor: function (val) {
            var filterColl, coll = [];
            coll.push(val);
            filterColl = (this._isUndo) ? this._undoCollection : coll;
            delete this._excelFilter._predicates[val.sheetIndex][val.columnName];
            if (val.columnName)
                this.XLFilter._clearFilterColumn(val.columnName, "", "", "Or", null, null, val.tableID);
            for (var i = filterColl.length - 1; i >= 0; i--) {
                if ((filterColl[i].reqType === "filterbycolor" || filterColl[i].reqType === "filter") && filterColl[i].tableID === val.tableID) {
                    if (filterColl[i].rowIndex === val.rowIndex && filterColl[i].colIndex === val.colIndex) {
                        this.XLFilter._filterHandler(filterColl[i]);
                        break;
                    }
                }
            }
        },

        _undoForFind: function (val) {
            var cell, i, len, t;
            switch (val.operation) {
                case "replace": {
                    this.XLEdit._updateCellValue({ rowIndex: val.rowIndex, colIndex: val.colIndex }, val.prevData.value, null, val.sheetIndex);
                    t = val.prevData;
                    val.prevData = val.newData;
                    val.newData = t;
                    this.XLSelection.selectRange({ rowIndex: val.rowIndex, colIndex: val.colIndex }, { rowIndex: val.rowIndex, colIndex: val.colIndex });
                    break;
                }
                case "replaceAll": {
                    for (i = 0, len = val.selectedCell.length; i < len; i++) {
                        this.XLEdit._updateCellValue({ rowIndex: val.selectedCell[i].rowIndex, colIndex: val.selectedCell[i].colIndex }, val.selectedCell[i].prevData.value, null, val.selectedCell[i].sheetIndex);
                        t = val.selectedCell[i].prevData;
                        val.selectedCell[i].prevData = val.selectedCell[i].newData;
                        val.selectedCell[i].newData = t;
                    }
                    break;
                }
                case "blanks":
                case "conditions":
                case "validations":
                case "formulas":
                case "rowdiff":
                case "coldiff":
                case "comments":
                case "constants": {
                    for (i = 0, len = val.selectedCell.length; i < len; i++) {
                        cell = this.getCell(val.selectedCell[i].rowIndex, val.selectedCell[i].colIndex, val.sheetIndex);
                        if (this._isUndo) {
                            if (cell.operation === "coldiff" || cell.operation === "rowdiff")
                                (val.selectedCell[i].isApply) ? cell.removeClass("e-selected") : cell.addClass("e-selected");
                            else
                                (val.selectedCell[i].isApply) ? cell.addClass("e-selected") : cell.removeClass("e-selected");
                        }
                        else {
                            cell.removeClass("e-selected");
                        }
                    }
                    break;
                }
            }
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        _undoForFormat: function (val) {
            var isViewed = false, cell, formatCls, cElem, container = this._dataContainer.sheets[val.sheetIndex], val2, s, regx, prefix = "";
            if (ej.isNullOrUndefined(val.process)) {
                if (val.oprType === "style") {
                    this.XLFormat.removeStyle(val.range, { cellStyle: true, format: true });
                    prefix = "e-format";
                    if (!ej.isNullOrUndefined(val.process) && val.process.indexOf("border") > -1)
                        prefix = "e-border";
                    regx = new RegExp('\\b' + prefix + '.*?\\b', 'g')
                }
                for (var i = 0, len = val.selectedCell.length; i < len; i++) {
                    cell = val.selectedCell[i];
                    if (this._isRowViewable(val.sheetIndex, cell.rowIndex)) {
                        cElem = this.getCell(cell.rowIndex, cell.colIndex)[0];
                        isViewed = true;
                    }
                    if (ej.isNullOrUndefined(container[cell.rowIndex]))
                        container[cell.rowIndex] = {};
                    if (ej.isNullOrUndefined(container[cell.rowIndex][cell.colIndex]))
                        container[cell.rowIndex][cell.colIndex] = {};
                    $.extend(true, container[cell.rowIndex][cell.colIndex], val.selectedCell[i].beforeFormat);
                    if (isViewed) {
                        if (val.oprType === "format") {
                            val2 = this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "value2");
                            this.XLEdit._refreshTextNode(cElem, ej.isNullOrUndefined(val2) ? "" : val2);
                            this.XLEdit._refreshCellAlignment({ 'cellIdx': { 'rowIndex': cell.rowIndex, 'colIndex': cell.colIndex } })
                        }
                        else {
                            formatCls = (prefix === "e-format") ? this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "format") : this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "border");
                            cElem.className = cElem.className.replace(regx, "");
                            formatCls = ej.isNullOrUndefined(formatCls) ? "" : formatCls;
                            this.addClass(cElem, formatCls);
                        }
                    }
                    if ((val.selectedCell[0].colIndex === val.selectedCell[i].colIndex) && this.model.allowResizing)
                        (this._isUndo) ? this.XLResize.setRowHeight(val.selectedCell[i].rowIndex, val.selectedCell[i].bRowHeight) : this.XLResize.setRowHeight(val.selectedCell[i].rowIndex, val.selectedCell[i].aRowHeight);
                    s = val.selectedCell[i].beforeFormat;
                    val.selectedCell[i].beforeFormat = val.selectedCell[i].afterFormat;
                    val.selectedCell[i].afterFormat = s;
                    isViewed = false;
                }
            }
            if (!ej.isNullOrUndefined(val.process) && val.process.indexOf("border") > -1) {
                this.XLFormat.removeStyle(val.range, { cellStyle: true, tableStyle: true, format: false, border: true });
                (this._isUndo) ? this.XLFormat.updateFormat(val.beforeFormat, val.range) : (val.process === "noborder") ? this.XLFormat.format({ border: {} }, val.range) : this.XLFormat.applyBorder($.extend(true, {}, val.options), val.range);
                s = val.beforeFormat;
                val.beforeFormat = val.afterFormat;
                val.afterFormat = s;
                if (val.prevHeight.length) {
                    for (i = 0, len = val.prevHeight.length; i < len; i++)
                        this.XLResize.setRowHeight(val.prevHeight[i][0], val.prevHeight[i][1]);
                    s = val.prevHeight;
                    val.prevHeight = val.newHeight;
                    val.newHeight = s;
                }
            }
            val.status = "undo-cellformat";
            this.performSelection(val.range);
        },

        _undoForFormatPaint: function (val) {
            var temp, i, wraplen, unwraplen;
            this.XLCFormat.clearCF(val.range);
            this.XLFormat.removeStyle(val.range);
            this.updateData($.extend(true, [], val.beforeData), val.range);
            this.XLCFormat.refreshCFormat(val.range);
            for (i = 0, unwraplen = val.unwrapCells.length; i < unwraplen; i++)
                this.setWrapText('unwrap', this._getAlphaRange(val.sheetIndex, val.unwrapCells[i].rowIndex, val.unwrapCells[i].colIndex, val.unwrapCells[i].rowIndex, val.unwrapCells[i].colIndex));
            for (i = 0, wraplen = val.wrapCells.length; i < wraplen; i++)
                this.setWrapText('wrap', this._getAlphaRange(val.sheetIndex, val.wrapCells[i].rowIndex, val.wrapCells[i].colIndex, val.wrapCells[i].rowIndex, val.wrapCells[i].colIndex));
            temp = val.unwrapCells;
            val.unwrapCells = val.wrapCells;
            val.wrapCells = temp;
            temp = val.beforeData;
            val.beforeData = val.afterData;
            val.afterData = temp;
        },

        _undoForFormatTable: function (val) {
            var j, ln, hdrCol, rng, selCell, tname, rangeData, merge, mlen, mergeData, range, i = 0, sheetIdx = val.sheetIndex,
                tmgr = this.getSheet(sheetIdx).tableManager, header = val.header, robj = $('#' + this._id + '_Ribbon').data('ejRibbon'), tabRange;
            switch (val.action) {
                case "Design_Tools_ConvertToRange":
                    if (this._isUndo) {
                        tmgr[val.tableID] = { name: val.name, range: val.beforeRange, format: val.format, formatName: val.formatName };
                        this.performSelection(this._getAlphaRange(sheetIdx, val.beforeRange[0], val.beforeRange[1], val.beforeRange[2], val.beforeRange[3]));
                        this.XLFilter._filterTable(sheetIdx, val.tableID);
                        this.updateUniqueData({ tableName: 'e-table' + val.tableID }, tmgr[val.tableID].range);
                        tmgr[val.tableID]["isFilter"] = val.isFilter;
                        tmgr[val.tableID]["firstColumn"] = val.firstColumn;
                        tmgr[val.tableID]["lastColumn"] = val.lastColumn;
                        tmgr[val.tableID]["totalRow"] = val.totalRow;
                        tmgr[val.tableID]["fnNumber"] = val.fnNumber;
                        this.getSheet(sheetIdx)._header[val.tableID] = header;
                        range = this._getDollarAlphaRange(tmgr[val.tableID].range, true);
                        this.XLRibbon.addNamedRange(val.name, range, null, sheetIdx);
                        this.XLFormat._updateTableFormula("addRange", tmgr[val.tableID], sheetIdx);
                        var keys = this.getObjectKeys(this._tableRangesFormula[val.name]), keysLen = keys.length;
                        this._tableFormulaCollection[val.name] = [];
                        for (j = 0; j < keysLen; j++)
                            this._tableFormulaCollection[val.name].push({ "text": "[" + keys[j] + "]", "display": keys[j] });
                    }
                    else {
                        if (val.tableID in tmgr) {
                            this.XLFormat.removeTable(val.tableID);
                            this.XLFilter._clearFilterTable(sheetIdx, val.tableID);
                            delete tmgr[val.tableID];
                            delete this.model.sheets[sheetIdx]._header[val.tableID];
                        }
                    }
                    break;
                case "filtericon":
                    var fIcon = $("#" + val.id).data("ejCheckBox"), tid = val.tableId;
                    (val.check) ? fIcon.option("checked", false) : fIcon.option("checked", true);
                    tmgr[tid]["isFilter"] = !(val.check);
                    val.check = !(val.check);
                    break;
                case "firstlastcolumn":
                    var cc = $("#" + val.id).data("ejCheckBox");
                    if (val.check) {
                        this.XLFormat.format({ style: { 'font-weight': 'normal' } }, val.range);
                        cc.option("checked", false);
                    }
                    else {
                        this.XLFormat.format({ style: { 'font-weight': 'bold' } }, val.range);
                        cc.option("checked", true);
                    }
                    tmgr[val.tableId][val.prop] = !val.check;
                    val.check = !(val.check);
                    break;
                case "totalrow":
                    $("#" + val.id).ejCheckBox('option', { checked: !val.check });
                    val.check = !(val.check);
                    break;
                case "Design_Tools_ResizeTable":
                    var tblmngr;
                    if (this._isUndo) {
                        this._isFATResize = true;
                        val.afterRange = $.extend(true, [], val.afterRange);
                        if (val.totalRow) {
                            this._dupDetails = true;
                            this.XLFormat._calculateTotalRow(sheetIdx, val.tableId, false);
                            val.beforeRange[2] -= 1;
                            tmgr[val.tableId].range[2] -= 1;
                        }
                        tname = tmgr[val.tableId].name;
                        this.XLFormat.removeTable(val.tableId);
                        this.XLFormat.removeStyle(val.afterRange);
                        hdrCol = val.beforeRange[3] - val.beforeRange[1] + 1;
                        rangeData = header[val.tableId].header ? this.getRangeData({ range: val.beforeRange }) : this.getRangeData({ range: val.beforeRange }).splice(hdrCol, this.getRangeData({ range: val.beforeRange }).length);
                        this.clearRangeData(val.beforeRange);
                        header[val.tableId].header ? this.updateData(rangeData, [val.beforeRange[0], val.beforeRange[1], val.beforeRange[2], val.beforeRange[3]]) : this.updateData(rangeData, [val.beforeRange[0], val.beforeRange[1], val.beforeRange[2] - 1, val.beforeRange[3]]);
                        tblmngr = { header: header[val.tableId].header, tblId: val.tableId, name: tname, range: val.beforeRange, format: val.format, formatName: val.formatName, firstColumn: val.firstColumn, lastColumn: val.lastColumn, isFilter: val.isFilter, totalRow: val.totalRow };
                        this.XLClipboard._isCut = true;
                        header[val.tableId].header ? this.XLFormat.createTable(tblmngr, val.beforeRange) : this.XLFormat.createTable(tblmngr, [val.beforeRange[0], val.beforeRange[1], val.beforeRange[2] - 1, val.beforeRange[3]]);
                        if (val.totalRow) {
                            this._dupDetails = true;
                            this.XLFormat._calculateTotalRow(sheetIdx, val.tableId, true);
                            val.beforeRange = tmgr[val.tableId].range;
                        }
                        tabRange = this.getSheet(sheetIdx).filterSettings.tableRange;
                        for (i = 0; i < tabRange.length; i++) {
                            if (tabRange[i].tableID == val.tableId) {
                                tabRange[i].endRow = tabRange[i].selectedRange.endRow = val.beforeRange[2];
                                break;
                            }
                        }
                        this.XLClipboard._isCut = false;
                        this._isFATResize = false;
                    }
                    else {
                        this._isFATResize = true;
                        val.beforeRange = $.extend(true, [], val.beforeRange);
                        if (val.totalRow) {
                            this.XLFormat._calculateTotalRow(sheetIdx, val.tableId, false);
                            val.afterRange = tmgr[val.tableId].range = [val.afterRange[0], val.afterRange[1], val.afterRange[2] - 1, val.afterRange[3]];
                        }
                        tname = tmgr[val.tableId].name;
                        this.XLFormat.removeTable(val.tableId);
                        this.XLFormat.removeStyle(val.beforeRange);
                        hdrCol = val.beforeRange[3] - val.beforeRange[1] + 1;
                        rangeData = header[val.tableId].header ? this.getRangeData({ range: val.afterRange }) : this.getRangeData({ range: val.afterRange }).splice(hdrCol, this.getRangeData({ range: val.afterRange }).length);
                        this.clearRangeData(val.afterRange);
                        header[val.tableId].header ? this.updateData(rangeData, val.afterRange) : this.updateData(rangeData, [val.afterRange[0], val.afterRange[1], val.afterRange[2] - 1, val.afterRange[3]]);
                        tblmngr = { header: header[val.tableId].header, tblId: val.tableId, name: tname, range: val.beforeRange, format: val.format, formatName: val.formatName, firstColumn: val.firstColumn, lastColumn: val.lastColumn, isFilter: val.isFilter, totalRow: val.totalRow };
                        this.XLClipboard._isCut = true;
                        header[val.tableId].header ? this.XLFormat.createTable(tblmngr, val.afterRange) : this.XLFormat.createTable(tblmngr, [val.afterRange[0], val.afterRange[1], val.afterRange[2] - 1, val.afterRange[3]]);
                        this.XLFilter._extendFilterRange(val.tableId, val.afterRange);
                        if (val.totalRow) {
                            this.XLFormat._calculateTotalRow(sheetIdx, val.tableId, true);
                            val.afterRange = tmgr[val.tableId].range;
                        }
                        this.XLClipboard._isCut = false;
                        this._isFATResize = false;
                    }
                    break;
                case "renaming":
                    this.XLRibbon.removeNamedRange(tmgr[val.tableId].name);
                    if (document.getElementById(this._id + '_Ribbon_Design_Properties_TableName'))
                        document.getElementById(this._id + '_Ribbon_Design_Properties_TableName').value = tmgr[val.tableId].name = (this._isUndo) ? val.prevName : val.newName;
                    this.XLRibbon.addNamedRange(tmgr[val.tableId].name, val.range, null, sheetIdx);
                    robj.showTab(this._getLocStr('Design'));
                    break;
                default:
                    if (this._isUndo) {
                        tname = tmgr[val.tableID].name;
                        this.XLFormat.removeTable(val.tableID);
                        this.XLFormat.removeStyle(val.afterRange);
                        if (!val.tableStyle.header) {
                            hdrCol = val.afterRange[3] - val.afterRange[1] + 1;
                            this.clearRangeData(val.afterRange);
                            this.updateData($.extend(true, [], val.beforeRangeData), val.afterRange);
                        }
                        else {
                            for (j = 0, ln = val.beforeRangeHeader.length; j < ln; j++) {
                                if (ej.isNullOrUndefined(val.beforeRangeHeader[j].value2))
                                    this.XLEdit._updateCellValue(this._getCellIdx(val.pcells[j]), "");
                                else {
                                    if (this.isNumber(val.pcells[j].innerHTML))
                                        this.XLEdit._refreshCellAlignment({ cellIdx: this._getCellIdx(val.pcells[j]) });
                                }
                            }
                        }
                        this.XLFormat.updateFormat(val.beforeFormat, val.afterRange);
                        merge = val.beforeMergeRange;
                        mlen = merge.length;
                        if (mlen) {
                            while (i < mlen) {
                                mergeData = merge[i].value;
                                if (mergeData) {
                                    rng = this.getRangeIndices(mergeData.mRange);
                                    selCell = this._getSelectedRange({ rowIndex: rng[0], colIndex: rng[1] }, { rowIndex: rng[2], colIndex: rng[3] });
                                    this.mergeCenter = mergeData.isCenterAlign;
                                    this._mergeCells(val.sheetIndex, selCell, {}, []);
                                }
                                i++;
                            }
                        }
                    }
                    else
                        this.XLFormat.createTable(val.tableStyle, val.beforeRange);
                    break;
            }
        },

        _autosumFormatUpdate: function (data, range, isTable, isChecked) {
            var temp = {}, aRange, sheetIdx = this.getActiveSheetIndex();
            if (data.type !== "general") {
                this._dupDetails = true;
                temp["type"] = data.type;
                if (isTable)
                    aRange = this._getAlphaRange(sheetIdx, range[2] + 1, range[3], range[2] + 1, range[3]);
                else
                    aRange = this._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                if (isChecked)
                    this.XLFormat.format({ type: "general" }, aRange + ":" + aRange);
                else
                    this.XLFormat.format(temp, aRange + ":" + aRange);
                this._dupDetails = false;
            }
        },
        _undoForHyperlink: function (val) {
            var i, len, endCell = { rowIndex: val.selectedCell[val.selectedCell.length - 1].rowIndex, colIndex: val.selectedCell[val.selectedCell.length - 1].colIndex },
                startCell = { rowIndex: val.selectedCell[0].rowIndex, colIndex: val.selectedCell[0].colIndex }, lnk, txt, color;
            this.setActiveCell(val.selectedCell[0].rowIndex, val.selectedCell[0].colIndex);
            this.XLSelection.selectRange(startCell, endCell);
            if (val.action === "add")
                this._removeHyperlink(val.reqType, val.selectedCell);
            else if (val.action === "edit")
                this._setLink(val.selectedCell);
            else
                this._setLink(val.selectedCell);
            for (i = 0, len = val.selectedCell.length; i < len; i++) {
                lnk = val.selectedCell[i].prevLink;
                val.selectedCell[i].prevLink = val.selectedCell[i].curLink;
                val.selectedCell[i].curLink = lnk;
                txt = val.selectedCell[i].prevText;
                val.selectedCell[i].prevText = val.selectedCell[i].curText;
                val.selectedCell[i].curText = txt;
                color = val.selectedCell[i].prevColor;
                val.selectedCell[i].prevColor = val.selectedCell[i].curColor;
                val.selectedCell[i].curColor = color;
            }
            if (val.action === "add")
                val.action = "delete";
            else if (val.action === "delete")
                val.action = "add";
            this.XLSelection.selectRange(startCell, endCell);
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
        },

        _undoForIns: function (val) {
            $.extend(true, this._delCells, val.delCells);
            $.extend(true, this._deletedText, val.text);
            $.extend(true, this._removeMergeColl, val.removeMerge);
            $.extend(true, this._cellTypesUndo, val.prevCellTypes);
            $.extend(true, this._cellTypesRedo, val.curCellTypes);
            $.extend(true, this._chartUndo, val.prevChartDetails);
            $.extend(true, this._chartRedo, val.curChartDetails);
            $.extend(true, this._valDataUndo, val.prevValData);
            $.extend(true, this._valDataRedo, val.curValData);
            switch (val.action) {
                case "insertShiftRight":
                    this.insertShiftRight(val.startCell, val.endCell);
                    break;
                case "insertShiftBottom":
                    this.insertShiftBottom(val.startCell, val.endCell);
                    break;
                case "insertRow":
                    this.insertEntireRow(val.startCell.rowIndex, val.endCell.rowIndex);
                    break;
                case "insertColumn":
                    this.insertEntireColumn(val.startCell.colIndex, val.endCell.colIndex);
                    break;
            }
        },

        _undoForMerge: function (val) {
            var rng, selectedCells, hiddenCount, pObj, cObj, i, len;
            this._delCells = val.hideCells;
            this._selMergeCells = [];
            switch (val.action) {
                case "merge-all":
                case "merge-across":
                case "un-merge":
                    for (i = 0, len = val.mCells.length; i < len; i++) {
                        pObj = ej.isNullOrUndefined(val.mCells[i].prevObj) ? {} : ej.isNullOrUndefined(val.mCells[i].prevObj.merge) ? {} : val.mCells[i].prevObj.merge;
                        cObj = ej.isNullOrUndefined(val.mCells[i].curObj) ? {} : ej.isNullOrUndefined(val.mCells[i].curObj.merge) ? {} : val.mCells[i].curObj.merge;
                        if (val.action === "un-merge") {
                            if (!ej.isNullOrUndefined(pObj.mRange)) {
                                rng = this.getRangeIndices(pObj.mRange);
                                selectedCells = this._getSelectedRange({ rowIndex: rng[0], colIndex: rng[1] }, { rowIndex: rng[2], colIndex: rng[3] });
                                this.mergeCenter = pObj.isCenterAlign;
                                this._mergeCells(val.sheetIndex, selectedCells, {}, []);
                            }
                        }
                        else {
                            hiddenCount = this._getHiddenRowColumnCount(val.sheetIndex, cObj.mRange);
                            this._unMergeAllCells(val.sheetIndex, i, val.mCells, [], hiddenCount.hRow, hiddenCount.hCol);
                        }
                        var nObj = val.mCells[i].prevObj;
                        val.mCells[i].prevObj = val.mCells[i].curObj;
                        val.mCells[i].curObj = nObj;
                    }
                    if (val.action !== "un-merge") {
                        for (i = 0, len = val.mCells.length; i < len; i++) {
                            pObj = ej.isNullOrUndefined(val.mCells[i].prevObj) ? {} : ej.isNullOrUndefined(val.mCells[i].prevObj.merge) ? {} : val.mCells[i].prevObj.merge;
                            cObj = ej.isNullOrUndefined(val.mCells[i].curObj) ? {} : ej.isNullOrUndefined(val.mCells[i].curObj.merge) ? {} : val.mCells[i].curObj.merge;
                            if (!ej.isNullOrUndefined(cObj.mRange)) {
                                rng = this.getRangeIndices(cObj.mRange);
                                selectedCells = this._getSelectedRange({ rowIndex: rng[0], colIndex: rng[1] }, { rowIndex: rng[2], colIndex: rng[3] });
                                this.mergeCenter = cObj.isCenterAlign;
                                this._mergeCells(val.sheetIndex, selectedCells, {}, []);
                            }
                        }
                    }
                    val.action = (val.action === "un-merge") ? "merge-all" : "un-merge";
                    break;
            }
            rng = this._getSelectedCells(val.sheetIndex, val.range).range;
            selectedCells = this._getSelectedRange({ rowIndex: rng[0], colIndex: rng[1] }, { rowIndex: rng[2], colIndex: rng[3] });
            this.performSelection(selectedCells[0], selectedCells[selectedCells.length - 1]);
            this._delCells = [];
        },

        _undoForReOrder: function (val) {
            var sheet = this.getSheet(val.sheetIndex);
            if (this._isUndo) {
                this.XLComment && this.XLComment.deleteComment();
                for (var i = val.destinationRange[0]; i <= val.destinationRange[2]; i++) {
                    for (var j = val.destinationRange[1]; j <= val.destinationRange[3]; j++)
                        if (this.XLEdit.getPropertyValue(i, j, 'wrap'))
                            this.setWrapText("unwrap", this._getAlphaRange(val.sheetIndex, i, j, i, j));
                }
                this.clearRangeData(val.destinationRange, val.property);
                this.XLFormat.removeStyle(val.destinationRange);
                this.XLCFormat.clearCF(val.destinationRange);
                if (!this.isUndefined(val.tblObj)) {
                    this.XLFormat.removeTable(val.tblObj.tblId);
                    this.XLClipboard._isCut = true;
                    this.XLFormat.createTable(val.tblObj, val.sourceRange);
                    val.tblObj.totalRow && this.XLFormat._updateTotalRow(val.sheetIndex, val.tblObj.tblId, val.tblObj.fnNumber, val.sourceRange, false);
                    this.XLClipboard._isCut = false;
                }
                this.updateData($.extend(true, [], val.sourceData), val.sourceRange);
                this.updateData($.extend(true, [], val.destinationData), val.destinationRange);
                if (val.tRange) {
                    this._dupDetails = true;
                    this.XLFilter.clearFilter("remove");
                    this.XLFilter.filter(val.tRange);
                    this._dupDetails = false;
                }
                this.XLFormat.updateFormat(val.sourceFormat, val.sourceRange);
                this.XLFormat.updateFormat(val.destinationFormat, val.destinationRange);
                if (!this.isUndefined(val.sourceCFormat) && !(val.sourceCFormat instanceof Array))
                    this.XLCFormat.setCFRule(val.sourceCFormat);
                this.setActiveCell(val.sourceRange[0], val.sourceRange[1]);
                this.XLSelection.selectRange({ rowIndex: val.sourceRange[0], colIndex: val.sourceRange[1] }, { rowIndex: val.sourceRange[2], colIndex: val.sourceRange[3] }, val.sheetIndex);
                sheet._startCell = { rowIndex: val.sourceRange[0], colIndex: val.sourceRange[1] };
                sheet._endCell = { rowIndex: val.sourceRange[2], colIndex: val.sourceRange[3] };
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
                this.setHeightToRows(val.prevDestRowHt);
            }
            else {
                this.XLSelection.selectRange({ rowIndex: val.sourceRange[0], colIndex: val.sourceRange[1] }, { rowIndex: val.sourceRange[2], colIndex: val.sourceRange[3] }, val.sheetIndex);
                this.XLComment && this.XLComment.deleteComment();
                for (i = val.sourceRange[0]; i <= val.sourceRange[2]; i++) {
                    for (j = val.sourceRange[1]; j <= val.sourceRange[3]; j++)
                        if (this.XLEdit.getPropertyValue(i, j, 'wrap'))
                            this.setWrapText("unwrap", this._getAlphaRange(val.sheetIndex, i, j, i, j));
                }
                this.clearRangeData(val.sourceRange, val.property);
                this.clearRangeData(val.destinationRange, val.property);
                if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(val.destinationRange[0], val.destinationRange[1], "tableName")))
                    this.XLFormat.removeStyle(val.destinationRange);
                if (!this.isUndefined(val.tblObj)) {
                    this.XLFormat.removeTable(val.tblObj.tblId);
                    this.XLClipboard._isCut = true;
                    this.XLFormat.createTable(val.tblObj, val.destinationRange);
                    this.XLClipboard._isCut = false;
                }
                if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(val.sourceRange[0], val.sourceRange[1], "tableName")))
                    this.XLFormat.removeStyle(val.sourceRange);
                this.XLCFormat.clearCF(val.sourceRange);
                this.updateData($.extend(true, [], val.sourceData), val.destinationRange);
                if (val.tRange) {
                    this._dupDetails = true;
                    this.XLFilter.clearFilter("remove");
                    this.XLFilter.filter(val.destinationRange);
                    this._dupDetails = false;
                }
                this.XLFormat.updateFormat(val.sourceFormat, val.destinationRange);
                val.tblObj && val.tblObj.totalRow && this.XLFormat._updateTotalRow(val.sheetIndex, val.tblObj.tblId, val.tblObj.fnNumber, val.destinationRange, false);
                if (!this.isUndefined(val.destinationCFormat) && !(val.destinationCFormat instanceof Array))
                    this.XLCFormat.setCFRule(val.destinationCFormat);
                this.setHeightToRows(val.destHeight);
                this.setActiveCell(val.destinationRange[0], val.destinationRange[1]);
                this.XLSelection.selectRange({ rowIndex: val.destinationRange[0], colIndex: val.destinationRange[1] }, { rowIndex: val.destinationRange[2], colIndex: val.destinationRange[3] }, val.sheetIndex);
                sheet._startCell = { rowIndex: val.destinationRange[0], colIndex: val.destinationRange[1] };
                sheet._endCell = { rowIndex: val.destinationRange[2], colIndex: val.destinationRange[3] };
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
            }
        },

        _undoForPivot: function (val) {
            var coll = (this._isUndo) ? this._undoCollection : this._redoCollection;
            var args = { curOperation: val, prevOperation: coll[coll.length - 1], isUndo: this._isUndo };
            this._trigger("_readUndoRedo", args);
        },

        _undoForResizeCol: function (val) {
            this.XLResize._resizeColumnUsingDiff(val.oldWidth, val.newWidth, val.cols);
            var temp = val.oldWidth;
            val.oldWidth = val.newWidth;
            val.newWidth = temp;
            if (this.model.allowAutoFill)
                this.XLDragFill.positionAutoFillElement();
        },

        _undoForResizeRow: function (val) {
            this.XLResize._resizeRowUsingDiff(val.oldHeight, val.newHeight, val.rows);
            var temp = val.oldHeight;
            val.oldHeight = val.newHeight;
            val.newHeight = temp;
            if (this.model.allowAutoFill)
                this.XLDragFill.positionAutoFillElement();
        },

        _undoForResizeFHeight: function (val) {
            var isUndo = this._isUndo,
                temp = val.newHeight;
            val.newHeight = val.oldHeight;
            val.oldHeight = temp;
            this.XLResize.setRowHeight(val.rowIndex, val.newHeight);
            this._isUndo ? this.XLEdit._clearDataContainer({ sheetIdx: val.sheetIndex, cellIdx: { rowIndex: val.rowIndex, colIndex: 0 }, property: ["isFitHeight"] }) : this.XLEdit._updateDataContainer({ rowIndex: val.rowIndex, colIndex: 0 }, { dataObj: { "isFitHeight": true } });
            if (this.model.allowAutoFill)
                this.XLDragFill.positionAutoFillElement();
            this._isUndo = isUndo;
        },

        _undoForResizeFWidth: function (val) {
            var cell = this.getCell(0, val.colIndex).get(0), isUndo = this._isUndo;
            var newWidth = val.newWidth;
            val.newWidth = (cell.offsetWidth === val.oldWidth) ? val.newWidth : val.oldWidth;
            val.oldWidth = newWidth;
            this.XLResize._applyWidth(val.target, val.sheetIndex, val.colIndex, val.newWidth);
            this.XLScroll._getColWidths(val.sheetIndex, val.colIndex);
            this._isUndo ? this.XLEdit._clearDataContainer({ sheetIdx: val.sheetIndex, cellIdx: { rowIndex: 0, colIndex: val.colIndex }, property: ["isFitWidth"] }) : this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: val.colIndex }, { dataObj: { "isFitWidth": true } });
            if (this.model.allowAutoFill)
                this.XLDragFill.positionAutoFillElement();
            this._isUndo = isUndo;
        },

        _undoForShape: function (val) {
            var cObj, dataVal, chartId, ddObj, idx = 0, chartThemes, shapeMgr = this.getSheet(val.sheetIndex).shapeMngr;
            (this.model.showRibbon) && (chartThemes = this.XLRibbon._chartThemes);
            if (val.action != "chartType" && val.action !== "create" && val.action !== "remove" && val.action !== "edit" && val.action !== "border" && val.action !== "resetpicture" && val.action !== "changepicture" && val.action !== "picturesize" && val.action !== "chartTheme" && val.action !== "chartType" && val.action !== "selectData") {
                cObj = $("#" + val.cid).data("ejChart");
                dataVal = this.getSheet(val.sheetIndex).shapeMngr.chart[this.XLEdit.getPropertyValue(val.rowIndex, val.colIndex, "chart")[0]];
            }
            switch (val.action) {
                case "create":
                    this.XLShape._picCellIdx = this.XLShape._getCellIndexFromOffset(val.position.top, val.position.left);
                    this.XLShape._deleteShape(val.sheetIndex, $("#" + val.id));
                    val.action = "remove";
                    break;
                case "remove":
                    if (val.shapeType === "picture") {
                        this.XLShape._createPicture(val.sheetIndex, val.actCell, val.img, val.position.top, val.position.left, val.position.width, val.position.height, val.cnt, val.bcolor, val.bstyle, val.bwidth);
                        this.XLRibbon._formatTabUpdate();
                        $(val.actCell).addClass("e-activecell");
                    }
                    else {
                        if (!val.options.isChartSeries) {
                            this.XLSelection.selectRange({ rowIndex: val.range[0], colIndex: val.range[1] }, { rowIndex: val.range[0], colIndex: val.range[1] }, val.sheetIndex);
                            this.setActiveCell(val.range[0], val.range[1], val.sheetIndex);
                        }
                        this.XLChart.createChart(val.options.isChartSeries ? null : this._getAlphaRange(val.sheetIndex, val.range[0], val.range[1], val.range[2], val.range[3]), val.options, val.id);
                    }
                    val.action = "create";
                    break;
                case "edit":
                    var opt, elem, chartEle, rng, container = this._dataContainer.sheets[val.sheetIndex], shapeType = val.id.split("_")[1].replace(/[0-9]/g, ''), imgElem = {}, objIdx, prevCellIdx;
                    $("#" + val.id).css({ left: val.prev.left, top: val.prev.top, height: val.prev.height, width: val.prev.width });
                    (shapeType === "chart") && this.XLChart.resizeChart(val.id, val.prev.height, val.prev.width);
                    val.visualImg.hide();
                    this.XLShape._picCellIdx = this.XLShape._getCellIndexFromOffset(val.prev.top, val.prev.left), prevCellIdx = this.XLShape._getCellIndexFromOffset(val.cur.top, val.cur.left);
                    rng = this._getShapePositionInManager(prevCellIdx.rowIndex, prevCellIdx.colIndex, val.id, shapeType);
                    imgElem[shapeType] = val.obj[shapeType][rng];
                    if (val.actionType != "resize") {
                        if (this.getObjectLength(container[prevCellIdx.rowIndex][prevCellIdx.colIndex]) < 2 && container[prevCellIdx.rowIndex][prevCellIdx.colIndex][shapeType].length < 2)
                            delete container[prevCellIdx.rowIndex][prevCellIdx.colIndex];
                        else if (container[prevCellIdx.rowIndex][prevCellIdx.colIndex][shapeType].length < 2)
                            delete container[prevCellIdx.rowIndex][prevCellIdx.colIndex][shapeType];
                        else {
                            container[prevCellIdx.rowIndex][prevCellIdx.colIndex][shapeType].some(function (obj, i) { if (imgElem.id === obj.id) { objIdx = i; return true; } });
                            container[prevCellIdx.rowIndex][prevCellIdx.colIndex][shapeType].splice(objIdx, 1);
                        }
                    }
                    this.XLEdit._updateDataContainer({ rowIndex: this.XLShape._picCellIdx.rowIndex, colIndex: this.XLShape._picCellIdx.colIndex }, { dataObj: imgElem });
                    this.getCell(this.XLShape._picCellIdx.rowIndex, this.XLShape._picCellIdx.colIndex, val.sheetIndex).addClass("e-activecell");
                    if (this.model.showRibbon && this.element.find(".e-ss-activeimg").length < 1)
                        shapeType === "picture" ? this.XLRibbon._toggleFormatTab() : this.XLRibbon._toggleChartDesignTab();
                    this.XLRibbon._setShapeWidthHeight({ "width": val.prev.width, "height": val.prev.height, "shapeType": shapeType });
                    this._swapVal(val);
                    break;
                case "PHAxis":
                case "PVAxis":
                    var pAxis = (val.action == "PHAxis") ? "primaryXAxis" : "primaryYAxis", axis = (val.action === "PHAxis") ? "xAxis" : "yAxis";
                    val.visibility = !(val.visibility);
                    cObj.option(pAxis, { visible: val.visibility });
                    dataVal[axis].visible = val.visibility;
                    break;
                case "PX":
                case "PY":
                    pAxis = (val.action == "PX") ? "primaryXAxis" : "primaryYAxis";
                    axis = (val.action === "PX") ? "xAxis" : "yAxis";
                    ej.isNullOrUndefined(val.prev.text) && (val.prev.text = "");
                    cObj.option(pAxis, { title: { text: val.prev.text } });
                    dataVal[axis].title.text = val.prev.text;
                    this._swapVal(val);
                    break;
                case "CT":
                    cObj.option("title", { textAlignment: val.prev.align, text: val.prev.text });
                    dataVal.title = { text: val.prev.text, textAlignment: val.prev.align };
                    this._swapVal(val);
                    break;
                case "DLNone":
                    cObj.option({ series: val.prev.series });
                    dataVal.dataLabel = { visible: val.prev.series[0].marker.dataLabel.visible };
                    this._swapVal(val);
                    break;
                case "DL":
                    cObj.option({ series: val.prev.series });
                    dataVal.dataLabel = { visible: val.prev.series[0].marker.dataLabel.visible, vAlign: val.prev.series[0].marker.dataLabel.verticalTextAlignment, tPosn: val.prev.series[0].marker.dataLabel.textPosition };
                    this._swapVal(val);
                    break;
                case "PMajorH":
                    val.visibility = !(val.visibility);
                    cObj.option("primaryYAxis", { majorGridLines: { visible: val.visibility } });
                    dataVal.yAxis.majorGridLines = { visible: val.visibility };
                    break;
                case "PMajorV":
                    val.visibility = !(val.visibility);
                    cObj.option("primaryXAxis", { majorGridLines: { visible: val.visibility } });
                    dataVal.xAxis.majorGridLines = { visible: val.visibility };
                    break;
                case "PMinorH":
                    val.visibility = !(val.visibility);
                    cObj.option("primaryYAxis", { minorGridLines: { visible: val.visibility }, minorTicksPerInterval: 5, minorTickLines: { visible: val.visibility } });
                    dataVal.yAxis.minorGridLines = { visible: val.visibility };
                    break;
                case "PMinorV":
                    val.visibility = !(val.visibility);
                    cObj.option("primaryXAxis", { minorGridLines: { visible: val.visibility }, minorTicksPerInterval: 5, minorTickLines: { visible: val.visibility } });
                    dataVal.xAxis.minorGridLines = { visible: val.visibility };
                    break;
                case "LNone":
                    val.visibility = !(val.visibility);
                    cObj.option("legend", { visible: val.visibility });
                    dataVal.legend.visible = val.visibility;
                    break;
                case "Legend":
                    cObj.option("legend", { position: val.prev.position });
                    dataVal.legend.position = val.prev.position;
                    this._swapVal(val);
                    break;
                case "width":
                    opt = { width: val.prev.width, height: val.prev.height, 'shapeType': 'chart' };
                    chartEle = $("#" + cObj._id);
                    cObj.option("size", $.extend(true, {}, opt));
                    chartEle[0].style.height = val.prev.height + "px";
                    chartEle[0].style.width = val.prev.width + "px";
                    dataVal.width = val.prev.width;
                    dataVal.height = val.prev.height;
                    this.XLRibbon._setShapeWidthHeight(opt);
                    this._swapVal(val);
                    break;
                case "height":
                    opt = { width: val.prev.width, height: val.prev.height, 'shapeType': 'chart' };
                    chartEle = $("#" + cObj._id);
                    cObj.option("size", $.extend(true, {}, opt));
                    chartEle[0].style.height = val.prev.height + "px";
                    chartEle[0].style.width = val.prev.width + "px";
                    dataVal.width = val.prev.width;
                    dataVal.height = val.prev.Height;
                    this.XLRibbon._setShapeWidthHeight(opt);
                    this._swapVal(val);
                    break;
                case "srcolumn":
                    var obj, chOptions;
                    cObj.model.series.length = 0;
                    dataVal.isRowColSwitched = !dataVal.isRowColSwitched;
                    obj = { xRange: dataVal.xRange, yRange: dataVal.yRange, lRange: dataVal.lRange, isRowColSwitched: dataVal.isRowColSwitched, dataSheetIdx: dataVal.dataSheetIdx };
                    chOptions = this.XLChart._processChartSeries(obj);
                    cObj.option({ series: chOptions.series });
                    this.getActiveSheetIndex() === dataVal.dataSheetIdx && this.XLChart._focusChartRange(chOptions.xRange, chOptions.yRange, chOptions.lRange);
                    dataVal.xAxis.range = chOptions.xRange;
                    dataVal.yAxis.range = chOptions.yRange;
                    dataVal.legend.range = chOptions.lRange;
                    break;
                case "border":
                    var temp;
                    elem = $("#" + val.id);
                    this._removeClass(elem[0], val.curClass);
                    this.addClass(elem[0], val.prevClass);
                    temp = val.prevClass;
                    val.prevClass = val.curClass;
                    val.curClass = temp;
                    break;
                case "resetpicture":
                    elem = $("#" + val.id);
                    var regx = new RegExp("\\b" + "e-shapebdr" + ".*?\\b", "g");
                    if (this._isUndo)
                        (elem[0].className.match(regx)) && this.XLShape.changePictureBorder(elem[0].id, val.prev.bwidth, val.prev.bstyle, val.prev.bcolor);
                    else
                        elem[0].className = elem[0].className.replace(regx, "");
                    if (val.actionType !== "resetpicture") {
                        elem.css({ width: val.prev.width, height: val.prev.height });
                        this.XLShape._selectImg(elem);
                        this.XLShape._updateShapeObj(elem[0]);
                    }
                    this._swapVal(val);
                    break;
                case "changepicture":
                    container = this._dataContainer;
                    $("#" + val.id).css("background-image", "url('" + val.prev.img + "')");
                    shapeMgr.picture[val.prev.pcIdx].data = val.prev.data;
                    this._swapVal(val);
                    break;
                case "picturesize":
                    elem = $("#" + val.id); opt = { "width": val.prev.width, "height": val.prev.height, "shapeType": "picture" };
                    elem.css(opt);
                    this.XLRibbon._setShapeWidthHeight(opt);
                    this._swapVal(val);
                    break;
                case "chartTheme":
                    chartId = this.element.find("#" + this._id + "_chart").val(), ddObj = $("#" + this._id + "_Ribbon_ChartDesign_ChartThemes_ChartThemes").data("ejDropDownList");
                    (val.prev.theme.indexOf("dark") > -1) ? ($("#" + chartId).addClass('e-ss-charttheme')) : ($("#" + chartId).removeClass('e-ss-charttheme'));
                    this.XLChart.refreshChart(chartId, { theme: val.prev.theme });
                    for (var i = 0, len = chartThemes.length; len > i; i++) {
                        if (val.prev.theme === chartThemes[i].value.toLowerCase()) {
                            idx = i;
                            break;
                        }
                    }
                    ddObj && ddObj.option({ selectedItemIndex: idx })
                    this._swapVal(val);
                    break;
                case "chartType":
                    this.XLChart.refreshChart(val.chartId, { type: val.prev.chartType, enable3D: val.prev.enable3D, marker: val.prev.marker });
                    this._swapVal(val);
                    break;
                case "selectData":
                    this.XLChart.changeDataRange(document.getElementById(this._id + "_chart").value, val.prev.xRange, val.prev.yRange, val.prev.lRange);
                    this._swapVal(val);
                    break;
            }
        },

        _undoForShowHide: function (val) {
            var i, len, rowHdrs, colHdrs;
            if (val.operation === "row") {
                rowHdrs = this._getJSSheetRowHeaderContent(val.sheetIndex);
                (val.action === "show") ? this._hideRow(val.hideRows[0], val.hideRows[val.hideRows.length - 1], "isRHide") : this._showRow(val.hideRows[0], val.hideRows[val.hideRows.length - 1], "isRHide");
                for (i = 0, len = val.remBRows.length; i < len; i++) {
                    this.addClass(rowHdrs.find('td')[val.remBRows[i]], "e-hrow");
                    this.XLEdit._updateDataContainer({ rowIndex: val.remBRows[i], colIndex: 0 }, { dataObj: { hRow: true } });
                }
                for (i = 0, len = val.addBRows.length; i < len; i++) {
                    this._removeClass(rowHdrs.find('td')[val.addBRows[i]], "e-hrow");
                    this._dataContainer.sheets[val.sheetIndex][val.addBRows[i]][0]["hRow"];
                }
                this.setActiveCell(val.bSelect.startRow, 0);
                (val.bSelect.startRow === val.bSelect.endRow) ? this.XLSelection.selectRow(val.bSelect.startRow, val.sheetIndex) : this.XLSelection.selectRows(val.bSelect.startRow, val.bSelect.endRow, val.sheetIndex);
                var addBRows = val.addBRows;
                val.addBRows = val.remBRows;
                val.remBRows = addBRows;
            }
            else {
                colHdrs = this._getJSSheetHeader(val.sheetIndex).find('th');
                (val.action === "show") ? this._hideColumn(val.hideCols[0], val.hideCols[val.hideCols.length - 1]) : this._showColumn(val.hideCols[0], val.hideCols[val.hideCols.length - 1]);
                for (i = 0, len = val.remBCols.length; i < len; i++) {
                    this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: val.remBCols[i] }, { dataObj: { hCol: true } });
                    this.addClass(colHdrs[val.remBCols[i]], "e-hcol");
                }
                for (i = 0, len = val.addBCols.length; i < len; i++) {
                    this._removeClass(colHdrs[val.addBCols[i]], "e-hcol");
                    this._dataContainer.sheets[val.sheetIndex][0][val.addBCols[i]]["hCol"];
                }
                this.setActiveCell(0, val.bSelect.startCol);
                (val.bSelect.startCol === val.bSelect.endCol) ? this.XLSelection.selectColumn(val.bSelect.startCol, val.sheetIndex) : this.XLSelection.selectColumns(val.bSelect.startCol, val.bSelect.endCol, val.sheetIndex);
                var addBCols = val.addBCols;
                val.addBCols = val.remBCols;
                val.remBCols = addBCols;
            }
            val.action = (val.action === "show") ? "hide" : "show";
            var bSelect = val.bSelect;
            val.bSelect = val.aSelect;
            val.aSelect = bSelect;
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
        },

        _undoForSort: function (val) {
            var prevIcon, fSpan, fCol, filterColl = this.getSheet(val.sheetIndex)._filterColl;
            if (val.operation === "unsort") {
                this._dupDetails = true;
                this.XLComment.deleteComment(val.range, null, true, null);
                this._removeHyperlink(null, null, true, val.range);
                this.clearRangeData(val.range, ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "comment", "hyperlink", "format"], null, true);
                this.XLFormat.removeStyle(val.range, { cellStyle: true, tableStyle: true, format: true, skipHiddenRow: true });
                this.XLEdit.updateCellWithContainer(val.rangeData, val.range, val.sheetIndex, true);
                this.XLSort._refreshRowHeight(val.range, val.rangeData);
                this._dupDetails = false;
                val.operation = "sort";
            }
            else {
                this.XLSort._isSortByFilter = val.isSortByFilter;
                this.XLSort.sortByRange(val.range, val.columnName, val.direction);
                val.operation = "unsort";
            }
            if (val.isSortByFilter) {
                for (var i = 0; i < val.filterIcons.length; i++) {
                    fCol = filterColl[val.filterIcons[i].rowIdx][val.filterIcons[i].colIdx];
                    if (fCol.status.indexOf("-asc") > 1)
                        fCol.status = fCol.status.replace("-asc", val.filterIcons[i].prevIcon);
                    else if (fCol.status.indexOf("-dsc") > 1)
                        fCol.status = fCol.status.replace("-dsc", val.filterIcons[i].prevIcon);
                    else
                        fCol.status = fCol.status + val.filterIcons[i].prevIcon;
                    if (this._isRowViewable(val.sheetIndex, val.filterIcons[i].rowIdx)) {
                        fSpan = this.getCell(val.filterIcons[i].rowIdx, val.filterIcons[i].colIdx).find(".e-filterspan")[0];
                        if (fSpan.className.indexOf("-asc") > 1)
                            fSpan.className = fSpan.className.replace("-asc", val.filterIcons[i].prevIcon);
                        else if (fSpan.className.indexOf("-dsc") > 1)
                            fSpan.className = fSpan.className.replace("-dsc", val.filterIcons[i].prevIcon);
                        else {
                            if (fSpan.className.indexOf("e-ssfiltered") > -1)
                                fSpan.className = fSpan.className.replace("e-ssfiltered", "e-ssfiltered" + val.filterIcons[i].prevIcon);
                            else
                                fSpan.className = fSpan.className.replace("e-ssfilter", "e-ssfilter" + val.filterIcons[i].prevIcon);
                        }
                    }
                    prevIcon = val.filterIcons[i].prevIcon;
                    val.filterIcons[i].prevIcon = val.filterIcons[i].currIcon;
                    val.filterIcons[i].currIcon = prevIcon;
                }
            }
        },

        _undoForSortByColor: function (val) {
            var rng = val.range, pData = val.prev.data, colIdx = this._generateColCount(val.columnName) - 1;
            this.XLComment.deleteComment(rng, null, true, null);
            this._isSort = true;
            this._dupDetails = true;
            this._removeHyperlink(null, null, true, rng);
            this._isSort = false;
            this._dupDetails = false;
            this.clearRangeData(rng, ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "comment", "hyperlink", "format"], null, true);
            this.XLFormat.removeStyle(rng, { cellStyle: true, tableStyle: true, format: true, skipHiddenRow: true });
            this.XLEdit.updateCellWithContainer(pData, rng, val.sheetIndex, true);
            if (val.oprType.indexOf("Put") < 0) {
                var filterSpan = this.getCell(rng[0] - 1, colIdx).find(".e-filterspan");
                if (filterSpan.length > 0)
                    filterSpan[0].className = filterSpan[0].className.replace(val.cur.icon, val.prev.icon);
            }
            this._swapVal(val);
        },

        _undoForStyle: function (val) {
            this.XLFormat.updateUniqueFormat(val.beforeFormat, val.range, val.opr);
            this._updateRangeStyle(val.range, val.beforeFormat);
            var s = this.changePosition(val.beforeFormat, val.afterFormat);
            this._refreshRangeTRHght(this.getActiveSheetIndex(), val.range);
            val.beforeFormat = s[1];
            val.afterFormat = s[0];
            this._isUndoRedo = true;
            val.status = "undo-cellstyles";
        },

        _undoForTextWrap: function (val) {
            if (val.operation === "wrap") {
                this.setWrapText("unwrap", val.range);
                val.operation = "unwrap";
            }
            else {
                this.setWrapText("wrap", val.range);
                val.operation = "wrap";
            }
            this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
        },

        _undoForValidation: function (val) {
            var i, len, range = this.getRangeIndices(val.range);
            this.performSelection({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
            if (val.operation === "cl-hl-data") {
                this.XLValidate.highlightInvalidData(val.range);
                val.operation = "hl-data";
            }
            else if (val.operation === "apply-validation") {
                var selCells = val.selectedCell, rule, curRule, selected = [];
                for (i = 0, len = selCells.length; i < len; i++) {
                    curRule = this.XLEdit.getPropertyValue(selCells[i].rowIndex, selCells[i].colIndex, "rule");
                    rule = this.changePosition(selCells[i].prevRule, curRule);
                    val.selectedCell[i].prevRule = rule[1];
                    if (!ej.isNullOrUndefined(rule[0]))
                        this.XLEdit._updateDataContainer({ rowIndex: selCells[i].rowIndex, colIndex: selCells[i].colIndex }, { dataObj: { "rule": rule[0] } });
                    selected.push(selCells[i]);
                }
                if (ej.isNullOrUndefined(rule[0]))
                    this.clearRangeData(null, ["rule"], selected);
            }
            else if (val.operation === "hl-data") {
                this.XLValidate.clearHighlightedValData(val.range);
                val.operation = "cl-hl-data";
            }
            else {
                if (this._isUndo) {
                    for (i = 0, len = val.selectedCell.length; i < len; i++)
                        this.XLEdit._updateDataContainer({ rowIndex: val.selectedCell[i].rowIndex, colIndex: val.selectedCell[i].colIndex }, { dataObj: { "rule": val.selectedCell[i].rules } });
                    if (val.hlStatus)
                        this.XLValidate.highlightInvalidData(val.range);
                }
                else
                    this.XLValidate.clearDV(val.range);
            }
        },

        _applyCommentLink: function (cellObj, cell, rowIdx, colIdx) {
            var container = this._dataContainer, hldata, cFormatData = container.cFormatData, actCell, isViewed = false, sheetIdx = this.getActiveSheetIndex();
            if (this._isRowViewable(sheetIdx, cell.rowIndex)) {
                actCell = this.getCell(cell.rowIndex, cell.colIndex);
                isViewed = true;
                $(actCell).removeClass("e-redft e-yellowft e-greenft e-redf e-redt");
                if (actCell.hasClass("e-cformat")) {
                    actCell[0].style.color = "";
                    actCell[0].style.backgroundColor = "";
                    actCell.removeClass("e-cformat");
                }
            }
            if (cellObj) {
                var value2 = this.isNumber(cellObj.value2) ? container.sharedData[cellObj.value2] : cellObj.value2;
                cellObj = $.extend(true, {}, cellObj);
                this.XLEdit._updateCellValue(cell, value2);
                if ("cFormatRule" in cellObj) {
                    var cFormatRule = cellObj.cFormatRule, splitStr;
                    for (var m = 0, rLen = cFormatRule.length; m < rLen; m++) {
                        splitStr = cFormatData[m].split("_");
                        this.XLCFormat._cFormat(splitStr[0], splitStr[2], splitStr[3], splitStr[4], splitStr[5], null, null, [rowIdx, colIdx, rowIdx, colIdx]);
                    }
                }
                if ("hyperlink" in cellObj) {
                    hldata = cellObj.hyperlink;
                    if (isViewed) {
                        if (hldata && !hldata.webAddr)
                            actCell.html(ej.buildTag("a.e-hyperlinks", this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, 'value2', sheetIdx), ""));
                        else
                            actCell.html(ej.buildTag("a.e-hyperlinks", this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, 'value2', sheetIdx), "", { href: hldata.webAddr, target: "_blank" }));
                    }
                }
                if ("comment" in cellObj) {
                    isViewed && actCell.removeClass("e-commentcell");
                    this.XLComment.setComment([cell.rowIndex, cell.colIndex, cell.rowIndex, cell.colIndex], null, false);
                }
            }
        },

        changePosition: function (first, second) {
            var swap = [];
            swap.push(second);
            swap.push(first);
            ej.swap(swap, 0, 1);
            return swap;
        },

        _addValidationRule: function (totRules, rule) {
            var dupRule = [];
            $.extend(true, dupRule, totRules);
            for (var i = 0, len = totRules.length; i < len; i++)
                if (totRules[i].customVal !== rule.customVal && totRules[i].required !== rule.required && totRules[i].Number !== rule.number)
                    dupRule.push(rule);
            totRules = dupRule;
            return totRules;
        },

        _addCondFormatRule: function (totRules, rule) {
            var avble = false, dupRule = [];
            $.extend(true, dupRule, totRules);
            for (var i = 0, len = totRules.length; i < len; i++) {
                rule = rule.indexOf("true") > -1 ? rule.replace("_true", "") : rule.replace("_false", "");
                if (totRules[i] === rule) {
                    avble = true;
                    break;
                }
            }
            (!avble) && dupRule.push(rule);
            totRules = dupRule;
            return totRules;
        },

        getCellClass: function (curCell) {
            var regx = this._formatRegx;
            var currClass = curCell && (curCell.className.indexOf("e-format") > -1) ? curCell.className.match(regx)[0] : "";
            return currClass;
        },


        //Insert Or Delete Rows and Columns
        _renderInsertDeleteDialog: function () {
            var dlgId = this._id + "_insertdeletedlg", $dlg, $content, $okBtn, $canBtn, $btndiv, $btnctn;
            $dlg = ej.buildTag("div#" + dlgId, "", { display: "none" });
            $content = ej.buildTag("div#" + dlgId + "_content.e-dlg-fields e-dlgctndiv");
            $dlg.append($content);
            $btndiv = ej.buildTag("div#" + dlgId + "_btndiv.e-dlg-btnfields");
            $btnctn = ej.buildTag("div");
            $okBtn = ej.buildTag("input#" + dlgId + "_okbtn", "", { "margin-left": 4 });
            $canBtn = ej.buildTag("input#" + dlgId + "_cantn");
            $okBtn.ejButton({ text: this._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._insertDeleteOk, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: this._getLocStr("Cancel"), click: ej.proxy(this._insertDeleteCancel, this), showRoundedCorner: true, width: 60 });
            $btndiv.append($btnctn.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({ showOnInit: false, enableModal: true, enableResize: false, allowKeyboardNavigation: false, width: "auto", height: "auto", cssClass: "e-ss-dialog e-" + this._id + "-dlg e-ss-insdeldlg", minWidth: 150 });
        },

        _refreshInsDelDialog: function (operation) {
            var enableBtn, $dlg = $("#" + this._id + "_insertdeletedlg"), $content, text;
            $dlg.ejDialog({ title: this._getLocStr(operation) });
            $dlg.ejDialog("open");
            this._insDelStatus = operation.toLowerCase();
            $content = $("#" + $dlg[0].id + "_content");
            text = (this._insDelStatus === "insert") ? ["ShiftRight", "ShiftBottom", "EntireRow", "EntireColumn"] : ["ShiftLeft", "ShiftUp", "EntireRow", "EntireColumn"];
            $content.children().empty();
            this._createRadioButton($dlg, $content, text);
            enableBtn = (this._insDelStatus === "insert") ? "ShiftBottom" : "ShiftLeft";
            $("#" + $dlg[0].id + "_" + enableBtn).ejRadioButton({ checked: true });
            $dlg.find("input[type='submit']:first").focus();
        },

        _createRadioButton: function ($dlg, $content, text) {
            var input, lbl, table, tr1, td1;
            table = ej.buildTag("table");
            for (var i = 0, len = text.length; i < len; i++) {
                tr1 = ej.buildTag("tr");
                td1 = ej.buildTag("td");
                lbl = ej.buildTag("label", this._getLocStr(text[i]), { "padding-bottom": 4 }, { "for": $dlg[0].id + "_" + text[i] });
                input = ej.buildTag("input#" + $dlg[0].id + "_" + text[i], "", {}, { type: "radio", name: "inserdelete" });
                td1.append(input);
                tr1.append(td1);
                td1 = ej.buildTag("td");
                td1.append(lbl);
                input.ejRadioButton({ size: "medium" });
                tr1.append(td1);
                table.append(tr1);
            }
            $content.append(table);
        },

        _getSelectedOption: function (text) {
            var dlgId = this._id + "_insertdeletedlg", selIdx = 0;
            for (var i = 0; i < 4; i++) {
                var rbtn = $("#" + dlgId + "_" + text[i]).data("ejRadioButton");
                if (rbtn.model.checked) {
                    selIdx = i;
                    break;
                }
            }
            return selIdx;
        },

        _insertDeleteOk: function () {
            this._isUndo = false, this._isUndoRedo = false;
            this._delCells = [];
            this._deletedText = [];
            this._removeMergeColl = [];
            this._deletedDimension = [];
            var text, selIdx, sheetIdx = this.getActiveSheetIndex(),
                startCell = this.model.sheets[sheetIdx]._selectedCells[0], endCell = this.model.sheets[sheetIdx]._selectedCells[this.model.sheets[sheetIdx]._selectedCells.length - 1];
            if (this._insDelStatus.indexOf("insert") > -1) {
                text = ["ShiftRight", "ShiftBottom", "EntireRow", "EntireColumn"];
                selIdx = this._getSelectedOption(text);
                if (text[selIdx].indexOf("ShiftRight") > -1)
                    this.insertShiftRight(startCell, endCell);
                else if (text[selIdx].indexOf("ShiftBottom") > -1)
                    this.insertShiftBottom(startCell, endCell);
                else if (text[selIdx].indexOf("EntireRow") > -1)
                    this.insertEntireRow(startCell.rowIndex, endCell.rowIndex);
                else
                    this.insertEntireColumn(startCell.colIndex, endCell.colIndex);
            }
            else {
                text = ["ShiftLeft", "ShiftUp", "EntireRow", "EntireColumn"];
                selIdx = this._getSelectedOption(text);
                if (text[selIdx].indexOf("ShiftLeft") > -1)
                    this.deleteShiftLeft(startCell, endCell);
                else if (text[selIdx].indexOf("ShiftUp") > -1)
                    this.deleteShiftUp(startCell, endCell);
                else if (text[selIdx].indexOf("EntireRow") > -1)
                    this.deleteEntireRow(startCell.rowIndex, endCell.rowIndex);
                else
                    this.deleteEntireColumn(startCell.colIndex, endCell.colIndex);
            }
            $("#" + this._id + "_insertdeletedlg").ejDialog("close");
            var sheetChart = this.model.sheets[this.model.activeSheetIndex].shapeMngr.chart;
            for (var i = 0; i < sheetChart.length; i++)
                this.XLChart._refreshChart(sheetChart[i]);
        },

        _insertDeleteCancel: function () {
            $("#" + this._id + "_insertdeletedlg").ejDialog("close");
        },

        _undoredoDetails: function (sheetIndex, startCell, endCell, reqType, action) {
            var details = { sheetIndex: sheetIndex, startCell: startCell, endCell: endCell, reqType: reqType, action: action, delCells: $.extend(true, [], this._delCells), text: this._deletedText, deletedDimension: this._deletedDimension, removeMerge: this._removeMergeColl, fRow: $.extend(true, {}, this._fRow), fCol: $.extend(true, {}, this._fCol), nmref: this._nmRef, prevCellTypes: this._prevCellTypes, curCellTypes: this._curCellTypes, prevChartDetails: this._prevChartDetails, curChartDetails: this._curChartDetails, prevValData: this._prevValData, curValData: this._curValData };
            if (!(this.isImport || this.model.isImport) && !this._isExport && !this._intrnlReq) {
                this._completeAction(details);
                this._trigActionComplete(details);
            }
            this._removeMergeColl = [];
            this._delCells = [];
            this._nmRef = [];
            this._fRow.fRowCnt = 0;
            this._fCol.fColCnt = 0;
            this._fRow.rowAdj = true;
            this._fCol.colAdj = true;
        },

        _getRangeFrmFormula: function (formula) {
            var pAlpha = formula.substring(formula.indexOf("(") + 1, formula.indexOf(")")), regx = new RegExp('^\\b[a-zA-Z][0-9]*:[a-zA-Z][0-9]*\\b$', 'g');
            if (regx.test(pAlpha))
                return pAlpha;
            else if (pAlpha.indexOf(',') > 1)
                if (regx.test(pAlpha.split(',')[1]))
                    return pAlpha.split(',')[1];
                else if (regx.test(pAlpha.replace(',', ':')))
                    return pAlpha.replace(',', ':');
        },

        _refreshNamedRange: function (count, status, startIdx, isRow) {
            var i, j, diff, diff1, endIdx, refersto, name, nmRange, nmRangeObj, isRngCalculated, nmStartIdx, nmEndIdx, sheetIdx = this.getActiveSheetIndex(), nameMngr = this.model.nameManager, nmlen = nameMngr.length, rfrToDsRngArr, rfrToDsRng, rfrToDsRngLn, selCellRng;
            for (i = 0; i < nmlen; i++) {
                rfrToDsRng = nameMngr[i].refersto.split(",");
                rfrToDsRngArr = [];
                for (j = 0, rfrToDsRngLn = rfrToDsRng.length; j < rfrToDsRngLn; j++) {
                    if (j == 0)
                        nmRangeObj = this.XLRibbon._getAddrFromDollarAddr(rfrToDsRng[j].replace("=", ""));
                    else
                        nmRangeObj = this.XLRibbon._getAddrFromDollarAddr(rfrToDsRng[j].trim());
                    nmRange = this._getRangeArgs(nmRangeObj[1]);
                    endIdx = startIdx + count - 1;
                    refersto = "";
                    isRngCalculated = false;
                    name = nameMngr[i].name.toUpperCase();
                    nmStartIdx = isRow ? nmRange[0] : nmRange[1];
                    nmEndIdx = isRow ? nmRange[2] : nmRange[3];
                    selCellRng = this._getSelectedCells().range;
                    if (status == "shiftBottom" || status == "shiftUp") {
                        if (selCellRng[0] == nmRange[0] && selCellRng[1] == nmRange[1])
                            isRow = true;
                        else
                            isRow = false;
                    }
                    if (sheetIdx === nmRangeObj[0] && startIdx <= nmEndIdx) {
                        if (status == "insertRow" || status == "insertColumn" || status == "shiftRight" || status == "shiftBottom") {
                            diff = (startIdx <= nmStartIdx) ? nmStartIdx + count : nmStartIdx;
                            diff1 = nmEndIdx + count;
                            isRngCalculated = true;
                        }
                        else if (status == "deleteRow" || status == "deleteColumn" || status == "shiftLeft" || status == "shiftUp") {
                            if (endIdx < nmStartIdx) {
                                diff = nmStartIdx - count;
                                diff1 = nmEndIdx - count;
                            }
                            else if (startIdx > nmStartIdx && endIdx <= nmEndIdx) {
                                diff = nmStartIdx;
                                diff1 = nmEndIdx - count;
                            }
                            else {
                                this._nmRef[name] = nameMngr[i].refersto;
                                refersto = "#REF!";
                            }
                        }
                        if (!refersto)
                            refersto = isRow ? this._getDollarAlphaRange([diff, nmRange[1], diff1, nmRange[3]], true) : this._getDollarAlphaRange([nmRange[0], diff, nmRange[2], diff1], true);
                    }
                    if (this._isUndo && (status == "insertRow" || status == "insertColumn" || status == "shiftRight" || status == "shiftBottom")) {
                        if (!ej.isNullOrUndefined(this._nmRef[name])) {
                            refersto = this._nmRef[name];
                            delete this._nmRef[name];
                        }
                        else if (nmStartIdx == nmEndIdx && nmStartIdx > -1 && !isRngCalculated) {
                            diff = nmStartIdx;
                            diff1 = nmEndIdx + count;
                            refersto = isRow ? this._getDollarAlphaRange([diff, nmRange[1], diff1, nmRange[3]], true) : this._getDollarAlphaRange([nmRange[0], diff, nmRange[2], diff1], true);
                        }
                    }
                    if (name && refersto) {
                        rfrToDsRngArr.push(j == 0 ? "=" + refersto : refersto);
                        if (nameMngr[i].scope.toUpperCase() != this._getLocStr("Workbook").toUpperCase())
                            name = nameMngr[i].scope.toUpperCase() + "!" + name;
                        this._calcEngine.removeNamedRange(name);
                        this._calcEngine.addNamedRange(name, refersto.replace("=", ""));
                    }
                }
                nameMngr[i].refersto = rfrToDsRngArr.join(",");
            }
        },

        _refreshFormula: function (rowIdx, colIdx, count, status, type, startIdx) {
            var sheetIdx = this.getActiveSheetIndex(), diff, diff1, val = this.XLEdit.getPropertyValue(rowIdx, colIdx, "value"), pAlpha, nAlpha, range, cellArgs, actSheet = this.getSheet(sheetIdx), deleteIdxs = [], i, splitFormula, fArg, ridx, hasREFVal = false, pVal;
            if (this._isUndo && (this._formulaChanged.pop() === "true"))
                return;
            if (this.isFormula(val)) {
                if (status === "delete") {
                    for (i = 1; i <= count; i++)
                        deleteIdxs.push(startIdx + i);
                }
                splitFormula = this.XLDragFill._parseFormula(val);
                for (i = 0; i < splitFormula.length; i++) {
                    fArg = splitFormula[i].trim();
                    if (this._isCellReference(fArg)) {
                        pVal = i && splitFormula[i - 1].trim();
                        if (pVal && pVal[pVal.length - 1] == "!") {
                            pVal = pVal.replace(/['!]/g, "");
                            if (pVal != actSheet.sheetInfo.text)
                                continue;
                        }
                        range = this.getRangeIndices(fArg);
                        diff = (type === "column") ? (status === "insert") ? range[3] + count : range[3] - count : (status === "insert") ? range[2] + count : range[2] - count;
                        diff1 = (type === "column") ? (status === "insert") ? range[1] + count : range[1] - count : (status === "insert") ? range[0] + count : range[0] - count;
                        (type === "column") ? (startIdx > range[1] && (diff1 = range[1])) : (startIdx > range[0] && (diff1 = range[0]));
                        (type === "column") ? (startIdx > range[3] && (diff = range[3])) : (startIdx > range[2] && (diff = range[2]));
                        if (diff1 > -1)
                            nAlpha = (type === "column") ? this._getAlphaRange(sheetIdx, range[0], diff1, range[2], diff) : this._getAlphaRange(sheetIdx, diff1, range[1], diff, range[3]);
                        else {
                            nAlpha = "#REF!";
                            hasREFVal = true;
                        }
                        if (status === "delete") {
                            ridx = parseInt(type === "row" ? fArg.replace(/[A-Z]/g, "") : this._generateColCount(fArg.replace(/[0-9]/g, "")));
                            if (deleteIdxs.indexOf(ridx) > -1) {
                                nAlpha = "#REF!";
                                hasREFVal = true;
                            }
                        }
                        splitFormula[i] = nAlpha;
                    }
                    else if (fArg == "#REF!")
                        hasREFVal = true;
                }
                if (hasREFVal && !this._isUndo)
                    this._ref.push(val);
                val = (hasREFVal && this._isUndo) ? this._ref.pop() : "=" + splitFormula.join('');
                cellArgs = new ValueChangedArgs(rowIdx + 1, colIdx + 1, this.XLEdit._parseSheetRef(val));
                this._intrnlUpdate = true;
                this._calcEngine.valueChanged(actSheet.sheetInfo.value, cellArgs);
                this.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { value: val } });
                this._intrnlUpdate = false;
                this._applyFormula(sheetIdx, rowIdx, colIdx);
                !this._isUndo && ((pAlpha === nAlpha) ? this._formulaChanged.push("true") : this._formulaChanged.push("false"));
                return true;
            }
        },

        _applyFormula: function (sheetIdx, rowIdx, colIdx) {
            var sheet = this.getSheet(sheetIdx), rowColl = sheet._formulaCollection[rowIdx];
            if (ej.isNullOrUndefined(rowColl))
                sheet._formulaCollection[rowIdx] = {};
            sheet._formulaCollection[rowIdx][colIdx] = this._calcEngine.getFormulaInfoTable().getItem(this._calcEngine.cell);
        },

        _clearFormula: function (i, j) {
            var cellRef, formulaInfo, formulaIdx, formulaColl, calcEngine = this.getCalcEngine(), sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), val = this.XLEdit.getPropertyValue(i, j, "value");
            if (this.isFormula(val)) {
                //clear formula for the particular cell
                formulaInfo = sheet._formulaCollection[i][j];
                formulaColl = calcEngine.getFormulaInfoTable().values();
                formulaIdx = formulaColl.indexOf(formulaInfo);
                cellRef = calcEngine.getFormulaInfoTable().keys()[formulaIdx];
                formulaColl.splice(formulaIdx, 1);
                calcEngine.getFormulaInfoTable().remove(cellRef);
                calcEngine.clearFormulaDependentCells(cellRef);
                delete sheet._formulaCollection[i][j];
            }
        },

        _refreshValAndCF: function (i, j, vRule, cRule, rCount, cCount, action) {
            var cFormatRule, sheetIdx = this.getActiveSheetIndex(), container = this._dataContainer.sheets[sheetIdx], cFormatData = this._dataContainer.cFormatData, rule,
                oldRng, newRng, rngIndices, dupRuleIdx, dupRule;
            if (this.isUndefined(vRule) || this.isUndefined(cRule))
                delete container[i][j];
            else {
                if (!this.isUndefined(vRule))
                    container[i][j] = { rule: vRule };
                if (!this.isUndefined(cRule)) {
                    cFormatRule = cFormatData[cRule[0]];
                    if (cFormatRule.indexOf("true") > -1) {
                        dupRule = cFormatRule.replace("true", "false");
                        dupRuleIdx = cFormatData.indexOf();
                    }
                    else {
                        dupRule = cFormatRule.replace("false", "true");
                        dupRuleIdx = cFormatData.indexOf(dupRule);
                    }
                    oldRng = cFormatRule.split("_")[5];
                    rngIndices = this.getRangeIndices(oldRng);
                    if (action.indexOf("Bottom") > -1 || action.indexOf("Row") > -1)
                        rngIndices[2] = rngIndices[2] + rCount;
                    else
                        rngIndices[3] = rngIndices[3] + cCount;
                    newRng = this._getAlphaRange(sheetIdx, rngIndices[0], rngIndices[1], rngIndices[2], rngIndices[3])
                    cFormatRule = cFormatRule.replace(oldRng, newRng);
                    dupRule = dupRule.replace(oldRng, newRng);
                    cFormatData[cRule[0]] = cFormatRule;
                    cFormatData[dupRuleIdx] = dupRule;
                    rule = cFormatRule.replace("true", "false");
                    if (cFormatData.indexOf(rule) < 0)
                        cFormatData.push(rule);
                    container[i][j] = { cFormatRule: [cFormatData.indexOf(rule)] };
                }
            }
        },

        _refreshRows: function (sheetIdx) {
            var rowhdrrows = this._getRowHdrTBody(sheetIdx).find("tr"), contentrows = this._getContTBody(sheetIdx).find("tr");
            this.setRows([rowhdrrows, contentrows], sheetIdx);
        },

        _refreshFilterColl: function (sheetIdx, stIdx, count, operation, action) {
            var colDiff, i, rIdx, j, sheet = this.getSheet(sheetIdx), filterColl = sheet._filterColl, fCollKeys = this.getObjectKeys(filterColl), fCollCKeys, filterVal, delIdx, addIdx;
            if (operation === "row") {
                if (action === "insert") {
                    for (rIdx = fCollKeys.length - 1; rIdx >= 0; rIdx--) {
                        i = parseInt(fCollKeys[rIdx]);
                        if (i >= stIdx) {
                            sheet._filterColl[i + count] = $.extend(true, {}, sheet._filterColl[i]);
                            delete sheet._filterColl[i];
                        }
                    }
                }
                else {
                    for (rIdx = 0; rIdx < fCollKeys.length; rIdx++) {
                        i = parseInt(fCollKeys[rIdx]);
                        if (i >= stIdx) {
                            sheet._filterColl[i - count] = $.extend(true, {}, sheet._filterColl[i]);
                            delete sheet._filterColl[i];
                        }
                    }
                }
            }
            else {
                var isInside, isSameTable = false, isVScroll = this.model.scrollSettings.allowVirtualScrolling;
                for (rIdx = 0; rIdx < fCollKeys.length; rIdx++) {
                    i = parseInt(fCollKeys[rIdx]);
                    fCollCKeys = this.getObjectKeys(sheet._filterColl[i]);
                    if (action === "insert") {
                        isInside = false;
                        for (var cIdx = fCollCKeys.length - 1; cIdx >= 0; cIdx--) {
                            colDiff = fCollCKeys[cIdx] - fCollCKeys[cIdx - ((cIdx === 0) ? 0 : 1)];
                            if (colDiff === 1 || colDiff === 0)
                                isSameTable = true;
                            else
                                isSameTable = false;
                            j = parseInt(fCollCKeys[cIdx]);
                            if (j >= stIdx || isInside) {
                                isInside = true;
                                filterVal = sheet._filterColl[i][j];
                                if (filterVal.status.indexOf("filtered") > -1) {
                                    delIdx = $.inArray(this._generateHeaderText(j + 1), sheet._filteredColumns);
                                    if (delIdx > -1)
                                        sheet._filteredColumns.splice(delIdx, 1);
                                    addIdx = $.inArray(this._generateHeaderText(j + count + 1), sheet._filteredColumns);
                                    if (addIdx < 0)
                                        sheet._filteredColumns.push(this._generateHeaderText(j + count + 1));
                                }
                                sheet._filterColl[i][j + count] = $.extend(true, {}, sheet._filterColl[i][j]);
                                if (!isVScroll && !this._isUndoRedo)
                                    delete sheet._filterColl[i][j];
                                else {
                                    if (isSameTable) {
                                        sheet._filterColl[i][j].status = "e-ssfilter";
                                        this.XLEdit._updateDataContainer({ rowIndex: i, colIndex: j }, { dataObj: { isFilterHeader: true, filterState: "filter", isFilterVisible: true }, sheetIdx: sheetIdx })
                                    }
                                    else
                                        delete sheet._filterColl[i][j];
                                }
                                if (!isSameTable)
                                    isInside = false;
                            }
                        }
                    }
                    else {
                        for (cIdx = 0; cIdx < fCollCKeys.length; cIdx++) {
                            j = parseInt(fCollCKeys[cIdx]);
                            if (j >= stIdx) {
                                filterVal = sheet._filterColl[i][j];
                                if (filterVal.status.indexOf("filtered") > -1) {
                                    delIdx = $.inArray(this._generateHeaderText(j + 1), sheet._filteredColumns);
                                    if (delIdx > -1)
                                        sheet._filteredColumns.splice(delIdx, 1);
                                    addIdx = $.inArray(this._generateHeaderText(j - count + 1), sheet._filteredColumns);
                                    if (addIdx < 0)
                                        sheet._filteredColumns.push(this._generateHeaderText(j - count + 1));
                                }
                                (j - count >= 0) && (sheet._filterColl[i][j - count] = $.extend(true, {}, sheet._filterColl[i][j]));
                                delete sheet._filterColl[i][j];
                            }
                        }
                    }
                }
            }
        },

        _refreshDataContainer: function (sIdx, value) {
            var stRow, enRow, stCol, enCol, vRule, cRule, i, j, k, len, ln, currText, remText, maxCol = 0, lt = 0, nContainer, maxRow, freezeRow, freezeCol, topIdx, leftIdx, hiddenHgt = 0, hiddenWth = 0, container = this._dataContainer.sheets[sIdx], cCount, rCount, sCol, remCells, rmColl, columns, count, picture, chart, index,
                isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling, sheet = this.getSheet(sIdx), usedRange = sheet.usedRange, fRowIdx = this.getFrozenRows(), fColIdx = this.getFrozenColumns(), currCell, remCell, isFormula, cellRange, cellRngValue, obj, valRange = this._dataContainer.valData, range, s, splitData, rng;
            maxRow = parseInt(this.getObjectKeys(container)[this.getObjectLength(container) - 1]), rowHtColl = sheet.rowsHeightCollection, colWtColl = sheet.columnsWidthCollection;
            for (i = 0; i <= maxRow; i++) {
                if (!ej.isNullOrUndefined(container[i])) {
                    nContainer = this.getObjectKeys(container[i]);
                    lt = parseInt(nContainer[nContainer.length - 1]);
                    (lt > maxCol) && (maxCol = lt);
                }
            }
            sCol = (value.startCol <= maxCol) ? value.colCount + value.startCol : maxCol - 1;
            cCount = (value.status.indexOf("shift") > -1) ? sCol : maxCol - 1;
            rCount = (value.status.indexOf("shift") > -1) ? value.rowCount + value.startRow : maxRow;
            stRow = value.startRow; enRow = (value.startRow + value.rowCount) - 1;
            stCol = value.startCol; enCol = (value.startCol + value.colCount) - 1;
            if (this._isFrozen(fRowIdx - 1) && fRowIdx > stRow) {
                for (i = sheet._frozenRows - 1; i < sheet._ftopRowIdx; i++)
                    hiddenHgt += sheet.rowsHeightCollection[i];
                this._scrollContent({ y: -hiddenHgt });
            }
            if (this._isFrozen(fColIdx - 1) && fColIdx > stCol) {
                for (i = sheet._frozenColumns - 1; i < sheet._fleftColIdx; i++)
                    hiddenWth += sheet.columnsWidthCollection[i];
                this._scrollContent({ x: -hiddenWth });
            }
            switch (value.status) {
                case "insertRow":
                    this._refreshNamedRange(value.rowCount, value.status, value.startRow, true);
                    for (i = maxRow, len = value.startRow; i >= len; i--) {
                        if (!ej.isNullOrUndefined(container[i])) {
                            container[i + value.rowCount] = $.extend(true, {}, container[i]);
                            if (!ej.isNullOrUndefined(container[i + value.rowCount])) {
                                columns = this.getObjectKeys(container[i + value.rowCount]);
                                for (j = 0, ln = columns.length; j < ln; j++) {
                                    this._clearFormula(i, columns[j]);
                                    //refresh Validation
                                    if (this._checkIndicesInContainer(sIdx, i, columns[j], "wrap")) {
                                        if(sheet._wrapColl[i]) {
                                            this._wrapCollection(i + value.rowCount, columns[j], sheet._wrapColl[i][columns[j]], sIdx);
                                            delete sheet._wrapColl[i][columns[j]];
                                        }   
                                    }
                                    if (i >= stRow && i <= enRow) {
                                        vRule = this._checkIndicesInContainer(sIdx, stRow, columns[j], "rule") ? (this._dataContainer.sheets[sIdx][stRow][columns[j]]["rule"]) : undefined;
                                        cRule = this._checkIndicesInContainer(sIdx, stRow, columns[j], "cFormatRule") ? (this._dataContainer.sheets[sIdx][stRow][columns[j]]["cFormatRule"]) : undefined;
                                        this._refreshValAndCF(i, columns[j], vRule, cRule, value.rowCount, 0, value.status);
                                        if (!isVirtualScroll)
                                            !(stRow < 1) && this.addClass(this.getCell(i, columns[j])[0], this.XLFormat.getFormatClass(this.getCell(stRow - 1, columns[j])[0].className, false));
                                    }
                                    else
                                        delete container[i][columns[j]];
                                    if (this.model.allowSparkline)
                                        this.XLSparkline._refreshSparklineForInsDel(i + value.rowCount, parseInt(columns[j]), value.rowCount, "row", "insert", sIdx);
                                    isFormula = this._refreshFormula(i + value.rowCount, parseInt(columns[j]), value.rowCount, "insert", "row", value.startRow, false);
                                    !isFormula && this.XLEdit._refreshCalcEngine(i + value.rowCount, parseInt(columns[j]));
                                }
                            }
                            (this.getObjectLength(container[i]) < 1) && delete container[i];
                        }
                        rowHtColl[i + value.rowCount] = rowHtColl[i];
                        rowHtColl[i] = this.model.rowHeight;
                        sheet._rowIdxColl[i + value.rowCount] = sheet._rowIdxColl[i] + value.rowCount;
                    }
                    this._refreshHideRowColCollection(sheet.hideRowsCollection, value.startRow, value.rowCount, "row", "insert")
                    this._refreshFilterColl(sIdx, value.startRow, value.rowCount, "row", "insert");
                    if (this._isUndo && this._delCells.length > 0) {
                        remCells = this._delCells;
                        count = remCells[remCells.length - 1].row - remCells[0].row;
                        for (i = 0, len = remCells.length; i < len; i++) {
                            container[remCells[i].row] = remCells[i].value;
                            columns = this.getObjectKeys(container[remCells[i].row]);
                            for (j = 0, ln = columns.length; j < ln; j++) {
                                this._refreshFormula(remCells[i].row, parseInt(columns[j]), count, "insert", "row", "", false);
                                this.XLEdit._refreshCalcEngine(remCells[i].row, parseInt(columns[j]));
                                if (this._checkIndicesInContainer(sIdx, remCells[i].row, columns[j], "wrap"))
                                    this._wrapCollection(remCells[i].row, columns[j], this._delWrapColl[remCells[i].row][columns[j]], sIdx);
                            }
                            rowHtColl[remCells[i].row] = remCells[i].height;
                        }
                        this._delWrapColl = {};
                    }
                    if (this.model.allowFreezing && this._isFrozen(fRowIdx) && (stRow < fRowIdx || (this._isUndo && this._fRow.fRowCnt > 0))) {
                        freezeRow = sheet.frozenRows + ((this._fRow.fRowCnt > 0) ? this._fRow.fRowCnt : value.rowCount);
                        freezeCol = sheet.frozenColumns;
                        this._fRow.fRowCnt = 0;
                        if (!this._fRow.rowAdj) {
                            freezeRow -= 1;
                            this._fRow.rowAdj = !this._fRow.rowAdj;
                        }
                        if (this._isFrozen(fColIdx)) {
                            this.XLFreeze.unfreezePanes();
                            this.XLFreeze.freezePanes(freezeRow, freezeCol);
                        }
                        else
                            this.XLFreeze.freezeRows(freezeRow);
                    }
                    //data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        for (s = 0, len = valRange.length; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            if ((value.startRow <= rng[2]) && (value.startCol <= rng[3])) {
                                if (value.startRow > rng[0]) {
                                    cellRngValue = value.startRow - rng[0];
                                    this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[0] + (cellRngValue - 1), rng[3]);
                                    this._highlightValidationRng(splitData, s, stRow + value.rowCount, rng[1], rng[2] + value.rowCount, rng[3]);
                                }
                                if (value.startRow <= rng[0])
                                    this._highlightValidationRng(splitData, s, rng[0] + value.rowCount, rng[1], rng[2] + value.rowCount, rng[3]);
                            }
                            this._curValData = $.extend(true, [], valRange);
                        }
                    }
                    // Cell Types
                    if (this._isUndo) {
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);   // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);   // sheet_refrshobj Redo
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        for (k = 0, len = sheet.cellTypes.length; k < len; k++) {
                            cellRange = this.getRangeIndices(sheet.cellTypes[k].range);
                            if ((value.startRow <= cellRange[2]) && (value.startCol <= cellRange[3])) {
                                if (value.startRow > cellRange[0]) {
                                    cellRngValue = value.startRow - cellRange[0];
                                    obj = { range: this.getAlphaRange(cellRange[0], cellRange[1], cellRange[0] + (cellRngValue - 1), cellRange[3]), settings: sheet.cellTypes[k].settings };
                                    sheet.cellTypes[sheet.cellTypes.length] = obj;
                                    sheet.cellTypes[k].range = this.getAlphaRange(stRow + value.rowCount, cellRange[1], cellRange[2] + value.rowCount, cellRange[3]);
                                }
                                if (value.startRow <= cellRange[0])
                                    sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0] + value.rowCount, cellRange[1], cellRange[2] + value.rowCount, cellRange[3]);
                            }
                            this._curCellTypes = $.extend(true, [], sheet.cellTypes);
                        }
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet._refrshObj
                    }
                    this.XLScroll._getRowHeights(sIdx, value.startRow);
                    break;
                case "insertColumn":
                    var isDeletCol = false;
                    this._refreshNamedRange(value.colCount, value.status, value.startCol, false);
                    for (i = 0; i <= rCount; i++) {
                        for (j = maxCol, len = value.startCol; j >= len; j--) {
                            picture = chart = null;
                            if (i == 0) {
                                if (!ej.isNullOrUndefined(container[0])) {
                                    if (!ej.isNullOrUndefined(container[0][j])) {
                                        if ("isCHide" in container[0][j]) {
                                            this._deleteRule(j, sIdx);
                                            isDeletCol = true;
                                        }
                                    }
                                }
                            }
                            if (!ej.isNullOrUndefined(container[i])) {
                                if (!ej.isNullOrUndefined(container[i][j])) {
                                    if (!ej.isNullOrUndefined(container[i][j + value.colCount])) {
                                        if (!ej.isNullOrUndefined(container[i][j + value.colCount].picture))
                                            picture = container[i][j + value.colCount].picture;
                                        if (!ej.isNullOrUndefined(container[i][j + value.colCount].chart))
                                            chart = container[i][j + value.colCount].chart;
                                    }
                                    container[i][j + value.colCount] = container[i][j];
                                    if (!ej.isNullOrUndefined(container[i][j].picture) || !ej.isNullOrUndefined(container[i][j].chart)) {
                                        if (!ej.isNullOrUndefined(container[i][j].picture))
                                            picture = container[i][j].picture;
                                        if (!ej.isNullOrUndefined(container[i][j].chart))
                                            chart = container[i][j].chart;
                                    }
                                    if (!ej.isNullOrUndefined(container[i][j + value.colCount])) {
                                        if (!ej.isNullOrUndefined(picture))
                                            container[i][j + value.colCount].picture = picture;
                                        if (!ej.isNullOrUndefined(chart))
                                            container[i][j + value.colCount].chart = chart;
                                    }
                                    if (container[i][j].wrap) {
                                        if(sheet._wrapColl[i]) {
                                            this._wrapCollection(i, j + value.colCount, sheet._wrapColl[i][j], sIdx);
                                            delete sheet._wrapColl[i][j];
                                        }
                                    }
                                }
                                this._clearFormula(i, j);
                                //refresh Validation
                                if (j >= stCol && j <= enCol) {
                                    vRule = this._checkIndicesInContainer(sIdx, i, stCol, "rule") ? (this._dataContainer.sheets[sIdx][i][stCol]["rule"]) : undefined;
                                    cRule = this._checkIndicesInContainer(sIdx, i, stCol, "cFormatRule") ? (this._dataContainer.sheets[sIdx][i][stCol]["cFormatRule"]) : undefined;
                                    this._refreshValAndCF(i, j, vRule, cRule, 0, value.colCount, value.status);
                                    if (!isVirtualScroll)
                                        (!stCol < 1) && this.addClass(this.getCell(i, j)[0], this.XLFormat.getFormatClass(this.getCell(i, stCol - 1)[0].className, false));
                                }
                                else
                                    delete container[i][j];
                                if (ej.isNullOrUndefined(container[i][j]) && (!ej.isNullOrUndefined(picture) || !ej.isNullOrUndefined(chart)))
                                    container[i][j] = {};
                                if (!ej.isNullOrUndefined(picture))
                                    container[i][j].picture = picture;
                                if (!ej.isNullOrUndefined(chart))
                                    container[i][j].chart = chart;
                                if (this.model.allowSparkline)
                                    this.XLSparkline._refreshSparklineForInsDel(i, j + value.colCount, value.colCount, "column", "insert", sIdx);
                                isFormula = this._refreshFormula(i, j + value.colCount, value.colCount, "insert", "column", value.startCol, false);
                                !isFormula && this.XLEdit._refreshCalcEngine(i, j + value.colCount);
                            }
                            if (i === 0) {
                                if (isDeletCol) {
                                    this._writeRule(j + value.colCount, sIdx);
                                    isDeletCol = false;
                                }
                                if (isVirtualScroll && !this._isUndoRedo) {
                                    colWtColl[j + value.colCount] = colWtColl[j];
                                    colWtColl[j] = sheet.columnWidth;
                                }
                            }
                        }
                    }
                    // data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        for (s = 0, len = valRange.length; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            if ((rng[0] == rng[2]) && (rng[1] == rng[3])) { // same row and column
                                if (value.startCol <= rng[1])
                                    this._highlightValidationRng(splitData, s, rng[0], rng[1] + value.colCount, rng[2], rng[3] + value.colCount);
                            }
                            else {
                                if (rng[1] == rng[3] || ((rng[0] != rng[2]) && (rng[1] != rng[2])) || rng[0] == rng[2]) {
                                    if (value.startCol <= rng[1])
                                        this._highlightValidationRng(splitData, s, rng[0], rng[1] + value.colCount, rng[2], rng[3] + value.colCount);
                                    if (value.startCol > rng[1] && value.startCol <= rng[3])
                                        this._highlightValidationRng(splitData, s, rng[0], rng[1], rng[2], rng[3] + value.colCount);
                                }
                            }
                            this._curValData = $.extend(true, [], valRange);
                        }
                    }
                    this._refreshHideRowColCollection(sheet.hideColsCollection, value.startCol, value.colCount, "column", "insert")
                    this._refreshFilterColl(sIdx, value.startCol, value.colCount, "column", "insert");
                    if (this.model.allowFreezing && this._isFrozen(fColIdx) && (stCol < fColIdx || (this._isUndo && this._fCol.fColCnt > 0))) {
                        freezeRow = sheet.frozenRows;
                        freezeCol = sheet.frozenColumns + (this._fCol.fColCnt > 0 ? this._fCol.fColCnt : value.colCount);
                        this._fCol.fColCnt = 0;
                        if (!this._fCol.colAdj) {
                            freezeCol -= 1;
                            this._fCol.colAdj = !this._fCol.colAdj;
                        }
                        if (this._isFrozen(fRowIdx)) {
                            this.XLFreeze.unfreezePanes();
                            this.XLFreeze.freezePanes(freezeRow, freezeCol);
                        }
                        else
                            this.XLFreeze.freezeColumns(freezeCol);
                    }
                    //cell type
                    if (this._isUndo) {
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);  // sheet_refrshobj redo
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        for (k = 0, len = sheet.cellTypes.length; k < len; k++) {
                            cellRange = this.getRangeIndices(sheet.cellTypes[k].range);
                            if ((cellRange[0] == cellRange[2]) && (cellRange[1] == cellRange[3])) {
                                if (value.startCol <= cellRange[1])
                                    sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], cellRange[1] + value.colCount, cellRange[2], cellRange[3] + value.colCount);
                            }
                            else {
                                if (cellRange[0] == cellRange[2]) {
                                    if (value.startCol > cellRange[1]) {
                                        cellRngValue = value.startCol - cellRange[1];
                                        obj = { range: this.getAlphaRange(cellRange[0], cellRange[1], cellRange[2], cellRange[1] + (cellRngValue - 1)), settings: sheet.cellTypes[k].settings }
                                        sheet.cellTypes[sheet.cellTypes.length] = obj;
                                        sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], stCol + value.colCount, cellRange[2], cellRange[3] + value.colCount);
                                    }
                                }
                                if (cellRange[1] == cellRange[3]) {
                                    if (value.startCol <= cellRange[1]) {
                                        sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], cellRange[1] + value.colCount, cellRange[2], cellRange[3] + value.colCount);
                                    }
                                }
                            }
                            this._curCellTypes = $.extend(true, [], sheet.cellTypes);
                        }
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet._refrshObj
                    }
                    if (this._isUndo && this._delCells.length > 0) {
                        remCells = this._delCells;
                        count = remCells[remCells.length - 1].col - remCells[0].col;
                        for (k = 0, len = remCells.length; k < len; k++) {
                            if (ej.isNullOrUndefined(container[remCells[k].row]))
                                container[remCells[k].row] = {};
                            container[remCells[k].row][remCells[k].col] = remCells[k].value;
                            this._refreshFormula(remCells[k].row, remCells[k].col, count, "insert", "column", "", false);
                            this.XLEdit._refreshCalcEngine(remCells[k].row, remCells[k].col);
                            if (remCells[k].value.wrap)
                                this._wrapCollection(remCells[k].row, remCells[k].col, remCells[k].height, sIdx);
                        }
                    }
                    break;
                case "deleteRow":
                    this._refreshNamedRange(value.rowCount, value.status, value.startRow, true);
                    this._delCells = [];
                    rmColl = [];
                    for (i = 0; i < value.startRow; i++) {
                        columns = this.getObjectKeys(container[i]);
                        for (j = 0, len = columns.length; j < len; j++) {
                            isFormula = this._refreshFormula(i, parseInt(columns[j]), value.rowCount, "delete", "row", value.startRow, false);
                            !isFormula && this.XLEdit._refreshCalcEngine(i, parseInt(columns[j]));
                        }
                    }
                    for (i = value.startRow; i <= maxRow; i++) {
                        if (i < (value.startRow + value.rowCount)) {
                            this._delCells.push({ row: i, value: $.extend(true, {}, container[i]), height: rowHtColl[i] });
                            if (!ej.isNullOrUndefined(container[i])) {
                                columns = this.getObjectKeys(container[i]);
                                for (j = 0, len = columns.length; j < len; j++) {
                                    if (this._checkIndicesInContainer(sIdx, i, columns[j], "wrap")) {
                                        if (!this._delWrapColl[i])
                                            this._delWrapColl[i] = {};
                                        this._delWrapColl[i][columns[j]] = $.extend(true, {}, sheet._wrapColl[i][columns[j]]);
                                        delete sheet._wrapColl[i][columns[j]];
                                    }
                                    container[i][columns[j]] = {};
                                }
                            }
                            container[i] = {};
                            rmColl.push({ row: i });
                        }
                        if (!ej.isNullOrUndefined(container[i + value.rowCount])) {
                            container[i] = $.extend(true, {}, container[i + value.rowCount]);
                            columns = this.getObjectKeys(container[i]);
                            for (j = 0, len = columns.length; j < len; j++) {
                                if (this._checkIndicesInContainer(sIdx, i + value.rowCount, columns[j], "wrap")) {
                                    this._wrapCollection(i, columns[j], sheet._wrapColl[i + value.rowCount][columns[j]], sIdx);
                                    delete sheet._wrapColl[i + value.rowCount][columns[j]];
                                }
                                this._clearFormula(i + value.rowCount, columns[j]);
                                container[i + value.rowCount][columns[j]] = {};
                                if (this.model.allowSparkline)
                                    this.XLSparkline._refreshSparklineForInsDel(i, columns[j], value.rowCount, "row", "delete", sIdx);
                                isFormula = this._refreshFormula(i, parseInt(columns[j]), value.rowCount, "delete", "row", value.startRow, false);
                                !isFormula && this.XLEdit._refreshCalcEngine(i, parseInt(columns[j]));
                            }
                            container[i + value.rowCount] = {};
                            rmColl.push({ row: i + value.rowCount });
                        }
                        if (!this.isUndefined(rowHtColl[i + value.rowCount])) {
                            rowHtColl[i] = rowHtColl[i + value.rowCount];
                            rowHtColl[i + value.rowCount] = this.model.rowHeight;
                            sheet._rowIdxColl[i] = sheet._rowIdxColl[i + value.rowCount] - value.rowCount;
                        }
                    }
                    if (this.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal) {
                        rowHtColl.splice(rowHtColl.length - value.rowCount, value.rowCount);
                        sheet._rowHeightCollection.splice(sheet._rowHeightCollection.length - value.rowCount, value.rowCount);
                    }
                    this._refreshHideRowColCollection(sheet.hideRowsCollection, value.startRow, value.rowCount, "row", "delete")
                    for (k = 0, len = rmColl.length; k < len; k++) {
                        if (this.getObjectLength(container[rmColl[k].row]) === 0) {
                            this._clearFormula(rmColl[k].row, rmColl[k].col);
                            delete container[rmColl[k].row];
                        }
                    }
                    this._refreshFilterColl(sIdx, value.startRow, value.rowCount, "row", "delete");
                    this.XLScroll._getRowHeights(sIdx, value.startRow);
                    if (this.model.allowFreezing && this._isFrozen(fRowIdx) && stRow < fRowIdx) {
                        if (enRow >= fRowIdx)
                            for (i = stRow; i < fRowIdx; i++)
                                this._fRow.fRowCnt++;
                        else
                            this._fRow.fRowCnt = 0;
                        freezeRow = sheet.frozenRows - ((this._fRow.fRowCnt > 0) ? this._fRow.fRowCnt : value.rowCount);
                        topIdx = sheet.frozenRows - ((this._fRow.fRowCnt > 0) ? this._fRow.fRowCnt : value.rowCount) - sheet._topRow.idx;
                        freezeCol = sheet.frozenColumns;
                        this._fRow.rowAdj = topIdx > 1;
                        if (this._isFrozen(fColIdx)) {
                            this.XLFreeze.unfreezePanes();
                            this.XLFreeze.freezePanes(this._fRow.rowAdj ? freezeRow : freezeRow + 1, freezeCol);
                        }
                        else
                            this.XLFreeze.freezeRows(this._fRow.rowAdj ? freezeRow : 1);
                    }
                    //data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        for (s = 0, len = valRange.length; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            range = this.getAlphaRange(rng[0] - value.rowCount, rng[1], rng[2] - value.rowCount, rng[3]);
                            if ((rng[0] == rng[2]) && rng[1] == rng[3]) {  // single celltypes
                                if (value.startRow < rng[0]) {
                                    splitData[6] = range;
                                    valRange[s] = splitData.join("_");
                                    if (this._isSameRowColumn)
                                        sheet.cellTypes[k - 1].range = range;
                                }
                                else if ((value.startRow == rng[0]) && (value.startCol <= rng[1])) {
                                    valRange[s] = [];
                                }
                            }
                            else {
                                if (rng[1] == rng[3]) { // same column
                                    if (value.startRow >= rng[0])
                                        this._highlightValidationRng(splitData, s, rng[0], rng[1], rng[2] - value.rowCount, rng[3]);
                                }
                                if (rng[0] == rng[2]) { // same row
                                    if (value.startRow == rng[0])
                                        valRange[s] = {};
                                    if (value.startRow < rng[0]) {
                                        splitData[6] = range;
                                        valRange[s] = splitData.join("_");
                                    }
                                }
                            }
                            if ((rng[0] != rng[2]) && (rng[1] != rng[2])) {
                                if (value.startRow <= rng[0])
                                    this._highlightValidationRng(splitData, s, rng[0] - value.rowCount, rng[1], rng[2] - value.rowCount, rng[3]);
                                if (value.startRow > rng[0] && value.startRow <= rng[2])
                                    this._highlightValidationRng(splitData, s, rng[0], rng[1] - value.rowCount, rng[2], rng[3]);
                            }
                        }
                        this._dataContainer.valData = valRange.filter(function (cellType) { return Object.keys(cellType).length > 0 });
                        this._curValData = $.extend(true, [], this._dataContainer.valData);
                    }
                    // Cell Types
                    if (this._isUndo) {
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj redo
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        for (k = 0, len = this._prevCellTypes.length; k < len; k++) {
                            cellRange = this.getRangeIndices(this._prevCellTypes[k].range);
                            range = this.getAlphaRange(cellRange[0] - value.rowCount, cellRange[1], cellRange[2] - value.rowCount, cellRange[3]);
                            if ((cellRange[0] == cellRange[2]) && cellRange[1] == cellRange[3]) {  // single celltypes
                                if (value.startRow < cellRange[0]) {
                                    sheet.cellTypes[k].range = range;
                                    if (this._isSameRowColumn)
                                        sheet.cellTypes[k - 1].range = range;
                                }
                                else if ((value.startRow == cellRange[0]) && (value.startCol <= cellRange[1])) {
                                    sheet.cellTypes[k] = {};
                                }
                            }
                            else {
                                if (cellRange[1] == cellRange[3]) { // same column
                                    if (value.startRow >= cellRange[0]) {
                                        sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[2] - value.rowCount, cellRange[3]);
                                    }
                                }
                                if (cellRange[0] == cellRange[2]) { // same row
                                    if (value.startRow == cellRange[0])
                                        sheet.cellTypes[k] = {};
                                    if (value.startRow > cellRange[0]) {
                                        sheet.cellTypes[k].range = range;
                                    }
                                }
                            }
                        }
                        sheet.cellTypes = sheet.cellTypes.filter(function (cellType) { return Object.keys(cellType).length > 0 });
                        this._curCellTypes = $.extend(true, [], sheet.cellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);
                    }
                    break;
                case "deleteColumn":
                    this._delCells = [];
                    rmColl = [];
                    var isDeleteCol = false, dupContainer = $.extend(true, {}, container[0]);
                    this._refreshNamedRange(value.colCount, value.status, value.startCol, false);
                    for (i = 0; i <= rCount; i++) {
                        for (j = value.startCol; j <= maxCol; j++) {
                            picture = chart = null;
                            if (i == 0) {
                                if (!ej.isNullOrUndefined(dupContainer)) {
                                    if (!ej.isNullOrUndefined(dupContainer[j])) {
                                        if ("isCHide" in dupContainer[j]) {
                                            this._deleteRule(j, sIdx);
                                            isDeleteCol = true;
                                        }
                                    }
                                }
                            }
                            if (j < (value.startCol + value.colCount)) {
                                if (!ej.isNullOrUndefined(container[i])) {
                                    if (!ej.isNullOrUndefined(container[i][j])) {
                                        this._delCells.push({ row: i, col: j, value: $.extend(true, {}, container[i][j], container[i][j].wrap ? sheet._wrapColl[i][j] : rowHtColl[i]) });
                                        this._clearFormula(i, j);
                                        container[i][j] = {};
                                        if (!ej.isNullOrUndefined(this._delCells[this._delCells.length - 1])) {
                                            index = this._delCells.length - 1;
                                            if (!ej.isNullOrUndefined(this._delCells[index].value.picture))
                                                container[i][j].picture = this._delCells[index].value.picture;
                                            if (!ej.isNullOrUndefined(this._delCells[index].value.chart))
                                                container[i][j].chart = this._delCells[index].value.chart;
                                        }
                                        rmColl.push({ row: i, col: j });
                                        if (sheet._wrapColl[i])
                                            delete sheet._wrapColl[i][j];
                                    }
                                }
                            }
                            if (!ej.isNullOrUndefined(container[i]) && (!ej.isNullOrUndefined(container[i][j + value.colCount]))) {
                                container[i][j] = $.extend(true, {}, container[i][j + value.colCount]);
                                if (container[i][j + value.colCount].wrap) {
                                    this._wrapCollection(i, j, sheet._wrapColl[i][j + value.colCount], sIdx);
                                    delete sheet._wrapColl[i][j + value.colCount];
                                }
                                if (!ej.isNullOrUndefined(container[i][j + value.colCount].picture))
                                    picture = container[i][j + value.colCount].picture;
                                if (!ej.isNullOrUndefined(container[i][j + value.colCount].chart))
                                    chart = container[i][j + value.colCount].chart;
                                this._clearFormula(i, j + value.colCount);
                                container[i][j + value.colCount] = {};
                                if (!ej.isNullOrUndefined(picture))
                                    container[i][j + value.colCount].picture = picture;
                                if (!ej.isNullOrUndefined(chart))
                                    container[i][j + value.colCount].chart = chart
                                if (!ej.isNullOrUndefined(this._delCells[this._delCells.length - 1])) {
                                    index = this._delCells.length - 1;
                                    if (!ej.isNullOrUndefined(this._delCells[index].value.picture))
                                        container[i][j].picture = this._delCells[index].value.picture;
                                    if (!ej.isNullOrUndefined(this._delCells[index].value.chart))
                                        container[i][j].chart = this._delCells[index].value.chart;
                                }
                                rmColl.push({ row: i, col: j + value.colCount });
                                isFormula = this._refreshFormula(i, j, value.colCount, "delete", "column", value.startCol, false);
                                !isFormula && this.XLEdit._refreshCalcEngine(i, j);
                                if (!isVirtualScroll)
                                    if (this.XLComment) {
                                        if (this._isRowViewable(sIdx, i))
                                            this._removeClass(this.getCell(i, j), "e-commentcell");
                                        this.XLComment._updateCmntFrmCntnr(i, j);
                                    }
                            }
                            if (this.model.allowSparkline)
                                this.XLSparkline._refreshSparklineForInsDel(i, j, value.colCount, "column", "delete", sIdx);
                            if (i == 0) {
                                if (isDeleteCol) {
                                    this._writeRule(j - value.colCount, sIdx);
                                    isDeleteCol = false;
                                }
                            }
                        }
                        for (k = 0, len = rmColl.length; k < len; k++)
                            if (this.getObjectLength(container[rmColl[k].row][rmColl[k].col]) === 0) {
                                this._clearFormula(rmColl[k].row, rmColl[k].col);
                                delete container[rmColl[k].row][rmColl[k].col];
                            }
                        rmColl = [];
                    }
                    this._refreshHideRowColCollection(sheet.hideColsCollection, value.startCol, value.colCount, "column", "delete")
                    if (this.model.allowFreezing && this._isFrozen(fColIdx) && stCol < fColIdx) {
                        if (enCol >= fColIdx)
                            for (i = stCol; i < fColIdx; i++)
                                this._fCol.fColCnt++;
                        else
                            this._fCol.fColCnt = 0;
                        freezeRow = sheet.frozenRows;
                        freezeCol = sheet.frozenColumns - (this._fCol.fColCnt > 0 ? this._fCol.fColCnt : value.colCount);
                        leftIdx = sheet.frozenColumns - (this._fCol.fColCnt > 0 ? this._fCol.fColCnt : value.colCount) - sheet._leftCol.idx;
                        this._fCol.colAdj = leftIdx > 1;
                        if (this._isFrozen(fRowIdx)) {
                            this.XLFreeze.unfreezePanes();
                            this.XLFreeze.freezePanes(freezeRow, this._fCol.colAdj ? freezeCol : freezeCol + 1);
                        }
                        else
                            this.XLFreeze.freezeColumns(this._fCol.colAdj ? freezeCol : 1);
                    }
                    this._refreshFilterColl(sIdx, value.startCol, value.colCount, "column", "delete");
                    // data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        for (s = 0, len = valRange.length; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            range = this.getAlphaRange(rng[0], rng[1] - value.colCount, rng[2], rng[3] - value.colCount);
                            if ((rng[0] == rng[2]) && rng[1] == rng[3]) {  // single cell data validation
                                if (value.startCol < rng[1]) {
                                    if (this._isSameRowColumn) {
                                        splitData[6] = range;
                                        valRange[s - 1] = splitData.join("_");
                                        if (s == valRange.length - 1) {
                                            valRange.pop();
                                            this._isSameRowColumn = false;
                                        }
                                    }
                                    else {
                                        splitData[6] = range;
                                        valRange[s] = splitData.join("_");
                                    }
                                }
                                else if ((value.startRow <= rng[0]) && (value.startCol == rng[1])) {
                                    valRange[s] = [];
                                }
                            }
                            else {
                                if (rng[1] == rng[3]) { // same column
                                    if (value.startCol == rng[1])
                                        valRange[s] = [];
                                    else if (value.startCol < rng[1]) {
                                        splitData[6] = range;
                                        valRange[s] = splitData.join("_");
                                    }
                                }
                                if (rng[0] == rng[2]) { // same row
                                    if ((value.startCol <= rng[1]))
                                        this._highlightValidationRng(splitData, s, rng[0], rng[1], rng[2], rng[3] - value.colCount);
                                }
                                if ((rng[0] != rng[2]) && (rng[1] != rng[3])) { // multiple rnge datavalidation
                                    if (value.startCol < rng[1]) {
                                        splitData[6] = range;
                                        valRange[s] = splitData.join("_");
                                    }
                                    else if (value.startCol >= rng[1] && value.startCol < rng[3])
                                        this._highlightValidationRng(splitData, s, rng[0], rng[1], rng[2], rng[3] - value.colCount);
                                }
                            }
                        }
                        this._dataContainer.valData = valRange.filter(function (dataVal) { return Object.keys(dataVal).length > 0 });
                        this._curValData = $.extend(true, {}, this._dataContainer.valData);
                    }
                    // cell type
                    if (this._isUndo) {
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);   // sheet_refrshobj redo
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        for (k = 0, len = this._prevCellTypes.length; k < len; k++) {
                            cellRange = this.getRangeIndices(this._prevCellTypes[k].range);
                            range = this.getAlphaRange(cellRange[0], cellRange[1] - value.colCount, cellRange[2], cellRange[3] - value.colCount);
                            if ((cellRange[0] == cellRange[2]) && cellRange[1] == cellRange[3]) {  // single celltypes
                                if (value.startCol < cellRange[1]) {
                                    if (this._isSameRowColumn) {
                                        sheet.cellTypes[k - 1].range = range;
                                        sheet.cellTypes[k - 1].settings = sheet.cellTypes[k].settings;
                                        if (k == sheet.cellTypes.length - 1) {
                                            sheet.cellTypes.pop();
                                            this._isSameRowColumn = false;
                                        }
                                    }
                                    else
                                        sheet.cellTypes[k].range = range;
                                }
                                else if ((value.startRow <= cellRange[0]) && (value.startCol == cellRange[1])) {
                                    sheet.cellTypes[k] = {};
                                }
                            }
                            else {
                                if (cellRange[1] == cellRange[3]) { // same column
                                    if (value.startCol == cellRange[1]) {
                                        if (!ej.isNullOrUndefined(sheet.cellTypes[k + 1])) {
                                            sheet.cellTypes[k] = $.extend(true, {}, sheet.cellTypes[k + 1]);
                                            this._isSameRowColumn = true;
                                        }
                                    }
                                    if (value.startCol < cellRange[1]) {
                                        if (this._isSameRowColumn) {
                                            sheet.cellTypes[k - 1].range = range;
                                            sheet.cellTypes[k - 1].settings = sheet.cellTypes[k].settings;
                                            if (k == sheet.cellTypes.length - 1) {
                                                sheet.cellTypes.pop();
                                                this._isSameRowColumn = false;
                                            }
                                        }
                                        else
                                            sheet.cellTypes[k].range = range;
                                    }
                                }
                                if (cellRange[0] == cellRange[2]) { // same row
                                    if ((value.startCol <= cellRange[1]))
                                        sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[2], cellRange[3] - value.colCount);
                                }
                            }
                        }
                        sheet.cellTypes = sheet.cellTypes.filter(function (cellType) { return Object.keys(cellType).length > 0 });
                        this._curCellTypes = $.extend(true, {}, sheet.cellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);
                    }
                    break;
                case "shiftRight":
                    this._refreshNamedRange(value.colCount, value.status, value.startCol, false);
                    for (i = value.startRow; i < rCount; i++) {
                        for (j = maxCol, len = value.startCol; j >= len; j--) {
                            if (!ej.isNullOrUndefined(container[i])) {
                                if (!ej.isNullOrUndefined(container[i][j])) {
                                    container[i][j + value.colCount] = $.extend(true, {}, container[i][j]);
                                    if (container[i][j].wrap) {
                                        this._wrapCollection(i, j + value.colCount, sheet._wrapColl[i][j], sIdx);
                                        delete sheet._wrapColl[i][j];
                                    }
                                    this._clearFormula(i, j);
                                    //refresh Validation
                                    if (j >= stCol && j <= enCol) {
                                        this._checkIndicesInContainer(sIdx, i, stCol, "rule") && (vRule = this._dataContainer.sheets[sIdx][i][stCol]["rule"]);
                                        this._checkIndicesInContainer(sIdx, i, stCol, "cFormatRule") && (cRule = this._dataContainer.sheets[sIdx][i][stCol]["cFormatRule"]);
                                        this._refreshValAndCF(i, j, vRule, cRule, 0, value.colCount, value.status);
                                        !(stCol < 1) && this.addClass(this.getCell(i, j)[0], this.XLFormat.getFormatClass(this.getCell(i, stCol - 1)[0].className, false));
                                    }
                                    else
                                        delete container[i][j];
                                    isFormula = this._refreshFormula(i, j + value.colCount, value.colCount, "insert", "column", value.startCol, true);
                                    !isFormula && this.XLEdit._refreshCalcEngine(i, j + value.colCount);
                                    !isFormula && this.XLEdit._refreshCalcEngine(i, j);
                                    if (this.model.allowSparkline)
                                        this.XLSparkline._refreshSparklineForInsDel(i, j + value.colCount, value.colCount, "column", "insert", sIdx);
                                }
                            }
                        }
                    }
                    if (this._isUndo && this._delCells.length > 0) {
                        remCells = this._delCells;
                        count = remCells[remCells.length - 1].col - remCells[0].col;
                        for (k = 0, len = remCells.length; k < len; k++) {
                            container[remCells[k].row][remCells[k].col] = remCells[k].value;
                            this._refreshFormula(remCells[k].row, remCells[k].col, count, "insert", "column", value.startRow, false);
                            this.XLEdit._refreshCalcEngine(remCells[k].row, remCells[k].col);
                            if (!isVirtualScroll)
                                this.XLComment && this.XLComment._updateCmntFrmCntnr(remCells[k].row, remCells[k].col);
                            if (remCells[k].value.wrap)
                                this._wrapCollection(remCells[k].row, remCells[k].col, remCells[k].height, sIdx);
                        }
                    }
                    // data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        len = valRange.length;
                        for (s = 0; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            range = this.getAlphaRange(rng[0], rng[1] + value.colCount, enRow, rng[3] + value.colCount);
                            if ((rng[1] == rng[3]) && (rng[0] == rng[2])) {
                                if ((rng[1] >= value.startCol) && (rng[0] == value.startRow))
                                    this._highlightValidationRng(splitData, s, stRow, rng[1] + value.colCount, stRow, rng[3] + value.colCount);
                            }
                            else {
                                if (rng[1] == rng[3]) { // same column, diff row
                                    if (rng[1] >= value.startCol) {
                                        if (value.startRow == rng[0]) {
                                            if ((rng[0] == rng[2]) && (rng[1] == rng[3]))
                                                this._highlightValidationRng(splitData, s, stRow, rng[1] + value.colCount, stRow, rng[3] + value.colCount);
                                            else {
                                                valRange[valRange.length] = [];
                                                this._highlightValidationRng(splitData, s, stRow, stRow + value.rowCount, cellRange[1], cellRange[2], cellRange[3]);
                                            }
                                        }
                                        else
                                            if ((value.startRow < rng[2]) && (value.startCol <= rng[1])) {
                                                cellRngValue = value.startRow - rng[0];
                                                this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[0] + (cellRngValue - 1), rng[3]);
                                                this._highlightValidationRng(splitData, s, stRow + value.rowCount, rng[1], rng[2], rng[3]);
                                                this._highlightValidationRng(splitData, valRange[valRange.length], stRow, rng[1] + value.colCount, enRow, rng[3] + value.colCount);
                                            }
                                    }
                                }
                                if (rng[0] == rng[2]) { // same row diff column
                                    if ((value.startCol <= rng[3]) && (value.startRow == rng[2])) {
                                        if (value.startCol > rng[1]) {
                                            cellRngValue = value.startCol - rng[1];
                                            this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[2], rng[1] + (cellRngValue - 1));
                                            this._highlightValidationRng(splitData, s, rng[0], stCol + value.colCount, rng[2], rng[3] + value.colCount);
                                        }
                                        if (value.startCol < rng[1])
                                            this._highlightValidationRng(splitData, s, rng[0], rng[1] + value.colCount, rng[2], rng[3] + value.colCount);
                                    }
                                }
                            }
                            this._curValData = $.extend(true, [], valRange);
                        }
                    }
                    // cell type
                    if (this._isUndo) {
                        delete sheet.cellTypes;
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        delete sheet.cellTypes;
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj undo
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        len = sheet.cellTypes.length;
                        for (k = 0; k < len; k++) {
                            cellRange = this.getRangeIndices(sheet.cellTypes[k].range);
                            obj = { range: this.getAlphaRange(cellRange[0], cellRange[1] + value.colCount, enRow, cellRange[3] + value.colCount), settings: sheet.cellTypes[k].settings };
                            if ((cellRange[1] == cellRange[3]) && (cellRange[0] == cellRange[2])) {
                                if ((cellRange[1] >= value.startCol) && (cellRange[0] == value.startRow))
                                    sheet.cellTypes[k].range = this.getAlphaRange(stRow, cellRange[1] + value.colCount, stRow, cellRange[3] + value.colCount);
                            }
                            else {
                                if (cellRange[1] == cellRange[3]) { // same column, diff row
                                    if (cellRange[1] >= value.startCol) {
                                        if (value.startRow == cellRange[0]) {
                                            if ((cellRange[0] == cellRange[2]) && (cellRange[1] == cellRange[3]))
                                                sheet.cellTypes[k].range = this.getAlphaRange(stRow, cellRange[1] + value.colCount, stRow, cellRange[3] + value.colCount);
                                            else {
                                                sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                                sheet.cellTypes[k].range = this.getAlphaRange(stRow + value.rowCount, cellRange[1], cellRange[2], cellRange[3]);
                                            }
                                        }
                                        else
                                            if ((value.startRow < cellRange[2]) && (value.startCol <= cellRange[1])) {
                                                cellRngValue = value.startRow - cellRange[0];
                                                obj.range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[0] + (cellRngValue - 1), cellRange[3]), obj.settings = sheet.cellTypes[k].settings;
                                                sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                                sheet.cellTypes[k].range = this.getAlphaRange(stRow + value.rowCount, cellRange[1], cellRange[2], cellRange[3]);
                                                obj.range = this.getAlphaRange(stRow, cellRange[1] + value.colCount, enRow, cellRange[3] + value.colCount), obj.settings = sheet.cellTypes[k].settings;
                                                sheet.cellTypes[sheet.cellTypes.length] = obj;
                                            }
                                    }
                                }
                                if (cellRange[0] == cellRange[2]) { // same row diff column
                                    if ((value.startCol <= cellRange[3]) && (value.startRow == cellRange[2])) {
                                        if (value.startCol > cellRange[1]) {
                                            cellRngValue = value.startCol - cellRange[1];
                                            obj.range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[2], cellRange[1] + (cellRngValue - 1)), obj.settings = sheet.cellTypes[k].settings;
                                            sheet.cellTypes[sheet.cellTypes.length] = obj
                                            sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], stCol + value.colCount, cellRange[2], cellRange[3] + value.colCount);
                                        }
                                        if (value.startCol < cellRange[1])
                                            sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], cellRange[1] + value.colCount, cellRange[2], cellRange[3] + value.colCount);
                                    }
                                }
                            }
                            this._curCellTypes = $.extend(true, [], sheet.cellTypes);
                        }
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet._refrshObj
                    }
                    break;
                case "shiftLeft":
                    this._refreshNamedRange(value.colCount, value.status, value.startCol, false);
                    this._delCells = [];
                    rmColl = [];
                    for (i = value.startRow; i < rCount; i++) {
                        for (j = value.startCol; j <= maxCol; j++) {
                            if (j < (value.startCol + value.colCount) && !ej.isNullOrUndefined(container[i])) {
                                if (!ej.isNullOrUndefined(container[i][j])) {
                                    this._delCells.push({ row: i, col: j, value: $.extend(true, {}, container[i][j]), height: container[i][j].wrap ? sheet._wrapColl[i][j] : rowHtColl[i] });
                                    this._clearFormula(i, j);
                                    if (container[i][j].wrap)
                                        delete sheet._wrapColl[i][j];
                                    container[i][j] = {};
                                    rmColl.push({ row: i, col: j });
                                }
                            }
                            if (!ej.isNullOrUndefined(container[i]))
                                if (!ej.isNullOrUndefined(container[i][j + value.colCount])) {
                                    container[i][j] = $.extend(true, {}, container[i][j + value.colCount]);
                                    if (container[i][j + value.colCount].wrap) {
                                        this._wrapCollection(i, j, sheet._wrapColl[i][j + value.colCount], sIdx);
                                        delete sheet._wrapColl[i][j + value.colCount];
                                    }
                                    currCell = this.getCell(i + value.rowCount, j);
                                    remCell = this.getCell(i, j);
                                    if (currCell) {
                                        currText = currCell[0].outerHTML;
                                        this.clearTextNode(currCell);
                                    }
                                    if (remCell) {
                                        remText = remCell[0].outerHTML;
                                        this.clearTextNode(remCell, this.XLEdit.getPropertyValue(i, j, "value2"));
                                    }
                                    rmColl.push({ row: i, col: j + value.colCount });
                                    this._clearFormula(i, j + value.colCount);
                                    container[i][j + value.colCount] = {};
                                    isFormula = this._refreshFormula(i, j, value.colCount, "delete", "column", value.startCol, true);
                                    currCell && (currCell[0].outerHTML = currText);
                                    remCell && (remCell[0].outerHTML = remText);
                                    if (this.model.allowSparkline)
                                        this.XLSparkline._refreshSparklineForInsDel(i, j, value.colCount, "column", "delete", sIdx);
                                }
                            !isFormula && this.XLEdit._refreshCalcEngine(i, j);
                        }
                        len = rmColl.length;
                        for (k = 0; k < len; k++) {
                            if (this.getObjectLength(container[rmColl[k].row][rmColl[k].col]) === 0) {
                                this._clearFormula(rmColl[k].row, rmColl[k].col);
                                this.XLEdit._refreshCalcEngine(rmColl[k].row, rmColl[k].col);
                                delete container[rmColl[k].row][rmColl[k].col];
                            }
                        }
                        rmColl = [];
                    }
                    // data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        len = valRange.length;
                        for (s = 0; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            range = this.getAlphaRange(rng[0], rng[1] - value.colCount, rng[0], rng[3] - value.colCount);
                            if ((rng[1] == rng[3]) && (rng[0] == rng[2])) { // single cell
                                if ((value.startRow == rng[0]) && (value.startCol == rng[1])) {
                                    valRange[s] = [];
                                }
                                else if ((value.startCol <= rng[1]) && (value.startRow == rng[0]))
                                    this._highlightValidationRng(splitData, s, stRow, rng[1] - value.colCount, enRow, rng[3] - value.colCount);
                            }
                            else {
                                if (rng[1] == rng[3]) { // same column, diff row
                                    if (rng[1] >= value.startCol) {
                                        if (value.startRow == rng[0]) {
                                            if ((rng[0] == rng[2]) && (rng[1] == rng[3]))
                                                this._highlightValidationRng(splitData, s, stRow, cellRange[1] - value.colCount, enRow, cellRange[3] - value.colCount);
                                            else {
                                                valRange[valRange.length] = [];
                                                this._highlightValidationRng(splitData, s, rng[0] + value.rowCount, rng[1], rng[2], rng[3]);
                                            }
                                        }
                                        else
                                            if ((value.startRow < rng[2]) && (value.startCol <= rng[1])) {
                                                cellRngValue = value.startRow - cellRange[0];
                                                this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[0] + (cellRngValue - 1), rng[3]);
                                                this._highlightValidationRng(splitData, s, rng[0] + value.rowCount, rng[1], rng[2], rng[3]);
                                                this._highlightValidationRng(splitData, valRange[valRange.length], stRow, rng[1] - value.colCount, enRow, rng[3] - value.colCount);
                                            }
                                    }
                                }
                            }
                        }
                        this._dataContainer.valData = valRange.filter(function (cellType) { return Object.keys(cellType).length > 0 });
                        this._curValData = $.extend(true, [], this._dataContainer.valData);
                    }
                    // cell type
                    if (this._isUndo) {
                        delete sheet.cellTypes;
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);   // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        delete sheet.cellTypes;
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);  // sheet_refrshobj redo
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        len = this._prevCellTypes.length;
                        for (k = 0; k < len; k++) {
                            cellRange = this.getRangeIndices(this._prevCellTypes[k].range);
                            obj = { range: this.getAlphaRange(cellRange[0], cellRange[1] - value.colCount, cellRange[0], cellRange[3] - value.colCount), settings: sheet.cellTypes[k].settings };
                            if ((cellRange[1] == cellRange[3]) && (cellRange[0] == cellRange[2])) { // single cell
                                if ((value.startRow == cellRange[0]) && (value.startCol == cellRange[1])) {
                                    sheet.cellTypes[k] = {};
                                }
                                else if ((value.startCol <= cellRange[1]) && (value.startRow == cellRange[0]))
                                    sheet.cellTypes[k].range = this.getAlphaRange(stRow, cellRange[1] - value.colCount, enRow, cellRange[3] - value.colCount);
                            }
                            else {
                                if (cellRange[1] == cellRange[3]) { // same column, diff row
                                    if (cellRange[1] >= value.startCol) {
                                        if (value.startRow == cellRange[0]) {
                                            if ((cellRange[0] == cellRange[2]) && (cellRange[1] == cellRange[3]))
                                                sheet.cellTypes[k].range = this.getAlphaRange(stRow, cellRange[1] - value.colCount, enRow, cellRange[3] - value.colCount);
                                            else {
                                                sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                                sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0] + value.rowCount, cellRange[1], cellRange[2], cellRange[3]);
                                            }
                                        }
                                        else
                                            if ((value.startRow < cellRange[2]) && (value.startCol <= cellRange[1])) {
                                                cellRngValue = value.startRow - cellRange[0];
                                                obj.range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[0] + (cellRngValue - 1), cellRange[3]), obj.settings = sheet.cellTypes[k].settings;
                                                sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                                sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0] + value.rowCount, cellRange[1], cellRange[2], cellRange[3]);
                                                obj.range = this.getAlphaRange(stRow, cellRange[1] - value.colCount, enRow, cellRange[3] - value.colCount), obj.settings = this.getAlphaRange(stRow, cellRange[1] - value.colCount, enRow, cellRange[3] - value.colCount);
                                                sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, [], obj);
                                            }
                                    }
                                }
                            }
                        }
                        sheet.cellTypes = sheet.cellTypes.filter(function (cellType) { return Object.keys(cellType).length > 0 });
                        this._curCellTypes = $.extend(true, [], sheet.cellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet._RefrshObj
                    }
                    break;
                case "shiftBottom":
                    this._refreshNamedRange(value.rowCount, value.status, value.startRow, true);
                    var isWrapRow, colWtColl = this.getSheet(sIdx).columnsWidthCollection, rowHtColl = this.getSheet(sIdx).rowsHeightCollection, rowHt;
                    for (i = maxRow, len = value.startRow; i >= len; i--) {
                        isWrapRow = this._checkIndicesInContainer(sIdx, i, 0, "wrapRow");
                        for (j = value.startCol; j < cCount; j++) {
                            if (!ej.isNullOrUndefined(container[i])) {
                                if (!ej.isNullOrUndefined(container[i][j])) {
                                    if (ej.isNullOrUndefined(container[i + value.rowCount]))
                                        container[i + value.rowCount] = {};
                                    if (isWrapRow) {
                                        rowHt = sheet._wrapColl[i][j];
                                        rowHtColl[i + value.rowCount] = ej.max([rowHt, rowHtColl[i + value.rowCount]]);
                                        if (!this._checkIndicesInContainer(sIdx, i + value.rowCount, 0, "wrapRow"))
                                            this.XLEdit._updateDataContainer({ rowIndex: i + value.rowCount, colIndex: 0 }, { dataObj: { wrapRow: true } });
                                        this._wrapCollection(i + value.rowCount, j, rowHt, sIdx);
                                    }
                                    container[i + value.rowCount][j] = $.extend(true, {}, container[i][j]);
                                    this._clearFormula(i, j);
                                    //refresh Validation
                                    if (i >= stRow && i <= enRow) {
                                        this._checkIndicesInContainer(sIdx, stRow, j, "rule") && (vRule = this._dataContainer.sheets[sIdx][stRow][j]["rule"]);
                                        this._checkIndicesInContainer(sIdx, stRow, j, "cFormatRule") && (cRule = this._dataContainer.sheets[sIdx][stRow][j]["cFormatRule"]);
                                        this._refreshValAndCF(i, j, vRule, cRule, value.rowCount, 0, value.status);
                                        if (!isVirtualScroll)
                                            !(stRow < 1) && this.addClass(this.getCell(i, j)[0], this.XLFormat.getFormatClass(this.getCell(stRow - 1, j)[0].className, false));
                                    }
                                    else
                                        delete container[i][j];
                                    isWrapRow && delete sheet._wrapColl[i][j];
                                    isFormula = this._refreshFormula(i + value.rowCount, j, value.rowCount, "insert", "row", value.startRow, true);
                                    if (this.model.allowSparkline)
                                        this.XLSparkline._refreshSparklineForInsDel(i + value.rowCount, j, value.rowCount, "row", "insert", sIdx);
                                }
                            }
                            !isFormula && this.XLEdit._refreshCalcEngine(i, j);
                            !isFormula && this.XLEdit._refreshCalcEngine(i + value.rowCount, j);
                        }
                        if (isWrapRow) {
                            rowHtColl[i] = ej.max(this._getObjectValues(sheet._wrapColl[i])); //this.XLResize._getContentHeight(i, sIdx, true);
                            !rowHtColl[i] && (rowHtColl[i] = this.model.rowHeight);
                            //check and remove wrapRow value
                            if (!this.getObjectLength(sheet._wrapColl[i]))
                                delete this._dataContainer.sheets[sIdx][i][0]["wrapRow"];
                        }
                        if (!ej.isNullOrUndefined(container[i]))
                            (this.getObjectLength(container[i]) === 0) && delete container[i];
                    }
                    // data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        for (s = 0, len = valRange.length; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            range = this.getAlphaRange(rng[0] + value.rowCount, rng[1], rng[2] + value.rowCount, rng[3]);
                            if ((value.startRow <= rng[2]) && (value.startCol <= rng[3])) {
                                if ((value.startCol == rng[1]) && (value.startRow == rng[0])) {
                                    splitData[6] = range;
                                    valRange[s] = splitData.join("_");
                                }
                                else {
                                    if (rng[1] == rng[3]) { // same column diff row
                                        if (value.startRow > rng[0]) {
                                            cellRngValue = value.startRow - rng[0];
                                            this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[0] + (cellRngValue - 1), rng[3]);
                                            this._highlightValidationRng(splitData, s, stRow + value.rowCount, rng[1], rng[2] + value.rowCount, rng[3]);
                                        }
                                        if (value.startRow < rng[0]) {
                                            splitData[6] = range;
                                            valRange[s] = splitData.join("_");
                                        }
                                    }
                                    if (rng[0] == rng[2]) {  // same row diff column
                                        if (value.startCol > rng[1]) {
                                            cellRngValue = value.startCol - rng[1];
                                            this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[2], rng[1] + (cellRngValue - 1));
                                            this._highlightValidationRng(splitData, s, rng[0], stCol + value.colCount, rng[2], rng[3] + value.colCount);
                                        }
                                        if (stCol < rng[1])
                                            this._highlightValidationRng(splitData, s, rng[0], rng[1] + value.rowCount, rng[2], rng[3] + value.rowCount);
                                    }
                                }
                            }
                            this._curValData = $.extend(true, {}, valRange);
                        }
                    }
                    //cell types
                    if (this._isUndo) {
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj redo
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        len = sheet.cellTypes.length;
                        for (k = 0; k < len; k++) {
                            cellRange = this.getRangeIndices(sheet.cellTypes[k].range);
                            obj = { range: this.getAlphaRange(cellRange[0] + value.rowCount, cellRange[1], cellRange[2] + value.rowCount, cellRange[3]), settings: sheet.cellTypes[k].settings };
                            if ((value.startRow <= cellRange[2]) && (value.startCol == cellRange[3])) {
                                if ((value.startCol == cellRange[1]) && (value.startRow == cellRange[0])) {
                                    sheet.cellTypes[k].range = obj.range;
                                }
                                else {
                                    if (cellRange[1] == cellRange[3]) { // same column diff row
                                        if (value.startRow > cellRange[0]) {
                                            cellRngValue = value.startRow - cellRange[0];
                                            obj.range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[0] + (cellRngValue - 1), cellRange[3]);
                                            sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                            sheet.cellTypes[k].range = this.getAlphaRange(stRow + value.rowCount, cellRange[1], cellRange[2] + value.rowCount, cellRange[3]);
                                        }
                                        if (value.startRow < cellRange[0])
                                            sheet.cellTypes[k].range = obj.range;
                                    }
                                    if (cellRange[0] == cellRange[2]) {  // same row diff column
                                        if (value.startCol > cellRange[1]) {
                                            cellRngValue = value.startCol - cellRange[1];
                                            obj.range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[2], cellRange[1] + (cellRngValue - 1)), obj.settings = sheet.cellTypes[k].settings;
                                            sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                            sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], stCol + value.colCount, cellRange[2], cellRange[3] + value.colCount);
                                        }
                                        if (stCol < cellRange[1])
                                            sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], cellRange[1] + value.rowCount, cellRange[2], cellRange[3] + value.rowCount);
                                    }
                                }
                            }
                            this._curCellTypes = $.extend(true, {}, sheet.cellTypes);
                        }
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet._refrshObj
                    }
                    if (this._isUndo && this._delCells.length > 0) {
                        var rRowIdx, rColIdx, isWrapCell;
                        remCells = this._delCells;
                        count = remCells[remCells.length - 1].row - remCells[0].row;
                        for (i = 0, len = remCells.length; i < len; i++) {
                            rRowIdx = remCells[i].row;
                            rColIdx = remCells[i].col;
                            if (ej.isNullOrUndefined(container[rRowIdx]))
                                container[rRowIdx] = {};
                            container[rRowIdx][rColIdx] = remCells[i].value;
                            this._refreshFormula(rRowIdx, rColIdx, count, "insert", "row", value.startRow, true);
                            this.XLEdit._refreshCalcEngine(rRowIdx, rColIdx);
                            isWrapRow = this._checkIndicesInContainer(sIdx, rRowIdx, 0, "wrapRow");
                            isWrapCell = remCells[i].value.wrap;
                            if (isWrapRow || isWrapCell) {
                                rowHt = isWrapCell ? remCells[i].height : this.model.rowHeight; //this._detailsFromGlobalSpan(rRowIdx, rColIdx, "height", this.XLEdit.getPropertyValue(rRowIdx, rColIdx, "value2"), colWtColl[rColIdx]);
                                rowHtColl[rRowIdx] = ej.max([rowHt, rowHtColl[rRowIdx]]);
                                if (!this._checkIndicesInContainer(sIdx, rRowIdx, 0, "wrapRow"))
                                    this.XLEdit._updateDataContainer({ rowIndex: rRowIdx, colIndex: 0 }, { dataObj: { wrapRow: true } });
                                this._wrapCollection(rRowIdx, rColIdx, rowHt, sIdx);
                            }
                            if (!isVirtualScroll)
                                this.XLComment && this.XLComment._updateCmntFrmCntnr(rRowIdx, rColIdx);
                        }
                    }
                    break;
                case "shiftUp":
                    this._refreshNamedRange(value.rowCount, value.status, value.startRow, true);
                    rmColl = [];
                    var isDelWrapRow;
                    colWtColl = this.getSheet(sIdx).columnsWidthCollection; rowHtColl = this.getSheet(sIdx).rowsHeightCollection;
                    for (i = value.startRow; i <= maxRow; i++) {
                        isDelWrapRow = this._checkIndicesInContainer(sIdx, i, 0, "wrapRow");
                        isWrapRow = this._checkIndicesInContainer(sIdx, i + value.rowCount, 0, "wrapRow");
                        for (j = value.startCol; j < cCount; j++) {
                            if (i < (value.startRow + value.rowCount) && !ej.isNullOrUndefined(container[i]))
                                if (!ej.isNullOrUndefined(container[i][j])) {
                                    this._delCells.push({ row: i, col: j, value: $.extend(true, {}, container[i][j]), height: isDelWrapRow ? sheet._wrapColl[i][j] : rowHtColl[i] });
                                    this._clearFormula(i, j);
                                    container[i][j] = {};
                                    rmColl.push({ row: i, col: j });
                                    if (isDelWrapRow)
                                        delete sheet._wrapColl[i][j];
                                }
                            if (!ej.isNullOrUndefined(container[i + value.rowCount])) {
                                if (!ej.isNullOrUndefined(container[i + value.rowCount][j])) {
                                    if (ej.isNullOrUndefined(container[i]))
                                        container[i] = {};
                                    container[i][j] = $.extend(true, {}, container[i + value.rowCount][j]);
                                    if (isWrapRow) {
                                        this._wrapCollection(i, j, sheet._wrapColl[i + value.rowCount][j], sIdx);
                                        delete sheet._wrapColl[i + value.rowCount][j];
                                    }
                                    currCell = this.getCell(i + value.rowCount, j);
                                    remCell = this.getCell(i, j);
                                    if (currCell) {
                                        currText = currCell[0].outerHTML;
                                        this.clearTextNode(currCell);
                                    }
                                    if (remCell) {
                                        remText = remCell[0].outerHTML;
                                        this.clearTextNode(remCell, this.XLEdit.getPropertyValue(i, j, "value2"));
                                    }
                                    this._clearFormula(i + value.rowCount, j);
                                    container[i + value.rowCount][j] = {};
                                    rmColl.push({ row: i + value.rowCount, col: j });
                                    isFormula = this._refreshFormula(i, j, value.rowCount, "delete", "row", value.startRow, true);
                                    currCell && (currCell[0].outerHTML = currText);
                                    remCell && (remCell[0].outerHTML = remText);
                                    if (this.model.allowSparkline)
                                        this.XLSparkline._refreshSparklineForInsDel(i, j, value.colCount, "column", "delete", sIdx);
                                }
                            }
                            else
                                rowHtColl[i + value.rowCount] = this.model.rowHeight;
                            !isFormula && this.XLEdit._refreshCalcEngine(i, j);
                        }
                        if (isDelWrapRow) {
                            if (this.getObjectLength(sheet._wrapColl[i]) < 1)
                                delete this._dataContainer.sheets[sIdx][i][0]["wrapRow"];
                        }
                        if (isWrapRow) {
                            this.XLEdit._updateDataContainer({ rowIndex: i, colIndex: 0 }, { dataObj: { wrapRow: true } });
                            rowHtColl[i + value.rowCount] = ej.max(this._getObjectValues(sheet._wrapColl[i + value.rowCount]));
                            !rowHtColl[i + value.rowCount] && (rowHtColl[i + value.rowCount] = this.model.rowHeight);
                            if (!this.getObjectLength(sheet._wrapColl[i + value.rowCount]))
                                delete this._dataContainer.sheets[sIdx][i + value.rowCount][0]["wrapRow"];
                        }
                        if (isDelWrapRow || isWrapRow) {
                            rowHtColl[i] = ej.max(this._getObjectValues(sheet._wrapColl[i]));
                            !rowHtColl[i] && (rowHtColl[i] = this.model.rowHeight);
                        }
                    }
                    for (k = 0, len = rmColl.length; k < len; k++) {
                        if (this.getObjectLength(container[rmColl[k].row][rmColl[k].col]) === 0) {
                            this._clearFormula(rmColl[k].row, rmColl[k].col);
                            delete container[rmColl[k].row][rmColl[k].col];
                        }
                        (this.getObjectLength(container[rmColl[k].row]) === 0) && delete container[rmColl[k].row];
                    }
                    // data validation
                    if (this._isUndo)
                        this._dataContainer.valData = $.extend(true, [], value.prevValData);
                    else if ((!this._isUndo) && (this._isUndoRedo))
                        this._dataContainer.valData = $.extend(true, [], value.curValData);
                    else {
                        this._prevValData = $.extend(true, [], valRange);
                        for (s = 0, len = valRange.length; s < len; s++) {
                            splitData = valRange[s].split("_");
                            rng = this.getRangeIndices((splitData[1] === "list") ? splitData[3] : splitData[6]);
                            range = this.getAlphaRange(stRow - value.rowCount, enCol, stRow - value.rowCount, enCol);
                            if ((value.startRow <= rng[2]) && (value.startCol == rng[3])) {
                                if ((rng[1] == rng[3]) && (rng[0] == rng[2])) { // single cell
                                    if ((value.startRow == rng[0]) && (value.startCol == rng[1]))
                                        valRange[s] = [];
                                    else if ((value.startCol == rng[1]) && (value.startRow <= rng[0]))
                                        this._highlightValidationRng(splitData, s, rng[0] - value.rowCount, rng[1], rng[2] - value.rowCount, rng[3]);
                                }
                                else {
                                    if (rng[1] == rng[3]) { // same column diff row
                                        if (rng[1] == value.startCol) {
                                            valRange[valRange.length] = [];
                                            this._highlightValidationRng(splitData, s, stRow, rng[1], rng[2] - value.rowCount, rng[3]);
                                        }
                                        if (value.startRow > rng[0]) {
                                            cellRngValue = value.startRow - rng[0];
                                            this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[0] + (cellRngValue - 1), rng[3]);
                                            this._highlightValidationRng(splitData, s, stRow - value.rowCount, rng[1], rng[2] - value.rowCount, rng[3]);
                                        }
                                        if (value.startRow < rng[0])
                                            this._highlightValidationRng(splitData, s, rng[0] - value.rowCount, rng[1], rng[2] - value.rowCount, rng[3]);
                                    }
                                    if (rng[0] == rng[2]) { // same row diff column
                                        if (value.startCol > rng[1]) {
                                            cellRngValue = value.startCol - rng[1];
                                            this._highlightValidationRng(splitData, valRange[valRange.length], rng[0], rng[1], rng[2], rng[1] + (cellRngValue - 1));
                                            this._highlightValidationRng(splitData, s, rng[0], stCol - value.colCount, rng[2], rng[3] - value.colCount);
                                        }
                                        if (value.startCol < rng[1])
                                            this._highlightValidationRng(splitData, s, rng[0], rng[1] - value.rowCount, rng[2], rng[3] - value.rowCount);
                                    }
                                }
                            }
                        }
                        this._dataContainer.valData = valRange.filter(function (cellType) { return Object.keys(cellType).length > 0 });
                        this._curValData = $.extend(true, {}, this._dataContainer.valData);
                    }
                    // cell type
                    if (this._isUndo) {
                        sheet.cellTypes = $.extend(true, [], value.prevCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj undo
                    }
                    else if ((!this._isUndo) && (this._isUndoRedo)) {
                        sheet.cellTypes = $.extend(true, [], value.curCellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(value);  // sheet_refrshobj redo
                    }
                    else {
                        this._prevCellTypes = $.extend(true, [], sheet.cellTypes);
                        len = this._prevCellTypes.length;
                        for (k = 0; k < len; k++) {
                            cellRange = this.getRangeIndices(this._prevCellTypes[k].range);
                            obj = { range: this.getAlphaRange(stRow - value.rowCount, enCol, stRow - value.rowCount, enCol), settings: sheet.cellTypes[k].settings };
                            if ((value.startRow <= cellRange[2]) && (value.startCol == cellRange[3])) {
                                if ((cellRange[1] == cellRange[3]) && (cellRange[0] == cellRange[2])) { // single cell
                                    if ((value.startRow == cellRange[0]) && (value.startCol == cellRange[1]))
                                        sheet.cellTypes[k] = {};
                                    else if ((value.startCol == cellRange[1]) && (value.startRow <= cellRange[0]))
                                        sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0] - value.rowCount, cellRange[1], cellRange[2] - value.rowCount, cellRange[3]);
                                }
                                else {
                                    if (cellRange[1] == cellRange[3]) { // same column diff row
                                        if (cellRange[1] == value.startCol) {
                                            sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                            sheet.cellTypes[k].range = this.getAlphaRange(stRow, cellRange[1], cellRange[2] - value.rowCount, cellRange[3]);
                                        }
                                        if (value.startRow > cellRange[0]) {
                                            cellRngValue = value.startRow - cellRange[0];
                                            obj.range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[0] + (cellRngValue - 1), cellRange[3]), obj.settings = sheet.cellTypes[k].settings;
                                            sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                            sheet.cellTypes[k].range = this.getAlphaRange(stRow - value.rowCount, cellRange[1], cellRange[2] - value.rowCount, cellRange[3]);
                                        }
                                        if (value.startRow < cellRange[0])
                                            sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0] - value.rowCount, cellRange[1], cellRange[2] - value.rowCount, cellRange[3]);
                                    }
                                    if (cellRange[0] == cellRange[2]) { // same row diff column
                                        if (value.startCol > cellRange[1]) {
                                            cellRngValue = value.startCol - cellRange[1];
                                            obj.range = this.getAlphaRange(cellRange[0], cellRange[1], cellRange[2], cellRange[1] + (cellRngValue - 1)), obj.settings = sheet.cellTypes[k].settings;
                                            sheet.cellTypes[sheet.cellTypes.length] = $.extend(true, {}, obj);
                                            sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], stCol - value.colCount, cellRange[2], cellRange[3] - value.colCount);
                                        }
                                        if (value.startCol < cellRange[1])
                                            sheet.cellTypes[k].range = this.getAlphaRange(cellRange[0], cellRange[1] - value.rowCount, cellRange[2], cellRange[3] - value.rowCount);
                                    }
                                }
                            }
                        }
                        sheet.cellTypes = sheet.cellTypes.filter(function (cellType) { return Object.keys(cellType).length > 0 });
                        this._curCellTypes = $.extend(true, {}, sheet.cellTypes);
                        if (this.model.allowCellType)
                            this.XLCellType._refreshCellType(cellRange, value);  // sheet._RefrshObj
                    }
                    break;
            }
            if (value.status.indexOf("insert") > -1) {
                usedRange.rowIndex = usedRange.rowIndex + value.rowCount;
                usedRange.colIndex = usedRange.colIndex + value.colCount;
                this.getSheet(sIdx).usedRange = usedRange;
            }
        },
        refreshArrayformulaInsDel: function (value, type, status, count, startIdx, range) {
            var i, formulavalue, rangeStart, diff, diff1, splitRange, dupFormulaRange, val, nAlpha, maxCol, maxRow, usedRange, sIdx = this.getActiveSheetIndex(), deleteIdxs = [], container = this._dataContainer.sheets[sIdx];
            usedRange = this.getSheet(sIdx).usedRange;
            maxRow = usedRange.rowIndex, maxCol = usedRange.colIndex
            val = this.XLEdit.getPropertyValue(maxRow, maxCol, "value");
            var newSelRng, splitFormula, rng, fArg, ridx;
            if (value.startCol <= maxCol) {
                rangeStart = this.getRangeIndices(range);
                if (!((rangeStart[1] < value.startCol) || (rangeStart[0] < value.startRow))) {
                    splitRange = this.XLDragFill._parseFormula(range);
                    for (i = 0; i < splitRange.length; i++) {
                        if (this._isCellReference(splitRange[i])) {
                            rng = this.getRangeIndices(splitRange[i]);
                            diff = (type === "column") ? (status === "insert") ? rng[3] + count : rng[3] - count : (status === "insert") ? rng[2] + count : rng[2] - count;
                            diff1 = (type === "column") ? (status === "insert") ? rng[1] + count : rng[1] - count : (status === "insert") ? rng[0] + count : rng[0] - count;
                            (type === "column") ? (startIdx > rng[1] && (diff1 = rng[1])) : (startIdx > rng[0] && (diff1 = rng[0]));
                            (type === "column") ? (startIdx > rng[3] && (diff = rng[3])) : (startIdx > rng[2] && (diff = rng[2]));
                            if (diff1 > -1)
                                nAlpha = (type === "column") ? this._getAlphaRange(sIdx, rng[0], diff1, rng[2], diff) : this._getAlphaRange(sIdx, diff1, rng[1], diff, rng[3]);
                            else {
                                nAlpha = "#REF!";
                            }
                            splitRange[i] = nAlpha;
                        }
                    }
                    formulavalue = this.getSheet(sIdx).formulaRange[range];
                    if (status === "delete") {
                        for (i = 1; i <= count; i++)
                            deleteIdxs.push(startIdx + i);
                    }
                    splitFormula = this.XLDragFill._parseFormula(formulavalue);
                    for (var a = 0; a < splitFormula.length; a++) {
                        fArg = splitFormula[a].trim();
                        if (this._isCellReference(fArg)) {
                            rng = this.getRangeIndices(fArg);
                            diff = (type === "column") ? (status === "insert") ? rng[3] + count : rng[3] - count : (status === "insert") ? rng[2] + count : rng[2] - count;
                            diff1 = (type === "column") ? (status === "insert") ? rng[1] + count : rng[1] - count : (status === "insert") ? rng[0] + count : rng[0] - count;
                            (type === "column") ? (startIdx > rng[1] && (diff1 = rng[1])) : (startIdx > rng[0] && (diff1 = rng[0]));
                            (type === "column") ? (startIdx > rng[3] && (diff = rng[3])) : (startIdx > rng[2] && (diff = rng[2]));
                            if (diff1 > -1)
                                nAlpha = (type === "column") ? this._getAlphaRange(sIdx, rng[0], diff1, rng[2], diff) : this._getAlphaRange(sIdx, diff1, rng[1], diff, rng[3]);
                            else {
                                nAlpha = "#REF!";
                            }
                            if (status === "delete") {
                                ridx = parseInt(type === "row" ? fArg.replace(/[A-Z]/g, "") : this._generateColCount(fArg.replace(/[0-9]/g, "")));
                                if (deleteIdxs.indexOf(ridx) > -1) {
                                    nAlpha = "#REF!";
                                }
                            }
                            splitFormula[a] = nAlpha;
                        }
                    }
                    dupFormulaRange = $.extend(true, {}, this.getSheet(sIdx).formulaRange[range]);
                    dupFormulaRange = splitRange.join('');
                    val = splitFormula.join('');
                    delete this.getSheet(sIdx).formulaRange[range];
                    this.getSheet(sIdx).formulaRange[dupFormulaRange] = val;
                    newSelRng = this.getRangeIndices(range);
                    for (var l = newSelRng[0]; l <= newSelRng[2]; l++) {
                        for (var m = newSelRng[1]; m <= newSelRng[3]; m++) {
                            if (!ej.isNullOrUndefined(container[l])) {
                                if (!ej.isNullOrUndefined(container[l][m]))
                                    container[l][m]["formulaRange"] = dupFormulaRange;
                                else {
                                    container[l][m] = {};
                                    container[l][m]["formulaRange"] = dupFormulaRange;
                                }
                            }
                        }
                    }
                    this.XLEdit._formulaArrayRange = dupFormulaRange;
                }
            }
        },
        _undoInsDelMerge: function () {
            if (this._isUndo) {
                this._dupDetails = true;
                for (var k = 0, kLen = this._removeMergeColl.length; k < kLen; k++) {
                    this.mergeCenter = this._removeMergeColl[k].merge.isCenterAlign;
                    this.mergeCells(this._removeMergeColl[k].merge.mRange, true);
                }
                this._dupDetails = false;
            }
        },
        _updateCommentColl: function (sheetIdx) {
            this.getSheet(sheetIdx)._commentColl = {};
            this._isInsdel = true;
            this.XLComment._updateCmntArrowPos();
            this._isInsdel = false;
        },
        insertShiftRight: function (startCell, endCell) {
			var sheetIdx = this.getActiveSheetIndex();
            if (!this.model.allowInsert || this.model.isReadOnly || this.model.isGridMode || this._isPropExists([[startCell.rowIndex,startCell.colIndex,endCell.rowIndex,endCell.colIndex]], "isLocked", sheetIdx, true))
                return;
            var args = { startCell: startCell, endCell: endCell, sheetIndex: sheetIdx, reqType: "insert", action: "insertShiftRight", type: "actionBegin" };
            if (this._trigActionBegin(args))
                return;
            var status, selRng, isInsert = false, len, value, range, formulaRange;
            startCell = args.startCell; endCell = args.endCell
            if (this._isUndo) {
                status = "shiftLeft";
                this._insDelStatus = "delete";
            }
            else {
                status = "shiftRight";
                this._insDelStatus = "insert";
            }
            value = { startCol: startCell.colIndex, colCount: (endCell.colIndex - startCell.colIndex) + 1, startRow: startCell.rowIndex, rowCount: (endCell.rowIndex - startCell.rowIndex) + 1, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            range = this.getObjectKeys(this.getSheet(sheetIdx).formulaRange);
            len = range.length;
            for (var k = 0; k < len; k++) {
                selRng = range[k];
                formulaRange = this.getRangeIndices(range[k]);
                if (((startCell.rowIndex <= formulaRange[0] && endCell.rowIndex >= formulaRange[2]) && (startCell.colIndex <= formulaRange[1] && endCell.colIndex <= formulaRange[3]))) {
                    this.refreshArrayformulaInsDel(value, "column", "insert", value.colCount, value.startCol, selRng);
                }
                else if (((startCell.rowIndex >= formulaRange[0] && endCell.rowIndex <= formulaRange[2]) && (startCell.colIndex <= formulaRange[1] && endCell.colIndex <= formulaRange[3]))) {
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
                    return;
                }
            }
            if (this.model.allowFiltering)
                this.XLFilter._checkFilterApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            this._checkTableApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            this._isChartApplied = this._checkChartApplied(sheetIdx, startCell.rowIndex, startCell.colIndex, value.rowCount, value.colCount);
            if (this._isChartApplied)
                return;
            if (this._isFilterApplied || this._isTableApplied)
                this._showAlertDlg("Alert", "InsertDeleteAlert", "InsertDeleteAlert", 630);
            else {
                isInsert = this._clearAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
                if (!isInsert.isAlert) {
                    this._insData = { sheetIdx: sheetIdx, startCell: startCell, endCell: endCell, value: value };
                    if (!this._isUndoRedo)
                        this._showAlertDlg("Alert", "MergeInsertAlert", "MergeInsertDelete", 498);
                    else
                        this._refreshMergeCells();
                }
                else
                    this._insertShiftRight(sheetIdx, startCell, endCell, value);
                this._undoInsDelMerge();
            }
            this._insDelStatus = "";
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        _insertShiftRight: function (sheetIdx, startCell, endCell, value) {
            var iTd, count = endCell.colIndex - startCell.colIndex + 1, rows = this.getRows(sheetIdx)[1], hdrcolgrp = this._getJSSheetHeader(sheetIdx).find("col"), colgrp = this._getContent(sheetIdx).find("col"), len;
            this._updateWrapCol("insertShiftRight", this._getSelectedCells(sheetIdx, [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]).selCells, this.getSheet(sheetIdx), sheetIdx);
            if (this._isUndo) {
                for (var i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                    iTd = $(rows[this._getRowIdx(i)]).find('td');
                    len = iTd.length - 1;
                    for (var j = startCell.colIndex; j <= len - count; j++)
                        iTd[j].outerHTML = iTd[j + count].outerHTML;
                }
                for (var k = len; k > len - count; k--) {
                    hdrcolgrp.eq(k).remove();
                    colgrp.eq(k).remove();
                    for (var m = 0; m < rows.length; m++)
                        $(rows[this._getRowIdx(m)]).find('td:eq(' + k + ')').remove();
                }
            }
            else
                this.XLScroll._createNewColumn(sheetIdx, startCell, endCell, "shift");
            this.performSelection(startCell, endCell);
            this._refreshDataContainer(sheetIdx, value);
            this._isInsdel = true;
            if (this.model.allowCellType)
                this.XLCellType._rangeCellTypes(this.getSheet(sheetIdx).cellTypes, sheetIdx);
            this._isInsdel = false;
            !this._isUndo ? this._refreshAllMergeCells(sheetIdx, -1, 0, startCell.colIndex, value.colCount, "insert") : this._refreshAllMergeCells(sheetIdx, -1, 0, startCell.colIndex, value.colCount, "delete");
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            if (this.model.allowComments)
                this.XLComment._curCommentHCell = null;
            if (!this._isUndoRedo)
                this._undoredoDetails(sheetIdx, startCell, endCell, "insert", "insertShiftRight");
            this._refreshRows(sheetIdx);
        },

        insertShiftBottom: function (startCell, endCell) {
			var sheetIdx = this.getActiveSheetIndex();
            if (!this.model.allowInsert || this.model.isReadOnly || this.model.isGridMode || this._isPropExists([[startCell.rowIndex,startCell.colIndex,endCell.rowIndex,endCell.colIndex]], "isLocked", sheetIdx, true))
                return;
            var args = { startCell: startCell, endCell: endCell, sheetIndex: sheetIdx, reqType: "insert", action: "insertShiftBottom", type: "actionBegin" };
            if (this._trigActionBegin(args))
                return;
            var isInsert = false, status, value, range, formulaRange, selRng;
            startCell = args.startCell; endCell = args.endCell
            status = (!this._isUndo) ? "shiftBottom" : "shiftUp";
            value = { startCol: startCell.colIndex, colCount: (endCell.colIndex - startCell.colIndex) + 1, startRow: startCell.rowIndex, rowCount: (endCell.rowIndex - startCell.rowIndex) + 1, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            range = this.getObjectKeys(this.getSheet(sheetIdx).formulaRange);
            for (var k = 0, len = range.length; k < len; k++) {
                selRng = range[k];
                formulaRange = this.getRangeIndices(range[k]);
                if ((startCell.colIndex <= formulaRange[1] && endCell.colIndex <= formulaRange[3]) && (startCell.rowIndex <= formulaRange[0] && endCell.rowIndex <= formulaRange[2])) {
                    this.refreshArrayformulaInsDel(value, "row", "insert", value.rowCount, value.startRow, selRng);
                }
                else if ((startCell.colIndex >= formulaRange[1] && endCell.colIndex >= formulaRange[3]) && (startCell.rowIndex <= formulaRange[0] && endCell.rowIndex <= formulaRange[2])) {
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
                    return;
                }
            }
            this._isChartApplied = this._checkChartApplied(sheetIdx, startCell.rowIndex, startCell.colIndex, value.rowCount, value.colCount);
            if (this._isChartApplied)
                return;
            if (this.model.allowFiltering)
                this.XLFilter._checkFilterApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            this._checkTableApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            if (this._isFilterApplied || this._isTableApplied) {
                if (this._isTotalRow)
                    if (!this._isUndoRedo) {
                        this._showAlertDlg("", "TotalRowAlert", "TotalRow", 630);
                        return true;
                    }
                    else {
                        this._isUndoRedo = this._dupDetails = true;
                        !this._isUndo && this.insertEntireRow(this._insRows.startRow, this._insRows.endRow);
                        this._isUndoRedo = false;
                    }
                else
                    this._showAlertDlg("Alert", "InsertDeleteAlert", "InsertDeleteAlert", 630);
            }
            else {
                isInsert = this._clearAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
                if (!isInsert.isAlert) {
                    this._insData = { sheetIdx: sheetIdx, startCell: startCell, endCell: endCell, value: value };
                    if (!this._isUndoRedo)
                        this._showAlertDlg("Alert", "MergeInsertAlert", "MergeInsertDelete", 498);
                    else
                        this._refreshMergeCells();
                }
                else
                    this._insertShiftBottom(sheetIdx, startCell, endCell, value);
                this._undoInsDelMerge();
            }
            this._insDelStatus = "";
        },
        _aSortBehavior: function (a, b) {
            return a > b ? 1 : b > a ? -1 : 0;
        },
        _dSortBehavior: function (a, b) {
            return a < b ? 1 : b < a ? -1 : 0;
        },
        _insertShiftBottom: function (sheetIdx, startCell, endCell, value) {
            var isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling, i, j, k, len, kLen;
            this._updateWrapCol("insertShiftBottom", this._getSelectedCells(sheetIdx, [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]).selCells, this.getSheet(sheetIdx), sheetIdx);
            this._refreshDataContainer(sheetIdx, value);
            this._isInsdel = true;
            if (isVirtualScroll)
                this._refreshViewport(this.getSheet(sheetIdx)._scrollTop, sheetIdx);
            else {
                var x, xTd, iTd, rowHtColl = this.getSheet(sheetIdx).rowsHeightCollection, rowColl = this.getRows(sheetIdx), rows = rowColl[1], rowHdrs = rowColl[0];
                if (!this._isUndo) {
                    for (i = startCell.rowIndex; i <= endCell.rowIndex; i++)
                        this.XLScroll._createNewRow(sheetIdx, -1, -1, "insert");
                    for (i = rows.length - 1; i >= startCell.rowIndex; i--) {
                        x = i - ((endCell.rowIndex - startCell.rowIndex) + 1);
                        iTd = $(rows[i]).find('td');
                        if (x >= startCell.rowIndex) {
                            xTd = $(rows[x]).find('td')
                            for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                                iTd[j].outerHTML = xTd[j].outerHTML;
                                xTd[j].innerHTML = "";
                                iTd[j].className = xTd[j].className;
                                xTd[j].className = "e-rowcell e-wrapword";
                            }
                        }
                        rows[i].style.height = rowHtColl[i] + "px";
                        rowHdrs[i].style.height = rowHtColl[i] + "px";
                    }
                }
                else {
                    rows = this._getContent(sheetIdx).find("tbody").get(0).rows;
                    for (i = startCell.rowIndex, len = rows.length; i < len; i++) {
                        x = i + ((endCell.rowIndex - startCell.rowIndex) + 1);
                        iTd = $(rows[i]).find('td');
                        if (x < rows.length) {
                            xTd = $(rows[x]).find('td')
                            for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                                iTd[j].outerHTML = xTd[j].outerHTML;
                                xTd[j].innerHTML = "";
                            }
                        }
                        rows[i].style.height = rowHtColl[i] + "px";
                        rowHdrs[i].style.height = rowHtColl[i] + "px";
                    }
                    for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                        kLen = (len - 1) - ((endCell.rowIndex - startCell.rowIndex) + 1);
                        for (k = len - 1; k > kLen; k--) {
                            $(rows[k]).remove();
                            $(rowHdrs[k]).remove();
                            this.model.sheets[sheetIdx].rowCount = this.model.sheets[sheetIdx].rowCount - 1;
                        }
                    }
                    this.XLScroll._refreshScroller(1, { rowIndex: -1, colIndex: -1 }, { rowIndex: -1, colIndex: -1 }, "all");
                }
                this._isInsdel = false;
                this._refreshRows(sheetIdx);
            }
            this.XLScroll._getRowHeights(sheetIdx, startCell.rowIndex);
            this.performSelection(startCell, endCell);
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            if (this.model.allowComments)
                this.XLComment._curCommentHCell = null;
            (!this._isUndo) ? this._refreshAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, -1, 0, "insert") : this._refreshAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, -1, 0, "delete");
            if (!this._isUndoRedo && !this._dupDetails)
                this._undoredoDetails(sheetIdx, startCell, endCell, "insert", "insertShiftBottom");
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        insertEntireRow: function (startRow, endRow) {
			var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
            if (!this.model.allowInsert || this.model.isReadOnly || this._isPropExists([[startRow,0,endRow ,sheet.usedRange.colIndex]], "isLocked", sheetIdx, true))
                return;
            var args = { startRow: startRow, endRow: endRow, sheetIndex: sheetIdx, reqType: "insert", action: "insertRow", type: "actionBegin" }, cellTypeRng, cellRng, colDiff, cellTypeAlert = false;
            if (this._trigActionBegin(args))
                return;
            var isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling, i, formulaRng, selRng, len, status, value, rowhdrSel = sheet._isRowSelected, range,
                selCell = sheet._selectedCells, stCol = selCell[0].colIndex, endCol = selCell[selCell.length - 1].colIndex;
            startRow = args.startRow; endRow = args.endRow
            this._updateWrapCol("insertEntireRow", selCell, sheet, sheetIdx);
            if (!this._isUndo) {
                status = "insertRow";
                this._insDelStatus = "insert";
            }
            else {
                status = "deleteRow";
                this._insDelStatus = "delete";
            }
            value = { startCol: 0, colCount: sheet.colCount, startRow: startRow, rowCount: (endRow - startRow) + 1, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            range = this.getObjectKeys(this.getSheet(sheetIdx).formulaRange);
            len = range.length;
            for (var k = 0; k < len; k++) {
                selRng = range[k];
                formulaRng = this.getRangeIndices(selRng);
                if (value.startRow <= formulaRng[0])
                    this.refreshArrayformulaInsDel(value, "row", "insert", value.rowCount, value.startRow, selRng);
                else {
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
                    return;
                }
            }
            if (this.XLRibbon._isDirtySelect || (this.model.allowFiltering && this.XLFilter._checkFilterApplied(sheetIdx, startRow, value.rowCount, 0, sheet.colCount, status))) {
                this._showAlertDlg("Alert", "InsertDeleteAlert", 440);
                return;
            }
            this._clearAllMergeCells(sheetIdx, startRow, value.rowCount, -1, 0, status);
            this._isUndo && this.XLShape && this.XLShape._refreshChartdataInsDel(value, value.rowCount, value.startRow, sheetIdx);
            cellTypeRng = this.getSheet(sheetIdx).cellTypes;
            len = cellTypeRng.length;
            for (var a = 0; a < len; a++) {
                cellRng = this.getRangeIndices(cellTypeRng[a].range);
                colDiff = cellRng[3] - cellRng[1];
                if (colDiff >= 1) {
                    if (cellRng[2] > startRow)
                        cellTypeAlert = true;
                    break;
                }
            }
            if (cellTypeAlert) {
                this._showAlertDlg("Alert", "CellTypeInsertDeleteAlert", 440);
                cellTypeAlert = false;
            }
            else
                this._refreshDataContainer(sheetIdx, value);
            this._isInsdel = true;
            if (this._isUndo)
                this._batchDeleteRow(startRow, endRow, sheetIdx, true);
            else
                this._batchAddRow(startRow, endRow, sheetIdx);
            if (isVirtualScroll) {
                this.model.allowFiltering && this.XLFilter._updateFilterCollection(sheetIdx, startRow, endRow - startRow, "row", this._insDelStatus);
                sheet.rowCount = this._isUndo ? (sheet.rowCount - value.rowCount) : (sheet.rowCount + value.rowCount);
                this.refreshContent(sheetIdx);
            }
            else {
                var rowColl, rows, rowHdrs;
                if (!this._isUndo) {
                    for (i = startRow; i <= endRow; i++)
                        this.XLScroll._createNewRow(sheetIdx, i, 0, "insert");
                }
                else {
                    rowColl = this.getRows(sheetIdx), rows = rowColl[1], rowHdrs = rowColl[0];
                    for (i = endRow; i >= startRow; i--) {
                        $(rows[i]).remove();
                        $(rowHdrs[i]).remove();
                        sheet.rowCount = sheet.rowCount - 1;
                    }
                    var thdr = rowHdrs.find('td');
                    for (i = 0, len = thdr.length; i < len; i++)
                        $(thdr[i]).text(i + 1);
                }
                this.model.allowFiltering && this.XLFilter._updateFilterCollection(sheetIdx, startRow, endRow - startRow, "row", this._insDelStatus);
                this.XLScroll._getRowHeights(sheetIdx, startRow);
                this._refreshRows(sheetIdx);
            }
            this._isInsdel = false;
            if (this._isFrozen(sheet.frozenRows)) {
                if (startRow < sheet._frozenRows || endRow < sheet._frozenRows)
                    this.XLFreeze._refreshFreezeRowDiv();
            }
            if (this._isUndo)
                this._refreshAllMergeCells(sheetIdx, startRow, value.rowCount, -1, 0, "delete");
            else
                this._refreshAllMergeCells(sheetIdx, startRow, value.rowCount, -1, 0, "insert");
            rowhdrSel ? this.XLSelection.selectRows(startRow, endRow) : this.performSelection({ rowIndex: startRow, colIndex: stCol }, { rowIndex: endRow, colIndex: endCol });
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            if (!this._isUndoRedo && !this._dupDetails)
                this._undoredoDetails(sheetIdx, { rowIndex: startRow, colIndex: 0 }, { rowIndex: endRow, colIndex: sheet.colCount - 1 }, "insert", "insertRow");
            if (this.XLShape)
                this._isUndo ? this.XLShape._refreshChartdataInsDel(value, value.rowCount, value.startRow, sheetIdx, true) : this.XLShape._refreshChartdataInsDel(value, value.rowCount, value.startRow, sheetIdx);
            this._insDelStatus = "";
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
            if (this._isAutoWHMode) {
                this._setElemDimension();
            }
        },

        insertEntireColumn: function (startCol, endCol) {
			var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
            if (!this.model.allowInsert || this.model.isReadOnly || this.model.isGridMode || this._isPropExists([[0,startCol,sheet.usedRange.rowIndex ,endCol]], "isLocked", sheetIdx, true))
                return;
            var args = { startCol: startCol, endCol: endCol, sheetIndex: sheetIdx, reqType: "insert", action: "insertColumn", type: "actionBegin" }, cellTypeRng, cellRng, colDiff;
            if (this._trigActionBegin(args))
                return;
            var j, isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling, status, value, colHdrSel = sheet._isColSelected, startCell, endCell, range,
                selCell = sheet._selectedCells, stRow = selCell[0].rowIndex, endRow = selCell[selCell.length - 1].rowIndex, colWtColl = sheet.columnsWidthCollection, formulaRng, selRng;
            startCol = args.startCol;
            endCol = args.endCol;
            this._updateWrapCol("insertEntireColumn", selCell, sheet, sheetIdx);
            if (this._isUndo) {
                this._insDelStatus = "delete";
                status = "deleteColumn";
            }
            else {
                status = "insertColumn";
                this._insDelStatus = "insert";
            }
            if (sheet._isTemplate && (startCol < sheet._templateColCount || endCol < sheet._templateColCount))
                return;
            value = { startCol: startCol, colCount: (endCol - startCol) + 1, startRow: 0, rowCount: sheet.rowCount, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevChartDetails: this._chartUndo, curChartDetails: this._chartRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            range = this.getObjectKeys(this.getSheet(sheetIdx).formulaRange);
            for (var k = 0, len = range.length; k < len; k++) {
                selRng = range[k];
                formulaRng = this.getRangeIndices(selRng);
                if (value.startCol <= formulaRng[1])
                    this.refreshArrayformulaInsDel(value, "column", "insert", value.colCount, value.startCol, selRng);
                else {
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
                    return;
                }
            }
            if (this.XLRibbon._isDirtySelect || (this.model.allowFiltering && this.XLFilter._checkFilterApplied(sheetIdx, value.startRow, sheet.rowCount, startCol, value.colCount, status))) {
                this._showAlertDlg("Alert", "InsertDeleteAlert", 440);
                return;
            }
            this._clearAllMergeCells(sheetIdx, -1, 0, startCol, value.colCount, status);
            this._isUndo && this.XLShape && this.XLShape._refreshChartdataInsDel(value, value.colCount, value.startCol, sheetIdx, false);
            if (status === "deleteColumn" && isVirtualScroll) {
                for (j = endCol; j >= startCol; j--) {
                    colWtColl.splice(j, 1);
                    colWtColl.push(sheet.columnWidth);
                }
            }
            startCell = { rowIndex: stRow, colIndex: startCol };
            endCell = { rowIndex: endRow, colIndex: endCol };
            this._isInsdel = true;  // set true to the cell type undo redo
            if (isVirtualScroll) {
                var cellTypeAlert = false;
                cellTypeRng = this.getSheet(sheetIdx).cellTypes;
                len = cellTypeRng.length;
                for (var a = 0; a < len; a++) {
                    cellRng = this.getRangeIndices(cellTypeRng[a].range);
                    colDiff = cellRng[3] - cellRng[1];
                    if (colDiff >= 1) {
                        if (cellRng[3] > startCol)
                            cellTypeAlert = true;
                        break;
                    }
                }
                if (cellTypeAlert) {
                    this._showAlertDlg("Alert", "CellTypeInsertDeleteAlert", 440);
                    cellTypeAlert = false;
                }
                else {
                    this._refreshDataContainer(sheetIdx, value);
                    this.refreshContent(sheetIdx);
                }
            }
            else {
                this.XLScroll._createNewColumn(sheetIdx, startCell, endCell, "insert");
                this._refreshDataContainer(sheetIdx, value);
            }
            this._isInsdel = false; // set false to the celltype undo redo
            (!this._isUndo) ? this._refreshAllMergeCells(sheetIdx, -1, 0, startCol, value.colCount, "insert") : this._refreshAllMergeCells(sheetIdx, -1, 0, startCol, value.colCount, "delete");
            this.model.allowFiltering && this.XLFilter._updateFilterCollection(sheetIdx, startCol, endCol - startCol, "column", this._insDelStatus);
            if (this._isFrozen(sheet.frozenColumns)) {
                if (startCol < sheet._frozenColumns || endCol < sheet._frozenColumns)
                    this.XLFreeze._refreshFreezeColDiv();
            }
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            this._refreshRows(sheetIdx);
            if ((this._isFrozen(sheet.frozenRows) || this._isFrozen(sheet.frozenColumns)) && this.model.allowAutoFill)
                this.XLDragFill.positionAutoFillElement();
            if (this._isAutoWHMode)
                this._autoSSWidthHeight(sheetIdx);
            if (this.XLShape)
                this._isUndo ? this.XLShape._refreshChartdataInsDel(value, value.colCount, value.startCol, sheetIdx, true) : this.XLShape._refreshChartdataInsDel(value, value.colCount, value.startCol, sheetIdx, true);
            colHdrSel ? this.XLSelection.selectColumns(startCol, endCol) : this.performSelection(startCell, endCell);
            if (!this._isUndoRedo)
                this._undoredoDetails(sheetIdx, startCell, endCell, "insert", "insertColumn");
            this._insDelStatus = "";
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        deleteShiftLeft: function (startCell, endCell) {
			var sheetIdx = this.getActiveSheetIndex();
            if (!this.model.allowDelete || this.model.isReadOnly || this.model.isGridMode || this._isPropExists([[startCell.rowIndex,startCell.colIndex,endCell.rowIndex,endCell.colIndex]], "isLocked", sheetIdx, true))
                return;
            var args = { startCell: startCell, endCell: endCell, sheetIndex: sheetIdx, reqType: "delete", action: "deleteShiftLeft", type: "actionBegin" };
            if (this._trigActionBegin(args))
                return;
            var isDelete = false, status, value, range, formulaRange;
            startCell = args.startCell; endCell = args.endCell;
            if (!this._isUndo) {
                this._insDelStatus = "delete";
                status = "shiftLeft";
            }
            else {
                this._insDelStatus = "insert";
                status = "shiftRight";
            }
            value = { startCol: startCell.colIndex, colCount: (endCell.colIndex - startCell.colIndex) + 1, startRow: startCell.rowIndex, rowCount: (endCell.rowIndex - startCell.rowIndex) + 1, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            range = this.getObjectKeys(this.getSheet(sheetIdx).formulaRange);
            for (var k = 0, len = range.length; k < len; k++) {
                formulaRange = this.getRangeIndices(range[k]);
                if (startCell.colIndex <= formulaRange[1]) {
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
                    return;
                }
            }
            this._isChartApplied = this._checkChartApplied(sheetIdx, startCell.rowIndex, startCell.colIndex, value.rowCount, value.colCount);
            if (this._isChartApplied)
                return;
            if (this.model.allowFiltering)
                this.XLFilter._checkFilterApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            this._checkTableApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            if (this._isFilterApplied || this._isTableApplied)
                this._showAlertDlg("Alert", "InsertDeleteAlert", "InsertDeleteAlert", 630);
            else {
                isDelete = this._clearAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
                if (!isDelete.isAlert) {
                    this._insData = { sheetIdx: sheetIdx, startCell: startCell, endCell: endCell, value: value };
                    if (!this._isUndoRedo)
                        this._showAlertDlg("Alert", "MergeInsertAlert", "MergeInsertDelete", 498);
                    else
                        this._refreshMergeCells();
                }
                else
                    !isDelete.isCancel && this._deleteShiftLeft(sheetIdx, startCell, endCell, value);
                this._undoInsDelMerge();
            }
            this._insDelStatus = "";
        },

        _deleteShiftLeft: function (sheetIdx, startCell, endCell, value) {
            var i, j, length, tds, k, rowElemIdx, colCount = endCell.colIndex - startCell.colIndex + 1, rows = this.getRows(sheetIdx)[1], text = [], uLength;
            this._updateWrapCol("deleteShiftLeft", this._getSelectedCells(sheetIdx, [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]).selCells, this.getSheet(sheetIdx), sheetIdx);
            if (!this._isUndo) {
                this._insDelStatus = "delete";
                for (i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                    rowElemIdx = this._getRowIdx(i);
                    tds = $(rows[rowElemIdx]).find('td');
                    for (j = startCell.colIndex; j <= endCell.colIndex; j++)
                        text.push(tds[j].outerHTML);
                    length = tds.length;
                    for (k = startCell.colIndex; k < length - colCount; k++)
                        tds[k].outerHTML = tds[k + colCount].outerHTML;
                }
            }
            else {
                $.extend(true, text, this._deletedText);
                for (i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                    rowElemIdx = this._getRowIdx(i);
                    tds = $(rows[rowElemIdx]).find('td');
                    uLength = tds.length - 1;
                    for (k = uLength - colCount; k > startCell.colIndex - 1; k--)
                        tds[k + colCount].outerHTML = tds[k].outerHTML;
                    for (j = startCell.colIndex; j <= endCell.colIndex; j++)
                        tds[j].outerHTML = text.shift();
                }
            }
            this.performSelection(startCell, endCell);
            this._refreshDataContainer(sheetIdx, value);
            this._isInsdel = true;
            if (this.model.allowCellType)
                this.XLCellType._rangeCellTypes(this.getSheet(sheetIdx).cellTypes, sheetIdx);
            this._isInsdel = false;
            if (this.model.allowComments) this.XLComment._curCommentHCell = null;
            this._deletedText = text;
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            (!this._isUndo) ? this._refreshAllMergeCells(sheetIdx, -1, 0, startCell.colIndex, value.colCount, "delete") : this._refreshAllMergeCells(sheetIdx, -1, 0, startCell.colIndex, value.colCount, "insert");
            (!this._isUndoRedo) && this._undoredoDetails(sheetIdx, startCell, endCell, "delete", "deleteShiftLeft");
            this._refreshRows(sheetIdx);
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },
        deleteShiftUp: function (startCell, endCell) {
			var sheetIdx = this.getActiveSheetIndex();
            if (!this.model.allowDelete || this.model.isReadOnly || this.model.isGridMode || this._isPropExists([[startCell.rowIndex,startCell.colIndex,endCell.rowIndex,endCell.colIndex]], "isLocked", sheetIdx, true))
                return;
            var args = { startCell: startCell, endCell: endCell, sheetIndex: sheetIdx, reqType: "delete", action: "deleteShiftUp", type: "actionBegin" };
            if (this._trigActionBegin(args))
                return;
            var isDelete = false, status, value;
            startCell = args.startCell; endCell = args.endCell;
            status = (!this._isUndo) ? "shiftUp" : "shiftBottom";
            value = { startCol: startCell.colIndex, colCount: (endCell.colIndex - startCell.colIndex) + 1, startRow: startCell.rowIndex, rowCount: (endCell.rowIndex - startCell.rowIndex) + 1, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            if (this.XLEdit.getPropertyValue(startCell.rowIndex, startCell.colIndex, "hasFormulaArray")) {
                this._showAlertDlg("Alert", "ArrayaFormula", "multipleArrayFormula", 430);
                return;
            }
            this._isChartApplied = this._checkChartApplied(sheetIdx, startCell.rowIndex, startCell.colIndex, value.rowCount, value.colCount);
            if (this._isChartApplied)
                return;
            if (this.model.allowFiltering)
                this.XLFilter._checkFilterApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            this._checkTableApplied(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
            if (this._isFilterApplied || this._isTableApplied) {
                if (this._isTotalRow)
                    return;
                this._showAlertDlg("Alert", "InsertDeleteAlert", "InsertDeleteAlert", 630);
            }
            else {
                isDelete = this._clearAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, startCell.colIndex, value.colCount, status);
                if (!isDelete.isAlert) {
                    this._insData = { sheetIdx: sheetIdx, startCell: startCell, endCell: endCell, value: value };
                    if (!this._isUndoRedo)
                        this._showAlertDlg("Alert", "MergeInsertAlert", "MergeInsertDelete", 498);
                    else
                        this._refreshMergeCells();
                }
                else
                    !isDelete.isCancel && this._deleteShiftUp(sheetIdx, startCell, endCell, value);
                this._undoInsDelMerge();
            }
            this._insDelStatus = "";
        },

        _deleteShiftUp: function (sheetIdx, startCell, endCell, value) {
            var isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling, i, j, len, text = [], x, rowElemIdx, sheet = this.getSheet(sheetIdx);
            this._refreshDataContainer(sheetIdx, value);
            this._isInsdel = true;
            this._updateWrapCol("deleteShiftUp", this._getSelectedCells(sheetIdx, [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]).selCells, sheet, sheetIdx);
            if (isVirtualScroll)
                this._refreshViewport(sheet._scrollTop, sheetIdx);
            else {
                var itds, xtds, rowHtColl = sheet.rowsHeightCollection, rowsColl = this.getRows(sheetIdx), rows = rowsColl[1], rowHdrs = rowsColl[0];
                if (!this._isUndo || this._isTotalRow) {
                    for (i = startCell.rowIndex, len = rows.length; i < len; i++) {
                        x = i + ((endCell.rowIndex - startCell.rowIndex) + 1);
                        rowElemIdx = this._getRowIdx(i);
                        itds = $(rows[rowElemIdx]).find('td');
                        if (x < rows.length) {
                            xtds = $(rows[this._getRowIdx(x)]).find('td');
                            for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                                text.push(itds[j].outerHTML);
                                itds[j].outerHTML = xtds[j].outerHTML;
                                xtds[j].innerHTML = "";
                            }
                        }
                        rows[rowElemIdx].style.height = rowHtColl[i] + "px";
                        rowHdrs[rowElemIdx].style.height = rowHtColl[i] + "px";
                    }
                }
                else {
                    $.extend(true, text, this._deletedText);
                    for (i = rows.length - 1; i >= startCell.rowIndex; i--) {
                        x = i - ((endCell.rowIndex - startCell.rowIndex) + 1);
                        rowElemIdx = this._getRowIdx(i);
                        itds = $(rows[rowElemIdx]).find('td');
                        if (x >= startCell.rowIndex) {
                            xtds = $(rows[this._getRowIdx(x)]).find('td');
                            for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                                itds[j].outerHTML = xtds[j].outerHTML;
                                xtds[j].innerHTML = "";
                            }
                        }
                        rows[rowElemIdx].style.height = rowHtColl[i] + "px";
                        rowHdrs[rowElemIdx].style.height = rowHtColl[i] + "px";
                    }
                    for (i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                        itds = $(rows[this._getRowIdx(i)]).find('td');
                        for (j = startCell.colIndex; j <= endCell.colIndex; j++)
                            itds[j].outerHTML = text.shift();
                    }
                }
                this._refreshRows(sheetIdx);
            }
            this._isInsdel = false;
            this.XLScroll._getRowHeights(sheetIdx, startCell.rowIndex);
            this.performSelection(startCell, endCell);
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            if (this.model.allowComments) this.XLComment._curCommentHCell = null;
            this._deletedText = text;
            (!this._isUndo) ? this._refreshAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, -1, 0, "delete") : this._refreshAllMergeCells(sheetIdx, startCell.rowIndex, value.rowCount, -1, 0, "insert");
            if (!this._isUndoRedo && !this._dupDetails)
                this._undoredoDetails(sheetIdx, startCell, endCell, "delete", "deleteShiftUp");
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        deleteEntireRow: function (startRow, endRow) {
			var sheetIdx = this.getActiveSheetIndex(),sheet = this.getSheet(sheetIdx);
            if (!this.model.allowDelete || this.model.isReadOnly || this._isPropExists([[startRow,0,endRow ,sheet.usedRange.colIndex]], "isLocked", sheetIdx, true))
                return;
            var args = { startRow: startRow, endRow: endRow, sheetIndex: sheetIdx, reqType: "delete", action: "deleteRow", type: "actionBegin" };
            if (this._trigActionBegin(args))
                return;
            var formulaRange, selRng, isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling, i, len, status,
                selCell = sheet._selectedCells, stCol = selCell[0].colIndex, endCol = selCell[selCell.length - 1].colIndex, rowHeightColl = sheet.rowsHeightCollection, range;
            startRow = args.startRow;
            endRow = args.endRow;
            if (this.model.isGridMode) {
                if (((endRow - startRow) + 1 == sheet.rowCount) || (sheet.showHeader && sheet.rowCount < 3) || (sheet.showHeader && sheet.rowCount - ((endRow - startRow) + 1)) == 1) {
                    this._showAlertDlg("Alert", "GridModeRecordsCount", 430);
                    return;
                }
                if (sheet.showHeader && (startRow == 0 || endRow == 0)) {
                    this._showAlertDlg("Alert", "GridModeDataHeader", 430);
                    return;
                }
            }
            this._updateWrapCol("deleteEntireRow", selCell, sheet, sheetIdx);
            if (!this._isUndo) {
                status = "deleteRow";
                this._insDelStatus = "delete";
            }
            else {
                this._insDelStatus = "insert";
                status = "insertRow";
            }
            value = { startCol: 0, colCount: sheet.colCount, startRow: startRow, rowCount: (endRow - startRow) + 1, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            range = this.getObjectKeys(this.getSheet(sheetIdx).formulaRange);
            len = range.length;
            for (var k = 0; k < len; k++) {
                selRng = range[k]
                formulaRange = this.getRangeIndices(selRng);
                if (startRow == formulaRange[2]) {
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
                    return;
                }
                else
                    this.refreshArrayformulaInsDel(value, "row", "delete", value.rowCount, value.startRow, selRng);
            }
            if (!this._isUndoRedo && (this.XLRibbon._isDirtySelect || (this.model.allowFiltering && this.XLFilter._checkFilterApplied(sheetIdx, startRow, value.rowCount, 0, sheet.colCount, status)))) {
                this._showAlertDlg("Alert", "InsertDeleteAlert", 440);
                return;
            }
            !this._isUndo && this.XLShape && this.XLShape._refreshChartdataInsDel(value, value.rowCount, value.startRow, sheetIdx, false);
            this._clearAllMergeCells(sheetIdx, startRow, value.rowCount, -1, 0, status);
            this._refreshDataContainer(sheetIdx, value);
            this._isInsdel = true;
            if (this._isUndo)
                this._batchAddRow(startRow, endRow, sheetIdx, true);
            else
                this._batchDeleteRow(startRow, endRow, sheetIdx);
            if (isVirtualScroll || this.model.isGridMode) {
                if (this.model.scrollSettings.scrollMode === "normal")
                    sheet.rowCount = this._isUndo ? (sheet.rowCount + value.rowCount) : (sheet.rowCount - value.rowCount);
                this.refreshContent(sheetIdx);
            }
            else {
                var thdr, rowElemIdx, tdHdr, text = [], tr, value, rowColl = this.getRows(sheetIdx), rows = rowColl[1], rowHdrs = rowColl[0];
                if (!this._isUndo) {
                    for (i = endRow; i >= startRow; i--) {
                        rowElemIdx = this._getRowIdx(i);
                        text.push(rows[rowElemIdx].outerHTML);
                        $(rows[rowElemIdx]).remove();
                        $(rowHdrs[rowElemIdx]).remove();
                        sheet.rowCount = sheet.rowCount - 1;
                        this.XLScroll._createNewRow(sheetIdx, -1, -1, "insert");
                    }
                }
                else {
                    $.extend(true, text, this._deletedText);
                    for (i = startRow; i <= endRow; i++) {
                        rowElemIdx = this._getRowIdx(i);
                        tr = text.pop();
                        $(rows[rowElemIdx]).before(tr);
                        tdHdr = this.XLScroll._rowHeaderTemplate(1, rowHeightColl[i]);
                        $(rowHdrs[rowElemIdx]).before(tdHdr);
                        sheet.rowCount = sheet.rowCount + 1;
                    }
                    this._refreshRows(sheetIdx);
                }
                thdr = $(this.getRows(sheetIdx)[0]).find('td');
                for (i = 0, len = thdr.length; i < len; i++)
                    $(thdr[i]).text(i + 1);
                this._refreshRows(sheetIdx);
            }
            this._isInsdel = false;
            if (this._isFrozen(sheet.frozenRows)) {
                if (startRow < sheet._frozenRows || endRow < sheet._frozenRows)
                    this.XLFreeze._refreshFreezeRowDiv();
            }
            if ((this.model.isGridMode && endRow == sheet.rowCount) || (sheet.showHeader && sheet.rowCount < 3))
                startRow = endRow = sheet.rowCount - 1;
            (sheet._isRowSelected) ? this.XLSelection.selectRows(startRow, endRow) : this.performSelection({ rowIndex: startRow, colIndex: stCol }, { rowIndex: endRow, colIndex: endCol });
            this._deletedText = text;
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            if (this._isUndo)
                this._refreshAllMergeCells(sheetIdx, startRow, value.rowCount, -1, 0, "insert");
            else
                this._refreshAllMergeCells(sheetIdx, startRow, value.rowCount, -1, 0, "delete");
            this.model.allowFiltering && this.XLFilter._updateFilterCollection(sheetIdx, startRow, endRow - startRow, "row", this._insDelStatus);
            this.XLScroll._getRowHeights(sheetIdx, startRow);
            (!this._isUndoRedo && !this._dupDetails) && this._undoredoDetails(sheetIdx, { rowIndex: startRow, colIndex: 0 }, { rowIndex: endRow, colIndex: sheet.colCount - 1 }, "delete", "deleteRow");
            if (this.XLShape)
                this._isUndo ? this.XLShape._refreshChartdataInsDel(value, value.rowCount, value.startRow, sheetIdx) : this.XLShape._refreshChartdataInsDel(value, value.rowCount, value.startRow, sheetIdx, true);
            this._insDelStatus = "";
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
            this.model.isGridMode && this._setElemDimension();
        },

        deleteEntireColumn: function (startCol, endCol) {
			var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
            if (!this.model.allowDelete || this.model.isReadOnly || this.model.isGridMode || this._isPropExists([[0,startCol,sheet.usedRange.rowIndex ,endCol]], "isLocked", sheetIdx, true))
                return;
            var args = { startCol: startCol, endCol: endCol, sheetIndex: sheetIdx, reqType: "delete", action: "deleteColumn", type: "actionBegin" };
            if (this._trigActionBegin(args))
                return;
            var formulaRange, selRng, i, j, len, tds, hiddenWth = 0, fColIdx = this.getFrozenColumns(), rows = this.getRows(sheetIdx)[1], colgrp = this._getContent(sheetIdx).find("col"), range,
                hdrcolgrp = this._getJSSheetHeader(sheetIdx).find("col"), colHdr = this._getJSSheetHeader(sheetIdx).find("th"), selCell = sheet._selectedCells, stRow = selCell[0].rowIndex, endRow = selCell[selCell.length - 1].rowIndex,
                status, text = [], value, tdRowData, colWt, tdColgrp = this.XLScroll._colGroupTemplate(1), colWidthColl = sheet.columnsWidthCollection, isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling,
                tbody = isVirtualScroll ? this._getContent(sheetIdx).find("tbody").get(1) : this._getContent(sheetIdx).find("tbody").get(0);
            startCol = args.startCol; endCol = args.endCol
            this._updateWrapCol("deleteEntireRow", selCell, sheet, sheetIdx);
            if (!this._isUndo) {
                status = "deleteColumn";
                this._insDelStatus = "delete";
            }
            else {
                status = "insertColumn";
                this._insDelStatus = "insert";
            }
            if (sheet._isTemplate && (startCol < sheet._templateColCount || endCol < sheet._templateColCount))
                return;
            value = { startCol: startCol, colCount: (endCol - startCol) + 1, startRow: 0, rowCount: sheet.rowCount, status: status, prevCellTypes: this._cellTypesUndo, curCellTypes: this._cellTypesRedo, prevChartDetails: this._chartUndo, curChartDetails: this._chartRedo, prevValData: this._valDataUndo, curValData: this._valDataRedo };
            range = this.getObjectKeys(this.getSheet(sheetIdx).formulaRange);
            len = range.length;
            for (var k = 0; k < len; k++) {
                selRng = range[k]
                formulaRange = this.getRangeIndices(selRng);
                if (startCol == formulaRange[1] || startCol == formulaRange[3]) {
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
                    return;
                }
                else
                    this.refreshArrayformulaInsDel(value, "column", "delete", value.colCount, value.startCol, selRng);
            }
            if (!this._isUndoRedo && (this.XLRibbon._isDirtySelect || (this.model.allowFiltering && this.XLFilter._checkFilterApplied(sheetIdx, value.startRow, value.rowCount, 0, sheet.colCount, status)))) {
                this._showAlertDlg("Alert", "InsertDeleteAlert", 440);
                return;
            }
            this._clearAllMergeCells(sheetIdx, -1, 0, startCol, value.colCount, status);
            if (!this._isUndo) {
                this.XLShape && this.XLShape._refreshChartdataInsDel(value, value.colCount, value.startCol, sheetIdx, false);
                this._deletedDimension = [];
                if (this._isFrozen(fColIdx) && fColIdx >= startCol) {
                    for (i = sheet._frozenColumns - 1; i < sheet._fleftColIdx; i++)
                        hiddenWth += sheet.columnsWidthCollection[i];
                    this._scrollContent({ x: -hiddenWth });
                }
                for (j = endCol; j >= startCol; j--) {
                    text.push(hdrcolgrp[j].outerHTML);
                    text.push(colgrp[j].outerHTML);
                    this._deletedDimension.push(colWidthColl.splice(j, 1)[0]);
                    hdrcolgrp.eq(j).remove();
                    colgrp.eq(j).remove();
                    hdrcolgrp.parent().append(tdColgrp);
                    colgrp.parent().append(tdColgrp);
                    colWidthColl.push(sheet.columnWidth);
                }
                for (i = 0, len = rows.length; i < len; i++) {
                    tds = $(rows[i]).find('td');
                    for (j = endCol; j >= startCol; j--) {
                        tdRowData = this.XLScroll._columnTemplate();
                        $(rows[i]).append(tdRowData);
                        text.push(tds[j].outerHTML);
                        $(tbody.rows[i]).find('td:eq(' + j + ')').remove();
                    }
                }
            }
            else {
                text = $.extend(true, text, this._deletedText);
                var diff = 0;
                for (i = rows.length - 1; i >= 0; i--) {
                    tds = $(rows[i]).find('td');
                    for (j = startCol; j <= endCol; j++) {
                        tds.eq(j - diff).before(text.pop());
                        diff++;
                    }
                    diff = 0;
                }
                for (j = startCol; j <= endCol; j++) {
                    colgrp.eq(j - diff).before(text.pop());
                    colHdr.eq(j - diff).before("<th class='e-headercell'><div class='e-headercelldiv'></div></th>");
                    hdrcolgrp.eq(j - diff).before(text.pop());
                    diff++;
                }
                colWt = colWidthColl.splice(0, startCol);
                ej.merge(colWt, this._deletedDimension.reverse());
                ej.merge(colWt, colWidthColl);
                sheet.columnsWidthCollection = colWt;
                this._deletedDimension = [];
                this.XLShape && this.XLShape._refreshChartdataInsDel(value, value.colCount, value.startCol, sheetIdx, false);
            }
            this.XLScroll._getColWidths(sheetIdx, startCol);
            if (this._isFrozen(sheet.frozenColumns)) {
                if (startCol < sheet._frozenColumns || endCol < sheet._frozenColumns)
                    this.XLFreeze._refreshFreezeColDiv();
            }
            this.model.allowFiltering && this.XLFilter._updateFilterCollection(sheetIdx, startCol, endCol - startCol, "column", this._insDelStatus);
            sheet.colCount = colgrp.length;
            colHdr = this._getJSSheetHeader(sheetIdx).find('th');
            this._refreshDataContainer(sheetIdx, value);
            this._isInsdel = true;
            var cls;
            for (i = 0, len = colHdr.length; i < len; i++) {
                if (this._checkIndicesInContainer(sheetIdx, 0, i, "hCol"))
                    cls = "e-hcol";
                if (this._checkIndicesInContainer(sheetIdx, 0, i, "isCHide"))
                    cls += "e-hide";
                this._removeClass(colHdr[i], "e-hcol");
                this._removeClass(colHdr[i], "e-hide");
                this.addClass(colHdr[i], cls);
                cls = "";
                $(colHdr[i]).find('div').text(this._generateHeaderText(i + 1));
            }
            if (isVirtualScroll)
                this.refreshContent(sheetIdx);
            this._isInsdel = false;
            (!this._isUndo) ? this._refreshAllMergeCells(sheetIdx, -1, 0, startCol, value.colCount, "delete") : this._refreshAllMergeCells(sheetIdx, -1, 0, startCol, value.colCount, "insert");
            this._deletedText = text;
            if (this.model.allowComments)
                this._updateCommentColl(sheetIdx);
            this._refreshRows(sheetIdx);
            this.XLShape && this.XLShape._refreshChartdataInsDel(value, value.colCount, value.startCol, sheetIdx, true);
            sheet._isColSelected ? this.XLSelection.selectColumns(startCol, endCol) : this.performSelection({ rowIndex: stRow, colIndex: startCol }, { rowIndex: endRow, colIndex: endCol });
            (!this._isUndoRedo) && this._undoredoDetails(sheetIdx, { rowIndex: 0, colIndex: startCol }, { rowIndex: sheet.rowCount - 1, colIndex: endCol }, "delete", "deleteColumn");
            this._insDelStatus = "";
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        _getSelectedRange: function (startcell, endcell) {
            var i, j, k, l, arr = [],
                range = this.swapRange([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]);
            i = range[0], j = range[2];
            while (i <= j) {
                k = range[1];
                l = range[3];
                while (k <= l) {
                    arr.push({ rowIndex: i, colIndex: k });
                    k++;
                }
                i++;
            }
            return arr;
        },

        performSelection: function (startCell, endCell) {
            var sheetIdx = this.getActiveSheetIndex(), range, sheet = this.getSheet(sheetIdx), selCells = sheet._selectedCells, stMerge, endMerge, stRange, endRange;
            if (typeof startCell === "string" || !this.getObjectLength(startCell)) {
                range = this._getRangeArgs(startCell, "object");
                startCell = { rowIndex: range[0], colIndex: range[1] };
                endCell = { rowIndex: range[2], colIndex: range[3] };
            }
            if (JSON.stringify(startCell) === JSON.stringify(selCells[0]) && (JSON.stringify(endCell) == JSON.stringify(selCells[selCells.length - 1]))) {
                sheet._startCell = startCell;
                sheet._endCell = endCell;
                this.model.allowSelection && this.XLSelection._refreshBorder();
                this._updateContextualTab(sheetIdx);
                return;
            }
            this.setActiveCell(startCell.rowIndex, startCell.colIndex);
            if (this.model.allowSelection) {
                stMerge = this.XLEdit.getPropertyValue(startCell.rowIndex, startCell.colIndex, "merge");
                endMerge = this.XLEdit.getPropertyValue(endCell.rowIndex, endCell.colIndex, "merge");
                if (stMerge) {
                    stRange = this.getRangeIndices(stMerge.mRange);
                    startCell = { rowIndex: stRange[0], colIndex: stRange[1] }
                }
                if (endMerge) {
                    endRange = this.getRangeIndices(endMerge.mRange);
                    endCell = { rowIndex: endRange[2], colIndex: endRange[3] }
                }
                this.XLSelection.selectRange(startCell, endCell);
            }
            if (this.model.allowAutoFill)
                this.XLDragFill.positionAutoFillElement();
            sheet._startCell = startCell;
            sheet._endCell = endCell;
            this._updateContextualTab(sheetIdx);
        },

        _updateContextualTab: function (sheetIdx) {
            var startCell = this.getSheet(sheetIdx)._startCell, tname, tid;
            if (this.model.showRibbon && !this._isScrolling) {
                this.XLRibbon._updateRibbonIcons();
                tname = this.XLEdit.getPropertyValue(startCell.rowIndex, startCell.colIndex, "tableName", sheetIdx);
                var rObj = $("#" + this._id + "_Ribbon").data("ejRibbon");
                if (tname) {
                    tid = this._getTableID(tname);
                    if (this.isNumber(tid))
                        this.XLRibbon._designTabUpdate(tid, startCell);
                }
                else if (this.model.showRibbon) {
                    if (rObj.model.selectedItemIndex === this.XLRibbon._getTabIndex("design") || rObj.isVisible(this._getLocStr("Design")))
                        this.XLRibbon._toggleDesignTab(startCell);
                    if (rObj.model.selectedItemIndex === this.XLRibbon._getTabIndex("format") || rObj.isVisible(this._getLocStr("FORMAT")))
                        this.XLRibbon._toggleFormatTab(startCell);
                    if (rObj.model.selectedItemIndex === this.XLRibbon._getTabIndex("chartdesign") || rObj.isVisible(this._getLocStr("CHARTDESIGN")))
                        this.XLRibbon._toggleChartDesignTab(startCell);
                    if (rObj.model.selectedItemIndex === this.XLRibbon._getTabIndex("analyze") || rObj.isVisible(this._getLocStr("ANALYZE")))
                        this.XLRibbon._toggleAnalyzeTab(startCell);
                    if (this.model.allowSparkline && rObj.model.selectedItemIndex === this.XLRibbon._getTabIndex("sparklinedesign") || rObj.isVisible(this._getLocStr("SPARKLINEDESIGN")))
                        this.XLSparkline._toggleSparklineDesignTab(startCell);
                }
            }
        },

        _checkRowCol: function (start, end) {
            if (start === 0 || end === 0)
                return;
            if (ej.isNullOrUndefined(end))
                end = start;
            return { start: start, end: end };
        },

        hideRow: function (startRow, endRow) {
            if (this.model.isGridMode) return;
            var rowColl = this._checkRowCol(startRow, endRow);
            this._hideRow(rowColl.start - 1, rowColl.end - 1, "isRHide");
        },

        showRow: function (startRow, endRow) {
            if (this.model.isGridMode) return;
            var rowColl = this._checkRowCol(startRow, endRow);
            this._showRow(rowColl.start, rowColl.end, "isRHide");
        },

        hideColumn: function (startCol, endCol) {
            if (this.model.isGridMode) return;
            var hideCol = this._checkRowCol(startCol, endCol);
            this._hideColumn(hideCol.start - 1, hideCol.end - 1);
        },

        showColumn: function (startCol, endCol) {
            if (this.model.isGridMode) return;
            var showCol = this._checkRowCol(startCol, endCol);
            this._showColumn(showCol.start, showCol.end);
        },

        _hideRow: function (startRow, endRow, type, isFrz) {
            var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), rowColl = this.getRows(sheetIdx), rows = rowColl[1], hdrRows = rowColl[0], scrollSettings = this.model.scrollSettings, isVirtualScroll = scrollSettings.allowVirtualScrolling,
                hideRowsColl = sheet.hideRowsCollection, hRows = [];
            if (!this._isUndoRedo && !isFrz) {
                this.XLEdit._updateDataContainer({ rowIndex: (startRow ? startRow - 1 : startRow), colIndex: 0 }, { dataObj: { hRow: true } });
                if (!isVirtualScroll)
                    this.addClass(this._getJSSheetRowHeaderContent(sheetIdx).find('.e-rowheader')[startRow ? startRow - 1 : startRow], "e-hrow");
            }
            for (var i = startRow; i <= endRow; i++) {
                if (type === "isRHide")
                    this.XLEdit._updateDataContainer({ rowIndex: i, colIndex: 0 }, { dataObj: { "isRHide": true } });
                hRows.push(i);
                if (hideRowsColl.indexOf(i) === -1) {
                    hideRowsColl.push(i);
                    if (!isVirtualScroll) {
                        if (this._isRowViewable(sheetIdx, i)) {
                            this.addClass(rows[i], "e-r-hide");
                            this.addClass(hdrRows[i], "e-r-hide");
                        }
                        if (scrollSettings.allowScrolling && (scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite) && (!sheet._isImported || sheet._isLoaded))
                            if (!this._isFilter)
                                this.XLScroll._createNewRow(sheetIdx, -1, -1, "insert");
                            else {
                                sheet.rowsHeightCollection.push(this.model.rowHeight);
                                this._hideRowColl.push(sheet.rowCount++);
                            }
                    }
                    this.XLShape && this.XLShape._refreshShapePosOnResize(i, 0, false, sheetIdx);
                }
            }
            if (this.model.allowCellFormatting)
                this.XLFormat._refreshHiddenBorder(startRow, endRow, true, true);
            (!this._isFilter) && this.XLScroll._getRowHeights(sheetIdx, startRow);
            this._showHideRows(sheetIdx, sheet, hRows, startRow, endRow, isVirtualScroll, "hide");
            if ((!sheet._isImported || sheet._isLoaded) && !this._isFilter && !this._isExport) {
                this.model.allowComments && this.XLComment._updateCmntArrowPos();
                if (this._isFrozen(sheet.frozenRows)) {
                    if (startRow < sheet._frozenRows || endRow < sheet._frozenRows)
                        this.XLFreeze._refreshFreezeRowDiv();
                }
                if (this.model.scrollSettings.allowScrolling && !isVirtualScroll)
                    this.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical");
                if (!this._isUndoRedo && !isFrz) {
                    sheet._activeCell.rowIndex = endRow + 1;
                    var details = { sheetIndex: sheetIdx, reqType: "show-hide", action: "hide", operation: "row", bSelect: { startRow: startRow, endRow: endRow }, aSelect: { startRow: endRow + 1, endRow: endRow + 1 }, addBRows: startRow ? [startRow - 1] : [startRow], remBRows: [], hideRows: hRows };
                    this._completeAction(details);
                    this._trigActionComplete(details);
                }
            }
            if (!isFrz && !this._isFilter) {
                this.XLSelection.selectRow(endRow + 1, sheetIdx);
                if (this.model.allowAutoFill)
                    this.XLDragFill.hideAutoFillElement();
            }
        },

        _showRow: function (startRow, endRow, type, isFrz, colHdr, colgrp, rowHdrTd) {
            var index, aSelect, sheetIdx = this.getActiveSheetIndex(), needActn = false, strtIdx = this._isUndoRedo ? startRow : (startRow - 1 > 0) ? startRow - 1 : 0, j = strtIdx, sheet = this.getSheet(sheetIdx), rowColl = this.getRows(sheetIdx), rows = rowColl[1], rowHeaders = rowColl[0],
                hRows = [], addBRow = [], remBRow = [], rowHtColl = sheet.rowsHeightCollection, hideRowsColl = sheet.hideRowsCollection,
                emptyTable = ej.buildTag("table#wrapTable.e-table", {}), dataContainer = this._dataContainer.sheets[sheetIdx],
                isVirtualScroll = this.model.scrollSettings.allowVirtualScrolling;
            while (j <= endRow) {
                if (hideRowsColl.indexOf(j) > -1) {
                    needActn = true;
                    break;
                }
                j++;
            }
            if (!needActn)
                return false;
            colHdr = colHdr || this.getSheetElement(sheetIdx)[0].querySelectorAll('.e-spreadsheetcolumnheader');
            colgrp = colgrp || $(this._getJSSheetHeader(sheetIdx)[0].querySelectorAll('colgroup')[0].outerHTML).attr("id", "ss");
            rowHdrTd = rowHdrTd || this.getSheetElement(sheetIdx)[0].querySelectorAll(".e-rowheadercontent td");
            if (!isVirtualScroll) {
                emptyTable.append(colgrp);
                this.element[0].insertBefore(emptyTable[0], this.element[0].childNodes[0]);
            }
            if (this.model.allowCellFormatting)
                this.XLFormat._refreshHiddenBorder(startRow, endRow, true);
            for (j = strtIdx; j <= endRow; j++) {
                index = hideRowsColl.indexOf(j);
                if (index > -1) {
                    if (type === "isRHide")
                        delete dataContainer[j][0]["isRHide"];
                    hRows.push(j);
                    hideRowsColl.splice(index, 1);
                    if (!isVirtualScroll) {
                        this._removeClass(rows[j], "e-r-hide");
                        this._removeClass(rowHeaders[j], "e-r-hide");
                    }
                    if (!this._isUndoRedo && (j > 0) && !isFrz) {
                        remBRow.push(j - 1);
                        delete dataContainer[j - 1][0].hRow;
                        if (!isVirtualScroll)
                            this._removeClass(rowHdrTd[j - 1], "e-hrow");
                    }
                    else if (j === 0 && !isFrz) {
                        delete dataContainer[0][0].hRow;
                        if (!isVirtualScroll) {
                            colHdr.height(20.5);
                            this._removeClass(colHdr[0], "e-hrow");
                        }
                    }
                    this.XLShape && this.XLShape._refreshShapePosOnResize(j, rowHtColl[j] * 2, false, sheetIdx);
                }
                if (!isVirtualScroll) {
                    this._setWrapHeight(sheetIdx, j, rows, rowHeaders, emptyTable, "visible");
                    emptyTable.remove();
                }
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
            }
            if (!this._isFilter)
                this.XLScroll._getRowHeights(sheetIdx, strtIdx);
            this._showHideRows(sheetIdx, sheet, hRows, startRow, endRow, isVirtualScroll, "show");
            if (!isFrz)
                if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && !this._isFilter) {
                    if (startRow < endRow) {
                        this.setActiveCell(startRow, 0);
                        this.XLSelection.selectRows(startRow, endRow, sheetIdx);
                        aSelect = { startRow: startRow, endRow: endRow };
                    }
                    else {
                        if (startRow > 0) {
                            this.setActiveCell(startRow - 1, 0);
                            this.XLSelection.selectRow(startRow - 1, sheetIdx);
                            aSelect = { startRow: startRow - 1, endRow: startRow - 1 };
                        }
                    }
                    this.XLDragFill.positionAutoFillElement();
                    var details = { sheetIndex: sheetIdx, reqType: "show-hide", action: "show", operation: "row", bSelect: { startRow: startRow, endRow: endRow }, aSelect: aSelect, addBRows: addBRow, remBRows: remBRow, hideRows: hRows };
                    this._completeAction(details);
                    this._trigActionComplete(details);
                }
            if (this._isFrozen(sheet.frozenRows)) {
                if (startRow < sheet._frozenRows || endRow < sheet._frozenRows)
                    this.XLFreeze._refreshFreezeRowDiv();
            }
            if (!this._isFilter) {
                if ((!sheet._isImported || sheet._isLoaded) && this.model.allowComments)
                    this.XLComment._updateCmntArrowPos();
                if (this.model.scrollSettings.allowScrolling)
                    this.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical");
            }
        },

        _showHideRows: function (sheetIdx, sheet, hRows, startRow, endRow, isVScroll, operation) {
            if (isVScroll) {
                (operation === "show") && this.refreshContent(sheetIdx);
                this._refreshViewport(this._isFrozen(sheet.frozenRows) ? sheet._contScrollTop : sheet._scrollTop, sheetIdx);
            }
            this._refreshSHMergeCells(sheetIdx, hRows, (endRow - startRow) + 1, "row", operation);
            if (isVScroll)
                (operation === "hide") && this.refreshContent(sheetIdx);
            if (sheet.selectedRange[0] < startRow && sheet.selectedRange[2] > endRow) {
                this.model.allowSelection && this.XLSelection.selectRange(sheet._activeCell, sheet._activeCell);
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();
            }
        },

        _colgroupRefresh: function (sheetIdx) {
            if (this.model.allowResizing) {
                var headerCol = this._getJSSheetHeader(sheetIdx).find('colgroup');
                var contentCol = this._getContent(sheetIdx).find('colgroup');
            }
            var headerColClone = $(headerCol).clone();
            var contentColClone = $(contentCol).clone();
            $(contentCol).remove();
            $(headerCol).remove();
            $(headerColClone).prependTo(this._getJSSheetHeader(sheetIdx).find('.e-table'));
            $(contentColClone).prependTo(this._getContent(sheetIdx).find('.e-table'));
        },

        _updateFilterIcon: function (colIdx, status, sheetIdx) {
            ej.isNullOrUndefined(sheetIdx) && (sheetIdx = this.getActiveSheetIndex());
            var tableRange = this.getSheet(sheetIdx).filterSettings.tableRange, stRow, colIdxes, i, iLen;
            for (i = 0, iLen = tableRange.length; i < iLen; i++) {
                colIdxes = tableRange[i].multifilterIdx;
                if (colIdx >= colIdxes[0] && colIdx <= colIdxes[colIdxes.length - 1]) {
                    stRow = tableRange[i].startRow - 1;
                    if (this._isRowViewable(sheetIdx, stRow)) {
                        if (status === "hide")
                            this.addClass(this.getCell(stRow, colIdx).find(".e-filterspan")[0], "e-hide");
                        else
                            this._removeClass(this.getCell(stRow, colIdx).find(".e-filterspan")[0], "e-hide");
                    }
                    this.XLEdit._updateDataContainer({ rowIndex: stRow, colIndex: colIdx }, { dataObj: { isFilterVisible: (status != "hide") } });
                }
            }
        },

        _hideColumn: function (startCol, endCol) {
            var i, j, len, aSelect, fltrKeys, isViewed = false, sheetIdx = this.getActiveSheetIndex(), hdr = this._getJSSheetHeader(sheetIdx).find("th"), hdrcolgrp = this._getJSSheetHeader(sheetIdx).find("col"),
                isCHide, sheet = this.getSheet(sheetIdx), hideColsColl = sheet.hideColsCollection, hCols = [], addBCol = [], colgrp = this._getContent(sheetIdx).find("col"),
                filterColl = sheet._filterColl, colWidthColl = sheet.columnsWidthCollection, colHdr = this.element.find('.e-spreadsheetcolumnheader');
            for (j = startCol; j <= endCol; j++) {
                this._getContent(sheetIdx).find(".e-rowcell:nth-child(" + (j + 1) + ")").addClass('e-soverflow');
                isCHide = this.XLEdit.getPropertyValue(0, j, "isCHide");
                if (this._isColumnViewable(sheetIdx, j))
                    isViewed = true;
                if (ej.isNullOrUndefined(isCHide)) {
                    this.XLShape && this.XLShape._refreshShapePosOnResize(j, 0, true, sheetIdx);
                    this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: j }, { dataObj: { isCHide: true } });
                    this._writeRule(j, sheetIdx);
                    if (isViewed) {
                        this.addClass(hdr[j], "e-hide");
                        this.addClass(hdrcolgrp[j], "e-hide");
                        this.addClass(colgrp[j], "e-hide");
                    }
                    hCols.push(j);
					if (colWidthColl[j] > 0) {
						hideColsColl[j] = colWidthColl[j];
						colWidthColl[j] = 0;
					}
                    fltrKeys = this.getObjectKeys(filterColl);
                    for (i = 0, len = fltrKeys.length; i < len; i++) {
                        if (!ej.isNullOrUndefined(filterColl[fltrKeys[i]])) {
                            if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(fltrKeys[i], j, "isSpanHide")))
                                this.XLEdit._updateDataContainer({ rowIndex: fltrKeys[i], colIndex: j }, { dataObj: { isSpanHide: true } });
                        }
                    }
                }
            }
            if (this.model.allowCellFormatting)
                this.XLFormat._refreshHiddenBorder(startCol, endCol, false, true);
            if (!this._isUndoRedo) {
                if (startCol)
                    addBCol.push(startCol - 1);
                else
                    addBCol.push(startCol);
                if (this._isColumnViewable(sheetIdx, startCol)) {
                    if (startCol === 0) {
                        colHdr.width(28);
                        this.addClass(colHdr[sheetIdx - 1], "e-hfcol");
                        this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: 0 }, { dataObj: { hCol: true } });
                    }
                    else {
                        this.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: startCol - 1 }, { dataObj: { hCol: true } });
                        this.addClass(this._getJSSheetHeader(sheetIdx).find('th:eq(' + (startCol - 1) + ')')[0], "e-hcol");
                    }
                }
            }
            this._refreshSHMergeCells(sheetIdx, hCols, (endCol - startCol) + 1, "column", "hide");
            this.XLScroll._getColWidths(sheetIdx, startCol);
            if (this._isFrozen(sheet.frozenColumns)) {
                this.XLScroll._refreshContHgt(sheetIdx);
                if (startCol < sheet._frozenColumns || endCol < sheet._frozenColumns)
                    this.XLFreeze._refreshFreezeColDiv();
            }
            if (this.model.scrollSettings.allowScrolling)
                this.XLScroll._refreshScroller(sheetIdx, "refresh", "horizontal");
            if (!sheet._isImported || sheet._isLoaded) {
                if (colWidthColl.length - 1 === endCol) {
                    this.XLSelection.selectColumn(endCol - 1, sheetIdx);
                    this.setActiveCell(0, endCol - 1);
                    aSelect = { startCol: endCol - 1, endCol: endCol - 1 };
                }
                else {
                    aSelect = { startCol: endCol + 1, endCol: endCol + 1 };
                    this.setActiveCell(0, endCol + 1);
                    this.XLSelection.selectColumn(endCol + 1, sheetIdx);
                }
                this.XLDragFill && this.XLDragFill.positionAutoFillElement();
                if (!this._isUndoRedo) {
                    var details = { sheetIndex: sheetIdx, reqType: "show-hide", action: "hide", operation: "column", bSelect: { startCol: startCol, endCol: endCol }, aSelect: aSelect, hideCols: hCols, addBCols: addBCol, remBCols: [] };
                    this._completeAction(details);
                    this._trigActionComplete(details);
                }
                if (this.model.allowComments)
                    this.XLComment._updateCmntArrowPos();
            }
            else
                this.setActiveCell(0, 0);
            if (this._browserDetails.name.indexOf("msie") > -1)
                this._colgroupRefresh(sheetIdx);
        },

        _showColumn: function (startCol, endCol) {
            var j, aSelect, sheetIdx = this.getActiveSheetIndex(), colIdx = this._isUndoRedo ? startCol : (startCol - 1 > 0) ? startCol - 1 : 0, sheet = this.getSheet(sheetIdx), hideColsColl = sheet.hideColsCollection,
                hCols = [], addBCol = [], isViewed = false, remBCol = [], hdr = this._getJSSheetHeader(sheetIdx).find("th"), colgrp = this._getContent(sheetIdx).find("col"),
                hdrcolgrp = this._getJSSheetHeader(sheetIdx).find('col'), colWtColl = sheet.columnsWidthCollection, colHdr = this.element.find('.e-spreadsheetcolumnheader');
            if (this.model.allowCellFormatting)
                this.XLFormat._refreshHiddenBorder(startCol, endCol);
            for (j = colIdx; j <= endCol; j++) {
                this._getContent(sheetIdx).find(".e-rowcell:nth-child(" + (j + 1) + ")").removeClass('e-soverflow');
                if (j in hideColsColl) {
                    this._deleteRule(j, sheetIdx);
                    this._isColumnViewable(sheetIdx, j) && (isViewed = true);
                    if (isViewed) {
                        this._removeClass(hdr[j], "e-hide");
                        this._removeClass(hdrcolgrp[j], "e-hide");
                        this._removeClass(colgrp[j], "e-hide");
                        colgrp[j].style["width"] = hideColsColl[j] + "px";
                        hdrcolgrp[j].style["width"] = hideColsColl[j] + "px";
                    }
                    colWtColl[j] = hideColsColl[j];
                    delete hideColsColl[j];
                    delete this._dataContainer.sheets[sheetIdx][0][j]["isCHide"];
                    if (this.model.allowFiltering)
                        this._updateFilterIcon(j, "show", sheetIdx)
                    hCols.push(j);
                    if (!this._isUndoRedo && (j > 0)) {
                        isViewed && this._removeClass(hdr.get(j - 1), "e-hcol");
                        delete this._dataContainer.sheets[sheetIdx][0][j - 1]["hCol"];
                        remBCol.push(j - 1);
                    }
                    else if (j === 0) {
                        colHdr.width(29);
                        this._removeClass(colHdr[sheetIdx - 1], "e-hfcol");
                        delete this._dataContainer.sheets[sheetIdx][0][0]["hCol"];
                    }
                    this.XLShape && this.XLShape._refreshShapePosOnResize(j, colWtColl[j] * 2, true, sheetIdx);
                }
            }
            this._refreshSHMergeCells(sheetIdx, hCols, (endCol - startCol) + 1, "column", "show");
            this.XLScroll._getColWidths(sheetIdx, colIdx);
            if (!this._isUndoRedo && (!sheet._isImported || sheet._isLoaded)) {
                if (startCol < endCol) {
                    this.XLSelection.selectColumns(startCol, endCol, sheetIdx);
                    aSelect = { startCol: startCol, endCol: endCol };
                }
                else {
                    this.XLSelection.selectColumn(colIdx, sheetIdx);
                    aSelect = { startCol: colIdx, endCol: colIdx };
                }
                this.XLDragFill && this.XLDragFill.positionAutoFillElement();
                var details = { sheetIndex: sheetIdx, reqType: "show-hide", action: "show", operation: "column", bSelect: { startCol: startCol, endCol: endCol }, aSelect: aSelect, addBCols: addBCol, remBCols: remBCol, hideCols: hCols };
                this._completeAction(details);
                this._trigActionComplete(details);
            }
            if (this._browserDetails.name.indexOf("msie") > -1)
                this._colgroupRefresh(sheetIdx);
            if ((!sheet._isImported || sheet._isLoaded) && this.model.allowComments)
                this.XLComment._updateCmntArrowPos();
            if (this._isFrozen(sheet.frozenColumns)) {
                if (startCol < sheet._frozenColumns || endCol < sheet._frozenColumns)
                    this.XLFreeze._refreshFreezeColDiv();
            }
            if (this.model.scrollSettings.allowScrolling)
                this.XLScroll._refreshScroller(sheetIdx, "refresh", "horizontal");
        },

        _refreshHideRowColCollection: function (collection, idx, count, type, action) {
            var coll, i;
            if (type === "row") {
                for (i = 0; i < collection.length; i++) {
                    if (collection[i] >= (idx + count)) {
                        if (action === "insert")
                            collection[i] += count;
                        else
                            collection[i] -= count;
                        break;
                    }
                }
            }
            else {
                coll = this.getObjectKeys(collection);
                for (i = coll.length - 1; i >= 0; i--) {
                    if (coll[i] >= (idx + count)) {
                        if (action === "insert") {
                            collection[parseInt(coll[i]) + count] = collection[coll[i]];
                            delete collection[coll[i]];
                        }
                        else {
                            collection[parseInt(coll[i]) - count] = collection[coll[i]];
                            delete collection[coll[i]];
                        }
                        break;
                    }
                }
            }
        },

        _destroySheet: function (index) {
            this.element.find("#" + this._id + "_" + this.model.sheets[index].sheetInfo.value).empty();
        },
        _destroy: function () {
            var name, i = 1, calcObj;
            if (this.isImport || this.model.isImport || this._isNew) {
                while (i <= this.model.sheetCount) {
                    delete $.templates[this._id + "JSONTemplate" + i];
                    delete $.templates[this._id + "JSONRowHdrTemplate" + i];
                    name = this.getSheet(i).sheetInfo.value;
                    CalcEngine.unregisterGridAsSheet(name, name);
                    i++;
                }
                this.model.sheets = [];
                this.model.nameManager = [];
                this._sheets = [];
                this.getActivationPanel().empty();
                if (this.model.enablePivotTable)
                    this.XLPivot._hasPvtField = false;
                this.isDirty = false;
                if (this.isImport || this.model.isImport) {
                    this._detachTable = null;
                    this._updateFormulaCollection();
                    if (this.XLFormat._isHeaderAdded) {
                        for (i = 0; i < 2; i++)
                            $("#" + this._id + "_cellstyles").children().eq(0).remove();
                        this.XLFormat._isHeaderAdded = false;
                    }
                }
                else {
                    document.getElementById(this._id + "_nmgrid") && $("#" + this._id + "_nmgrid").ejGrid("option", { dataSource: [] });
                    this._dataContainer = { sheets: {}, hashCode: [], sharedData: [], cellType: [], valData: [], cFormatData: [], customCellStyle: {} };
                    this.XLRibbon._updateUseInFormulaTrgt();
                    this.XLEdit._refreshAutoComplete();
                }
                this.element.append([this.getFocusTopElem(), this.getFocusRightElem(), this.getFocusBottomElem(), this.getFocusLeftElem(), this.getAutoFillElem(), this._getAutoFillOptElem()]);
                this.element.find(".e-spreadsheet-list .e-sheet").remove();
                document.getElementById(this._id + "ddl") && $("#" + this._id + "ddl").data('ejDropDownList').destroy();
                $("#" + this._id + "ddl").remove();
                this._tableCnt = this._newSIndex = 1;
                if (this.XLChart)
                    this.XLChart._shapeCnt = 1;
                CalcEngine._tokenCount = 0;
                this._isVPRendered = false;
            }
            else {
                this._wireEvents("_off");
                this._destroySubControls();
                this.element.empty();
                this.element.css({ "height": "", "width": "", "min-height": "", "min-width": "" });
                this.element.removeAttr("tabindex");
                this.element.removeEleEmptyAttrs();
                this._removeClass(this.element[0], "e-spreadsheet e-js");
                this.model.cssClass.length && this._removeClass(this.element[0], this.model.cssClass);
                $("#" + this._id + " _formatastable").parent().remove();
                $("#" + this._id + " _cellstyles").parent().remove();
                $("#" + this._id + "_Ribbon_Home_Font_BorderColor_popup").remove();
            }
            if (!this._isRefresh) {
                $("#" + this._id + "_sscustomformat").remove();
                document.getElementById(this._id + "_sshide") && (document.getElementById(this._id + "_sshide").outerHTML = '');
                calcObj = this.getCalcEngine();
                calcObj.getFormulaInfoTable().clear();
                calcObj.getDependentCells().clear();
                calcObj.getDependentFormulaCells().clear();
                calcObj.getNamedRanges().clear();
                calcObj.getDependentNamedRangeCells().clear();
                this._tableFormulaCollection = {};
                this._tableRangesFormula = {};
            }
            this._isRibbonDestroyed = true;
        },

        _destroySubControls: function () {
            var dlgs, id = this._id, ddl, ddlItem;
            //destroying dropdown list
            ddl = $("span.e-" + id + "-ddl input.e-dropdownlist");
            if (ddl.length)
                for (var i = 0, len = ddl.length; i < len; i++) {
                    ddlItem = $(ddl[i]).data("ejDropDownList")
                    if (ddlItem)
                        ddlItem.destroy();
                }
            if (this.model.allowFiltering) {
                var custddl = $(".e-" + this._id + "_customddl");
                custddl.length && custddl.ejDropDownList("destroy").remove();
                var strip = $("#" + this._id + "_filter_custom_string_acString"), numip = $("#" + this._id + "_filter_custom_number_acString"), dateip = $("#" + this._id + "_filter_custom_date_acString");
                strip.length && strip.ejAutocomplete("destroy").remove();
                numip.length && numip.ejNumericTextbox("destroy").remove();
                dateip.length && dateip.ejDatePicker("destroy").remove();
            }
            $("#" + this._id + "_colordlg_cpicker").ejColorPicker("destroy").remove();
            if (this.model.showRibbon) {
                this.XLRibbon && this.XLRibbon._rbnDestroy({ destroy: true });
                $(".e-" + this._id + "-spltbtn").ejSplitButton("destroy");
                $("#" + this._id + "_Ribbon").ejRibbon("destroy");
            }
            document.getElementById(this._id + "_nmgrid") && $("#" + this._id + "_nmgrid").ejGrid("destroy");
            //Removing dialogs appended in body
            dlgs = $(".e-" + id + "-dlg");
            if (dlgs.length)
                dlgs.remove();
            if (this.model.allowFormulaBar)
                $("#" + this._id + "_inputbox").ejAutocomplete("destroy");
            $("#" + this._id + "_AutoComplete").ejAutocomplete("destroy");
            if (this.model.allowAutoFill)
                $("#" + this._id + "_dragfilloptionbtn").ejSplitButton("destroy")
            if (this.model.enableContextMenu) {
                $("#" + this._id + "_contextMenuCell").ejMenu("destroy").remove();
                $("#" + this._id + "_contextMenuColumnHeader").ejMenu("destroy").remove();
                $("#" + this._id + "_contextMenuRowHeader").ejMenu("destroy").remove();
                $("#" + this._id + "_contextMenuFooter").ejMenu("destroy").remove();
                $(".e-" + id + "-cmenu").remove();
            }
            if (this.model.allowFiltering) { //destroy filter
                this._excelFilter && this._excelFilter.resetExcelFilter();
                $("#" + this._id + "number_excelDlg").remove();
                $("#" + this._id + "string_excelDlg").remove();
                $("#" + this._id + "date_excelDlg").remove();
            }
            $("#" + this._id + "_copyPaste").remove();
            $("#" + this._id + "_wait").ejWaitingPopup("destroy");
            $("#" + this._id + "_wait").remove();
            this.XLRibbon._isAppTabCreate = false,
                this.XLRibbon._isHomeTabCreate = false,
                this.XLRibbon._isInsertTabCreate = false,
                this.XLRibbon._isDataTabCreate = false,
                this.XLRibbon._isPageLayoutTabCreate = false,
                this.XLRibbon._isReviewTabCreate = false,
                this.XLRibbon._isOthersTabCreate = false,
                this.XLRibbon._isDesignTabCreate = false,
                this.XLRibbon._isFormatTabCreate = false,
                this.XLRibbon._isChartTabCreate = false,
                this.XLRibbon._analyzeTabCreate = false,
                this.XLRibbon._isHomeTabTrgt = false;
            this.XLRibbon._isInsertTabTrgt = false;
            this.XLRibbon._isDataTabTrgt = false;
            this.XLRibbon._isPageLayoutTabTrgt = false;
            this.XLRibbon._isOthersTabTrgt = false;
            this.XLRibbon._isChartTabTrgt = false;
            this.XLRibbon._analyzeTabTrgt = false;
            this.XLRibbon._isFormatTabTrgt = false;
            this.XLRibbon._isDesignTabTrgt = false;
            this._focusTopElem = null;
            this._focusRightElem = null;
            this._focusBottomElem = null;
            this._focusLeftElem = null;
            this._autoFillElem = null;
            this._autoFillOptElem = null;
        },

        _getXYPos: function ($target, $element, diffHt, diffWt) {
            var elemTop = this.element.offset().top, elemLeft = this.element.offset().left, dlgHeight = $element.height(), dlgWidth = $element.width(), xPos = $target.offset().left - elemLeft, yPos = $target.offset().top - elemTop;
            if ((yPos + diffHt + dlgHeight) > this._responsiveHeight)
                yPos = yPos - ((yPos + diffHt + dlgHeight) - this._responsiveHeight) + (elemTop - 6); //6 for borders
            else
                yPos += elemTop;
            if (yPos < elemTop)
                yPos += elemTop - yPos;
            if ((xPos + diffWt + dlgWidth) > this._responsiveWidth)
                xPos = xPos - ((xPos + diffWt + dlgWidth) - this._responsiveWidth) + (elemLeft - 6); //6 for borders
            else
                xPos += elemLeft + diffWt;
            if (xPos < elemLeft)
                xPos += elemLeft - xPos;
            return { xPos: xPos, yPos: yPos };
        },

        getValueRowCol: function (sheetIdx, rowIdx, colIdx) {
            sheetIdx = this._getSheetIdxFromSheetValue(this._getLocStr("Sheet") + sheetIdx);
            var val, sheet = this.getSheet(sheetIdx), rangeData = this.getRangeData({ range: [rowIdx - 1, colIdx - 1, rowIdx - 1, colIdx - 1], property: ["value", "type", "customFormat"], sheetIdx: sheetIdx })[0];
            if (sheetIdx == -1)
                return "#REF!";
            if (sheet._isImported && !sheet._isRequested) {
                this._intrnlReq = true;
                this._importSheet(sheetIdx, false);
            }
            val = rangeData.value;
            if (this.model.locale != "en-US" && !this.isFormula(val) && this.isNumber(val))
                val = this._getlocaleNumVal(val, true);
            if (this.isFormula(val) || rangeData.type == "shortdate" || rangeData.type == "longdate" || rangeData.type == "date" || rangeData.type == "time") {
                val = this.XLEdit.getPropertyValue(rowIdx - 1, colIdx - 1, "value2", sheetIdx);
                val = val.replace(this._currencySymbol, "");
                if (rangeData.type == "time")
                    val = "1/1/1990 " + val;
                if (val[0] == "%" || val[val.length - 1] == "%") {
                    val = val.split("%").join("");
                    var per = parseFloat(val);
                    (!isNaN(per)) && (val = (per / 100).toString());
                }
				if(rangeData.type = "currency" && val.toString().indexOf("(") > -1) // for currency applied negative value
				   val = "-" + val.split(/[(\)]/)[1];
                val = val.replace(this._percentSymbol, "");
            }
            if (rangeData.customFormat && val.toString().indexOf("(") > -1)
                val = (rangeData.type == "currency") ? (rangeData.customFormat.indexOf(")") > -1) ? "-" + val.split(/[()$]/g)[2] : "-" + val.split("$")[1] : (rangeData.customFormat.indexOf(")") > -1) ? "-" + val.split(/[(\)]/)[1] : + val;
            return val;
        },

        setValueRowCol: function (sheetIdx, value, rowIdx, colIdx) {
            rowIdx-- , colIdx--;
            if ((rowIdx === -2) && (colIdx === -2))
                return;
            var isTable, cellInfo, value2, cellIdx = { rowIndex: rowIdx, colIndex: colIdx }, skipCell = false, obj, args, formulaStr, temp, j, flen, fObj, isFrmtNeeded = true, parseVal, isPositiveNum = false;
            if (typeof value === "string")
                value = value.replace(/^\"|\"$/g, "");
            if (typeof value == "object")
                value = value.toString();
            sheetIdx = this._getSheetIdxFromSheetValue(this._getLocStr("Sheet") + sheetIdx);
            cellInfo = this.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], property: ["value", "formatStr", "type", "thousandSeparator", "decimalPlaces", "customFormat"], sheetIdx: sheetIdx })[0];
            if (!ej.isNullOrUndefined(cellInfo.value)) {
                formulaStr = this.XLDragFill._parseFormula(cellInfo.value);
                for (j = 0, flen = formulaStr.length; j < flen; j++) {
                    temp = formulaStr[j];
                    if (temp.indexOf(":") > -1)
                        temp = temp.split(":")[0];
                    if (this._isCellReference(temp)) {
                        temp = temp.replace(/\$/g, "");
                        fObj = this.getRangeData({ range: this.getRangeIndices(temp), property: ["type"] })[0];
                        if (fObj.type == "text") {
                            isFrmtNeeded = false;
                        }
                        break;
                    }
                }
            }
            parseVal = this.XLEdit._parseValue(value, { rowIndex: rowIdx, colIndex: colIdx });
            if (isFrmtNeeded && cellInfo.formatStr && !this._isFormulaError(value)) {
                if (isNaN(parseInt(value)) && !isNaN(Date.parse(value)))
                    value = new Date(value);
                else
                    value = parseVal.value;
                value2 = this.XLFormat._format(value, { formatStr: cellInfo.formatStr, type: cellInfo.type, thousandSeparator: cellInfo.thousandSeparator, decimalPlaces: cellInfo.decimalPlaces });
            }
            if (isFrmtNeeded && cellInfo.type == "fraction")
                value2 = this.XLFormat._format(value, { type: cellInfo.type });
            value2 = ej.isNullOrUndefined(value2) ? value : value2;
            if (this._isInitLoad && !(this.isImport || this.model.isImport))
                skipCell = true;
            obj = { value2: value2, calcValue: parseVal.value };
            if (!ej.isNullOrUndefined(cellInfo.value)) {
                formulaStr = this.XLDragFill._parseFormula(cellInfo.value)[0];
                (formulaStr == "DATE") && (obj.type = parseVal.type);
            }
            cellInfo.type && (obj.type = cellInfo.type);
            args = {
                isRefCells: true,
                calcValue: obj.calcValue,
                value: cellInfo.value,
                rowIndex: rowIdx,
                colIndex: colIdx
            };
            if (!this._saveTriggered && !this._isInitLoad && !(this.isImport || this.model.isImport) && this._trigger("cellSave", args))
                return;
            if (!this._isInitLoad && !(this.isImport || this.model.isImport) && !this.getSheet(sheetIdx)._isLoaded) {
                isTable = this.XLEdit.getPropertyValue(rowIdx, colIdx, "tableName", sheetIdx);
                if (!this.XLFormat._isFAT && isTable) {
                    var prevVal = this.XLEdit.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx);
                    obj.value2 = this.XLFormat._updateTableColName(rowIdx, colIdx, prevVal, obj.value2, sheetIdx, isTable);
                }
            }
            if (cellInfo.customFormat == "(#,##0);#,##0" && obj.value2.indexOf("-") > -1)
                isPositiveNum = true;
            if (cellInfo.customFormat)
                obj.value2 = (cellInfo.customFormat.indexOf(")") > -1 && !isPositiveNum && cellInfo.type == "number") ? "(" + (obj.value2.indexOf("-") > -1 ? obj.value2.split("-")[1] : obj.value2) + ")" : obj.value2.indexOf("-") > -1 ? obj.value2.split("-")[1] : obj.value2;
            this.XLEdit._updateDataContainer(cellIdx, { dataObj: obj, sheetIdx: sheetIdx, skipCell: skipCell });
            this.XLEdit._refreshCellAlignment({ cellIdx: cellIdx, value: value, type: cellInfo.type });
        },

        getActiveCellElem: function (sheetIdx) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            var sheet = this.getSheet(sheetIdx);
            return this.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, sheetIdx);
        },

        _pushHighlightData: function (editRange) {
            var rng, i, j, editRng = editRange[0], dataRange = this._dataContainer.valData, range, isHighLight = false;
            for (i = 0; i < dataRange.length; i++) {
                if (dataRange[i].split("_")[1] == "list")
                    range = dataRange[i].split("_")[3];
                else
                    range = dataRange[i].split("_")[6];
                rng = this.getRangeIndices(range);
                while (editRange[0] <= editRange[2]) {
                    for (j = editRange[1]; j <= editRange[3]; j++) {
                        isHighLight = this.inRange(rng, editRange[0], j);
                        if (isHighLight && this.XLClipboard._highLightRange.indexOf(range) == -1)
                            this.XLClipboard._highLightRange.push(range);
                    }
                    editRange[0]++;
                }
                editRange[0] = editRng;
            }
        },

        _highlightValidationRng: function (splitData, s, rng0, rng1, rng2, rng3) {
            splitData[6] = this.getAlphaRange(rng0, rng1, rng2, rng3);
            this._dataContainer.valData[s] = splitData.join("_");
        },

        //HyperLink 
        _hlDlgOpen: function () {
            var sheetIdx = this.getActiveSheetIndex(), selected = this.getActiveCellElem(sheetIdx), propValue;
            if (!selected.length || !this.model.allowEditing)
                return false;
            if (this.XLEdit._rangeHasProperty(this.getSheet(sheetIdx).selectedRange, "cellType")) {
                this._showAlertDlg("Alert", "CellTypeAlert", "CellTypeAlert", 372);
                return;
            }
            var xlId = this._id, hlTabObj, webAddrElem = $("#" + xlId + "_Ribbon_webAddress"), cellAddrElem = $("#" + xlId + "_Ribbon_cellAddress"), webValElem = $("#" + xlId + "_Ribbon_findText"), value;
            var data = this.XLEdit.getPropertyValue(selected.parent("tr").index(), selected[0].cellIndex, "hyperlink", sheetIdx), node, treeObj, cellValElem = $("#" + xlId + "_Ribbon_cellText");
            $("#" + xlId + "_HLDialog").ejDialog("open");
            (this._responsiveHeight < 365) && $("#" + this._id + "_HLDialog_wrapper").css('top', '0px');
            treeObj = $("#" + xlId + "_Ribbon_sheentName").data("ejTreeView");
            treeObj.option("fields", { dataSource: this.XLRibbon._sheetData() });
            hlTabObj = $("#" + xlId + "_HLDialogTab").data("ejTab");
            cellValElem.attr("disabled", false);
            webValElem.attr("disabled", false);
            if (!this.isUndefined(data)) {
                this.isUndefined(data.webAddr) ? hlTabObj.option({ selectedItemIndex: 1 }) : hlTabObj.option({ selectedItemIndex: 0 });
                if (!this.isUndefined(data.cellAddr)) {
                    cellAddrElem.val(data.cellAddr.split("_")[0]);
                    node = parseInt(data.cellAddr.split("_")[1]) + 1;
                    treeObj.selectNode(node);
                    webAddrElem.val("http://");
                }
                else {
                    webAddrElem.val(data.webAddr);
                    cellAddrElem.val("A1");
                }
            }
            else {
                if (hlTabObj.model.selectedItemIndex === 0) {
                    webAddrElem.val("http://");
                    cellValElem.val("");
                }
                else {
                    treeObj.selectNode(sheetIdx + 1);
                    cellValElem.val(treeObj.getText(sheetIdx + 1) + "!A1");
                    cellAddrElem.val("A1");
                }
            }
            if ($.validator) {
                $("#" + xlId + "_Form_Ribbon_cellAddress").validate().resetForm();
                $("#" + xlId + "_Form_Ribbon_webAddress").validate().resetForm();
            }
            webValElem.val("");
            value = this.XLEdit.getPropertyValueByElem(selected);
            if (!this.isUndefined(value)) {
                propValue = this.XLEdit.getPropertyValueByElem(selected, "type");
                if (this.isFormula(value) || (propValue && propValue.indexOf("date") > -1) || $.isNumeric(value) || (propValue && propValue.indexOf("time") > -1)) {
                    cellValElem.val(this._getLocStr("HyperLinkHide"));
                    webValElem.val(this._getLocStr("HyperLinkHide"));
                    cellValElem.attr("disabled", true);
                    webValElem.attr("disabled", true);
                }
                else {
                    cellValElem.val(value);
                    webValElem.val(value);
                }
            }
        },


        _setLink: function (selCells) {
            var cellText, cellAddr, webText, webAddr, range, sheetIdx, treeObj, actShtIdx = this.getActiveSheetIndex(), linkAdr, value, cell = this.getActiveCell(actShtIdx), cellVal, tabIdx;
            range = this.getSheet(actShtIdx).selectedRange;
            !$("#" + this._id + "_HLDialog").length && this.XLRibbon._initHLDialog();
            tabIdx = $("#" + this._id + "_HLDialogTab").ejTab("option", "selectedItemIndex");
            cellText = $("#" + this._id + "_Ribbon_cellText").val();
            cellAddr = $("#" + this._id + "_Ribbon_cellAddress").val();
            webText = $("#" + this._id + "_Ribbon_findText").val();
            webAddr = $("#" + this._id + "_Ribbon_webAddress").val();
            treeObj = $("#" + this._id + "_Ribbon_sheentName").data("ejTreeView"), sheetIdx = this._getSheetIndexByName(treeObj.getSelectedNode().text() || this._getSheetNames()[this.getActiveSheetIndex() - 1].text);
            if (!cellText.length && !webText.length) {
                cellText = treeObj.getSelectedNode().text() + "!" + cellAddr;
                webText = webAddr;
            }
            cellVal = this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex);
            this._prevText = ej.isNullOrUndefined(cellVal) ? "" : this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "value2");
            this._prevVal = ej.isNullOrUndefined(cellVal) ? "" : this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "value");
            if (this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "type") && (this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "type").indexOf("date") > -1 || this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "type").indexOf("time") > -1))
                value = this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "value2");
            else if ($.isNumeric(cellVal) || this.isFormula(cellVal))
                value = cellVal;
            else
                value = (tabIdx === 0) ? webText : cellText;
            if (this._isUndoRedo)
                value = selCells[0].prevText;
            this._dupDetails = true;
            this.XLEdit._updateCellValue(cell, value);
            this._dupDetails = false;
            (this.isFormula(value) || $.isNumeric(value)) && (value = this.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "value2"));
            linkAdr = (tabIdx === 0) ? { webAddr: webAddr, text: value } : { cellAddr: cellAddr, text: value };
            this.setHyperlink(this._getAlphaRange(actShtIdx, range[0], range[1], range[2], range[3]), linkAdr, sheetIdx, selCells);
            this._dlgHLClick = false;
        },

        _getRangeArgs: function (range, type, sheetIdx) {
            if (ej.isNullOrUndefined(range))
                range = this.getSheet(sheetIdx).selectedRange;
            if (range.indexOf('!') > -1)
                if (range.split("!").length == 3) {
                    range = range.split("!");
                    range = range[1].split(":")[0].replace(/\$/g, "") + ':' + range[2];
                }
                else
                    range = range.split("!")[1].replace(/\$/g, "");
            if (type === typeof (range))
                return range;
            else {
                if (typeof (range) === "object")
                    return this._getAlphaRange(this.getActiveSheetIndex(), range[0], range[1], range[2], range[3]);
                else
                    return this.getRangeIndices(range);
            }
        },

        setHyperlink: function (range, linkRefer, sheetIdx, selCells) {
            if (this.model.isGridMode && sheetIdx > 1)
                return;
            range = this._getRangeArgs(range, "string");
            if (this.model.allowHyperlink && !this.model.isReadOnly) {
                var args = {
                    range: range,
                    address: linkRefer.webAddr,
                    text: linkRefer.text,
                    sheetIndex: sheetIdx,
                    reqType: "hyperlink",
                    action: "add",
                    type: "actionBegin"
                };
                if (this.XLEdit._rangeHasProperty(range, "cellType")) {
                    this._showAlertDlg("Alert", "CellTypeAlert", "CellTypeAlert", 372);
                    return;
                }
                if (this._trigActionBegin(args))
                    return;
                range = args.range, linkRefer.webAddr = args.address, linkRefer.text = args.text, sheetIdx = args.sheetIndex;
                var cellText, cellAddr, evtArgs, webText, webAddr, isViewed, rng, selCellObj, actSheetIdx = linkRefer.cellAddr ? this.getActiveSheetIndex() : sheetIdx ? sheetIdx : this.getActiveSheetIndex(), sheet = this.getSheet(actSheetIdx), splitStr, value, selCell = [], data, val, i, len, selected = this._getAlphaRangeCells(range, actSheetIdx);
                var details = { sheetIndex: actSheetIdx, reqType: "hyperlink" }, cValue, cellVal;
                rng = this._getRangeArgs(range, "object");
                selCellObj = this._getSelectedCells(details.sheetIndex, rng).selCells;
                details.action = ej.isNullOrUndefined(this.XLEdit.getPropertyValue(selCellObj[0].rowIndex, selCellObj[0].colIndex, "hyperlink")) ? "add" : "edit";
                if (!this._isUndoRedo) {
                    if (!ej.isNullOrUndefined(linkRefer.webAddr)) {
                        webAddr = linkRefer.webAddr;
                        webText = !ej.isNullOrUndefined(linkRefer.text) ? linkRefer.text : this.XLEdit.getPropertyValue(selCellObj[0].rowIndex, selCellObj[0].colIndex, "value2");
                        value = ej.isNullOrUndefined(webText) ? webAddr : webText;
                    }
                    else {
                        cellAddr = linkRefer.cellAddr;
                        cellText = !ej.isNullOrUndefined(linkRefer.text) ? linkRefer.text : this.XLEdit.getPropertyValue(selCellObj[0].rowIndex, selCellObj[0].colIndex, "value2");
                        if (cellAddr.indexOf("!") > -1) {
                            splitStr = cellAddr.split("!");
                            sheetIdx = splitStr[0].indexOf("=") > -1 ? this._getSheetIndexByName(splitStr[0].split("=")[1]) : this._getSheetIndexByName(splitStr[0]);
                            cellAddr = splitStr[1];
                        }
                        cellAddr.indexOf("$") > -1 && (cellAddr = cellAddr.split("$").join(""));
                        value = ej.isNullOrUndefined(cellText) ? cellAddr : cellText;
                    }
                    this._dupDetails = true;
                    if (!this._dlgHLClick) {
                        cellVal = this.XLEdit.getPropertyValue(selCellObj[0].rowIndex, selCellObj[0].colIndex, "value2");
                        this._prevText = ej.isNullOrUndefined(cellVal) ? "" : cellVal;
                        this._prevVal = ej.isNullOrUndefined(cellVal) ? "" : this.XLEdit.getPropertyValue(selCellObj[0].rowIndex, selCellObj[0].colIndex, "value");
                        this.XLEdit._updateCellValue({ rowIndex: selCellObj[0].rowIndex, colIndex: selCellObj[0].colIndex }, value);
                    }
                    for (i = 0, len = selCellObj.length; i < len; i++)
                        selCell.push({ rowIndex: selCellObj[i].rowIndex, colIndex: selCellObj[i].colIndex, prevLink: this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "hyperlink"), prevColor: this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "formats") });
                    !this.isUndefined(args.text) && this.XLEdit._updateCellValue(selCellObj[0], args.text);
                    (this.isUndefined(cellAddr)) ? this.updateUniqueData({ hyperlink: { "webAddr": webAddr } }, rng, "", sheetIdx) : this.updateUniqueData({ hyperlink: { "cellAddr": cellAddr + "_" + (sheetIdx) } }, rng);
                    for (i = 0, len = selCellObj.length; i < len; i++) {
                        val = this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "value2");
                        selCell[i].prevText = (i === 0) ? this._prevText : val;
                        selCell[i].prevVal = (i === 0) ? this._prevVal : this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "value");
                        if (this._isRowViewable(actSheetIdx, selCellObj[i].rowIndex)) {
                            $(selected.eq(i).find("a")).remove();
                            this.XLEdit._refreshTextNode(selected[i]);
                            isViewed = true;
                            if ($(selected.eq(i).find(".e-cf-databar")).length) {
                                selected.eq(i).find('.e-databar-value')[0].innerHTML = value;
                                continue;
                            }
                        }
                        data = this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "hyperlink", actSheetIdx);
                        if (data.cellAddr) {
                            val = (i === 0) ? cellText : val;
                            isViewed && selected.eq(i).append(ej.buildTag("a", val, ""));
                            selCell[i].curText = cellText;
                        }
                        else {
                            val = (i === 0) ? webText : val;
                            isViewed && (!this.isUndefined(selected[i])) && selected.eq(i).append(ej.buildTag("a", val, "", { href: data.webAddr, target: "_blank" }));
                            selCell[i].curText = webText;
                        }
                        selCell[i].curLink = this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "hyperlink");
                        if (isViewed)
                            $(selected[i]).find("a").addClass("e-hyperlinks");
                    }
                    range = "Sheet" + actSheetIdx + "!" + range;
                    this.XLFormat.format({ "style": { "color": this._hlColor } }, range);
                    this._dupDetails = false;
                    details.selectedCell = selCell;
                    evtArgs = { sheetIndex: this.getActiveSheetIndex(), range: range, linkData: linkRefer, reqType: "hyperlink", selectedCell: details.selectedCell, action: details.action };
                    if (!sheet._isImported || sheet._isLoaded && !this._isExport) {
                        this._completeAction(details);
                        this._trigActionComplete(evtArgs)
                    }
                }
                else {
                    for (i = 0, len = selCellObj.length; i < len; i++) {
                        if (selCells && !ej.isNullOrUndefined(selCells[i]) && !ej.isNullOrUndefined(selCells[i].prevLink)) {
                            this.XLEdit._updateDataContainer({ rowIndex: selCellObj[i].rowIndex, colIndex: selCellObj[i].colIndex }, { dataObj: { "hyperlink": selCells[i].prevLink } });
                            if (this._isRowViewable(sheetIdx, selCellObj[i].rowIndex)) {
                                cValue = $(selected[i]).text();
                                $(selected[i]).find("a").remove();
                                (selected[i].lastChild) ? selected[i].lastChild.textContent = "" : $(selected[i]).text("");
                                if (i === 0) {
                                    if (!(ej.isNullOrUndefined(this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "hyperlink").cellAddr)))
                                        $(selected[i]).append(ej.buildTag("a", selCells[i].prevText, ""));
                                    else
                                        $(selected[i]).append(ej.buildTag("a", selCells[i].prevText, "", { href: this.XLEdit.getPropertyValueByElem($(selected[i]), "hyperlink").webAddr, target: "_blank" }));
                                }
                                else {
                                    if (!(ej.isNullOrUndefined(this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "hyperlink").cellAddr)))
                                        $(selected[i]).append(ej.buildTag("a", cValue, ""))
                                    else
                                        $(selected[i]).append(ej.buildTag("a", cValue, "", { href: this.XLEdit.getPropertyValueByElem($(selected[i]), "hyperlink").webAddr, target: "_blank" }));
                                }
                                $(selected[i]).find("a").addClass("e-hyperlinks");
                            }
                            this._dupDetails = true;
                            this.XLFormat.format({ style: { color: this._hlColor } });
                            this._dupDetails = false;
                        }
                    }
                }
            }
        },

        removeHyperlink: function (range, isClearHLink, status, cells, skipHiddenRow) {
            if (!this.model.allowHyperlink || this.model.isReadOnly)
                return false;
            var sheetIdx = this.getActiveSheetIndex(), args = { range: range, sheetIndex: sheetIdx, reqType: (ej.isNullOrUndefined(status)) ? "hyperlink" : "clear-link", type: "actionBegin", action: (ej.isNullOrUndefined(status)) ? "delete" : "clear-link" };
            if (this._trigActionBegin(args))
                return;
            var i, len, obj, color, rLink = [], temp = this._dupDetails, selCellObj, sheet = this.getSheet(sheetIdx), selCell = [], cell;
            var details = { sheetIndex: sheetIdx, reqType: "hyperlink", action: "delete", range: args.range };
            selCellObj = this._getMultiRangeCells(args.range);
            for (i = 0, len = selCellObj.length; i < len; i++) {
                if (!skipHiddenRow || !this._isHiddenRow(selCellObj[i].rowIndex)) {
                    obj = { rowIndex: selCellObj[i].rowIndex, colIndex: selCellObj[i].colIndex, prevLink: this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "hyperlink"), prevText: this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "value2"), prevVal: this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "value"), prevColor: this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "formats") };
                    this._dupDetails = true;
                    if (obj.prevLink) {
                        if (isClearHLink)
                            this.XLFormat.format({ style: { "text-decoration": "underline" } }, this._getAlphaRange(sheetIdx, selCellObj[i].rowIndex, selCellObj[i].colIndex, selCellObj[i].rowIndex, selCellObj[i].colIndex));
                        else {
                            if (!ej.isNullOrUndefined(cells) && !this.isUndefined(cells[i].prevColor))
                                color = cells[i].prevColor.color;
                            this.XLFormat.format({ style: { color: this.isUndefined(color) ? "#444445" : color, "text-decoration": "none" } }, this._getAlphaRange(sheetIdx, selCellObj[i].rowIndex, selCellObj[i].colIndex, selCellObj[i].rowIndex, selCellObj[i].colIndex));
                        }
                        obj.curColor = this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "formats");
                    }
                    this._dupDetails = temp;
                    this.clearRangeData([selCellObj[i].rowIndex, selCellObj[i].colIndex, selCellObj[i].rowIndex, selCellObj[i].colIndex], ["hyperlink"]);
                    !this._isUndoRedo && (obj.curLink = this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "hyperlink"));
                    if (this._isUndoRedo && !this._dupDetails)
                        !ej.isNullOrUndefined(cells[i].prevText) && this.XLEdit._updateDataContainer({ rowIndex: selCellObj[i].rowIndex, colIndex: selCellObj[i].colIndex }, { dataObj: { "value2": cells[i].prevText, "value": cells[i].prevVal }, sheetIdx: sheetIdx });
                    !this._isUndoRedo && (obj.curText = this.XLEdit.getPropertyValue(selCellObj[i].rowIndex, selCellObj[i].colIndex, "value2"));
                    if ((this._isUndoRedo && !this._dupDetails) && !ej.isNullOrUndefined(cells[i].prevLink)) {
                        this.XLEdit._updateDataContainer({ rowIndex: selCellObj[i].rowIndex, colIndex: selCellObj[i].colIndex }, { dataObj: { "hyperlink": cells[i].prevLink } });
                        cell = { rowIndex: cells[i].rowIndex, colIndex: cells[i].colIndex };
                        this.XLSelection.selectRange(cell, cell);
                        this._setLink([cells[i]]);
                        rLink.push(i);
                    }
                    selCell.push(obj);
                }
            }
            for (i = 0, len = rLink.length; i < len; i++)
                selCellObj.splice(rLink[i], 1);
            details.selectedCell = selCell;
            details.reqType = (ej.isNullOrUndefined(status)) ? "hyperlink" : "clear-link";
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && !this._dupDetails && !this._isExport) {
                this._completeAction(details);
                this._trigActionComplete(details);
            }
        },

        _removeHyperlink: function (status, cells, skipHiddenRow, range) {
            var sheetIdx = this.getActiveSheetIndex(); range = range ? range : this.getSheet(sheetIdx).selectedRange;
            this.removeHyperlink(this._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]), status === "clear", status, cells, skipHiddenRow);
        },

        _openLink: function () {
            var sheetIdx = this.getActiveSheetIndex(), selected = this.getSheetElement(sheetIdx).find(".e-activecell");
            this._hlClick(this.XLEdit.getPropertyValue(selected.closest("tr").index(), selected[0].cellIndex, "hyperlink", sheetIdx));
        },

        _hlClick: function (data) {
            var range, sheetIdx, startCell, endCell, actSheetIdx = this.getActiveSheetIndex(), value, splitStr;
            var sheet = this.getSheet(actSheetIdx), target, webAddr, cellAddr, selCell = this.getActiveCell(actSheetIdx), args = { rowIndex: selCell.rowIndex, colIndex: selCell.colIndex, cellAddr: data.cellAddr, webAddr: data.webAddr, target: "_blank", action: "hyperlinkclick", sheetIndex: actSheetIdx, reqType: "hyperlink-click", type: "cellClick" };
            this.model.enableContextMenu && this.XLCMenu.hideCMenu();
            if (this._trigger("cellClick", args))
                return;
            cellAddr = args.cellAddr, target = args.target, webAddr = args.webAddr;
            if (cellAddr) {
                splitStr = cellAddr.split("_");
                if (splitStr[0].indexOf("$") > -1)
                    value = splitStr[0].split("$").join("");
                else
                    value = splitStr[0];
                range = this.getRangeIndices(value);
                startCell = { rowIndex: range[0], colIndex: range[1] };
                endCell = { rowIndex: range[2], colIndex: range[3] };
                sheetIdx = Number(splitStr[1]);
                this.gotoPage(sheetIdx, false);
                sheet._activeCell = startCell;
                this.XLSelection.selectRange(startCell, endCell, sheetIdx);
                sheet._startCell = startCell;
                sheet._endCell = endCell;
                this.XLScroll._scrollSelectedPosition(sheetIdx, startCell);
                this.model.allowAutoFill && this.XLDragFill.positionAutoFillElement();

            }
            else {
                startCell = { rowIndex: sheet._activeCell.rowIndex, colIndex: sheet._activeCell.colIndex };
                sheet._startCell = startCell;
                sheet._endCell = startCell;
                if (this._isValidUrl(webAddr))
                    window.open(webAddr, target);
                else
                    this._showAlertDlg("Alert", "HyperLinkAlert");
            }
        },

        _isValidUrl: function (url) {
            return /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(url);
        },

        showWaitingPopUp: function () {
            $("#" + this._id + "_wait").data("ejWaitingPopup").show();
        },

        hideWaitingPopUp: function () {
            $("#" + this._id + "_wait").data("ejWaitingPopup").hide();
        },

        _getSelRange: function (selCells) {
            var sCell, eCell;
            sCell = selCells[0], eCell = selCells[selCells.length - 1];
            return (this._generateHeaderText(sCell.colIndex + 1) + (sCell.rowIndex + 1) + ":" + this._generateHeaderText(eCell.colIndex + 1) + (eCell.rowIndex + 1));
        },

        _getSelectedCells: function (sheetIdx, range) {
            var selCells, rng, sheet = this.getSheet(sheetIdx ? sheetIdx : this.getActiveSheetIndex());
            if (ej.isNullOrUndefined(range)) {
                selCells = sheet._selectedCells;
                if (selCells.length > 0) {
                    range = this._getSelRange(selCells);
                    rng = this.getRangeIndices(range);
                }
                else {
                    rng = [0, 0, 0, 0];
                    selCells = [{ rowIndex: 0, colIndex: 0 }];
                }
            }
            else {
                rng = this._getRangeArgs(range, "object");
                selCells = this._getSelectedRange({ rowIndex: rng[0], colIndex: rng[1] }, { rowIndex: rng[2], colIndex: rng[3] });
            }
            return { range: rng, selCells: selCells };
        },

        _getHiddenCells: function (sheetIdx, altCells, selectedCell, hideCells) {
            var container = this._dataContainer.sheets[sheetIdx], value, wrap, wrapRow, objDetails;
            (ej.isNullOrUndefined(hideCells[selectedCell.rowIndex])) && (hideCells[selectedCell.rowIndex] = {});
            (ej.isNullOrUndefined(hideCells[selectedCell.rowIndex][selectedCell.colIndex])) && (hideCells[selectedCell.rowIndex][selectedCell.colIndex] = { value: {}, text: "" });
            if (!ej.isNullOrUndefined(container[selectedCell.rowIndex])) {
                hideCells[selectedCell.rowIndex][selectedCell.colIndex]["value"] = $.extend(true, {}, container[selectedCell.rowIndex][selectedCell.colIndex]);
                value = this.XLEdit.getPropertyValue(altCells.rowIndex, altCells.colIndex, "value2", sheetIdx);
                wrap = this.XLEdit.getPropertyValue(altCells.rowIndex, altCells.colIndex, "wrap", sheetIdx);
                wrapRow = this.XLEdit.getPropertyValue(altCells.rowIndex, altCells.colIndex, "wrapRow", sheetIdx);
                if (this.isUndefined(this.XLEdit.getPropertyValue(selectedCell.rowIndex, selectedCell.colIndex, "border", sheetIdx)) && this.isUndefined(this.XLEdit.getPropertyValue(selectedCell.rowIndex, selectedCell.colIndex, "format", sheetIdx)))
                    delete container[selectedCell.rowIndex][selectedCell.colIndex];
                else {
                    objDetails = this.getObjectKeys(this._dataContainer.sheets[sheetIdx][selectedCell.rowIndex][selectedCell.colIndex]);
                    objDetails.splice(objDetails.indexOf("border"), 1);
                    objDetails.splice(objDetails.indexOf("format"), 1);
                    this.XLEdit._clearDataContainer({ cellIdx: { rowIndex: selectedCell.rowIndex, colIndex: selectedCell.colIndex }, property: objDetails });
                }
                hideCells[selectedCell.rowIndex][selectedCell.colIndex]["text"] = (ej.isNullOrUndefined(value) ? "" : value); //Checking for empty td cell
                if (wrap || wrapRow) {
                    if (ej.isNullOrUndefined(container[selectedCell.rowIndex]))
                        container[selectedCell.rowIndex] = {};
                    if (ej.isNullOrUndefined(container[selectedCell.rowIndex][selectedCell.colIndex]))
                        container[selectedCell.rowIndex][selectedCell.colIndex] = {};
                    wrap && (container[selectedCell.rowIndex][selectedCell.colIndex]["wrap"] = wrap);
                    wrapRow && (container[selectedCell.rowIndex][selectedCell.colIndex]["wrapRow"] = wrapRow);
                }
            }
            if (this._isRowViewable(sheetIdx, altCells.rowIndex))
                altCells = this.getCell(altCells.rowIndex, altCells.colIndex, sheetIdx).empty();
            return hideCells;
        },

        _getRowSpan: function (sheetIdx, selectedCells) {
            var rowSpan = 0;
            for (var i = selectedCells[0].rowIndex, len = selectedCells[selectedCells.length - 1].rowIndex; i <= len; i++) {
                if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(i, 0, "isRHide", sheetIdx)) && ej.isNullOrUndefined(this.XLEdit.getPropertyValue(i, 0, "isFHide", sheetIdx)) && ej.isNullOrUndefined(this.XLEdit.getPropertyValue(i, 0, "isFilterHide", sheetIdx)) && this.getSheet(sheetIdx)._fHMergeRows.indexOf(i) === -1)
                    rowSpan = rowSpan + 1;
            }
            return rowSpan;
        },

        _getColSpan: function (sheetIdx, selectedCells) {
            var colSpan = 0;
            for (var i = selectedCells[0].colIndex, len = selectedCells[selectedCells.length - 1].colIndex; i <= len; i++) {
                if (ej.isNullOrUndefined(this.XLEdit.getPropertyValue(0, i, "isCHide", sheetIdx)) && this.getSheet(sheetIdx)._fHMergeCols.indexOf(i.toString()) === -1)
                    colSpan = colSpan + 1;
            }
            return colSpan;
        },

        _getHiddenRowColumnCount: function (sheetIdx, range) {
            var rng = this.getRangeIndices(range), hr = 0, hc = 0, i, j, isVscroll = this.model.scrollSettings.allowVirtualScrolling, colgrp;
            !isVscroll && (colgrp = this._getJSSheetHeader(sheetIdx).find("col"))
            for (i = rng[0]; i <= rng[2]; i++) {
                if (!ej.isNullOrUndefined(this.XLEdit.getPropertyValue(i, 0, "isRHide", sheetIdx)) || !ej.isNullOrUndefined(this.XLEdit.getPropertyValue(i, 0, "isFHide", sheetIdx)))
                    hr = hr + 1;
            }
            for (j = rng[1]; j <= rng[3]; j++) {
                if ((isVscroll || (!isVscroll && this._hasClass(colgrp[j], "e-hide"))) || !ej.isNullOrUndefined(this.XLEdit.getPropertyValue(0, j, "isCHide", sheetIdx)))
                    hc = hc + 1;
            }
            return { hRow: hr, hCol: hc };
        },

        _updateMergeColl: function (sheetIdx, rowIdx, colIdx, type, isSamePosn, range, isCenterAlign, mType) {
            var sheet = this.getSheet(sheetIdx), mergeColl = sheet._mergeColl;
            if (ej.isNullOrUndefined(mergeColl[rowIdx])) {
                mergeColl[rowIdx] = {};
                mergeColl[rowIdx][colIdx] = {};
            }
            else if (ej.isNullOrUndefined(mergeColl[rowIdx][colIdx]))
                mergeColl[rowIdx][colIdx] = {};
            mergeColl[rowIdx][colIdx]["type"] = type;
            mType && (mergeColl[rowIdx][colIdx]["mergeType"] = mType);
            isSamePosn && (mergeColl[rowIdx][colIdx]["isSamePosn"] = isSamePosn);
            sheet.mergedCells.push({ isCenterAlign: isCenterAlign, range: range });
        },

        mergeCells: function (range, alertStatus) {
            var i, k, mergeObj, details, rSpan = 1, cSpan = 1, len, cells = [], sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), selectedCells, isMerged = false, hiddenCount,
                rng = this._getRangeArgs(range, "object", sheetIdx), isMultiCell = (rng[2] - rng[0]) || (rng[3] - rng[1]), selRng, formulaRng;
            if (!this.model.allowMerging || (!this.model.allowSelection || !isMultiCell) || this.getSheetElement(sheetIdx).find(".e-ss-activeimg").length > 0 || (sheet._isLoaded && this.model.isReadOnly))
                return;
            selectedCells = this._getSelectedCells(sheetIdx, rng).selCells;
            this._selMergeCells = [];
            this._mergeType = "merge-cells";
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo) {
                this.performSelection(rng);
                if (this.mergeCenter) {
                    isMerged = false;
                    len = selectedCells.length;
                    for (i = 0; i < len; i++) {
                        mergeObj = this.XLEdit.getPropertyValue(selectedCells[i].rowIndex, selectedCells[i].colIndex, "merge", sheetIdx);
                        if (!ej.isNullOrUndefined(mergeObj)) {
                            rSpan = mergeObj.mSpan.rowSpan;
                            cSpan = mergeObj.mSpan.colSpan;
                            if (rSpan > 1 || cSpan > 1) {
                                hiddenCount = this._getHiddenRowColumnCount(sheetIdx, this.XLEdit.getPropertyValue(selectedCells[i].rowIndex, selectedCells[i].colIndex, 'merge').mRange);
                                this._unMergeAllCells(sheetIdx, i, selectedCells, cells, hiddenCount.hRow, hiddenCount.hCol);
                                isMerged = true;
                            }
                        }
                    }
                    if (isMerged && !this._dupDetails && !this._isUndoRedo) {
                        ej.isNullOrUndefined(range) && (range = this._getSelRange(selectedCells));
                        details = { sheetIndex: sheetIdx, cells: selectedCells, range: range, reqType: "merge-cells", action: "un-merge", operation: "un-merge", mCells: cells };
                        this._completeAction(details);
                        this._trigActionComplete(details);
                        if (this.model.showRibbon)
                            this.XLRibbon._updateRibbonIcons();
                        this.performSelection(rng);
                    }
                }
                else {
                    len = selectedCells.length;
                    for (i = 0; i < len; i++) {
                        mergeObj = this.XLEdit.getPropertyValue(selectedCells[i].rowIndex, selectedCells[i].colIndex, "merge", sheetIdx);
                        if (!ej.isNullOrUndefined(mergeObj)) {
                            rSpan = mergeObj.mSpan.rowSpan;
                            cSpan = mergeObj.mSpan.colSpan;
                        }
                        if (rSpan === 1 && cSpan === 1) {
                            isMerged = false;
                            break;
                        }
                    }
                }
            }
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && this._rangeHasData(rng) && !alertStatus && !isMerged && isMultiCell)
                this._showAlertDlg("", "MergeCellsAlert", "MergeCells", 498);
            else if (!isMerged)
                this._mergeCells(sheetIdx, selectedCells, {}, []);
            range = this.getObjectKeys(sheet.formulaRange);
            len = range.length;
            for (k = 0; k < len; k++) {
                selRng = range[k];
                formulaRng = this.getRangeIndices(selRng);
                if (rng[3] == formulaRng[3])
                    this._showAlertDlg("Alert", "ArrayaFormula", 430);
            }
        },

        _mergeCells: function (sheetIdx, selectedCells, hideCells, mCells) {
            var mSpan, tRIdx, container = this._dataContainer.sheets[sheetIdx], details, range, startrowIdx, startcolIdx, prevObj = {},
                activeCell, altCells, cols, sheet = this.getSheet(sheetIdx), xlEdit = this.XLEdit, rHgt, bdrCol, getFormat;
            tRIdx = startrowIdx = selectedCells[0].rowIndex; startcolIdx = selectedCells[0].colIndex, getFormat = this.XLEdit.getPropertyValue(startrowIdx, startcolIdx, "format");
            !this.model.scrollSettings.allowVirtualScrolling && (cols = this._getJSSheetHeader(sheetIdx).find('col'));
            if ((ej.isNullOrUndefined(xlEdit.getPropertyValue(startrowIdx, 0, "isFRHide")) || ej.isNullOrUndefined(xlEdit.getPropertyValue(startrowIdx, 0, "isRHide"))) && (cols && cols.eq(startcolIdx).hasClass("e-fc-hide")))
                return { hideCell: [], mCells: [] };
            mSpan = { rowSpan: this._getRowSpan(sheetIdx, selectedCells), colSpan: this._getColSpan(sheetIdx, selectedCells) };
            if (!ej.isNullOrUndefined(container[startrowIdx]) && !ej.isNullOrUndefined(container[startrowIdx][startcolIdx])) {
                delete container[startrowIdx][startcolIdx]["isMHide"];
                delete container[startrowIdx][startcolIdx]["mergeIdx"];
            }
            if (this._isRowViewable(sheetIdx, startrowIdx)) {
                activeCell = this.getCell(startrowIdx, startcolIdx);
                activeCell[0].colSpan = mSpan.colSpan;
                activeCell[0].rowSpan = mSpan.rowSpan;
                activeCell[0].className = activeCell[0].className.replace("e-mc-hide", "");
                this.mergeCenter && activeCell.addClass("e-calign ");
                if (activeCell.hasClass("e-commentcell"))
                    this.model.allowComments && this.XLComment._updateCmntArrowPos(activeCell);
            }
            this._selMergeCells.push(selectedCells[0]);
            this._textClip(selectedCells[0].rowIndex, selectedCells[0].colIndex, 'add');
            this._textClip(selectedCells[0].rowIndex, selectedCells[0].colIndex, 'delete', '', true);
            if (this._isRowViewable(sheetIdx, selectedCells[0].rowIndex))
                this.addClass(this.getCell(selectedCells[0].rowIndex, selectedCells[0].colIndex)[0], "e-moverflow");
            for (var i = 1, len = selectedCells.length; i < len; i++) {
                if (this._isRowViewable(sheetIdx, selectedCells[i].rowIndex)) {
                    altCells = this.getCell(selectedCells[i].rowIndex, selectedCells[i].colIndex);
                    if (!this._hasClass(altCells[0], "e-mc-hide"))
                        this.addClass(altCells[0], "e-mc-hide");
                    this.addClass(altCells[0], "e-moverflow");
                }
                if ((tRIdx !== selectedCells[i].rowIndex) && sheet.hideRowsCollection.indexOf(selectedCells[i].rowIndex) == -1) {
                    tRIdx = selectedCells[i].rowIndex;
                }
                this._textClip(selectedCells[i].rowIndex, selectedCells[i].colIndex, 'add');
                this._textClip(selectedCells[i].rowIndex, selectedCells[i].colIndex, 'delete', '', true);
                hideCells = this._getHiddenCells(sheetIdx, { rowIndex: selectedCells[i].rowIndex, colIndex: selectedCells[i].colIndex }, selectedCells[i], hideCells);
                if (this.isUndefined(getFormat))
                    this.XLEdit._updateDataContainer({ rowIndex: selectedCells[i].rowIndex, colIndex: selectedCells[i].colIndex }, { dataObj: { isMHide: true, mergeIdx: { rowIndex: startrowIdx, colIndex: startcolIdx } }, sheetIdx: sheetIdx });
                else
                    this.XLEdit._updateDataContainer({ rowIndex: selectedCells[i].rowIndex, colIndex: selectedCells[i].colIndex }, { dataObj: { isMHide: true, mergeIdx: { rowIndex: startrowIdx, colIndex: startcolIdx }, format: getFormat }, sheetIdx: sheetIdx });
                this._selMergeCells.push(selectedCells[i]);
            }
            range = this._getSelRange(selectedCells);
            if (!ej.isNullOrUndefined(container[startrowIdx]))
                $.extend(true, prevObj, container[startrowIdx][startcolIdx]);
            sheet._activeCell = selectedCells[0];
            if (!sheet._isImported || sheet._isLoaded)
                this.performSelection(selectedCells[0], selectedCells[selectedCells.length - 1]);
            this.XLEdit._updateDataContainer({ rowIndex: startrowIdx, colIndex: startcolIdx }, { dataObj: { merge: { mSpan: mSpan, isMerge: true, mRange: range, isCenterAlign: this.mergeCenter } } }); // mRange denones Merged Range
            bdrCol = this._getMCellBorderProps(this.getRangeIndices(range));
            this.getObjectLength(bdrCol) && this.XLFormat._applyBorderCss(bdrCol, this.getRangeIndices(range));
            this._updateMergeColl(sheetIdx, startrowIdx, startcolIdx, this.mergeCenter ? "center" : "merge", null, range, this.mergeCenter, this._mergeType);
            mCells.push({ rowIndex: startrowIdx, colIndex: startcolIdx, prevObj: prevObj, curObj: $.extend(true, {}, container[startrowIdx][startcolIdx]) });
            if (xlEdit.getPropertyValue(startrowIdx, startcolIdx, "wrap")) {
                rHgt = this._getWrapCellHeight(sheetIdx, startrowIdx, startcolIdx).rowHt;
                if (this._getRowHeight(startrowIdx, sheetIdx) <= rHgt || sheet._isImported || !sheet._isLoaded) {
                    this.setHeightToRows([{ rowIndex: startrowIdx, height: rHgt }]);
                    this._wrapCollection(startrowIdx, startcolIdx, rHgt.cellHt, sheetIdx);
                }
            }
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && !this._dupDetails && !this._paste && this._mergeType === "merge-cells") {
                details = { sheetIndex: sheetIdx, cells: [{ rowIndex: startrowIdx, colIndex: startcolIdx }], range: range, reqType: "merge-cells", action: "merge-all", hideCells: hideCells, mCells: mCells };
                details.operation = (this.mergeCenter) ? "merge-center" : "merge-all";
                if (!this._paste) {
                    this._completeAction(details);
                    this._trigActionComplete(details);
                }
            }
            if (this.model.showRibbon && !this._isScrolling)
                this.XLRibbon._updateRibbonIcons();
            this.mergeCenter = false;
            this._paste = false;
            this.XLEdit._updateUsedRange(startrowIdx + mSpan.rowSpan, startcolIdx + mSpan.colSpan, sheetIdx);
            if (this.model.allowCellFormatting && this.XLEdit.getPropertyValue(startrowIdx, startcolIdx, "cFormatRule", sheetIdx)) {
                this.XLCFormat.refreshCFormat(this._getAlphaRange(sheetIdx, startrowIdx, startcolIdx, startrowIdx, startcolIdx));
            }
            return { hideCells: hideCells, mCells: mCells };
        },

        mergeAcrossCells: function (range, alertStatus) {
            if (this.model.isReadOnly)
                return;
            var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), selRange,
                rng = this._getRangeArgs(range, "object", sheetIdx), isMultiCell = (rng[2] - rng[0]) || (rng[3] - rng[1]), isMultiCol = rng[3] - rng[1];
            if (!this.model.allowMerging || this.getSheetElement(sheetIdx).find(".e-ss-activeimg").length > 0 || !isMultiCell || this.model.isReadOnly)
                return;
            this._selMergeCells = [];
            selRange = this._getSelectedCells(sheetIdx, rng);
            !this.isUndefined(range) && this.performSelection(rng);
            if (!this._isUndoRedo && this._rangeHasData(rng) && (!sheet._isImported || sheet._isLoaded) && !alertStatus && isMultiCol)
                this._showAlertDlg("", "MergeCellsAlert", "MergeAcrossCells", 498);
            else if (isMultiCol)
                this._mergeAcrossCells(sheetIdx, selRange.selCells);
            this.performSelection(rng);
            this.model.showRibbon && this.XLRibbon._updateRibbonIcons();
        },

        _mergeAcrossCells: function (sheetIdx, selectedCells) {
            var i, j, len, mergeObj, rSpan = 1, cSpan = 1, isMerged = true, details, sCol, eCol, sRow, eRow, selCell = [],
                mValue = { mCells: [], hideCells: {} }, sheet = this.getSheet(sheetIdx);
            this._mergeType = "merge-across";
            for (i = 0, len = selectedCells.length; i < len; i++) {
                mergeObj = this.XLEdit.getPropertyValue(selectedCells[i].rowIndex, selectedCells[i].colIndex, "merge", sheetIdx);
                if (!ej.isNullOrUndefined(mergeObj)) {
                    rSpan = mergeObj.mSpan.rowSpan;
                    cSpan = mergeObj.mSpan.colSpan;
                }
                if (rSpan === 1 && cSpan === 1) {
                    isMerged = false;
                    break;
                }
                else if (rSpan > 1)
                    isMerged = false;
            }
            if (!isMerged) {
                sRow = selectedCells[0].rowIndex, eRow = selectedCells[selectedCells.length - 1].rowIndex;
                sCol = selectedCells[0].colIndex, eCol = selectedCells[selectedCells.length - 1].colIndex;
                for (i = sRow; i <= eRow; i++) {
                    selCell = [];
                    for (j = sCol; j <= eCol; j++)
                        selCell.push({ rowIndex: i, colIndex: j });
                    mValue = this._mergeCells(sheetIdx, selCell, mValue.hideCells, mValue.mCells);
                }
            }
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && !this._dupDetails) {
                details = { sheetIndex: sheetIdx, cells: $.extend(true, [], this._selMergeCells), range: this._getSelRange(selectedCells), reqType: "merge-cells", action: "merge-across", operation: "merge-across", hideCells: mValue.hideCells, mCells: mValue.mCells };
                if (!this._paste) {
                    this._completeAction(details);
                    this._trigActionComplete(details);
                }
                this._paste = false;
            }
            this._mergeType = "merge-cells";
            this.performSelection(selectedCells[0], selectedCells[selectedCells.length - 1]);
        },

        _getMCellBorderProps: function (range) {
            var i, j, prop, bProp, tRange, foundProp = {}, rangeData, props = ["bottom", "right"];

            for (i = 0; i < props.length; i++) {
                prop = props[i];
                tRange = prop == props[0] ? [range[2], range[1], range[2], range[3]] : [range[0], range[3], range[2], range[3]];
                rangeData = this.getRangeData({ range: tRange, property: ["border"] });
                for (j = 0; j < rangeData.length; j++) {
                    if (rangeData[j]["border"]) {
                        bProp = this.XLFormat.getBorderFromHashCode(rangeData[0]["border"]);
                        if (bProp[prop]) {
                            if (foundProp[prop] && foundProp[prop] != bProp[prop]) {
                                delete foundProp[prop];
                                break;
                            }
                            foundProp[prop] = bProp[prop];
                        }
                        else {
                            delete foundProp[prop];
                            break;
                        }
                    }
                    else {
                        delete foundProp[prop];
                        break;
                    }
                }
            }
            rangeData = this.XLEdit.getPropertyValue(range[0], range[1], "borders");
            if (rangeData) {
                if (rangeData["top"])
                    foundProp["top"] = rangeData["top"];
                if (rangeData["left"])
                    foundProp["left"] = rangeData["left"];
            }
            return foundProp;
        },

        unmergeCells: function (range) {
            if (this.model.isReadOnly)
                return;
            var sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), cells = [], selectedCells, details, hiddenCount, mergeObj, clrMerge = sheet._clrMergeColl,
                rng = this._getRangeArgs(range, "object", sheetIdx);
            if (!this.model.allowMerging || this.getSheetElement(sheetIdx).find(".e-ss-activeimg").length > 0 || this.model.isReadOnly)
                return;
            this._selMergeCells = [];
            selectedCells = this._getSelectedCells(sheetIdx, rng).selCells;
            for (var k = 0, len = selectedCells.length; k < len; k++) {
                mergeObj = this.XLEdit.getPropertyValue(selectedCells[k].rowIndex, selectedCells[k].colIndex, "merge", sheetIdx);
                if (!this.isUndefined(mergeObj)) {
                    hiddenCount = this._getHiddenRowColumnCount(sheetIdx, mergeObj.mRange);
                    cells = this._unMergeAllCells(sheetIdx, k, selectedCells, cells, hiddenCount.hRow, hiddenCount.hCol);
                    clrMerge.push({ rowIdx: selectedCells[k].rowIndex, colIdx: selectedCells[k].colIndex, mergeObj: mergeObj });
                }
            }
            ej.isNullOrUndefined(range) && (range = this._getSelRange(selectedCells));
            sheet._isLoaded && this.performSelection(rng);
            if ((!sheet._isImported || sheet._isLoaded) && !this._isUndoRedo && !this._dupDetails && !this._isExport) {
                details = { sheetIndex: sheetIdx, cells: selectedCells, range: range, reqType: "merge-cells", action: "un-merge", operation: "un-merge", mCells: cells };
                this._completeAction(details);
                this._trigActionComplete(details);
            }
            if (this.model.showRibbon && !this._isScrolling)
                this.XLRibbon._updateRibbonIcons();
        },

        _unMergeAllCells: function (sheetIdx, rowIdx, selectedCells, cells, hr, hc) {
            var i, j, k, mergeObj, mergeWrap, mergeIdx, rSpan = 1, cSpan = 1, mSpanObj, isViewable = false, container = this._dataContainer.sheets[sheetIdx], prevObj = {},
                activeCell, overflow, cell, startrowIdx, startcolIdx, rowhdrrows, mCells, mergeContainer, sheet = this.getSheet(sheetIdx), aCellHgt, hasBdrProp = false, mergedCells; // mCells denotes merged cells
            startrowIdx = selectedCells[rowIdx].rowIndex; startcolIdx = selectedCells[rowIdx].colIndex, rowhdrrows = this.getRows(sheetIdx)[0], mergedCells = this.model.sheets[sheetIdx].mergedCells;
            activeCell = this.getCell(startrowIdx, startcolIdx);
            mergeObj = this.XLEdit.getPropertyValue(startrowIdx, startcolIdx, "merge", sheetIdx);
            if (!ej.isNullOrUndefined(mergeObj)) {
                rSpan = mergeObj.mSpan.rowSpan;
                cSpan = mergeObj.mSpan.colSpan;
                hasBdrProp = this.XLEdit.getPropertyValue(startrowIdx, startcolIdx, "borders", sheetIdx)
                if (!hasBdrProp || (hasBdrProp && (!hasBdrProp["right"] || !hasBdrProp["bottom"])))
                    this.XLEdit._clearDataContainer({ cellIdx: { rowIndex: startrowIdx, colIndex: startcolIdx }, property: ["border"] });
                if (hasBdrProp && hasBdrProp["bottom"] && rSpan === 1)
                    this.XLFormat._updateFormatClass({ rowIndex: startrowIdx, colIndex: startcolIdx }, this.XLFormat._getBorderHashCode(hasBdrProp), true);
                for (k = 0; k < mergedCells.length; k++) {
                    if (mergedCells[k].range == mergeObj.mRange) {
                        mergedCells.splice(k, 1);
                    }
                }
            }
            if (cSpan > 1 || rSpan > 1) {
                mergeContainer = container[startrowIdx][startcolIdx];
                $.extend(true, prevObj, mergeContainer);
                delete mergeContainer["merge"];
                this._clearMergeColl(sheet._mergeColl, startrowIdx, startcolIdx);
                if (this._isRowViewable(sheetIdx, startrowIdx)) {
                    activeCell = this.getCell(startrowIdx, startcolIdx);
                    if (!this.XLEdit.getPropertyValue(startrowIdx, startcolIdx, "cellType", sheetIdx)) {
                        mergeWrap = activeCell.find('#' + this._id + '_Merge');
                        if (mergeWrap.length) {
                            activeCell[0].innerHTML = mergeWrap[0].innerHTML;
                            mergeWrap.remove();
                        }
                    }
                    if (!ej.isNullOrUndefined(mergeObj.isCenterAlign))
                        activeCell.removeClass("e-calign");
                    activeCell[0].colSpan = activeCell[0].rowSpan = 1;
                    if (sheet._isLoaded) {
                        aCellHgt = activeCell[0].offsetHeight;
                        if ($(rowhdrrows[startrowIdx]).height() < aCellHgt) {
                            this.setHeightToRows([{ rowIndex: startrowIdx, height: aCellHgt }]);
                            this._updateFormatColl(sheetIdx, startrowIdx, startcolIdx, aCellHgt);
                        }
                        this.XLScroll._getRowHeights(sheetIdx, startrowIdx);
                    }
                }
                cells.push({ rowIndex: startrowIdx, colIndex: startcolIdx, prevObj: prevObj, curObj: $.extend(true, {}, container[startrowIdx][startcolIdx]) });
                mCells = [];
                for (i = startrowIdx; i < (startrowIdx + rSpan + hr); i++) {
                    for (j = startcolIdx; j < (startcolIdx + cSpan + hc); j++) {
                        this._selMergeCells.push({ rowIndex: i, colIndex: j });
                        isViewable = false;
                        if (this._isRowViewable(sheetIdx, i)) {
                            cell = this.getCell(i, j, sheetIdx);
                            isViewable = true;
                        }
                        if (!ej.isNullOrUndefined(this.XLEdit.getPropertyValue(i, j, "isMHide", sheetIdx))) {
                            if (this._isUndoRedo) {
                                mSpanObj = this.XLEdit.getPropertyValue(i, j, "merge", sheetIdx);
                                if (!ej.isNullOrUndefined(mSpanObj)) {
                                    if (mSpanObj.mergeSpan.rowSpan > 1 || mSpanObj.mergeSpan.colSpan > 1) {
                                        mCells.push({ rowIndex: i, colIndex: j, rowSpan: mSpanObj.mergeSpan.rowSpan, colSpan: mSpanObj.mergeSpan.colSpan });
                                        container[i][j].merge.mSpan = { rowSpan: 1, colSpan: 1 };
                                        cell[0].rowSpan = 1; cell[0].colSpan = 1;
                                    }
                                }
                            }
                            mergeIdx = this.XLEdit.getPropertyValue(i, j, "mergeIdx", sheetIdx);
                            if (!ej.isNullOrUndefined(mergeIdx))
                                if (mergeIdx.rowIndex === startrowIdx && mergeIdx.colIndex === startcolIdx) {
                                    if (isViewable) {
                                        cell.removeClass("e-mc-hide");
                                        cell[0].rowSpan = 1; cell[0].colSpan = 1;
                                    }
                                    delete container[i][j]["isMHide"];
                                    delete container[i][j]["mergeIdx"];
                                }
                        }
                        if (this._isUndoRedo && !ej.isNullOrUndefined(this._delCells)) {
                            if (!ej.isNullOrUndefined(this._delCells[i]) && !ej.isNullOrUndefined(this._delCells[i][j])) {
                                if (!ej.isNullOrUndefined(container[i])) {
                                    overflow = !ej.isNullOrUndefined(container[i][j]) && container[i][j]['overflow'];
                                    container[i][j] = this._delCells[i][j]['value'];
                                    (overflow) && (container[i][j]['overflow'] = overflow);
                                    isViewable && cell.text(this._delCells[i][j]["text"]);
                                    mergeObj = this.XLEdit.getPropertyValue(i, j, "merge");
                                    if (!ej.isNullOrUndefined(mergeObj) && mergeObj.isMerge)
                                        this.mergeCells(mergeObj.mRange, true);
                                }
                            }
                        }
                        if (isViewable && cell.hasClass("e-commentcell"))
                            this.model.allowComments && this.XLComment._updateCmntArrowPos(cell);
                        if (isViewable) {
                            this._removeClass(cell[0], "e-moverflow");
                            if (cell.text().length > 0)
                                this._textClip(i, j, 'add');
                            else
                                this._textClip(i, j, 'delete');
                        }
                        if (!ej.isNullOrUndefined(container[i])) {
                            if (this.getObjectLength(container[i][j]) < 1)
                                delete container[i][j];
                            if (this.getObjectLength(container[i]) < 1)
                                delete container[i];
                        }
                    }
                }
            }
            return cells;
        },

        _refreshMergeCells: function () {
            this._dupDetails = true;
            var mCells = this._removeMergeColl;
            for (var i = 0, len = mCells.length; i < len; i++)
                this.unmergeCells(mCells[i].merge.mRange, true);
            this._dupDetails = false;
            var data = this._insData;
            switch (data.value.status) {
                case "shiftRight":
                    this._insertShiftRight(data.sheetIdx, data.startCell, data.endCell, data.value);
                    break;
                case "shiftBottom":
                    this._insertShiftBottom(data.sheetIdx, data.startCell, data.endCell, data.value);
                    break;
                case "shiftUp":
                    this._deleteShiftUp(data.sheetIdx, data.startCell, data.endCell, data.value);
                    break;
                case "shiftLeft":
                    this._deleteShiftLeft(data.sheetIdx, data.startCell, data.endCell, data.value);
                    break;
            }
        },

        _showHeadings: function (status, sheetIdx) {
            if (this.model.isReadOnly)
                return;
            sheetIdx = sheetIdx ? sheetIdx : this.getActiveSheetIndex();
            var checkObj, args, sheet = this.getSheet(sheetIdx), shdr = this._getJSSheetHeader(sheetIdx),
                cont = this._getContent(sheetIdx).find('.e-content'), rhdr = this._getJSSheetRowHeader(sheetIdx), fRowIdx = this.getFrozenRows(), fColIdx = this.getFrozenColumns();
            sheet.showHeadings = status;
            this._isDisplayHeader = true;
            if (sheet.showHeadings) {
                rhdr.show();
                shdr.show();
                cont.removeClass('e-viewbrdr');
            }
            else {
                rhdr.hide();
                shdr.hide();
                cont.addClass('e-viewbrdr');
            }
            this._heightWidthCalculation(sheetIdx, { action: sheet._isLoaded ? "" : "initial" });
            if (this.model.showRibbon) {
                checkObj = this.element.find("#" + this._id + "_Ribbon_PageLayout_Show_Headings").data("ejCheckBox");
                if (checkObj)
                    status ? checkObj._checked() : checkObj._unChecked();
            }
            if (this.model.allowFreezing && sheet._isFreezed) {
                this.XLFreeze.unfreezePanes();
                if (this._isFrozen(fRowIdx) && this._isFrozen(fColIdx))
                    this.XLFreeze.freezePanes(fRowIdx, fColIdx);
                else if (this._isFrozen(fRowIdx))
                    this.XLFreeze.freezeRows(fRowIdx);
                else if (this._isFrozen(fColIdx))
                    this.XLFreeze.freezeColumns(fColIdx);
            }
            args = { reqType: "headings", showHeadings: status, sheetIndex: sheetIdx };
            this._trigActionComplete(args);
        },

        showHeadings: function (status) {
            this._showHeadings(status);
        },

        showGridlines: function (status) {
            this._showGridlines(status);
        },

        _showGridlines: function (status, sheetIdx) {
            if (this.model.isReadOnly)
                return;
            sheetIdx = sheetIdx ? sheetIdx : this.getActiveSheetIndex();
            var checkObj, args, sheet = this.getSheet(sheetIdx), cells = this._getContent(sheetIdx).find(".e-rowcell");
            if (this.model.showRibbon) {
                checkObj = this.element.find("#" + this._id + "_Ribbon_PageLayout_Show_Gridlines").data("ejCheckBox");
                if (checkObj)
                    (status) ? checkObj._checked() : checkObj._unChecked();
            }
            sheet.showGridlines = status;
            sheet.showGridlines ? cells.removeClass('e-hborder') : cells.addClass("e-hborder");
            args = { reqType: "gridlines", showGridlines: status, sheetIndex: sheetIdx };
            this._trigActionComplete(args);
        },

        //Spreadsheet Common Prop
        setSheetFocus: function () {
            this._isPublic = true;
            this._setSheetFocus();
            this._isPublic = false;
        },

        _setSheetFocus: function () {
            if (this._isSSLoaded || this._isPublic) {
                if (!this._hasClass(document.activeElement, "e-datepicker"))
                    if (ej.browserInfo().name == "msie") {
                        try { this.element[0].setActive(); } catch (e) { }
                    }
                    else
                        this.element.focus();
                if (!this._isInitLoad)
                    window.scrollTo(window.pageXOffset, window.pageYOffset);
            }
        },

        _diffNumbers: function (a, b) {
            return a - b;
        },

        _isValidDate: function (date) {
            var dateFormat = /^\d{1,4}[\.|\/|-]\d{1,2}[\.|\/|-]\d{1,4}$/;
            if (dateFormat.test(date)) {
                date = date.replace(/0*(\d*)/gi, "$1");
                var dateArray = date.split(/[\.|\/|-]/);
                // correct month value
                dateArray[0] = dateArray[0] - 1;
                // correct year value
                if (dateArray[2].length < 4) {
                    // correct year value
                    dateArray[2] = (parseInt(dateArray[2]) < 50) ? 2000 + parseInt(dateArray[2]) : 1900 + parseInt(dateArray[2]);
                }
                var testDate = new Date(dateArray[2], dateArray[0], dateArray[1]);
                if (testDate.getDate() != dateArray[1] || testDate.getMonth() != dateArray[0] || testDate.getFullYear() != dateArray[2]) {
                    return false;
                } else {
                    return true;
                }
            } else {
                return false;
            }
        },

        _isValidTime: function (value) {
            var colonCount = 0, status = false, mm, ss;
            for (var i = 0, len = value.length; i < len; i++) {
                var ch = value.substring(i, i + 1);
                if ((ch < "0") || (ch > "9")) {
                    if ((ch != ":") && (ch != " ") && (ch != "a") && (ch != "A") && (ch != "p") && (ch != "P") && (ch != "m") && (ch != "M")) {
                        return false;
                    }
                }
                if (ch == ":") { colonCount++; }
                if ((ch == "p") || (ch == "P") || (ch == "a") || (ch == "A")) { status = true; }
            }
            if ((colonCount < 1) || (colonCount > 2)) { return false; }
            var hh = value.substring(0, value.indexOf(":"));
            if ((parseFloat(hh) < 0) || (parseFloat(hh) > 23)) { return false; }
            if (status) {
                if ((parseFloat(hh) < 1) || (parseFloat(hh) > 12)) { return false; }
            }
            if (colonCount == 2) {
                mm = value.substring(value.indexOf(":") + 1, value.lastIndexOf(":"));
            } else {
                mm = value.substring(value.indexOf(":") + 1, value.length);
            }
            if ((parseFloat(mm) < 0) || (parseFloat(mm) > 59)) { return false; }
            if (colonCount == 2) {
                ss = value.substring(value.lastIndexOf(":") + 1, value.length);
            } else {
                ss = "00";
            }
            if ((parseFloat(ss) < 0) || (parseFloat(ss) > 59)) { return false; }
            return true;
        },

        _setXY: function (e, isPage) {
            var x = 0, y = 0;
            isPage = isPage ? "page" : "client";
            if (e.type === "mousemove" || e.type === "mousedown" || e.type === "mouseup") {
                x = e[isPage + "X"];
                y = e[isPage + "Y"];
            }
            else if (e.type === "touchmove" || e.type === "touchstart" || e.type === "touchend") {
                x = e.originalEvent.changedTouches[0][isPage + "X"];
                y = e.originalEvent.changedTouches[0][isPage + "Y"];
            }
            else if (e.type === "MSPointerMove" || e.type === "pointermove" || e.type === "MSPointerUp" || e.type === "pointerup" || e.type === "MSPointerDown" || e.type === "pointerdown") {
                x = e.originalEvent[isPage + "X"];
                y = e.originalEvent[isPage + "Y"];
            }
            return [x, y];
        },

        _getSelectedItems: function (sheetIdx, range, addr) {
            var selected, sCIdx, eCIdx, actSheet;
            sheetIdx = sheetIdx ? sheetIdx : this.getActiveSheetIndex(), actSheet = this.getSheet(sheetIdx);
            if (ej.isNullOrUndefined(addr) && ej.isNullOrUndefined(range)) {
                selected = actSheet._selectedCells;
                sCIdx = actSheet._startCell, eCIdx = actSheet._endCell;
                addr = this._generateHeaderText(sCIdx.colIndex + 1) + (sCIdx.rowIndex + 1) + ":" + this._generateHeaderText(eCIdx.colIndex + 1) + (eCIdx.rowIndex + 1);
            }
            else {
                range = this.isUndefined(range) ? this.getRangeIndices(addr) : range;
                selected = this.getRange(range, sheetIdx);
                addr = this._generateHeaderText(range[1] + 1) + (range[0] + 1) + ":" + this._generateHeaderText(range[3] + 1) + (range[2] + 1);
            }
            return [selected, addr];
        },

        setBorder: function (property, range) {
            if (!this.model.allowCellFormatting || this.model.isReadOnly)
                return;
            range = this._getRangeArgs(range);
            if (range[0] === range[2] && range[1] === range[3]) {
                var mergeInf = this.XLEdit.getPropertyValue(range[0], range[1], "merge");
                if (mergeInf)
                    range = mergeInf.mRange;
            }
            var i, str = "", isGridBdr = false, borderStyle = property.style, borderType = property.type, hexcode = property.color, arr1, arr2, border1, border2, prop, sprop, sheetCont = this._getContent(this.getActiveSheetIndex()).find("div:first-child");
            if (!this.model.allowSelection && (borderType === "drawborder" || borderType === "drawbordergrid"))
                return;
            arr1 = ["bottom", "top", "left", "right", "outside", "allborder"];
            arr2 = ["thickbox", "thickbottom", "doublebottom", "topandbottom", "topandthickbottom", "topanddoublebottom"];
            border1 = {
                top: { top: "" },
                right: { right: "" },
                bottom: { bottom: "" },
                left: { left: "" },
                outside: { top: "", right: "", bottom: "", left: "" },
                thickbox: { top: "2px solid", right: "2px solid", bottom: "2px solid", left: "2px solid" },
                thickbottom: { bottom: "2px solid" },
                doublebottom: { bottom: "3px double" },
                topandbottom: { top: "1px solid", bottom: "1px solid" },
                topandthickbottom: { top: "1px solid", bottom: "2px solid" },
                topanddoublebottom: { top: "1px solid", bottom: "3px double" }
            };
            border2 = { solid: "1px solid", dashed: "1px dashed", dotted: "1px dotted", double: "3px double" };
            if (this.model.allowSelection)
                this.XLSelection._isGridBordering = this.XLSelection._isOutsideBordering = false;
            switch (true) {
                case arr1.indexOf(borderType) > -1:
                    isGridBdr = borderType === arr1[5];
                    prop = border1[isGridBdr ? arr1[4] : borderType];
                    for (i in prop)
                        prop[i] = border2[borderStyle] + " " + hexcode;
                    if (isGridBdr)
                        prop.isGridBorder = isGridBdr;
                    prop['property'] = property;
                    this.XLFormat.applyBorder(prop, range);
                    break;
                case arr2.indexOf(borderType) > -1:
                    prop = border1[borderType];
                    for (i in prop) {
                        str = "";
                        sprop = prop[i].split(" ");
                        str = sprop.length === 2 ? str + prop[i] + " " + hexcode : str + prop[i] + " " + borderStyle + " " + hexcode; // consider
                        prop[i] = str;
                    }
                    prop['property'] = property;
                    this.XLFormat.applyBorder(prop, range);
                    break;
                case borderType === "noborder":
                    this.XLFormat.applyBorder("noborder", range);
                    break;
                case borderType === "drawborder":
                    this.XLSelection._isOutsideBordering = true;
                    sheetCont.removeClass("e-ss-cursor");
                    sheetCont.addClass("e-ss-drwbrdrcursor");
                    this.XLSelection._cleanUp(true);
                    break;
                case borderType === "drawbordergrid":
                    this.XLSelection._isGridBordering = true;
                    sheetCont.removeClass("e-ss-cursor");
                    sheetCont.addClass("e-ss-drwbrdrgridcursor");
                    this.XLSelection._cleanUp(true);
                    break;
            }
        },

        clearBorder: function (range) {
            if (this.model.isReadOnly)
                return;
            range = this._getRangeArgs(range, "object");
            this.XLFormat.removeStyle(range, { cellStyle: true, tableStyle: true, border: true });
        },

        clearHyperlinks: function () {
            if (this.model.allowClear && !this.model.isReadOnly)
                this._removeHyperlink("clear");
        },

        clearComments: function (sheetIdx) {
            if (this.model.allowClear && !this.model.isReadOnly)
                this.model.allowComments && this.XLComment.deleteComment(undefined, sheetIdx, false, "clear");
        },

        clearAllFormat: function (aRange) {
            if (!this.model.allowClear || this.model.isReadOnly)
                return;
            var sheetIdx = this.getActiveSheetIndex(), args = { range: aRange, sheetIndex: sheetIdx, reqType: "clear-format", type: "actionBegin", action: "clearformat" };
            if (this._trigActionBegin(args))
                return;
            var evtArgs, container = this._dataContainer.sheets[sheetIdx], nRange = [], rKeys, cKeys, sheet = this.getSheet(sheetIdx),
                range = this._getRangeArgs(args.range, "object"), isTable,
                details = { sheetIndex: sheetIdx, reqType: "clear-format", range: range };
            details.bData = $.extend(true, [], this.getRangeData({ range: range, property: ["format", "tformats", "type", "formatStr", "decimalPlaces", "thousandSeparator", "formats", "hyperlink", "cFormatRule"] }));
            this._dupDetails = true;
            rKeys = this.getObjectKeys(container);
            nRange[0] = (range[0] > parseInt(rKeys[0])) ? range[0] : parseInt(rKeys[0]);
            nRange[2] = (range[2] < parseInt(rKeys[rKeys.length - 1])) ? range[2] : parseInt(rKeys[rKeys.length - 1]);
            cKeys = this.getObjectKeys(container[nRange[2]]);
            nRange[1] = (range[1] > parseInt(cKeys[0])) ? range[1] : parseInt(cKeys[0]);
            nRange[3] = (range[3] < parseInt(cKeys[cKeys.length - 1])) ? range[3] : parseInt(cKeys[cKeys.length - 1]);
            if (ej.isNullOrUndefined(rKeys))
                return;
            isTable = this._checkTableRange(this._getAlphaRange(sheetIdx, nRange[0], nRange[1], nRange[2], nRange[3]));
            if (isTable.status === 'partial')
                return;
            this.clearRangeData(range, ["format", "formatStr", "decimalPlaces", "thousandSeparator", "formats", "hyperlink", "cFormatRule", "border"], "", false, details.reqType);
            this.clearBorder(aRange);
            this.model.allowConditionalFormats && this.XLCFormat.refreshCFormat(range);
            sheet._clrWrapColl = [];
            sheet._clrMergeColl = [];
            this._isPaste = true;
            this.setWrapText("unwrap", range);
            this._isPaste = false;
            this.unmergeCells(range);
            details.wrapColl = $.extend(true, [], sheet._clrWrapColl);
            details.mergeColl = $.extend(true, [], sheet._clrMergeColl);
            (this.model.showRibbon) && this.XLRibbon._updateRibbonIcons();
            this._dupDetails = false;
            if (!this._isUndoRedo) {
                this._completeAction(details);
                evtArgs = { sheetIndex: details.sheetIndex, reqType: details.reqType, range: details.range, prevData: details.bData, prevMergeColl: details.mergeColl, prevWrapColl: details.wrapColl };
                this._trigActionComplete(evtArgs);
            }
        },

        clearContents: function (range) {
            if (this.model.isReadOnly)
                return;
            var sheetIdx = this.getActiveSheetIndex(), args = { range: range, sheetIndex: sheetIdx, reqType: "clear-content", type: "actionBegin", action: "clearContent" };
            if (this._trigActionBegin(args))
                return;
            range = this._getRangeArgs(args.range, "object");
            var evtArgs, rangeData = this.getRangeData({ range: range, property: ["value", "value2", "type", "hyperlink"] }), details = { sheetIndex: sheetIdx, reqType: "clear-content", range: range, bData: $.extend(true, [], rangeData) };
            if (!this.model.allowClear || this._isPropExists([range], "isReadOnly", sheetIdx))
                return;
            this.clearRangeData(range, ["value", "value2", "hyperlink"], "", false, details.reqType);
            (this.model.allowConditionalFormats) && this.XLCFormat.refreshCFormat(range); {
                this._completeAction(details);
                evtArgs = { sheetIndex: details.sheetIndex, reqType: details.reqType, range: details.range, prevData: details.bData };
                this._trigActionComplete(evtArgs);
            }
            this._setSheetFocus();
            if (this.model.allowFormulaBar)
                this.updateFormulaBar();
        },

        clearAll: function (aRange) {
            if (this.model.isReadOnly)
                return;
            var sheetIdx = this.getActiveSheetIndex(), args = { range: aRange, sheetIndex: sheetIdx, reqType: "clear-all", type: "actionBegin", action: "clearall" };
            if (this._trigActionBegin(args))
                return;
            var rKeys, cKeys, evtArgs, alpRange, isTable, sheet = this.getSheet(sheetIdx), nRange = [], range = this._getRangeArgs(args.range, "object"),
                details = { sheetIndex: sheetIdx, reqType: "clear-all", range: range }, container = this._dataContainer.sheets[sheetIdx];
            if (!this.model.allowClear || this._isPropExists([range], "isReadOnly", sheetIdx))
                return;
            this._dupDetails = true;
            rKeys = this.getObjectKeys(container);
            nRange[0] = (range[0] > parseInt(rKeys[0])) ? range[0] : parseInt(rKeys[0]);
            nRange[2] = (range[2] < parseInt(rKeys[rKeys.length - 1])) ? range[2] : parseInt(rKeys[rKeys.length - 1]);
            cKeys = this.getObjectKeys(container[nRange[2]]);
            nRange[1] = (range[1] > parseInt(cKeys[0])) ? range[1] : parseInt(cKeys[0]);
            nRange[3] = (range[3] < parseInt(cKeys[cKeys.length - 1])) ? range[3] : parseInt(cKeys[cKeys.length - 1]);
            alpRange = this._getAlphaRange(sheetIdx, nRange[0], nRange[1], nRange[2], nRange[3]);
            if ((ej.isNullOrUndefined(rKeys)) || (ej.isNullOrUndefined(cKeys)))
                return;
            details.bData = $.extend(true, [], this.getRangeData({ range: range, property: ["value", "value2", "hyperlink", "merge", "rule", "cFormatRule", "comment", "format", "formatStr", "formats", "tformat", "decimalPlaces", "thousandSeparator", "type", "borders", "tborders"], sheetIdx: sheetIdx }));
            details.bBorder = this.XLFormat.getHashCodeClassAsArray(range);
            isTable = this._checkTableRange(alpRange);
            if (isTable.status === 'full') {
                details.tblObj = isTable.tableObj;
                details.tblObj.tblId = isTable.tblId;
                details.tblObj.header = true;
                this.XLFormat.removeTable(details.tblObj.tblId);
            }
            else if (isTable.status === 'partial')
                return;
            this.clearRangeData(range, ["value", "value2", "hyperlink", "cFormatRule", "comment", "format", "formats", "formatStr", "decimalPlaces", "thousandSeparator", "border"], "", false);
            this.clearBorder(alpRange);
            this.model.allowFiltering && this.XLFilter.clearFilter('remove');
            sheet._clrMergeColl = [];
            sheet._clrWrapColl = [];
            (this.model.allowConditionalFormats) && this.XLCFormat.refreshCFormat(range);
            (this.model.allowDataValidation) && this.XLValidate.clearDV();
            this._isPaste = true;
            this.setWrapText("unwrap", range);
            this._isPaste = false;
            this.unmergeCells(range);
            details.mergeColl = $.extend(true, [], sheet._clrMergeColl);
            details.wrapColl = $.extend(true, [], sheet._clrWrapColl);
            this._dupDetails = false;
            if (this.model.showRibbon) {
                this.XLRibbon._updateRibbonIcons();
                this.XLRibbon._toggleDesignTab(this.getActiveCell());
            }
            this._completeAction(details);
            evtArgs = { sheetIndex: details.sheetIndex, reqType: details.reqType, range: details.range, prevData: details.bData, prevBorder: details.bBorder, tblObj: details.tblObj, mergeColl: details.mergeColl, wrapColl: details.wrapColl };
            this._trigActionComplete(evtArgs);
        },

        _checkTableRange: function (aRange, cellIdx) {
            var tAlphaRange, sheetIdx = this.getActiveSheetIndex(), sheet = this.model.sheets[sheetIdx], tId, tblObj, tRange,
                range = this.getRangeIndices(aRange), tName, prop;
            if (cellIdx)
                tName = this.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "tableName");
            else {
                prop = this.XLEdit._getPropWithCellIdx(range, 'tableName');
                prop.length && (tName = prop[0].value);
            }
            if (tName) {
                tId = this._getTableID(tName);
                tblObj = sheet.tableManager[tId];
                tRange = tblObj.range;
                tAlphaRange = this._getAlphaRange(sheetIdx, tRange[0], tRange[1], tRange[2], tRange[3])
                return (aRange === tAlphaRange) ? { status: 'full', tableObj: tblObj, tblId: tId } : { status: 'partial' };
            }
            else
                return { status: 'no-table' };
        },

        _checkFilterRange: function (aRange, cellIdx) {
            var tAlphaRange, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), tblObj,
                range = this.getRangeIndices(aRange), isHdr, prop, tableRange = sheet.filterSettings.tableRange;
            if (cellIdx)
                isHdr = this.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "isFilterHeader");
            else {
                prop = this.XLEdit._getPropWithCellIdx(range, 'isFilterHeader');
                prop.length && (isHdr = prop[0].value);
            }
            if (isHdr) {
                for (var i = 0; i < tableRange.length; i++) {
                    if (tableRange[i].tableID === -1) {
                        tblObj = tableRange[i];
                        tAlphaRange = this._getAlphaRange(sheetIdx, tblObj.startRow - 1, tblObj.multifilterIdx[0], tblObj.endRow, tblObj.multifilterIdx[tblObj.multifilterIdx.length - 1]);
                        return (aRange === tAlphaRange) ? { status: 'full', tRange: tAlphaRange, tblId: -1 } : { status: 'partial' };
                    }
                }
                return { status: 'no-table' };
            }
            else
                return { status: 'no-table' };
        },

        clearTextNode: function (td, text) {
            if (ej.isNullOrUndefined(td) || this.model.isReadOnly)
                return;
            var sheetIdx = this.getActiveSheetIndex(), rowIndex = td[0].parentNode.rowIndex, colIndex = td[0].cellIndex, container = this._dataContainer.sheets[sheetIdx], node = td[0].childNodes[td[0].childNodes.length - 1];
            text = text || "";
            if (this._checkIndicesInContainer(sheetIdx, rowIndex, colIndex, "rule"))
                if (container[rowIndex][colIndex].rule.type === "list")
                    return;
            if (ej.isNullOrUndefined(node) || node.hasChildNodes("a"))
                return;
            else
                td[0].lastChild.textContent = text;
        },

        _isClassHasProperty: function (cls, property, value) {
            var format = this.XLFormat.getFormatFromHashCode(cls);
            if (format[property] && format[property].toLowerCase() === value)
                return true;
            else
                return false;
        },

        _changeTargetWithOffset: function (e) {                       //get a cell by position of mouse pointer
            var trgt, $trgt = $(e.target), offset = e.offsetX || e.pageX - $trgt.offset().left;
            if (this._hasClass(document.activeElement, 'e-datepicker') && e.type === "mouseup")
                $('#' + this._id).focus();
            if ($trgt.is('a')) {
                trgt = e.target;
                e.target = e.target.parentNode;
            }
            if ($trgt.is('#' + this._id + '_Merge'))
                return $trgt.parents().closest('td')[0];
            if (this._hasClass($trgt.parents().closest('td'), 'e-cellreadonly')) {
                if (this._hasClass($trgt, 'e-datepicker') && e.type === 'mouseup') {
                    $trgt.focus();
                }
                return $trgt.parents().closest('td')[0];
            }
            if ($trgt.is('td') && this._hasClass($trgt, 'e-cellreadonly'))
                if ($trgt.find('.e-chk-image').length > 0 && e.type === "mouseup") {
                    $('#' + $trgt.find('.e-checkbox')[0].id).ejCheckBox('instance')._checkedHandler();
                    return e.target;
                }
            if ((offset > e.target.offsetWidth || offset < 0) && ($trgt.is('td') && $trgt.parents(".e-spreadsheetmainpanel").length && this._hasClass($trgt, "e-rowcell"))) {
                var sheet = this.getSheet(this.getActiveSheetIndex()), cell = this._getCellIdx(e.target),
                    left = sheet._colWidthCollection[cell.colIndex] + offset,
                    top = sheet._rowHeightCollection[cell.rowIndex];
                trgt && this.addClass(trgt, 'e-rmanchor');
                return this.getCell(this.XLShape._getCellIndexFromOffset(top, left).rowIndex, this.XLShape._getCellIndexFromOffset(top, left).colIndex)[0];
            }
            else {
                if (trgt) {
                    this._removeClass(trgt, 'e-rmanchor');
                    return trgt;
                }
                else {
                    this._removeClass($trgt.find('a')[0], 'e-rmanchor');
                    return e.target;
                }
            }
        },

        _textClip: function (rowIndex, colIndex, action, width, isOnlyRemoval, keys) {
            var sheetIndex = this.getActiveSheetIndex(), kLen, i, len;
            if (!this._canOverflow || this.XLEdit.getPropertyValue(rowIndex, colIndex, 'merge') || this.XLEdit.getPropertyValue(rowIndex, colIndex, 'wrap'))
                return;
            var parseCell, val, cell, elem, cIdx, ofObj, endCell, tempCell, colsColl, overflow, container, cellStyle, span, chngd = false, isText = false, isFormat = false,
                isPrevOverflow = false, xlEdit = this.XLEdit, sheet = this.getSheet(sheetIndex),
                load = (sheet._isLoaded || this.isImport || this.model.isImport), $cell = this.getCell(rowIndex, colIndex), format = xlEdit.getPropertyValue(rowIndex, colIndex, 'format', sheetIndex);
            if ($cell)
                cell = $cell[0];
            if (this._isClassHasProperty(format, 'text-align', 'right'))
                isFormat = true;
            if (xlEdit.getPropertyValue(rowIndex, colIndex, 'cellType', sheetIndex) > -1)
                return;
            if (!this._dupDetails)
                this._dupDetails = chngd = true;
            if (!keys) {
                container = this._dataContainer.sheets[sheetIndex];
                keys = this.getObjectKeys(container[rowIndex]);
            }
            if (action === 'add') {
                if (!this.model.allowOverflow) {
                    this.addClass(cell, 'e-overflow');
                    xlEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { dataObj: { isOverflow: false }, skipCell: true });
                    chngd && (this._dupDetails = false);
                    return;
                }
                this._removeClass(cell, 'e-overflow');
                this.clearRangeData([rowIndex, colIndex, rowIndex, colIndex], ['isOverflow'], '', '', '', true);
                if (xlEdit.getPropertyValue(rowIndex, colIndex + 1, 'value2', sheetIndex) && !isFormat)
                    isText = true;
                if (!isText) {
                    colsColl = sheet._ofColWidthColl;
                    cellStyle = cell ? this.XLFormat.getFormatFromHashCode(this.XLFormat.getFormatClass(cell.className)) : {};
                    if (!width) {
                        span = document.getElementById(this._id + '_emptySpan');
                        this.addClass(span, 'e-rowcell e-wrapword');
                        this.addClass(span, format);
                        span.textContent = xlEdit.getPropertyValue(rowIndex, colIndex, 'value2', sheetIndex);
                        if ("text-indent" in cellStyle)
                            width = Math.round((4 / 3) * Number(cellStyle[ej.Spreadsheet.SupportedStyles.TextIndent].replace("pt", "")) + this._detailsFromGlobalSpan(rowIndex, colIndex, "width", span.textContent, null, true));     //calculating offset for text + indent 
                        else
                            width = span.offsetWidth;
                    }
                    this._refreshGlobalSpan(span);
                    endCell = this.XLShape._getCellIndexFromOffset(null, (colsColl[colIndex] + width), sheetIndex, true);
                    val = endCell.colIndex - colIndex;
                }
                if (!isOnlyRemoval && xlEdit.getPropertyValue(rowIndex, colIndex, 'value2', sheetIndex)) {
                    overflow = xlEdit.getPropertyValue(rowIndex, colIndex, 'overflow', sheetIndex);
                    if (!ej.isNullOrUndefined(overflow) && overflow.rowIndex === rowIndex) {
                        tempCell = this.getCell(overflow.rowIndex, overflow.colIndex);
                        if (tempCell)
                            this.addClass(tempCell[0], 'e-overflow');
                        xlEdit._updateDataContainer({ rowIndex: overflow.rowIndex, colIndex: overflow.colIndex }, { dataObj: { isOverflow: false }, skipCell: true });
                        if (overflow.colIndex < colIndex) {
                            len = overflow['cellCount'];
                            for (j = 0; j <= len; j++) {
                                var props = [];
                                (j !== 0) && props.push("overflow");
                                if (j !== len) {
                                    elem = this.getCell(rowIndex, overflow.colIndex + j);
                                    if (load && elem)
                                        this._removeClass(elem[0], 'e-ofbrdr');
                                    props.push("isOfBrdr");
                                }
                                this.clearRangeData([rowIndex, overflow.colIndex + j, rowIndex, overflow.colIndex + j], props, '', '', '', true);
                            }
                        }
                        else {
                            for (j = overflow['cellCount']; j > 0; j--) {
                                elem = this.getCell(rowIndex, overflow.colIndex - j);
                                if (load && elem)
                                    this._removeClass(elem[0], 'e-ofbrdr');
                                this.clearRangeData([rowIndex, overflow.colIndex - j, rowIndex, overflow.colIndex - j], ['isOfBrdr', "overflow"], '', '', '', true);
                            }
                        }
                    }
                }
                if (!isFormat && !isText) {
                    for (var j = 1; j <= val; j++)
                        if (xlEdit.getPropertyValue(rowIndex, colIndex + j, 'value2', sheetIndex) || xlEdit.getPropertyValue(rowIndex, colIndex + j, 'merge', sheetIndex) || xlEdit.getPropertyValue(rowIndex, colIndex + j, 'isMHide', sheetIndex) || (xlEdit.getPropertyValue(rowIndex, colIndex + j, 'overflow', sheetIndex) && xlEdit.getPropertyValue(rowIndex, colIndex + j, 'overflow', sheetIndex).colIndex !== colIndex)) {
                            isText = true;
                            break;
                        }
                }
                else {
                    len = colIndex - val;
                    for (j = colIndex - 1; j >= len; j--) {
                        ofObj = xlEdit.getPropertyValue(rowIndex, j, 'overflow', sheetIndex);
                        if (ofObj && ofObj.colIndex !== colIndex && !isPrevOverflow) {
                            isPrevOverflow = true;
                            this._textClip(ofObj.rowIndex, ofObj.colIndex, 'delete', '', true);
                            $cell = this.getCell(ofObj.rowIndex, ofObj.colIndex);
                            if ($cell)
                                this.addClass($cell[0], 'e-overflow');
                        }
                        if (xlEdit.getPropertyValue(rowIndex, j, 'value2', sheetIndex)) {
                            isText = true;
                            break;
                        }
                    }
                }
                if (!isText) {
                    if (val !== 0)
                        for (j = 0; j <= val; j++) {
                            cIdx = (isFormat) ? colIndex - j : colIndex + j;
                            if (j)
                                xlEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: cIdx }, { dataObj: { overflow: { rowIndex: rowIndex, colIndex: colIndex, cellCount: val } }, skipCell: true });
                            if (((!isFormat || (isFormat && j !== 0)) && j !== val) || (j === val && isFormat)) {
                                if (load && this._isRowViewable(sheetIndex, rowIndex))
                                    this.addClass(this.getCell(rowIndex, cIdx)[0], 'e-ofbrdr');
                                xlEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: cIdx }, { dataObj: { isOfBrdr: true }, skipCell: true });
                            }
                        }
                }
                else {
                    this.addClass(cell, 'e-overflow');
                    xlEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { dataObj: { isOverflow: false }, skipCell: true });
                }
            }
            else if (action === 'delete') {
                if (this._hasClass(cell, 'e-overflow')) {
                    this._removeClass(cell, 'e-overflow');
                    this.clearRangeData([rowIndex, colIndex, rowIndex, colIndex], ['isOverflow'], '', '', '', true);
                }
                else {
                    if (!isFormat) {
                        ofObj = xlEdit.getPropertyValue(rowIndex, colIndex + 1, 'overflow', sheetIndex);
                        if (!ej.isNullOrUndefined(ofObj) && ofObj.colIndex === colIndex) {
                            len = colIndex + 1 + ofObj['cellCount'];
                            for (i = colIndex; i < len; i++) {
                                props = [];
                                (i !== colIndex) && props.push("overflow");
                                if (i !== len) {
                                    if (load) {
                                        elem = this.getCell(rowIndex, i);
                                        if (elem)
                                            this._removeClass(elem[0], 'e-ofbrdr');
                                    }
                                    props.push("isOfBrdr");
                                }
                                this.clearRangeData([rowIndex, i, rowIndex, i], props, '', '', '', true);
                            }
                        }
                    }
                    else {
                        ofObj = xlEdit.getPropertyValue(rowIndex, colIndex - 1, 'overflow', sheetIndex);
                        if (!ej.isNullOrUndefined(ofObj) && ofObj.colIndex === colIndex) {
                            len = colIndex - ofObj['cellCount'];
                            for (i = colIndex - 1; i >= len; i--) {
                                if (load) {
                                    elem = this.getCell(rowIndex, i);
                                    if (elem)
                                        this._removeClass(elem[0], 'e-ofbrdr');
                                }
                                this.clearRangeData([rowIndex, i, rowIndex, i], ['isOfBrdr', "overflow"], '', '', '', true);
                            }
                        }
                    }
                }
                if (!isOnlyRemoval && this.model.allowOverflow) {
                    for (i = keys.indexOf(colIndex.toString()) - 1; i > -1; i--) {
                        if (load)
                            parseCell = this.getCell(rowIndex, keys[i]);
                        if (xlEdit.getPropertyValue(rowIndex, keys[i], 'value2', sheetIndex) || xlEdit.getPropertyValue(rowIndex, keys[i], 'isMHide', sheetIndex)) {
                            if (this._hasClass(parseCell, 'e-overflow')) {
                                if (parseCell)
                                    this._removeClass(parseCell[0], 'e-overflow');
                                this.clearRangeData([rowIndex, keys[i], rowIndex, keys[i]], ['isOverflow'], '', '', '', true);
                                this._textClip(rowIndex, parseInt(keys[i]), 'add', null, null, keys);
                            }
                            break;
                        }
                    }
                    kLen = keys.length;
                    for (i = keys.indexOf(colIndex.toString()) + 1; i < kLen; i++) {
                        if (load)
                            parseCell = this.getCell(rowIndex, keys[i]);
                        if (xlEdit.getPropertyValue(rowIndex, keys[i], 'value2', sheetIndex) || xlEdit.getPropertyValue(rowIndex, keys[i], 'isMHide', sheetIndex)) {
                            format = xlEdit.getPropertyValue(rowIndex, keys[i], 'format', sheetIndex);
                            if (this._hasClass(parseCell, 'e-overflow') && this._isClassHasProperty(format, 'text-align', 'right')) {
                                if (parseCell)
                                    this._removeClass(parseCell[0], 'e-overflow');
                                this.clearRangeData([rowIndex, keys[i], rowIndex, keys[i]], ['isOverflow'], '', '', '', true);
                                this._textClip(rowIndex, parseInt(keys[i]), 'add', null, null, keys);
                            }
                            break;
                        }
                    }
                }
            }
            chngd && (this._dupDetails = false);
        },

        selectAll: function (isbgSelect) {
            if (!this.model.allowSelection)
                return;
            var len, eColArr = [], sRowArr = [], eRowArr = [], sColArr = [], i, j, k, multiSelect = false, loopLength = 0, xlEdit = this.XLEdit, activeCell = this.getActiveCell(), rIdx = activeCell.rowIndex, cIdx = activeCell.colIndex,
                sheetIdx = this.getActiveSheetIndex(), container = this._dataContainer.sheets[sheetIdx], rows = this.getObjectKeys(container),
                sheet = this.getSheet(sheetIdx), usedRange = this._getUsedRangeFromSheet(sheetIdx, false), length = usedRange.rowCount + usedRange.colCount;
            if (sheet._startCell.rowIndex !== sheet._endCell.rowIndex || sheet._startCell.colIndex !== sheet._endCell.colIndex && sheet._isMultiSelect) {
                var startCell = { rowIndex: sheet._startCell.rowIndex, colIndex: sheet._startCell.colIndex },
                    endCell = { rowIndex: sheet._endCell.rowIndex, colIndex: sheet._endCell.colIndex },
                    tempStart = { rowIndex: sheet._startCell.rowIndex, colIndex: sheet._startCell.colIndex },
                    tempEnd = { rowIndex: sheet._endCell.rowIndex, colIndex: sheet._endCell.colIndex };
                multiSelect = true;
                for (i = 1; i < length; i++) {
                    for (j = tempStart.colIndex; j < tempEnd.colIndex + 2; j++) {                            // Multiselect
                        if (xlEdit.getPropertyValue(tempStart.rowIndex - 1, j, 'value2', sheetIdx) || this._getDataObj(tempStart.rowIndex - 1, j, 'mergeIdx', sheetIdx)) {
                            startCell.colIndex = tempStart.colIndex < j ? tempStart.colIndex : j;
                            endCell.colIndex = tempEnd.colIndex > j ? tempEnd.colIndex : j;
                            startCell.rowIndex = tempStart.rowIndex < tempStart.rowIndex - 1 ? tempStart.rowIndex : tempStart.rowIndex - 1;
                        }
                    }
                    for (j = tempStart.rowIndex; j < tempEnd.rowIndex + 2; j++) {
                        if (xlEdit.getPropertyValue(j, tempEnd.colIndex + 1, 'value2', sheetIdx) || this._getDataObj(j, tempEnd.colIndex + 1, 'mergeIdx', sheetIdx)) {
                            endCell.rowIndex = tempEnd.rowIndex > j ? tempEnd.rowIndex : j;
                        }
                    }
                    for (j = tempEnd.colIndex; j > tempStart.colIndex - 2; j--) {
                        if (xlEdit.getPropertyValue(tempEnd.rowIndex + 1, j, 'value2', sheetIdx) || this._getDataObj(tempEnd.rowIndex + 1, j, 'mergeIdx', sheetIdx)) {
                            endCell.rowIndex = tempEnd.rowIndex > tempEnd.rowIndex + 1 ? tempEnd.rowIndex : tempEnd.rowIndex + 1;
                            startCell.colIndex = tempStart.colIndex < j ? tempStart.colIndex : j;
                        }
                    }
                    for (j = tempEnd.rowIndex; j > tempStart.rowIndex - 2; j--) {
                        if (xlEdit.getPropertyValue(tempEnd.rowIndex + 1, j, 'value2', sheetIdx) || this._getDataObj(tempEnd.rowIndex + 1, j, 'mergeIdx', sheetIdx)) {
                            endCell.rowIndex = tempEnd.rowIndex > tempEnd.rowIndex + 1 ? tempEnd.rowIndex : tempEnd.rowIndex + 1;
                            startCell.colIndex = tempStart.colIndex < j ? tempStart.colIndex : j;
                        }
                    }
                    if (endCell.colIndex === tempEnd.colIndex && endCell.rowIndex === tempEnd.rowIndex && startCell.rowIndex === tempStart.rowIndex && startCell.colIndex === tempStart.colIndex) {
                        if (i === 1) {
                            sheet._isRangeSelected = true;
                            break;
                        }
                        else {
                            sheet._isRangeSelected = false;
                            break;
                        }
                    }
                    tempStart = { rowIndex: startCell.rowIndex, colIndex: startCell.colIndex };
                    tempEnd = { rowIndex: endCell.rowIndex, colIndex: endCell.colIndex };
                }
            }
            if (!sheet._isRangeSelected && !multiSelect) {
                startCell = { rowIndex: rIdx, colIndex: cIdx }; endCell = { rowIndex: rIdx, colIndex: cIdx };
                tempStart = { rowIndex: rIdx, colIndex: cIdx }; tempEnd = { rowIndex: rIdx, colIndex: cIdx };
                for (i = 1; i < length + 1; i++) {
                    for (j = -loopLength; j < loopLength + 1; j++) {                            // start from right
                        if (xlEdit.getPropertyValue(rIdx + j, cIdx + i, 'value2', sheetIdx) || this._getDataObj(rIdx + j, cIdx + i, 'mergeIdx', sheetIdx)) {
                            endCell.rowIndex = endCell.rowIndex > rIdx + j ? endCell.rowIndex : rIdx + j;
                            endCell.colIndex = endCell.colIndex > cIdx + i ? endCell.colIndex : cIdx + i;
                        }
                    }
                    if (xlEdit.getPropertyValue(rIdx + i, cIdx + i, 'value2', sheetIdx) || this._getDataObj(rIdx + i, cIdx + i, 'mergeIdx', sheetIdx)) {
                        endCell.rowIndex = endCell.rowIndex > rIdx + i ? endCell.rowIndex : rIdx + i;
                        endCell.colIndex = endCell.colIndex > cIdx + i ? endCell.colIndex : cIdx + i;
                    }
                    for (j = -loopLength; j < loopLength + 1; j++) {
                        if (xlEdit.getPropertyValue(rIdx + i, cIdx + j, 'value2', sheetIdx) || this._getDataObj(rIdx + i, cIdx + j, 'mergeIdx', sheetIdx)) {
                            endCell.rowIndex = endCell.rowIndex > rIdx + i ? endCell.rowIndex : rIdx + i;
                            endCell.colIndex = endCell.colIndex > cIdx + j ? endCell.colIndex : cIdx + j;
                        }
                    }
                    if (!xlEdit.getPropertyValue(rIdx, cIdx, 'value2', sheetIdx)) {
                        if (endCell.colIndex === tempEnd.colIndex && endCell.rowIndex === tempEnd.rowIndex && startCell.rowIndex === tempStart.rowIndex && startCell.colIndex === tempStart.colIndex) {
                            if (loopLength === 0) {
                                sheet._isRangeSelected = true;
                                break;
                            }
                        }
                    }
                    if (xlEdit.getPropertyValue(rIdx + i, cIdx - i, 'value2', sheetIdx) || this._getDataObj(rIdx + i, cIdx - i, 'mergeIdx', sheetIdx)) {
                        endCell.rowIndex = endCell.rowIndex > rIdx + i ? endCell.rowIndex : rIdx + i;
                        startCell.colIndex = startCell.colIndex < cIdx - i ? startCell.colIndex : cIdx - i;
                    }
                    for (j = -loopLength; j < loopLength + 1; j++) {
                        if (xlEdit.getPropertyValue(rIdx + j, cIdx - i, 'value2', sheetIdx) || this._getDataObj(rIdx + j, cIdx - i, 'mergeIdx', sheetIdx)) {
                            startCell.rowIndex = startCell.rowIndex < rIdx + j ? startCell.rowIndex : rIdx + j;
                            startCell.colIndex = startCell.colIndex < cIdx - i ? startCell.colIndex : cIdx - i;
                            endCell.rowIndex = endCell.rowIndex > rIdx + j ? endCell.rowIndex : rIdx + j;
                        }
                    }
                    if (xlEdit.getPropertyValue(rIdx - i, cIdx - i, 'value2', sheetIdx) || this._getDataObj(rIdx - i, cIdx - i, 'mergeIdx', sheetIdx)) {
                        startCell.rowIndex = startCell.rowIndex < rIdx - i ? startCell.rowIndex : rIdx - i;
                        startCell.colIndex = startCell.colIndex < cIdx - i ? startCell.colIndex : cIdx - i;
                    }
                    for (j = -loopLength; j < loopLength + 1; j++) {
                        if (xlEdit.getPropertyValue(rIdx - i, cIdx + j, 'value2', sheetIdx) || this._getDataObj(rIdx - i, cIdx + j, 'mergeIdx', sheetIdx)) {
                            startCell.rowIndex = startCell.rowIndex < rIdx - i ? startCell.rowIndex : rIdx - i;
                            startCell.colIndex = startCell.colIndex < cIdx + j ? startCell.colIndex : cIdx + j;
                            endCell.colIndex = endCell.colIndex > cIdx + j ? endCell.colIndex : cIdx + j;
                        }
                    }
                    if (xlEdit.getPropertyValue(rIdx - i, cIdx + i, 'value2', sheetIdx) || this._getDataObj(rIdx - i, cIdx + i, 'mergeIdx', sheetIdx)) {
                        startCell.rowIndex = startCell.rowIndex < rIdx - i ? startCell.rowIndex : rIdx - i;
                        endCell.colIndex = endCell.colIndex > cIdx + i ? endCell.colIdx : cIdx + i;
                    }
                    if (endCell.colIndex === tempEnd.colIndex && endCell.rowIndex === tempEnd.rowIndex && startCell.rowIndex === tempStart.rowIndex && startCell.colIndex === tempStart.colIndex) {
                        if (loopLength !== 0) {
                            sheet._isRangeSelected = false;
                            break;
                        }
                        else {
                            sheet._isRangeSelected = true;
                            break;
                        }
                    }
                    tempStart = { rowIndex: startCell.rowIndex, colIndex: startCell.colIndex };
                    tempEnd = { rowIndex: endCell.rowIndex, colIndex: endCell.colIndex };
                    loopLength++;
                    eColArr.push(endCell.colIndex);
                    sRowArr.push(startCell.rowIndex);
                    eRowArr.push(endCell.rowIndex);
                    sColArr.push(startCell.colIndex);
                }
                sColArr = ej.dataUtil.mergeSort(ej.distinct(sColArr));
                startCell.colIndex = sColArr[sColArr.length - 1];
                for (k = sColArr.length - 1; k > -1; k--) {
                    if (sColArr[k - 1] === sColArr[k] - 1)
                        startCell.colIndex = sColArr[k - 1];
                    else
                        break;
                }
                eRowArr = ej.dataUtil.mergeSort(ej.distinct(eRowArr));
                endCell.rowIndex = eRowArr[0];
                for (k = 0, len = eRowArr.length - 1; k < len; k++) {
                    if (eRowArr[k + 1] === eRowArr[k] + 1)
                        endCell.rowIndex = eRowArr[k + 1];
                    else
                        break;
                }
                sRowArr = ej.dataUtil.mergeSort(ej.distinct(sRowArr));
                startCell.rowIndex = sRowArr[sRowArr.length - 1];
                for (k = sRowArr.length - 1; k > -1; k--) {
                    if (sRowArr[k - 1] === sRowArr[k] - 1)
                        startCell.rowIndex = sRowArr[k - 1];
                    else
                        break;
                }
                eColArr = ej.dataUtil.mergeSort(ej.distinct(eColArr));
                endCell.colIndex = eColArr[0];
                for (k = 0, len = eColArr.length - 1; k < len; k++) {
                    if (eColArr[k + 1] === eColArr[k] + 1)
                        endCell.colIndex = eColArr[k + 1];
                    else
                        break;
                }
                for (k = 0, len = eColArr.length - 1; k < len; k++) {
                    if (eColArr[k + 1] === eColArr[k] + 1)
                        endCell.colIndex = eColArr[k + 1];
                    else
                        break;
                }
            }
            if (!sheet._isEmptyActiveCell) {
                if (!sheet._isRangeSelected && !rows.length < 1) {
                    this.XLSelection.selectRange(startCell, endCell, sheetIdx, isbgSelect);
                    sheet._isMultiSelect = false;
                    sheet._startCell = startCell;
                    sheet._endCell = endCell;
                    sheet._isRangeSelected = true;
                    if (!xlEdit.getPropertyValue(rIdx, cIdx, 'value2', sheetIdx))
                        sheet._isEmptyActiveCell = true;
                    else
                        sheet._isEmptyActiveCell = false;
                }
                else {
                    this.XLSelection.selectSheet();
                    sheet._isRangeSelected = true;
                }
            }
        },

        multiSelection: function (range) {
            var i, j, r, rangeArray = range.split(','), cont = this._getJSSheetContent(this.getActiveSheetIndex());
            for (r = 0; r < rangeArray.length; r++) {
                if (cont.find("td[class *='activecell']") && r > 0) {
                    cont.find("td[class *='activecell']").removeClass("e-activecell");
                    cont.find("td[class *='focus']").removeClass("e-focustop e-focusleft");
                    range = this._getRangeArgs(rangeArray[r].trim());
                    for (i = range[0]; i <= range[2]; i++)
                        for (j = range[1]; j <= range[3]; j++)
                            this.getRange([i, j, i, j]).addClass("e-selected");
                    this.getCell(range[0], range[1]).addClass('e-activecell');
                    this.XLSelection._focusRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[0], colIndex: range[1] }, this._selectionBorder);
                    if (this.model.allowAutoFill)
                        this.XLDragFill.hideAutoFillElement();
                }
                else
                    this.XLSelection.selectRange(rangeArray[r]);
            }
        },

        _getDataObj: function (rowIdx, colIdx, property, sheetIdx) {
            var sheetData = this._dataContainer.sheets[sheetIdx ? sheetIdx : this.getActiveSheetIndex()];
            if (sheetData[rowIdx])
                if (sheetData[rowIdx][colIdx])
                    return sheetData[rowIdx][colIdx][property];
            return false;
        },

        _getUsedRangeFromSheet: function (sheetIdx, val) {
            sheetIdx = this._getSheetIndex(sheetIdx);
            var i, length, colKeys, sheet = this.getSheet(sheetIdx), container = this._dataContainer, value,
                rows = container.sheets[sheetIdx], rowKeys = this.getObjectKeys(rows), startCell = { rowIndex: parseInt(rowKeys[0]) || 0, colIndex: 0 }, endCell = { rowIndex: parseInt(rowKeys[rowKeys.length - 1]) || 0, colIndex: 0 };
            length = rowKeys.length;
            for (i = 0; i < length; i++) {
                colKeys = this.getObjectKeys(rows[parseInt(rowKeys[i])]);
                if (i === 0) {
                    startCell.colIndex = parseInt(colKeys[0]);
                    endCell.colIndex = parseInt(colKeys[colKeys.length - 1])
                }
                else {
                    startCell.colIndex = (startCell.colIndex < parseInt(colKeys[0])) ? startCell.colIndex : parseInt(colKeys[0]);
                    endCell.colIndex = (endCell.colIndex > parseInt(colKeys[colKeys.length - 1])) ? endCell.colIndex : parseInt(colKeys[colKeys.length - 1]);
                }
            }
            // compare with existing used range
            if (endCell.rowIndex < sheet.usedRange.rowIndex)
                endCell.rowIndex = sheet.usedRange.rowIndex;
            if (endCell.colIndex < sheet.usedRange.colIndex)
                endCell.colIndex = sheet.usedRange.colIndex;
            if (val)
                return this._getAlphaRange(sheetIdx, startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex);
            else {
                value = { startCell: startCell, endCell: endCell, rowCount: endCell.rowIndex - startCell.rowIndex + 1, colCount: endCell.colIndex - startCell.colIndex + 1 };
                return value;
            }
        },

        sheetRename: function (sheetName) {
            if (!this.model.isReadOnly)
                this._updateSheetNames(sheetName);
        },

        _isSubMenuOpen: function () {
            var arr = ["_formatastable", "_cellstyles", "_Ribbon_CElement", "_contextMenuCell", "_contextMenuColumnHeader", "_contextMenuRowHeader", "_contextMenuFooter"], i = 0, len = arr.length;
            while (i < len) {
                if ($("#" + this._id + arr[i]).is(":visible"))
                    return true;
                i++;
            }
            return false;
        },

        copySheet: function (fromIndex, toIndex, isCopySheet) {
            if (this.model.isReadOnly || this.model.isGridMode)
                return;
            var sheetIdx = this._getSheetIndex(sheetIdx);
            var spliceIndex, i, len, cpySheetName, isValid = false, sheetNameCount = 2, index, sheets = this.model.sheets,
                selectedItem = this.element.find(".e-numericcontainer").children().eq(fromIndex - 1), mainIndex = toIndex;
            //Check is same sheet
            if (!isCopySheet && sheets[mainIndex].sheetInfo.text === selectedItem.text()) {
                this._setSheetFocus();
                return;
            }
            //Getting splice index and sheet position index
            for (i = 1, len = sheets.length; i < len; i++) {
                if (sheets.length - 1 !== mainIndex && sheets[mainIndex].sheetInfo.text === sheets[i].sheetInfo.text)
                    spliceIndex = i;
                if (selectedItem.text() === sheets[i].sheetInfo.text)
                    index = i;
            }
            //Check is Copy sheet
            if (isCopySheet) {
                // Getting unique sheet name
                if (selectedItem.text().match('.*[ ]+[(]+[0-9]+[)]$') === null)
                    cpySheetName = selectedItem.text() + " (" + sheetNameCount + ")";
                else {
                    if (selectedItem.text().lastIndexOf(' ') > -1) {
                        sheetNameCount = parseInt(selectedItem.text().substring(selectedItem.text().lastIndexOf("(") + 1, selectedItem.text().lastIndexOf(")")));
                        cpySheetName = selectedItem.text().substring(0, selectedItem.text().lastIndexOf(" ")) + " (" + sheetNameCount + ")";
                    }
                }
                while (!isValid) {
                    cpySheetName = cpySheetName.substring(0, cpySheetName.lastIndexOf(" ")) + " (" + sheetNameCount + ")";
                    for (i = 1, len = sheets.length; i < len; i++) {
                        if (cpySheetName === sheets[i].sheetInfo.text)
                            sheetNameCount++;
                    }
                    if (sheetNameCount === parseInt(cpySheetName.substring(cpySheetName.lastIndexOf("(") + 1, cpySheetName.lastIndexOf(")"))))
                        isValid = true;
                }
                //Copy Sheet Process      
                this._copySheetProcess(index, cpySheetName);
                index = this.model.sheetCount;
                if (ej.isNullOrUndefined(spliceIndex))
                    spliceIndex = index;
            }
            else {
                if (!ej.isNullOrUndefined(spliceIndex) && spliceIndex > index)
                    spliceIndex = spliceIndex - 1;
            }
            if (ej.isNullOrUndefined(spliceIndex))
                spliceIndex = mainIndex;
            //Sheets[] updates
            if (!isCopySheet && spliceIndex === index)
                this._setSheetFocus();
            else {
                //Update DataContainer positions
                this._swapSheetDtCntr(index, spliceIndex);
                this.getPager().ejPager("option", { currentPage: mainIndex });
                this.gotoPage(mainIndex, false);
                this._setSheetFocus();
            }
        },

        getHyperlink: function (cell) {
            return this.XLEdit.getPropertyValueByElem(cell, "hyperlink", this.getActiveSheetIndex());
        },

        getComment: function (cell) {
            return this.XLEdit.getPropertyValueByElem(cell, "comment", this.getActiveSheetIndex());
        },

        saveAsJSON: function () {
            if (this.model.isReadOnly)
                return;
            var JSONData, charts, sheets, tables, tbMngr, i = 1, sheet, dtContainer, model, len, sIdx, rIdx, cIdx, sKey, chartMngr, spliceStr = [], cellTypesColl, range, key, index, sheetProp = ["_activeCell", "_endCell", "_startCell", "colCount", "rowHeight", "columnWidth", "columnsWidthCollection",
                "rowsHeightCollection", "rowCount", "frozenColumns", "frozenRows", "styleIndex", "usedRange", "sheetName", "dataAttribute", "filterSettings", "tableManager", "sheetInfo",
                "hideColsCollection", "hideRowsCollection", "mergedCells", "showGridlines", "showHeadings", "isSheetProtected", "shapeMngr", "pivotMngr", "chart", "rangeSettings",
                "cellTypes", "startCell", "primaryKey", "showHeader", "fieldAsColumnHeader", "headerStyles", "rows", "paneTopLeftCell"],
                dtSheetProp = ["type", "value", "value2", "decimalPlaces", "format", "formats", "borders", "formatStr", "comment", "hyperlink", "rule", "cFormatRule", "wrap", "merge", "picture", "chart", "pivot", "thousandSeparator", "isLocked", "align", "isRHide"], seriesLen, j;
            this._isSaveAsJSON = true;
            this._isExport = true;
            if (this.model.exportSettings.allowExporting)
                this.XLExport._renderAll();
            this._isExport = false;

            JSONData = { dataContainer: $.extend(true, {}, this._dataContainer), model: $.extend(true, {}, this.model) };
            dtContainer = JSONData.dataContainer;
            model = JSONData.model;
            len = dtContainer.hashCode.length;
            cellTypesColl = dtContainer.sheetCellType;
            dtContainer.sheetCellType = {};

            //border prop hashcode - removed
            for (key in dtContainer.hashCode) {
                sKey = dtContainer.hashCode[key];
                if (sKey.indexOf("e-border") > -1 && sKey.length < 25)
                    spliceStr.push(sKey);
            }
            for (key = 0; key < spliceStr.length; key++)
                dtContainer.hashCode.splice(dtContainer.hashCode.indexOf(spliceStr[key]), 1);


            key = "sheets"; //unwanted sheets prop - skipped
            for (sIdx in dtContainer[key]) {
                for (rIdx in dtContainer[key][sIdx]) {
                    for (cIdx in dtContainer[key][sIdx][rIdx]) {
                        for (sKey in dtContainer[key][sIdx][rIdx][cIdx]) {
                            if (["format", "formats", "borders"].indexOf(sKey) > -1) {
                                var fStr = this._dataContainer.hashCode[this._dataContainer[key][sIdx][rIdx][cIdx][sKey]];
                                dtContainer[key][sIdx][rIdx][cIdx][sKey] = dtContainer.hashCode.indexOf(fStr);
                            }
                            if (dtSheetProp.indexOf(sKey) < 0)
                                delete dtContainer[key][sIdx][rIdx][cIdx][sKey];
                        }
                        if (!this.getObjectLength(dtContainer[key][sIdx][rIdx][cIdx]))
                            delete dtContainer[key][sIdx][rIdx][cIdx];
                    }
                    if (!this.getObjectLength(dtContainer[key][sIdx][rIdx]))
                        delete dtContainer[key][sIdx][rIdx];
                }
            }

            //model default value - skipped
            for (key in model) {
                if (model[key] === this.defaults[key] || Object.prototype.toString.call(model[key]) === Object.prototype.toString())
                    delete model[key];
                else if (Array.isArray(model[key]))
                    if (!model[key].length)
                        delete model[key];
            }

            sheets = model.sheets;

            while (i < sheets.length) {
                sheet = sheets[i];

                for (key in sheet) {

                    switch (key) {
                        case "frozenColumns":
                        case "frozenRows":
                            if (sheet[key] === 0) // 0 - default
                                delete sheet[key];
                            break;
                        case "fieldAsColumnHeader":
                        case "isSheetProtected":
                            if (!sheet[key]) // false - default
                                delete sheet[key];
                            break;
                        case "showHeadings":
                        case "showGridlines":
                        case "showHeader":
                            if (sheet[key]) // true - default
                                delete sheet[key];
                            break;
                        case "filterSettings":
                            for (sKey in sheet[key]) {
                                if (sKey === "range") {
                                    if (this._isEmptyString(sheet[key][sKey]))
                                        delete sheet[key][sKey];
                                }
                                else
                                    delete sheet[key][sKey];
                            }
                            break;
                        case "sheetInfo":
                            for (sKey in sheet[key]) {
                                if (sKey !== "text") {
                                    if (sKey === "isVisible")
                                        if (!sheet[key][sKey])
                                            continue;
                                    delete sheet[key][sKey];
                                }
                            }
                            break;
                        case "_startCell":
                        case "_endCell":
                        case "_activeCell":
                        case "usedRange":
                            for (sKey in sheet[key]) {
                                if (sheet[key][sKey] === 0) // 0 index - default
                                    delete sheet[key][sKey];
                            }
                            break;
                        case "columnWidth":
                            if (sheet[key] === 64) // 64 - default 
                                delete sheet[key];
                            break;
                        case "rowHeight":
                            if (sheet[key] === 20) // 20 - default
                                delete sheet[key];
                            break;
                        case "primaryKey":
                            if (!sheet[key].length)
                                delete sheet[key];
                            break;
                        case "startCell":
                            if (sheet[key] === "A1")
                                delete sheet[key];
                            break;
                    }

                    if (sheetProp.indexOf(key) < 0 || sheet[key] === null)
                        delete sheet[key];
                    else if (Object.prototype.toString.call(sheet[key]) === Object.prototype.toString()) {
                        if (!this.getObjectLength(sheet[key]))
                            delete sheet[key];
                    }
                    else if (Array.isArray(sheet[key])) {
                        if (!sheet[key].length)
                            delete sheet[key];
                    }
                }

                //chart collection changes
                charts = sheets[i].shapeMngr["chart"];
                chartMngr = {};
                if (this.getObjectLength(charts)) {
                    index = 0;
                    for (key in charts) {
                        var cObj = $.extend(true, {}, charts[key]), cModel;
                        cModel = {
                            commonSeriesOptions: { type: cObj.type, marker: cObj.marker },
                            enable3D: cObj.enable3D,
                            top: cObj.top,
                            left: cObj.left,
                            size: { width: cObj.width, height: cObj.height },
                            title: cObj.title,
                            legend: cObj.legend,
                            primaryXAxis: cObj.primaryXAxis,
                            primaryYAxis: cObj.primaryYAxis,
                            dataSheetIdx: cObj.dataSheetIdx,
                            animation: cObj.animation,
                            isRowColSwitched: cObj.isRowColSwitched,
                            colIndex: cObj.colIndex,
                            rowIndex: cObj.rowIndex,
                            theme: cObj.theme
                        };
                        if (cObj.range)
                            cModel["range"] = this._getAlphaRange(i, cObj.range[0], cObj.range[1], cObj.range[2], cObj.range[3]);
                        if (cObj.series) {
                            cModel["series"] = [];
                            for (j = 0, seriesLen = cObj.series.length; j < seriesLen; j++) {
                                var pKey, points = [], pKeyLen;
                                for (pKey = 0, pKeyLen = cObj.series[j]["points"].length; pKey < pKeyLen; pKey++)
                                    points.push({ x: cObj.series[j]["points"][pKey].x, y: cObj.series[j]["points"][pKey].y, size: cObj.series[j]["points"][pKey].size });
                                cModel["series"].push({ name: cObj.series[j]["name"], points: points });
                            }
                        }
                        if (cObj.seriesRange)
                            cModel["seriesRange"] = cObj.seriesRange;
                        if (cObj.colIndex && cObj.rowIndex)
                            dtContainer.sheets[i][cObj.rowIndex][cObj.colIndex]["chart"] = [];
                        else
                            dtContainer.sheets[i][cObj.activeCell.rowIndex][cObj.activeCell.colIndex]["chart"] = [];
                        chartMngr["chart" + index] = cModel;
                        index++;
                    }
                    sheets[i].shapeMngr["chart"] = chartMngr;
                }

                //table processing
                tables = sheets[i].tableManager;
                tbMngr = {};
                if (this.getObjectLength(tables)) {
                    index = 0;
                    for (key in tables) {
                        var prop = $.extend(true, {}, tables[key]), nmLen;
                        delete prop["format"];
                        for (j = 0, nmLen = model.nameManager.length; j < nmLen; j++)
                            if (model.nameManager[j].name === prop.name)
                                model.nameManager.splice(parseInt(j), 1);
                        tbMngr[index] = prop;
                        index++;
                    }
                    sheets[i].tableManager = tbMngr;
                }

                //Cell types
                sheet.cellTypes = [];
                len = this.getObjectLength(cellTypesColl);
                if (len)
                    dtContainer.sheetCellType[i] = {};
                index = 1;
                for (key in cellTypesColl) {
                    sKey = cellTypesColl[key];
                    if (!this.getObjectLength(sKey))
                        continue;
                    range = sKey.id.split('_')[2];
                    sIdx = parseInt(range.match(/[0-9]+/)[0]);
                    if (i === sIdx) {
                        delete sKey["id"];
                        sKey["range"] = range.replace(/[0-9]+/, "");
                        dtContainer.sheetCellType[i][index] = { "settings": sKey };
                        cellTypesColl[key] = {};
                        index++;
                    }
                }
                sheets[i]._scrollTop = this.getSheet(i)._scrollTop;
                sheets[i]._scrollLeft = this.getSheet(i)._scrollLeft;
                i++;
            }
            model["isManualCalculation"] = this._calcEngine.getCalculatingSuspended();
            this._isSaveAsJSON = false;
            model.sheets.shift();
            return JSONData;
        },

        _isvalidRange: function (alphaRange) {
            var regx = new RegExp(/^\$?(?:\b[a-z]{1,3})\$?(?:\d{1,7}):\$?(?:\b[a-z]{1,3})\$?(?:\d{1,7})$/i);
            return regx.test(alphaRange);
        },

        // upload
        _renderFUpload: function () {
            this.element.append(ej.buildTag("div", "", { height: "0px" }, { id: this._id + "_file" }));
            $("#" + this._id + "_file").ejUploadbox({
                width: "0px",
                height: "0px",
                uploadName: "file",
                autoUpload: true,
                showFileDetails: false,
                dialogAction: { content: this.element },
                saveUrl: this.model["importSettings"].importMapper,
                fileSelect: $.proxy(this._fileSelect, this),
                complete: $.proxy(this._changeImport, this),
                error: $.proxy(this._importFailed, this)
            });
            $("#" + this._id + "_file_SelectButton").hide();
        },

        _fileSelect: function (args) {
            if (!args.files.length)
                return;
            var upBox, file = args.files[0], extension = file.extension;
            if ((this._uploadImage && (extension === ".xlsx" || extension === ".csv")) || (!this._uploadImage && (!(this._browserDetails.name === "msie" && parseInt(this._browserDetails.version) < 10) ? (file.rawFile.type.indexOf("image") > -1) : (extension.indexOf("jpg") > -1 || extension.indexOf("png") > -1 || extension.indexOf("jpeg") > -1 || extension.indexOf("gif") > -1)))) {
                this._showAlertDlg("Alert", "CorrectFormat", "", 290);
                this._uploadImage = false;
                return false;
            }
            if (!(this._browserDetails.name === "msie" && parseInt(this._browserDetails.version) <= 11) && !this._uploadImage) {
                upBox = $("#" + this._id + "_file");
                upBox.ejUploadbox("option", "autoUpload", false);
                this["import"]({ file: file.rawFile, password: this.model.importSettings.password, allowSheetOnDemand: this.model.importSettings.allowSheetOnDemand });
                upBox.find(".e-uploadinput").val("");
                args.cancel = true;
            }
            else
                this.showWaitingPopUp();
            this._uploadImage = false;
        },

        _changeImport: function (args) {
            var response, upObj = $("#" + this._id + "_file").data("ejUploadbox");
            if (!(this._browserDetails.name === "msie" && parseInt(this._browserDetails.version) < 10) ? (args.files.rawFile.type.indexOf("image") > -1) : (args.files[0].extension.indexOf("jpg") > -1 || args.files[0].extension.indexOf("png") > -1 || args.files[0].extension.indexOf("jpeg") > -1 || args.files[0].extension.indexOf("gif") > -1)) {
                upObj.updialog.ejDialog("close");
                this.XLShape._insertPicture(args);
                if (this.model.showRibbon)
                    this.XLRibbon._formatTabUpdate();
                upObj.option("autoUpload", true);
            }
            else {
                response = this._browserDetails.name === "msie" && parseInt(this._browserDetails.version) < 10 ? args.responseText : args.xhr.response;
                upObj.updialog.ejDialog("close");
                this._importSuccess(response);
            }
            this.hideWaitingPopUp();
        },

        _dlgBeforeOpen: function () {
            this.hideWaitingPopUp();
            $("#" + this._id + "_workBookName").text("'" + $("#" + this._id + "_file").data("ejUploadbox")._files[0].name + "'" + this._getLocStr("Protect"));
        },

        _dlgOk: function () {
            var tgleObj, dlgObj = $("#" + this._id + "_PasswordDialog").data("ejDialog"), pwdEle = $("#" + this._id + "_xlpassword"), cPwdEle = $("#" + this._id + "_confirmpassword");
            tgleObj = $("#" + this._id + "_Ribbon_Review_Changes_ProtectWorkbook").data("ejToggleButton");
            if (dlgObj.model.title === "Protect Workbook") {
                if (pwdEle.val().length && cPwdEle.val().length) {
                    if (pwdEle.val() === cPwdEle.val()) {
                        this.model.exportSettings.password = pwdEle.val();
                        $("#" + this._id + "_AddSheet").addClass("e-disable");
                        $("#" + this._id + "_confirm").hide();
                        dlgObj.option("title", this._getLocStr("UnProtectWorkbook"));
                    }
                    else {
                        $("#" + this._id + "_confirm").show();
                        this._showAlertDlg("Alert", "PasswordAlert1");
                        tgleObj && tgleObj.option("toggleState", false);
                        dlgObj.option("title", this._getLocStr("ProtectWorkbook"));
                    }
                }
                else {
                    $("#" + this._id + "_confirm").show();
                    tgleObj && tgleObj.option("toggleState", false);
                    dlgObj.option("title", this._getLocStr("ProtectWorkbook"));
                    this._showAlertDlg("Alert", "PasswordAlert2");
                }
            }
            else if (dlgObj.model.title === "Unprotect Workbook") {
                if (this.model.exportSettings.password === pwdEle.val()) {
                    $("#" + this._id + "_AddSheet").removeClass("e-disable");
                    this.model.exportSettings.password = null;
                    $("#" + this._id + "_confirm").show();
                    dlgObj.option("title", this._getLocStr("ProtectWorkbook"));
                }
                else {
                    dlgObj.option("title", this._getLocStr("UnProtectWorkbook"));
                    tgleObj && tgleObj.option("toggleState", true);
                    this._showAlertDlg("Alert", "PasswordAlert3");
                }
            }
            pwdEle.val("");
            cPwdEle.val("");
            $("#" + this._id + "_PasswordDialog").ejDialog("close");
        },

        _passwordDlg: function () {
            var $dlg, $label, $okBtn, $canBtn, $btndiv, $div;
            $dlg = ej.buildTag("div", "", "", { id: this._id + "_PasswordDialog" });
            $btndiv = ej.buildTag("div.e-dlg-btnfields");
            $div = ej.buildTag("div.e-dlg-btnctnr");
            $label = "<div class= 'e-dlgctndiv'><table><tr class= 'e-dlgtd-fields'><td><label>" + this._getLocStr("Password") + ":</label></td><td><input id ='" + this._id + "_xlpassword' type ='password' class = 'ejinputtext'/></td></tr><tr class= 'e-dlgtd-fields' id ='" + this._id + "_confirm'><td><label>" + this._getLocStr("ConfirmPassword") + "</label></td><td><input id ='" + this._id + "_confirmpassword' type ='password'  class = 'ejinputtext'/></td></tr></table></div>";
            $dlg.append($label);
            $okBtn = ej.buildTag("input", "", "", { type: "submit" });
            $canBtn = ej.buildTag("input");
            $okBtn.ejButton({ text: this._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._dlgOk, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: this._getLocStr("Cancel"), click: ej.proxy(this._dlgCancel, this), showRoundedCorner: true, width: 60 });
            $btndiv.append($div.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: this._getLocStr("ProtectWorkbook"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-" + this._id + "-dlg e-ss-pwddlg", close: ej.proxy(this._dlgCancel, this) });
        },

        _importPasswordDlg: function () {
            var $dlg, $label, $okBtn, $canBtn, $btndiv, $div;
            $dlg = ej.buildTag("div", "", "", { id: this._id + "_ImportPasswordDialog" });
            $btndiv = ej.buildTag("div.e-dlg-btnfields");
            $div = ej.buildTag("div.e-dlg-btnctnr");
            $label = "<div class= 'e-dlgctndiv'><table><tr class= 'e-dlgtd-fields'><td><label id ='" + this._id + "_workBookName' ></label></td></tr><tr class= 'e-dlgtd-fields'><td><label>" + this._getLocStr("Password") + ":</label></td><td><input id ='" + this._id + "_importpassword' type ='password'  class = 'ejinputtext'/></td></tr></table></div>";
            $dlg.append($label);
            $okBtn = ej.buildTag("input", "", "", { type: "submit" });
            $canBtn = ej.buildTag("input");
            $okBtn.ejButton({ text: this._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._importDlgOk, this), enabled: true });
            $canBtn.ejButton({ text: this._getLocStr("Cancel"), click: ej.proxy(this._dlgCancel, this), showRoundedCorner: true, width: 60 });
            $btndiv.append($div.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: this._getLocStr("Password"), beforeOpen: $.proxy(this._dlgBeforeOpen, this), width: 420, height: "auto", cssClass: "e-ss-dialog e-" + this._id + "-dlg", close: ej.proxy(this._dlgCancel, this) });
            return $dlg;
        },

        _dlgCancel: function () {
            this._showDialog(this._id + "_Ribbon_Review_Changes_ProtectWorkbook");
            var dlgObj = $("#" + this._id + "_PasswordDialog").data("ejDialog");
            if (dlgObj.model.title === "Protect Workbook")
                $("#" + this._id + "_Ribbon_Review_Changes_ProtectWorkbook").ejToggleButton("option", "toggleState", false);
            else if (dlgObj.model.title === "Unprotect Workbook")
                $("#" + this._id + "_Ribbon_Review_Changes_ProtectWorkbook").ejToggleButton("option", "toggleState", true);
            $("#" + this._id + "_confirmpassword").val("");
            $("#" + this._id + "_xlpassword").val("");
            $("#" + this._id + "_importpassword").val("");
            $("#" + this._id + "_PasswordDialog").ejDialog("close");
            $("#" + this._id + "_ImportPasswordDialog").ejDialog("close");
        },

        _importDlgOk: function () {
            var opts = {}, pwdEle = $("#" + this._id + "_importpassword");
            this.model.importSettings.password = pwdEle.val();
            pwdEle.val("");
            $("#" + this._id + "_ImportPasswordDialog").ejDialog("close");
            opts.file = $("#" + this._id + "_file").data("ejUploadbox")._files[0].rawFile;
            opts.password = this.model.importSettings.password;
            opts.allowSheetOnDemand = this.model.importSettings.allowSheetOnDemand;
            this["import"](opts);
        },

        lockCells: function (range, isLocked) {
            if (this.model.isReadOnly)
                return;
            var args, status, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx);
            status = (isLocked != false);
            if (this.model.allowLockCell && !sheet.isSheetProtected) {
                range = this._getRangeArgs(range, "object", sheetIdx);
                args = { sheetIdx: sheetIdx, reqType: "lockCells", range: range, isLock: status, type: "actionBegin", action: "lock-cells" };
                if (this._trigActionBegin(args))
                    return;
                range = args.range;
                status = args.isLock;
                if (this._isDefaultLocked)
                    status = !status;
                status ? this.updateUniqueData({ isLocked: true }, range) : this.clearRangeData(range, ["isLocked"]);
                if (this.model.showRibbon)
                    this.XLRibbon._updateRibbonIcons();
                args = { sheetIdx: sheetIdx, reqType: "lockCells", range: range, isLocked: status, type: "actionComplete", action: "lock-cells" };
                if (this._trigActionComplete(args))
                    return;
            }
        },

        protectSheet: function (isProtected) {
            if (this.model.isReadOnly || this.model.isGridMode)
                return;
            var args, status, btn, sheetIdx = this.getActiveSheetIndex(), sheet = this.getSheet(sheetIdx), rObj = this.XLRibbon;
            status = (isProtected !== false);
            this.XLEdit._isEdit && this.XLEdit.saveCell();
            if (this.model.allowLockCell) {
                args = { reqType: "protectSheet", isProtect: isProtected, sheetIdx: sheetIdx, type: "actionBegin", action: "protect-sheet" };
                if (this._trigActionBegin(args))
                    return;
                status = args.isProtect;
                sheet.isSheetProtected = status;
                if (this.model.showRibbon) {
                    btn = $("#" + this._id + "_Ribbon_Review_Changes_LockCell").data("ejToggleButton");
                    btn && btn.option("enabled", !status);
                    status ? rObj._disableRibbonIcons() : rObj._enableRibbonIcons();
                    rObj._updateRibbonIcons();
                }
                sheet._showLockCellAlert = true;
                if (this.model.allowFormulaBar)
                    this.updateFormulaBar();
                if (this.model.allowUndoRedo) {
                    if (this.model.sheetCount > 1)
                        this._removeUndoRedoForCurSheet(sheetIdx, "undo");
                    else {
                        this._undoCollection = [];
                        this._redoCollection = [];
                    }
                }
                args = { reqType: "protectSheet", isSheetProtected: isProtected, sheetIdx: sheetIdx, type: "actionComplete", action: "protect-sheet" };
                if (!this._isSheetNavigate && this._trigActionComplete(args))
                    return;
            }
        },

        _readOnly: function () {
            var xlRibbon = this.XLRibbon, backStageElem = this.element.find("#" + this._id + "_Ribbon_BackStage"), formulaElem = this.element.find("#" + this._id + "_inputbox");
            if (this.model.isReadOnly) {
                xlRibbon._disableRibbonIcons();
                xlRibbon.enableRibbonItems(["Spreadsheet_Ribbon_Home_Clipboard_Copy", "Spreadsheet_Ribbon_Review_Comments_ShowAllComments", "Spreadsheet_Ribbon_Others_Editing_FindSelect"]);
                this.XLCMenu && this.XLCMenu._disableMenuOpt(["Replace", "GoTo", "GoToSpecial", "Formulas", "Comments", "CFormat", "Constants", "DataValidation"], "Ribbon_FindRep");
                if (backStageElem.length) {
                    backStageElem.find("#saveas_backStageTab").hide();
                    backStageElem.find("#print_backStageTab").hide();
                }
                this.addClass(this.element.find("#" + this._id + "_AddSheet")[0], "e-disable");
                if (formulaElem.length)
                    formulaElem[0].disabled = true;
            }
            else {
                xlRibbon._enableRibbonIcons();
                this.XLCMenu && this.XLCMenu._enableMenuOpt(["Replace", "GoTo", "GoToSpecial", "Formulas", "Comments", "CFormat", "Constants", "DataValidation"], "Ribbon_FindRep");
                if (backStageElem.length) {
                    backStageElem.find("#saveas_backStageTab").show();
                    backStageElem.find("#print_backStageTab").show();
                }
                this._removeClass(this.element.find("#" + this._id + "_AddSheet")[0], "e-disable");
                if (formulaElem.length)
                    formulaElem[0].disabled = false;
            }

        },

        _isPropExists: function (range, prop, sheetIdx, skipAlert) {
            var curRange, i, j, k, l, m = 0, flag = false;
            while (m < range.length) {
                curRange = this.swapRange(range[m]);
                i = curRange[0], j = curRange[2]
                while (i <= j) {
                    k = curRange[1];
                    l = curRange[3];
                    while (k <= l) {
                        if (this.XLEdit.getPropertyValue(i, k, prop, sheetIdx)) {
                            if (!skipAlert) {
                                if (prop === "isLocked")
                                    this._popUplockCellAlert();
                                else if (prop === "isReadOnly")
                                    this._showAlertDlg("Alert", "ReadOnly", "", 400);
                            }
                            flag = true;
                            break;
                        }
                        k++;
                    }
                    if (flag)
                        break;
                    i++;
                }
                if (flag)
                    break;
                m++;
            }
            return flag;
        },

        _isCellProtected: function (rIndex, colIndex, alertStatus) {
            if (this.model.allowLockCell && this.getSheet(this.getActiveSheetIndex()).isSheetProtected && this.XLEdit.getPropertyValue(rIndex, colIndex, "isLocked")) {
                alertStatus && this._popUplockCellAlert();
                return true;
            }
            else if (this.XLEdit.getPropertyValue(rIndex, colIndex, "isReadOnly")) {
                this._showAlertDlg("Alert", "ReadOnly", "", 400);
                return true;
            }
        },

        _popUplockCellAlert: function () {
            if (this.getSheet(this.getActiveSheetIndex())._showLockCellAlert)
                this._showAlertDlg("Alert", "LockAlert", "", 500);
        },

        _removeUndoRedoForCurSheet: function (sheetIdx, state) {
            var collection = (state === "undo") ? this._undoCollection : this._redoCollection, len = collection.length;
            if (len) {
                while (len--) {
                    if (sheetIdx === collection[len].sheetIndex)
                        collection.splice(len, 1);
                }
            }
            if (state === "undo")
                this._removeUndoRedoForCurSheet(sheetIdx, "redo");
        },

        _detailsFromGlobalSpan: function (rowIndex, colIndex, type, value, width, isFromContent) {
            var span, req, cls = "e-rowcell e-wrapword ", data = this.getRangeData({ range: [rowIndex, colIndex, rowIndex, colIndex], property: ['format', 'border', 'wrap'] })[0], format = data.format, border = data.border, wrap = data.wrap, isWidth;
            isWidth = !ej.isNullOrUndefined(width);
            value = value || 'K';
            span = isWidth ? $('#' + this._id + '_emptyDiv') : $('#' + this._id + '_emptySpan');
            width && (span[0].style.width = width - 4 + "px"); // 2 for left padding, 1 for right paddding, 1 for right border
            if (!ej.isNullOrUndefined(format))
                cls += format + " ";
            if (!ej.isNullOrUndefined(border))
                cls += border + " ";
            else if (span[0].className.indexOf('e-rowcell') > -1)
                span[0].style.borderRight = 0; // border-right property value should 0 in span when span has 'e-rowcell' class.
            if (!ej.isNullOrUndefined(wrap))
                cls += "e-sswraptext";
            this.addClass(span[0], cls);
            (span[0].className.indexOf('e-rowcell') > -1) && (span[0].style.padding = 0); // padding property value should 0 in span when span has 'e-rowcell' class.
            span.text(value);
            if (type === 'height') {
                if (this._browserDetails.name === "msie" && this._browserDetails.version === "8.0")
                    req = Math.ceil(span.outerHeight());
                else
                    req = span[0].getBoundingClientRect().height;
                (!isFromContent && (this.model.rowHeight > req)) && (req = this.model.rowHeight);
            }
            else {
                if (this._browserDetails.name === "msie" && this._browserDetails.version === "8.0")
                    req = Math.ceil(span.outerWidth());
                else
                    req = span[0].getBoundingClientRect().width;
                (!isFromContent && (this.model.columnWidth > req)) && (req = this.model.columnWidth);
            }
            this._refreshGlobalSpan(null, isWidth);
            return req;
        },

        _writeRule: function (colIdx, sheetIdx) {
            var stag, cellProp;
            sheetIdx = this.getSheetElement(sheetIdx).index() + 1;
            cellProp = "#" + this._id + " .e-sheet:nth-child(" + sheetIdx + ") .e-content td.e-rowcell:nth-of-type(" + (colIdx + 1) + ")";
            stag = document.getElementById(this._id + "_sshide");
            stag.sheet.insertRule(cellProp + "{display: none}", stag.sheet.cssRules.length);
        },

        _deleteRule: function (colIdx, sheetIdx) {
            var stag, cellProp;
            sheetIdx = this.getSheetElement(sheetIdx).index() + 1;
            stag = document.getElementById(this._id + "_sshide");
            var rules = stag.sheet.cssRules, sheetRule = " .e-sheet:nth-child(" + sheetIdx + ") ", cellRule = ".e-rowcell:nth-of-type(" + (colIdx + 1) + ")";
            if (this._browserDetails.name === "msie") {
                sheetRule = " :nth-child(" + sheetIdx + ").e-sheet ";
                cellRule = ":nth-of-type(" + (colIdx + 1) + ").e-rowcell";
            }
            cellProp = "#" + this._id + sheetRule + ".e-content td" + cellRule;
            for (var i = 0, len = rules.length; i < len; i++) {
                if (rules[i].selectorText === cellProp) {
                    stag.sheet.deleteRule(i);
                    break;
                }
            }
        },

        _refreshRowHeight: function (sheetIdx, rowIdx) {
            var pHeight = this.XLEdit.getPropertyValue(rowIdx, 0, "pHeight"), sheet = this.getSheet(sheetIdx);
            if (!this.isUndefined(pHeight)) {
                this.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: 0 }, { dataObj: { cHeight: pHeight, pHeight: sheet.rowsHeightCollection[rowIdx] } });
                sheet.rowsHeightCollection[rowIdx] = pHeight;
                if (this._isRowViewable(sheetIdx, rowIdx))
                    this.getRows(sheetIdx)[1][this._getRowIdx(rowIdx)].style.height = pHeight + "px";
            }
        },

        _batchAddRow: function (sRIndex, eRIndex, sheetIdx, isReverse) {
            var rowData, setting, bindex, curRange, deleted, j = 0, i = sRIndex,
                settings = this.getDataSettings(sheetIdx);
            if (settings) {
                while (i <= eRIndex) {
                    while (j < settings.length) {
                        setting = settings[j];
                        curRange = setting.range;
                        deleted = setting.batchChanges.deleted;
                        if (i > curRange[0] && i <= (curRange[2] + 1)) {
                            bindex = curRange[0] ? this._getPosDiff(i, curRange[0]) : i;
                            if (!setting.fieldAsColumnHeader && setting.showHeader)
                                bindex = bindex - 1;
                            rowData = this._getRowData(i, curRange[1], curRange[3], setting);
                            setting._jsonData.splice(bindex, 0, rowData);
                            if (setting._isDataManager) {
                                if (isReverse)
                                    deleted.length ? deleted.pop() : deleted.push(rowData);
                                else
                                    setting.batchChanges.added.push(setting._jsonData[bindex]);
                            }
                            curRange[2]++;
                            setting.count++;
                        }
                        else if (i <= curRange[0]) {
                            curRange[2]++;
                            curRange[0]++;
                        }
                        j++;
                    }
                    j = 0;
                    i++;
                }
            }
        },

        _batchDeleteRow: function (sRIndex, eRIndex, sheetIdx, isReverse) {
            var delData, setting, bindex, curRange, added, dindex, j = 0, i = eRIndex,
                settings = this.getDataSettings(sheetIdx);
            if (settings) {
                while (i >= sRIndex) {
                    while (j < settings.length) {
                        setting = settings[j];
                        curRange = setting.range;
                        added = setting.batchChanges.added;
                        if (i >= curRange[0] && i <= (curRange[2])) {
                            bindex = curRange[0] ? this._getPosDiff(i, curRange[0]) : i;
                            if (!setting.fieldAsColumnHeader && setting.showHeader)
                                bindex = bindex - 1;
                            delData = setting._jsonData.splice(bindex, 1)[0];
                            if (setting._isDataManager) {
                                if (!isReverse)
                                    setting.batchChanges.deleted.push(delData);
                                else {
                                    if (added.length) {
                                        dindex = added.indexOf(delData);
                                        if (dindex > -1)
                                            added.splice(dindex, 1);
                                    }
                                    else
                                        added.push(delData);
                                }
                            }
                            curRange[2]--;
                            setting.count--;
                        }
                        else if (i < curRange[0]) {
                            curRange[2]--;
                            curRange[0]--;
                        }
                        j++;
                    }
                    j = 0;
                    i--;
                }
            }
        },

        _updateBatchDetails: function (rowIndex, colIndex, sheetIdx) {
            var bindex, findex, range, curField, value, batchData, changed, setting, canIterate = true, i = 0,
                settings = this.getDataSettings(sheetIdx);
            if (settings) {
                while (i < settings.length) {
                    setting = settings[i];
                    range = setting.range;
                    if (range && this.inRange(range, rowIndex, colIndex)) {
                        changed = setting.batchChanges.changed;
                        bindex = range[0] ? this._getPosDiff(rowIndex, range[0]) : rowIndex;
                        findex = range[1] ? this._getPosDiff(colIndex, range[1]) : colIndex;
                        if (!setting.fieldAsColumnHeader && setting.showHeader) {
                            if (rowIndex === range[0])
                                canIterate = false;
                            else
                                bindex = bindex - 1;
                        }
                        if (canIterate) {
                            batchData = setting._jsonData[bindex];
                            curField = setting.fields[findex];
                            value = this.getRangeData({ range: [rowIndex, colIndex, rowIndex, colIndex], valueOnly: true, sheetIdx: sheetIdx, skipFormula: true })[0];
                            if (this.isUndefined(value) || this._isEmptyString(value))
                                value = null;
                            if (batchData && batchData[curField] !== value) {
                                batchData[curField] = value;
                                if (setting.primaryKey && curField === setting.primaryKey && !this.XLEdit.getPropertyValue(rowIndex, colIndex, "isReadOnly", sheetIdx) && !this.isUndefined(value))
                                    this.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { dataObj: { isReadOnly: true } });
                                if (setting._isDataManager && $.inArray(batchData, changed) === -1 && $.inArray(batchData, setting.batchChanges.added) === -1)
                                    changed.push(batchData);
                            }
                        }
                        break;
                    }
                    i++;
                }
            }
        },

        _getRowData: function (rowIndex, scolIndex, ecolIndex, setting) {
            var value, data = {}, i = scolIndex, j = 0, fields = setting.fields;
            while (i <= ecolIndex) {
                value = this.getRangeData({ range: [rowIndex, i, rowIndex, i], valueOnly: true, skipDateTime: true })[0];
                if (this._isEmptyString(value))
                    value = null;
                if (setting.primaryKey && fields[j] === setting.primaryKey && ej.isNullOrUndefined(value))
                    value = 0;
                data[fields[j]] = value;
                i++;
                j++;
            }
            return data;
        },


        saveBatchChanges: function (sheetIdx) {
            var setting, args, promise, batchChanges, returnValue, i = 0, proxy = this, sheet = this.getSheet(sheetIdx), settings = this.getDataSettings(sheetIdx);
            if (settings) {
                while (i < settings.length) {
                    setting = settings[i];
                    if (setting._isDataManager) {
                        batchChanges = setting.batchChanges;
                        args = { sheetIdx: sheetIdx, dataSetting: setting, batchChanges: batchChanges };
                        returnValue = this._trigger("beforeBatchSave", args);
                        if (!returnValue && (batchChanges.changed.length || batchChanges.added.length || batchChanges.deleted.length)) {
                            promise = setting._dataManager.saveChanges(batchChanges, setting.primaryKey, setting.query._fromTable);
                            if (!setting._isOffline) {
                                this.showWaitingPopUp();
                                promise.done(function () {
                                    sheet._resCnt++;
                                    if (sheet._reqCnt === sheet._resCnt)
                                        proxy.hideWaitingPopUp();
                                });
                                promise.fail(function () {
                                    sheet._resCnt++;
                                    if (sheet._reqCnt === sheet._resCnt)
                                        proxy.hideWaitingPopUp();
                                });
                                sheet._reqCnt++;
                                setting.batchChanges = { added: [], changed: [], deleted: [] };
                            }
                        }
                    }
                    i++;
                }
            }
        },

        setReadOnly: function (range) {
            this.updateUniqueData({ isReadOnly: true }, range);
            var args = { reqType: "setreadonly", range: range, sheetIndex: this.getActiveSheetIndex() };
            this._trigActionComplete(args);
        },

        removeReadOnly: function (range) {
            this.clearRangeData(range, ["isReadOnly"]);
        },

        _updateCustomFormulas: function (formulasArr, action) {
            var calcEngine = this._calcEngine, isComplete, key, len;
            for (key = 0, len = formulasArr.length; key < len; key++) {
                if (action === "add" && this.isUndefined(this.getCalcEngine().getLibraryFunctions().getItem(formulasArr[key].formulaName)) && !this.XLEdit._isNamedRange("=" + formulasArr[key].formulaName)) {
                    isComplete = calcEngine["addCustomFunction"](formulasArr[key].formulaName, formulasArr[key].functionName);
                    this._formulaCollection.push({ text: "=" + formulasArr[key].formulaName, display: formulasArr[key].formulaName });
                }
                else if (action === "delete" && calcEngine.getCustomLibraryFunctions().contains(formulasArr[key].formulaName))
                    isComplete = calcEngine["removeFunction"](formulasArr[key].formulaName, formulasArr[key].functionName);
                else
                    this._showAlertDlg("Alert", "CorrectFormula", "FormulaAlert", 372); // To pass correct argument
            }
            return isComplete;
        },

        addCustomFormula: function (formulaName, functionName) {
            if (this.model.isReadOnly)
                return;
            var isComplete = this._updateCustomFormulas([{ formulaName: formulaName, functionName: functionName }], "add");
            if (isComplete) {
                this.model.customFormulas.push({ formulaName: formulaName, functionName: functionName });
                this.XLEdit._refreshAutoComplete();
            }
        },

        removeCustomFormula: function (formulaName, functionName) {
            if (this.model.isReadOnly)
                return;
            var key, isComplete = this._updateCustomFormulas([{ formulaName: formulaName.toUpperCase(), functionName: functionName }], "delete"), formulaColl, len;
            if (isComplete) {
                formulaColl = this.model.customFormulas;
                for (key = 0, len = formulaColl.length; key < len; key++)
                    if (formulaColl[key].formulaName === formulaName)
                        formulaColl.splice(1, parseInt(key));
                this._updateFormulaCollection();
                this.XLEdit._refreshCalcEngine(null, null, false, null, null);
                this.XLEdit._refreshAutoComplete();
            }
        },

        getValueFromFormulaArg: function (args) {
            var i = 1, key, calcEngine = this._calcEngine, splitArgs, tVal, values = {}, totalArgs = [], n, len, argsLen;
            splitArgs = args.split(calcEngine.getParseArgumentSeparator());
            for (n = 0, len = splitArgs.length; n < len; n++)
                totalArgs = totalArgs.concat((splitArgs[n].indexOf(":") > -1) ? calcEngine.getCellsFromArgs(splitArgs[n]) : [splitArgs[n]]);
            for (key = 0, argsLen = totalArgs.length; key < argsLen; key++) {
                tVal = calcEngine.getValueFromArg(totalArgs[key]);
                values["arg" + i] = this.XLEdit._parseValue(tVal).value;
                if (totalArgs.indexOf(tVal) > -1 && tVal[0] === '"' && tVal[tVal.length - 1] === '"')
                    values["arg" + i] = tVal.substring(1, tVal.length - 1);
                i++;
            }
            return values;
        },

        getCalcEngine: function () {
            return this._calcEngine;
        },

        _updateFormatColl: function (sheetIdx, rowIdx, colIdx, cellHt) {
            var sheet = this.getSheet(sheetIdx), formatColl = sheet._formatColl;
            if (cellHt > this.model.rowHeight) {
                if (this.isUndefined(formatColl[rowIdx]))
                    formatColl[rowIdx] = {};
                formatColl[rowIdx][colIdx] = cellHt;
            }
            else {
                if (rowIdx in formatColl && colIdx in formatColl[rowIdx])
                    delete formatColl[rowIdx][colIdx];
                if (formatColl[rowIdx] && this.getObjectLength(formatColl[rowIdx]) < 1)
                    delete formatColl[rowIdx];
            }
        },

        _getFormattedHeight: function (sheetIdx, rowIdx) {
            var sheet = this.getSheet(sheetIdx), cellHt;
            cellHt = ej.max(this._getObjectValues(sheet._formatColl[rowIdx]));
            cellHt = cellHt ? cellHt : this.model.rowHeight;
            return cellHt;
        },

        getVisibleCellDetails: function () {
            var sheet = this.getSheet();
            return {
                topLeftCell: sheet.topLeftCell,
                rowCount: sheet._bottomRow.idx - sheet._topRow.idx,
                colCount: sheet._rightCol.idx - sheet._leftCol.idx
            }
        }
    });


    ej.Spreadsheet.Locale = ej.Spreadsheet.Locale || {};

    ej.Spreadsheet.Locale['default'] = ej.Spreadsheet.Locale["en-US"] = {
        Cut: "Cut",
        Copy: "Copy",
        FormatPainter: "Format Painter",
        Paste: "Paste",
        PasteValues: "Paste Values Only",
        PasteSpecial: "Paste",
        Filter: "Filter",
        FilterContent: "Turn on filtering for the selected cells.",
        FilterSelected: "Filter by Selected Cell's value",
        Sort: "Sort",
        Clear: "Clear",
        ClearContent: "Delete everything in the cell, or remove just the formatting, contents, comments or hyperlinks.",
        ClearFilter: "Clear Filter",
        ClearFilterContent: "Clear the filter and sort state for the current range of data.",
        SortAtoZ: "Sort A to Z",
        SortAtoZContent: "Lowest to Highest.",
        SortZtoA: "Sort Z to A",
        SortZtoAContent: "Highest to Lowest.",
        SortSmallesttoLargest: "Sort Smallest to Largest",
        SortLargesttoSmallest: "Sort Largest to Smallest",
        SortOldesttoNewest: "Sort Oldest to Newest",
        SortNewesttoOldest: "Sort Newest to Oldest",
        Insert: "Insert",
        InsertTitle: "Insert Cells",
        InsertContent: "Add new cells, rows, or columns to your workbook.",
        MultipleInsertContent: "FYI: To insert multiple rows or columns at a time, select multiple rows or columns in the sheet, and click Insert.",
        InsertSBContent: "Add cells, rows, columns, or sheets to your workbook.",
        Delete: "Delete",
        DeleteTitle: "Delete Cells",
        DeleteContent: "Delete cells, rows, columns, or sheets from your workbook.",
        MultipleDeleteContent: "FYI: To delete multiple rows or columns at a time, select multiple rows or columns in the sheet, and click Delete.",
        FindSelectTitle: "Find & Select",
        FindSelectContent: "Click to see options for finding text in your document.",
        CalculationOptions: "Calculation Options",
        CalcOptTitle: "Calculation Options",
        CalcOptContent: "Choose to calculate formulas automatically or manually.",
        CalcOptRecalcContent: "If you make a change that affects a value, Spreadsheet will automatically recalculate it.",
        CalculateSheet: "Calculate Sheet",
        CalculateNow: "Calculate Now",
        CalculateNowContent: "Calculate the entire workbook now.",
        CalculateNowTurnOffContent: "You only need to use this if automatic calculation is turned off.",
        CalculateSheetContent: "Calculate the active sheet now.",
        CalculateSheetTurnOffContent: "You only need to use this if automatic calculation is turned off.",
        Title: "Spreadsheet",
        ColorPicker: "Color Picker",
        Ok: "OK",
        Cancel: "Cancel",
        Alert: "We couldn't do this for the selected range of cells. Select a single cell within a range of data and then try again.",
        HeaderAlert: "The command could not be completed as you are attempting to filter with the filter header. Select a single cell in the filter range and try the command again.",
        FlashFillAlert: "All the data next to your selection was checked and there was no pattern for filling in values.",
        Formatcells: "Format Cells",
        FontFamily: "Font",
        FFContent: "Pick a new font for your text.",
        FontSize: "Font Size",
        FSContent: "Change the size of your text.",
        IncreaseFontSize: "Increase Font Size",
        IFSContent: "Make your text a bit bigger.",
        DecreaseFontSize: "Decrease Font Size",
        DFSContent: "Make your text a bit smaller.",
        Bold: "Bold",
        Italic: "Italic",
        Underline: "Underline",
        Linethrough: "Linethrough",
        FillColor: "Fill Color",
        FontColor: "Font Color",
        TopAlign: "Top Align",
        TopAlignContent: "Align text to the top.",
        MiddleAlign: "Middle Align",
        MiddleAlignContent: "Align text so that it is centered between the top and bottom of the cell.",
        BottomAlign: "Bottom Align",
        BottomAlignContent: "Align text to the bottom.",
        WrapText: "Wrap Text",
        WrapTextContent: "Wrap extra-long text into multiple lines so you can see all of it.",
        AlignLeft: "Align Left",
        AlignLeftContent: "Align your content to the left.",
        AlignCenter: "Center",
        AlignCenterContent: "Center your content.",
        AlignRight: "Align Right",
        AlignRightContent: "Align your content to the right.",
        IncreaseIndent: "Increase Indent",
        IncreaseIndentContent: "Move your content farther away from the cell border.",
        DecreaseIndent: "Decrease Indent",
        DecreaseIndentContent: "Move your content closer to the cell border.",
        Undo: "Undo",
        Redo: "Redo",
        NumberFormat: "Number Format",
        NumberFormatContent: "Choose the format for your cells, such as percentage, currency, date or time.",
        AccountingStyle: "Accounting Style",
        AccountingStyleContent: "Format as dollar accounting number format.",
        PercentageStyle: "Percent Style",
        PercentageStyleContent: "Format as a percent.",
        CommaStyle: "Comma Style",
        CommaStyleContent: "Format with a thousands separator.",
        IncreaseDecimal: "Increase Decimal",
        IncreaseDecimalContent: "Show more decimal places for a more precise value.",
        DecreaseDecimal: "Decrease Decimal",
        DecreaseDecimalContent: "Show fewer decimal places.",
        AutoSum: "AutoSum",
        AutoSumTitle: "Sum",
        AutoSumContent: "Automatically add a quick calculation to your worksheet, such as sum or average.",
        Fill: "Fill",
        ExportXL: "Excel",
        ExportCsv: "CSV",
        ExportPdf: "PDF",
        BackgroundColor: "Fill Color",
        BGContent: "Color the background of the cells to make them stand out.",
        ColorContent: "Change the color of your text.",
        Border: "Border",
        BorderContent: "Apply borders to the currently selected cells.",
        BottomBorder: "Bottom Border",
        TopBorder: "Top Border",
        LeftBorder: "Left Border",
        RightBorder: "Right Border",
        OutsideBorder: "Outside Borders",
        NoBorder: "No Border",
        AllBorder: "All Borders",
        ThickBoxBorder: "Thick Box Border",
        ThickBottomBorder: "Thick Bottom Border",
        BottomDoubleBorder: "Bottom Double Border",
        TopandBottomDoubleBorder: "Top and Bottom Double Border",
        TopandThickBottomBorder: "Top and Thick Bottom Border",
        DrawBorderGrid: "Draw Border Grid",
        DrawBorder: "Draw Border",
        TopandBottomBorder: "Top and Bottom Border",
        BorderColor: "Line Color",
        BorderStyle: "Line Style",
        Number: "Number is used for general display of numbers. Currency and Accounting offer specialized formatting for monetary value.",
        General: "General format cells have no specific number format.",
        Currency: "Currency formats are used for general monetary values. Use Accounting formats to align decimal points in a column.",
        Accounting: "Accounting formats line up the currency symbols and decimal points in a column.",
        Text: "Text format cells are treated as text even when a number is in the cell. The cell is displayed exactly as entered.",
        Percentage: "Percentage formats multiply the cell value by 100 and displays the result with a percent symbol.",
        CustomMessage: "Type number format code, using one of existing codes as a starting point.",
        Fraction: "Fraction is used to indicate a part of a whole number or a ratio between two numbers.",
        Scientific: "Scientific is used to represent a decimal number between 1 and 10 multiplied by ten, so the large numbers using less digits.",
        Type: "Type:",
        CustomFormatAlert: "Enter a valid format",
        Date: "Date formats display date and time serial numbers as date values.",
        Time: "Time formats display date and time serial numbers as date values.",
        File: "FILE",
        New: "New",
        Open: "Open",
        SaveAs: "Save As",
        Print: "Print",
        PrintContent: "Print the current sheet.",
        PrintSheet: "Print Sheet",
        PrintSelected: "Print Selected",
        PrintSelectedContent: "Select an area on the sheet you would like to print.",
        HighlightVal: "Format Invalid Data",
        ClearVal: "Clear Validation",
        Validation: "Validation",
        DataValidation: "Data Validation",
        DVContent: "Pick from a list of rules to limit the type of data that can be entered in a cell.",
        PageSize: "Page Size",
        PageSizeContent: "Choose a page size for your document.",
        FormatCells: "FormatCells",
        ConditionalFormat: "Conditional Formatting",
        CFContent: "Easily spot trends and patterns in your data using colors to visually highlight important values.",
        And: "and",
        With: "with",
        GTTitle: "Greater Than",
        GTContent: "Format cells that are GREATER THAN:",
        LTTitle: "Less Than",
        LTContent: "Format cells that are LESS THAN:",
        BWTitle: "Between",
        BWContent: "Format cells that are BETWEEN:",
        EQTitle: "Equal To",
        EQContent: "Format cells that are EQUAL TO:",
        DateTitle: "A Date Occurring",
        DateContent: "Format cells that contain a DATE:",
        ContainsTitle: "Text That Contains",
        ContainsContent: "Format cells that contain the text:",
        GreaterThan: "Greater Than",
        LessThan: "Less Than",
        Between: "Between",
        EqualTo: "Equal To",
        TextthatContains: "Text that Contains",
        DateOccurring: "A Date Occurring",
        DataBars: "Data Bars",
        BlueDataBar: "Blue Data Bar",
        ColorScales: "Color Scales",
        IconSets: "Icon Sets",
        ClearRules: "Clear Rules",
        ClearRulesfromSelected: "Clear Rules from Selected Cells",
        ClearRulesfromEntireSheets: "Clear Rules from Entire Sheet",
        CellStyles: "Cell Styles",
        CellStylesContent: "A colorful style is a great way to make important data stand out on the sheet.",
        CellStyleHeaderText: "Good, Bad and Neutral/Titles and Headings/Themed Cell Styles",
        Custom: "Type the number format code, using one of the existing codes as starting point.",
        CellStyleGBN: "Normal/Bad/Good/Neutral",
        CellStyleTH: "Heading 4/Title",
        Accent: "Accent",
        Style: "Style",
        FormatAsTable: "Format As Table",
        FormatasTable: "Format as Table",
        FATContent: "Quickly convert a range of cells to a table with its own style.",
        FATHeaderText: "Light/Medium/Dark",
        FATNameDlgText: "Table Name:/My table has headers",
        InvalidReference: "The range you have specified is invalid",
        ResizeAlert: "The specified range is invalid. The top of the table must remain in the same row, and the resulting table must overlap the original table. Specify a valid range.",
        RangeNotCreated: "Increasing the row beyond the maximum sheet rowcount is restricted in Format as Table.",
        ResizeRestrictAlert: "Increase or decrease of column count and decrease of row count is restricted in Format as Table.",
        FATResizeTableText: "Enter new data range for your table:",
        FATReizeTableNote: "Note: The headers must remain in the same row and the resulting table range must overlap the original table range.",
        FormatAsTableAlert: "Cannot create a table with a single row. A table must have at least two rows, one for the table header, and one for data",
        FormatAsTableTitle: "Light 1/Light 2/Light 3/Light 5/Light 8/Light 9/Light 10/Light 12/Light 15/Light 16/Light 17/Light 19/Medium 8/Medium 9/Medium 10/Medium 12/Medium 22/Medium 23/Medium 24/Medium 26/Dark 1/Dark 2/Dark 3/Dark 5",
        NewTableStyle: "New Table Style",
        ResizeTable: "Resize Table",
        ResizeTableContent: "Resize this table by adding or removing rows and columns.",
        ConvertToRange: "Convert to Range",
        ConvertToRangeContent: "Convert this table into a normal range of cells.",
        ConverToRangeAlert: "Do you want to convert the table to a normal range?",
        TableID: "Table ID:",
        Table: "Table",
        TableContent: "Create a table to organize and analyze related data.",
        TableStyleOptions: "First Column/Last Column/Total Row/Filter Button",
        Format: "Format",
        NameManager: "Name Manager",
        NameManagerContent: "Create, edit, delete and find all the names used in the workbook.",
        NameManagerFormulaContent: "Names can be used in formulas as substitutes for cell references.",
        DefinedNames: "Defined Names",
        DefineName: "Define Name",
        DefineNameContent: "Define and apply names.",
        UseInFormula: "Use In Formula",
        UseInFormulaContent: "Choose a name used in this workbook and insert it into the current formula.",
        RefersTo: "Refers To",
        Name: "Name",
        Scope: "Scope",
        NMNameAlert: "The name that you entered is not valid./Reason for this can include:/The name does not begin with a letter or an underscore/The name contains a space or other invalid characters/The name conflicts with a spreadsheet built-in name or the name of another object in the workbook", // not used completely
        NMUniqueNameAlert: "The name entered already exists. Enter a unique name.",
        NMRangeAlert: "Enter a valid range",
        FORMULAS: "FORMULAS",
        Value: "Values",
        DataValue: "Values:",
        Formula: "Formulas",
        MissingParenthesisAlert: "Your formula is missing a parenthesis--) or (. Check the formula, and then add the parenthesis in the appropriate place.",
        UnsupportedFile: "Unsupported File",
        IncorrectPassword: "Unable to open the file or worksheet with the given password",
        InvalidUrl: "Please specify proper URL",
        Up: "Up",
        Down: "Down",
        Sheet: "Sheet",
        Workbook: "Workbook",
        Rows: "By Rows",
        Columns: "By Columns",
        FindReplace: "Find Replace",
        FindnReplace: "Find and Replace",
        Find: "Find",
        Replace: "Replace",
        FindLabel: "Find what:",
        ReplaceLabel: "Replace with:",
        ReplaceAll: "Replace All",
        Close: "Close",
        FindNext: "Find Next",
        FindPrev: "Find Prev",
        Automatic: "Automatic",
        Manual: "Manual",
        Settings: "Settings",
        MatchCase: "Match case",
        MatchAll: "Match entire cell contents",
        Within: "Within:",
        Search: "Search:",
        Lookin: "Look in:",
        ShiftRight: "Shift cells right",
        ShiftBottom: "Shift cells down",
        EntireRow: "Entire row",
        EntireColumn: "Entire column",
        ShiftUp: "Shift cells up",
        ShiftLeft: "Shift cells left",
        Direction: "Direction:",
        GoTo: "Go To",
        GoToName: "Go to:",
        Reference: "Reference:",
        Special: "Special",
        Select: "Select",
        Comments: "Comments",
        Formulas: "Formulas",
        Constants: "Constants",
        RowDiff: "Row differences",
        ColDiff: "Column differences",
        LastCell: "Last cell",
        CFormat: "Conditional formats",
        Blanks: "Blanks",
        GotoError: "Error",
        GotoLogicals: "Logicals",
        GotoNumbers: "Numbers",
        GotoText: "Text",
        FindSelect: "Find & Select",
        Comment: "Comment",
        NewComment: "New",
        InsertComment: "Insert Comment",
        EditComment: "Edit",
        DeleteComment: "Delete Comment",
        DeleteCommentContent: "Delete the selected comment.",
        HideComment: "Hide Comment",
        Next: "Next",
        NextContent: "Jump to the next comment.",
        Previous: "Previous",
        PreviousContent: "Jump to the previous comment.",
        ShowHide: "Show/Hide Comment",
        ShowHideContent: "Show or hide the comment on the active cell.",
        ShowAll: "Show All Comments",
        ShowAllContent: "Display all comments in the sheet.",
        UserName: "User Name",
        Hide: "Hide",
        Unhide: "Unhide",
        Add: "Add",
        DropAlert: "Do you want to replace the existing data?",
        PutCellColor: "Put Selected Cell Color To The Top",
        PutFontColor: "Put Selected Font Color To The Top",
        WebPage: "Web Page",
        WorkSheet: "Worksheet Reference",
        SheetReference: "Sheet Reference",
        InsertHyperLink: "Insert Hyperlink",
        HyperLink: "Hyperlink",
        EditLink: "Editlink",
        OpenLink: "Openlink",
        HyperlinkText: "Text:",
        RemoveLink: "Removelink",
        WebAddress: "Web Address:",
        CellAddress: "Cell Reference:",
        SheetIndex: "Select a place in this document",
        ClearAll: "Clear All",
        ClearFormats: "Clear Formats",
        ClearContents: "Clear Contents",
        ClearComments: "Clear Comments",
        ClearHyperLinks: "Clear Hyperlinks",
        SortFilter: "Sort & Filter",
        SortFilterContent: "Organize your data so it's easier to analyze.",
        NumberStart: "Minimum:",
        NumberEnd: "Maximum:",
        DecimalStart: "Minimum:",
        DecimalEnd: "Maximum:",
        DateStart: "Start Date:",
        DateEnd: "End Date:",
        ListStart: "Source:",
        FreeText: "Show error after invalid data is entered",
        ListEnd: "Cell Reference:",
        TimeStart: "Start Time:",
        TimeEnd: "End Time:",
        TextLengthStart: "Minimum:",
        TextLengthEnd: "Maximum:",
        CommentFindEndAlert: "Spreadsheet reached the end of the workbook. Do you want to continue reviewing from the beginning of the workbook?",
        InsertSheet: "Insert",
        DeleteSheet: "Delete",
        RenameSheet: "Rename",
        MoveorCopy: "Move or Copy",
        HideSheet: "Hide",
        UnhideSheet: "Unhide",
        SheetRenameAlert: "That name is already taken. Try a different one.",
        SheetRenameEmptyAlert: "You typed an invalid name for a sheet. Make sure that:",
        SheetRenameEmptyCharExceedAlert: "The name that you type does not exceed 31 characters.",
        SheetRenameEmptySplCharAlert: "The name does not contain any of the following characters: ",
        SheetRenameEmptyBlankAlert: "You did not leave the name blank.",
        SheetDeleteAlert: "You can't undo deleting sheets, and you might be removing some data. If you don't need it, click OK to delete.",
        SheetDeleteErrorAlert: "A workbook must contain at least one visible worksheet. To hide, delete, or move the selected sheet, you must first insert a new sheet or unhide a sheet that is already hidden.",
        CtrlKeyErrorAlert: "That command cannot be used on  multiple selections.",
        ClipboardAccessError: "Your browser can't access the clipboard, so use these shortcuts:",
        MoveToEnd: "Move To End",
        Beforesheet: "Before sheet:",
        CreateaCopy: "Create a copy",
        AutoFillOptions: "Copy Cells/Fill Series/Fill Formatting Only/Fill Without Formatting/Flash Fill",
        NumberValidationMsg: "Enter only digits",
        DateValidationMsg: "Enter only date",
        Required: "Required",
        TimeValidationMsg: "The value you entered for the Time is invalid.",
        CellAddrsValidationMsg: "Reference is not valid.",
        PivotTable: "Pivot Table",
        PivotTableContent: "Easily arrange and summarize complex data in a PivotTable.",
        NumberTab: "Number",
        AlignmentTab: "Alignment",
        FontTab: "Font",
        FillTab: "Fill",
        TextAlignment: "Text alignment",
        Horizontal: "Horizontal:",
        Vertical: "Vertical:",
        Indent: "Indent",
        TextControl: "Text Control",
        FontGroup: "Font:",
        FontStyle: "Font style",
        Size: "Size:",
        PSize: "Page size",
        Effects: "Effects",
        Color: "Color",
        StrikeThrough: "Strikethrough",
        Overline: "Overline",
        NormalFont: "Normal font",
        Preview: "Preview",
        Line: "Line",
        Presets: "Presets",
        None: "None",
        Outline: "Outline",
        AllSide: "All sides",
        InsCells: "Insert Cells",
        InsRows: "Insert Sheet Rows",
        InsCols: "Insert Sheet Columns",
        InsSheet: "Insert Sheet",
        DelCells: "Delete Cells",
        DelRows: "Delete Sheet Rows",
        DelCols: "Delete Sheet Columns",
        DelSheet: "Delete Sheet",
        HyperLinkAlert: "The address of this site is not valid.Check the address and try again.",
        ReplaceData: "All done. We made / replacements.",
        NotFound: "We couldn't find what you were looking for. Select settings tab for more ways to search",
        Data: "Data:",
        Allow: "Allow:",
        IgnoreBlank: "Ignore blank",
        NotFind: "Unable to find the match to replace",
        FreezeTopRow: "Freeze Top Row",
        FreezeFirstColumn: "Freeze First Column",
        UnFreezePanes: "Unfreeze Panes",
        DestroyAlert: "Are you sure you want to destroy the current workbook without saving and create a new workbook?",
        ImageValAlert: "Upload image files only",
        Pictures: "Pictures",
        PicturesTitle: "From File",
        PicturesContent: "Insert pictures from computer or from other computers that you are connected to.",
        ImportAlert: "Are you sure you want to destroy the current workbook without saving and open a new workbook?",
        UnmergeCells: "Unmerge Cells",
        MergeCells: "Merge Cells",
        MergeAcross: "Merge Across",
        MergeAndCenter: "Merge & Center",
        MergeAndCenterContent: "Combine and center the contents of the selected cells in a new larger cell.",
        MergeCellsAlert: "Merging Cells keeps only upper left cell value and discards the other values.",
        MergeInsertAlert: "This operation will causes some merged cells to unmerge. Do you wish to continue?",
        Axes: "Axes",
        PHAxis: "Primary Horizontal",
        PVAxis: "Primary Vertical",
        AxisTitle: "Axis Title",
        CTNone: "None",
        CTCenter: "Center",
        CTFar: "Far",
        CTNear: "Near",
        DataLabels: "Data Labels",
        DLNone: "None",
        DLCenter: "Center",
        DLIEnd: "Inside End",
        DLIBase: "Inside Base",
        DLOEnd: "Outside End",
        ErrorBar: "Error Bars",
        Gridline: "Gridlines",
        PMajorH: "Primary Major Horizontal",
        PMajorV: "Primary Major Vertical",
        PMinorH: "Primary Minor Horizontal",
        PMinorV: "Primary Minor Vertical",
        Legend: "Legends",
        LNone: "None",
        LLeft: "Left",
        LRight: "Right",
        LBottom: "Bottom",
        LTop: "Top",
        ChartTitleDlgText: "Enter Title",
        ChartTitle: "Title",
        InvalidTitle: "You typed an invalid name for the Title.",
        CorrectFormat: "Select the correct Format File",
        ResetPicture: "Reset Picture",
        ResetPictureContent: "Discard all of the formatting changes made to this picture.",
        PictureBorder: "Picture Border",
        PictureBorderContent: "Pick the color, width, and line style for the outline of your shape.",
        ResetSize: "Reset Picture & Size",
        Height: "Height",
        Width: "Width",
        ThemeColor: "Theme Colors",
        NoOutline: "No Outline",
        Weight: "Weight",
        Dashes: "Dashes",
        ColumnChart: "Column",
        ColumnChartTitle: "Insert Column Chart",
        ColumnChartContent: "Use this chart type to visually compare values across a few categories.",
        BarChart: "Bar",
        BarChartTitle: "Insert Bar Chart",
        BarChartContent: "Use this chart type to visually compare values across a few categories when the chart shows duration or the category text is long.",
        StockChart: "Radar",
        StockChartTitle: "Insert Radar Chart",
        StockChartContent: "Use this chart type to show values relative to a center point.",
        LineChart: "Line",
        LineChartTitle: "Insert Line Chart",
        LineChartContent: "Use this chart type to show trends over time (years, months, and days) or categories.",
        AreaChart: "Area",
        AreaChartTitle: "Insert Area Chart",
        AreaChartContent: "Use this chart type to show trends over time (years, months, and days) or categories. Use it to highlight the magnitude of change over time.",
        ComboChart: "Combo",
        PieChart: "Pie",
        PieChartTitle: "Insert Pie/Doughnut Chart",
        PieChartContent: "Use this chart type to show proportions of a whole. Use it when the total of your numbers is 100%.",
        ScatterChart: "Scatter",
        ScatterChartTitle: "Insert Scatter (X, Y) Chart",
        ScatterChartContent: "Use this chart type to show the relationship between sets of values.",
        ClusteredColumn: "Clustered&nbsp;Column",
        StackedColumn: "Stacked&nbsp;Column",
        ClusteredBar: "Clustered&nbsp;Bar",
        StackedBar: "Stacked&nbsp;Bar",
        Radar: "Radar",
        RadarMarkers: "Radar&nbsp;with&nbsp;Markers",
        LineMarkers: "Line&nbsp;with&nbsp;Markers",
        Area: "Area",
        StackedArea: "Stacked&nbsp;Area",
        Pie: "Pie",
        Doughnut: "Doughnut",
        Scatter: "Scatter",
        ChartRange: "Chart Range",
        XAxisRange: "Enter X-axis range:",
        YAxisRange: "Enter Y-axis range:",
        LegendRange: "Enter legend range:",
        YAxisMissing: "Enter Y-axis range to create chart",
        InvalidYAxis: "Y-axis range must be within the selected range",
        InvalidXAxis: "X-axis range must be within the selected range",
        InvalidLegend: "Legend range must be within the selected range",
        InvalidXAxisColumns: "X-axis range should be within a single column",
        FreezePanes: "Freeze Panes",
        FreezePanesContent: "Freeze a portion of the sheet to keep it visible while you scroll through the rest of the sheet.",
        PasteContent: "Add content on the Clipboard to your document.",
        PasteSplitContent: "Pick a paste option, such as keeping formatting or pasting only content.",
        CutContent: "Remove the selection and put it on the Clipboard so you can paste it somewhere else.",
        CopyContent: "Put a copy of the selection on the Clipboard so you can paste it somewhere else.",
        FPTitle: "Format Painter",
        FPContent: "Like the look of a particular selection? You can apply that look to other content in the document.",
        BoldContent: "Make your text bold.",
        ItalicContent: "Italicize your text.",
        ULineContent: "Underline your text.",
        LineTrContent: "Cross something out by drawing a strike through it.",
        UndoContent: "Undo your last action.",
        RedoContent: "Redo your last action.",
        HyperLinkTitle: "Add a Hyperlink",
        HyperLinkContent: "Create a link in your document for quick access to webpages and files.",
        HyperLinkPlaceContent: "Hyperlinks can also take you to places in your document.",
        NewCommentTitle: "Insert a Comment",
        NewCommentContent: "Add a note about this part of the document.",
        RefreshTitle: "Refresh",
        RefreshContent: "Get the latest data from the source connected to the active cell",
        FieldListTitle: "Field List",
        FieldListContent: "Show or hide the Field List.",
        FieldListRemoveContent: "The field list allows you to add and remove fields from your PivotTable report",
        AddChartElement: "Add Chart Element",
        AddChartElementContent: "Add elements to the created chart.",
        SwitchRowColumn: "Switch Row/ Column",
        SwitchRowColumnContent: "Swap the data over the axis.",
        MergeAlert: "We can't do that to a merged cell.",
        UnhideDlgText: "Unhide Sheet:",
        ChartThemes: "Chart Themes",
        ChartThemesContent: "Pick a new theme for your chart.",
        ChangePicture: "Change Picture",
        ChangePictureContent: "Change to a different picture, preserving the formatting and size of the current picture.",
        ChangeChartType: "Change Chart Type",
        SelectData: "Select Data",
        SelectDataContent: "Change the data range included in the chart.",
        Sum: "Sum",
        Average: "Average",
        CountNumber: "Count Numbers",
        Max: "Max",
        Min: "Min",
        ChartTypeContent: "Change to a different chart type.",
        AllCharts: "All Charts",
        defaultfont: "Default",
        LGeneral: "General",
        LCurrency: "Currency",
        LAccounting: "Accounting",
        LDate: "Date",
        LTime: "Time",
        LPercentage: "Percentage",
        LFraction: "Fraction",
        LScientific: "Scientific",
        LText: "Text",
        LCustom: "Custom",
        LShortdate: "Short Date",
        LLongdate: "Long Date",
        FormatSample: "Sample",
        Category: "Category:",
        Top: "Top",
        Center: "Center",
        Bottom: "Bottom",
        Left: "Left (Indent)",
        Right: "Right",
        Justify: "Justify",
        GeneralTxt: "General format cells have no specific number format.",
        NegativeNumbersTxt: "Negative Numbers",
        ThousandSeparatorTxt: "Use 1000 Separator",
        DecimalPlacesTxt: "Decimal Places:",
        TextTxt: "Text format cells are treated as text even when a number is in the cell. The cell is displayed exactly as entered.",
        BoldItalic: "Bold Italic",
        Regular: "Regular",
        HyperLinkHide: "<<Selection in Document>>",
        InvalidSheetIndex: "Specify proper SheetIndex",
        HugeDataAlert: "File too large to open.",
        ImportExportUrl: "Give import/export URL and try again.",
        BetweenAlert: "The Maximum must be greater or equal to the Minimum.",
        BorderStyles: "Solid/Dashed/Dotted/Double",
        FPaneAlert: "Freeze Pane is not applied for the First Cell",
        ReplaceNotFound: "Spreadsheet cannot find a match.",
        BlankWorkbook: "Blank workbook",
        SaveAsExcel: "Save As Excel",
        SaveAsCsv: "Save As CSV",
        SaveAsPdf: "Save As PDF",
        Design: "DESIGN",
        NewName: "New Name",
        FormulaBar: "Formula Bar",
        NameBox: "Name Box",
        NumberValMsg: "Decimal values cannot be used for number conditions.",
        NumberAlertMsg: "Enter only digits.",
        ListAlert: "Cell range is incorrect, Please enter correct cell range.",
        ListValAlert: "The list source must be a delimited list, or a reference to single row or column.",
        ListAlertMsg: "The value you entered is not valid",
        AutoFillTitle: "AutoFillOptions",
        NewSheet: "New Sheet",
        FullSheetCopyPasteAlert: "We can't paste because the Copy area and paste area aren't the same size.",
        Heading: "Headings",
        Gridlines: "Gridlines",
        Firstsheet: "Scroll to the first sheet",
        Lastsheet: "Scroll to the last sheet",
        Nextsheet: "Scroll to the next sheet",
        Prevsheet: "Scroll to the previous sheet",
        ProtectWorkbook: "Protect Workbook",
        UnProtectWorkbook: "Unprotect Workbook",
        ProtectWBContent: "Keep others from making structural changes to your workbook",
        Password: "Password",
        ConfirmPassword: "Reenter password to proceed:",
        PasswordAlert1: "Confirmation password is not identical.",
        PasswordAlert2: "Please enter a password.",
        PasswordAlert3: "The password you supplied is not correct. Verify that the CAPS LOCK key is off and be sure to use the correct capitalization.",
        Protect: "is protected.",
        Lock: "LockCell",
        Unlock: "UnlockCell",
        Protectsheet: "Protect Sheet",
        ProtectSheetToolTip: "Prevent unwanted changes from others by limiting their ability to edit",
        Unprotect: "Unprotect Sheet",
        LockAlert: "The cell you are trying to change is on protected sheet. To make changes, click Unprotect Sheet in the Review tab.",
        InsertDeleteAlert: "This operation is not allowed. The operation is attempting to shift cells in a table/Filter range on your worksheet.",
        CreateRule: "New Rule",
        NewRule: "New Formatting Rule",
        NewRuleLabelContent: "Format values where this formula is true:",
        ReadOnly: "The range you are trying to change contains readonly cells.",
        CreatePivotTable: "Create PivotTable",
        Range: "Range:",
        ChoosePivotTable: "Choose where you want the PivotTable to be placed",
        NewWorksheet: "New Worksheet",
        ExistingWorksheet: "Existing Worksheet",
        Location: "Location:",
        Refresh: "Refresh",
        PivotRowsAlert: "This command requires at least two rows of source data. You cannot use the command on a selection in only one row.",
        PivotLabelsAlert: "The PivotTable field name is not valid, To create a PivotTable report, you must use data that is organized as a list with labeled columns. If you are changing the name of a PivotTable field, you must type a new name for the field.",
        FieldList: "Field List",
        MergeSortAlert: "To do this, all the merged cells need to be the same size.",
        FormulaSortAlert: "The sort range with formula cannot be sorted.",
        MergePreventInsertDelete: "This operation is not allowed. The operation is attempting to shift a merge cells on your worksheet.",
        FormulaRuleMsg: "Please enter correct format.",
        MovePivotTable: "Move PivotTable",
        MovePivotTableContent: "Move the PivotTable to another location in the workbook.",
        ClearAllContent: "Remove fields and filters.",
        ChangeDataSource: "Modify",
        ChangeDataSourceContent: "Change the source data for this PivotTable",
        ChangePivotTableDataSource: "Change PivotTable Data Source",
        TotalRowAlert: "This operation is not allowed. The operation is attempting to shift cells in a table on your worksheet. Click OK to proceed with entire row.",
        CellTypeAlert: "This operation is not allowed in cell type applied range.",
        PivotOverlapAlert: "A PivotTable report cannot overlap another PivotTable report",
        NoCellFound: "No cells were found",
        MoreValidationAlert: "The selection contains more than one type of validation. Erase current settings and continue ?",
        CorrectArgument: "Please enter the correct argument",
        CorrectFormula: "Please enter the correct formula",
        CorrectCellAddress: "Please enter the correct cell address",
        ChartType: "Chart Type",
        NumberValidationAlert: "The Maximum must be greater than or equal to Minimum",
        DateValidationAlert: "The End Date must be greater than or equal to Start Date",
        TimeValidationAlert: "The End Time must be greater than or equal to Start Time",
        NewRuleAlert: "There's a problem with this formula",
        DragAlert: "The command could not be completed as you are attempting to move cells within the filter range. Select a range out of the filter range and try the command again.",
        OR: "or",
        HOME: "HOME",
        INSERT: "INSERT",
        DATATAB: "DATA",
        PAGELAYOUT: "PAGE LAYOUT",
        REVIEW: "REVIEW",
        OTHERS: "OTHERS",
        FORMAT: "Format",
        DESIGN: "DESIGN",
        CHARTDESIGN: "Chart Design",
        ANALYZE: "Analyze",
        FileName: "File Name",
        Save: "Save",
        SaveFile: "Save the file ",
        HighlightCellRules: "Highlight Cell Rules",
        LightRedFillDark: "Light Red Fill with Dark Red Text",
        YellowFillDark: "Yellow Fill with Dark Yellow Text",
        GreenFillDark: "Green Fill with Dark Green Text",
        RedFill: "Red Fill",
        RedText: "Red Text",
        Column: "Column",
        Bar: "Bar",
        DataValidationType: "Number/Decimal/Date/Time/TextLength/List",
        DataValidationAction: "greater than/greater than or equal to/less than/less than or equal to/equal to/not equal to/between/not between",
        FilterAlert: "This will remove a filtered range on your worksheet. To complete this task, please remove auto filters.",
        cellStyleAlert: "This style name already exists",
        modifyCellStyleAlert: "This style name does not exists",
        Modify: "Modify",
        StyleName: "Style Name",
        Clipboard: "Clipboard",
        Font: "Font",
        Actions: "Actions",
        Styles: "Styles",
        Editing: "Editing",
        Tables: "Tables",
        Illustrations: "Illustrations",
        Links: "Links",
        Charts: "Charts",
        DataTools: "Data Tools",
        Show: "Show",
        PageLayout: "Page Layout",
        Changes: "Changes",
        Window: "Window",
        Cells: "Cells",
        Calculation: "Calculation",
        Properties: "Properties",
        Tools: "Tools",
        TableStyleOption: "Table Style Options",
        ChartLayouts: "Chart Layouts",
        ChartDesignData: "Data",
        ChartDesignType: "Type",
        ChartDesignSize: "Size",
        Adjust: "Adjust",
        FormatSize: "Size",
        AnalyzePivotTable: "PivotTable",
        DataSource: "DataSource",
        Apply: "Apply",
        FATTitlePrefix: "Table Style ",
        NewCellStyle: "New Cell Style",
        HighPoint: "High Point",
        LowPoint: "Low Point",
        FirstPoint: "First Point",
        LastPoint: "Last Point",
        NegativePoint: "Negative Points",
        Markers: "Markers",
        NegativePoints: "Negative Points",
        LineSparklineTitle: "Insert Line Sparkline",
        LineSparklineContent: "Sparklines are mini charts placed in a single cells,each representing a row of data in your selection",
        ColumnSparklineTitle: "Insert Column Sparkline",
        ColumnSparklineContent: "Sparklines are mini charts placed in a single cells,each representing a row of data in your selection",
        //PieSparklineTitle:"Insert Pie Sparkline",
        //PieSparklineContent:"sparklines are mini charts placed in a single cells,each representing a row of data in your selection",
        //AreaSparklineTitle:"Insert Area Sparkline",
        //AreaSparklineContent:"sparklines are mini charts placed in a single cells,each representing a row of data in your selection",
        WinLossSparklineTitle: "Insert Win/Loss Sparkline",
        WinLossSparklineContent: "Sparklines are mini charts placed in a single cells,each representing a row of data in your selection",
        SparklineColor: "Sparkline Color",
        SparklineColorTitle: "Sparkline Color",
        SparklineColorContent: "Specify the color of the sparklines in the selected sparkline group",
        MarkerColor: "Marker Color",
        MarkerColorContent: "Change the color for negative points, markers, and all other points for selected sparkline group",
        ChooseDataRange: "Choose the Data Range",
        ChooseLocationRange: "Choose the Location Range",
        DataRange: "Data Range",
        LocationRange: "Location Range",
        EmptyDLRnge: "Data Source or Location reference is not valid",
        SourceDataRange: "Select a source data range for the sparkline",
        SparklineAlert: "Location reference is not valid because the cells are not all in same column or same row. Select cells that are all in single row or single column.",
        SparklineDataAlert: "Enter the Correct Data Format",
        SparklineLocAlert: "The reference for the location or data range is not valid",
        SDataRangeAlert: "Data Source reference is not valid",
        //PieAlert: "Cannot create the pie chart for single value",
        LineAlert: "Cannot create the line chart for single value",
        EditData: "Edit Data",
        EditDataContent: "Edit Group Location & Data",
        EditSingleSparklineData: "Edit Single Sparkline Data",
        EditSparklineData: "Edit Sparkline Data",
        HiddenEmptyCells: "Hidden & Empty Cells",
        SwitchRowCol: "Switch Row/Column",
        CreateSparkline: "Create Sparkline",
        SelectDataSource: "Select a source data range for the sparkline",
        SPARKLINEDESIGN: "Sparkline Design",
        CancellationRequested: "Couldn't open within the timeout specified",
        ArrayaFormula: "You can't change part of an array",
        ArrayaFormulaTableAlert: "Multi-cell array formulas aren't allowed in tables",
        PivotTableName: "PivotTable Name",
        ValueFieldSettings: "Value Field Settings",
        FieldTab: "Summarize Values By",
        SummarizeValue: "Summarize Value Field By",
        SummarizeChooseType: "Choose the type of calculation that you want to use to summarize data from the selected field",
        FieldValue: "Source Name:",
        ImportPreventedOnUnknownFormula: "This file cannot be loaded since it contains unsupported formulas.",
        CellTypeInsertDeleteAlert: "Couldn't insert the row/column for multiple range celltypes",
        GridModeRecordsCount: "Grid mode must contains atleast one record",
        GridModeDataHeader: "Grid mode must contains data header",
        GridDataSourceAlert: "DataSource must not be empty at initial load since columns are generated from dataSource in Spreadsheet grid mode",
        Directional: "Directional",
        Shapes: "Shapes",
        Indicators: "Indicators",
        Ratings: "Ratings"
    };

    ej.Spreadsheet.scrollMode = {
        Normal: "normal",
        Infinite: "infinite"
    };

    ej.Spreadsheet.AutoFillOptions = {
        CopyCells: "copycells",
        FillSeries: "fillseries",
        FillFormattingOnly: "fillformattingonly",
        FillWithoutFormatting: "fillwithoutformatting",
        FlashFill: "flashfill"
    };

    ej.Spreadsheet.autoFillDirection = {
        Up: "up",
        Right: "right",
        Down: "down",
        Left: "left"
    };

    ej.Spreadsheet.pageSize = {
        A4: "A4",
        A3: "A3",
        Letter: "Letter"
    };

    ej.Spreadsheet.Actions = {
        Sorting: "sorting",
        Selection: "selection",
        AutoFill: "autofill",
        CellNavigation: "cellnavigation",
        Filtering: "filtering"
    };

    ej.Spreadsheet.exportType = {
        Excel: "Excel",
        Csv: "Csv",
        Pdf: "Pdf"
    };

    ej.Spreadsheet.CustomCellType = {
        Button: "Button",
        CheckBox: "CheckBox",
        DropDownList: "DropDownList",
        DatePicker: "DatePicker"
    };

    ej.Spreadsheet.CellType = {
        String: "string",
        Number: "number",
        Custom: "custom",
        Formula: "formula",
        Time: "time",
        LongDate: "longdate",
        ShortDate: "shortdate",
        Scientific: "scientific",
        Fraction: "fraction",
        Text: "text",
        General: "general",
        Accounting: "accounting",
        Currency: "currency",
        Percentage: "percentage",
        Date: "date",
        DateTime: "datetime"
    };

    ej.Spreadsheet.SupportedStyles = {
        FontFamily: "font-family",
        FontSize: "font-size",
        FontStyle: "font-style",
        FontWeight: "font-weight",
        TextAlign: "text-align",
        TextDecoration: "text-decoration",
        VerticalAlign: "vertical-align",
        TextIndent: "text-indent"
    };

    ej.Spreadsheet.Validation = {
        ">": "GreaterThan",
        ">=": "GreaterOrEqualTo",
        "<": "LessThan",
        "<=": "LessThanOrEqualTo",
        "==": "EqualTo",
        "!=": "NotEqualTo",
        "!": "Not",
        "=": ""
    };

    ej.Spreadsheet.ValidationText = {
        ">": "greater than",
        ">=": "greater than or equal to",
        "<": "less than",
        "<=": "less than or equal to",
        "==": "equal to",
        "!=": "not equal to",
        "!": " not",
        "=": ""
    };

    ej.Spreadsheet.msg = " ";

    ej.Spreadsheet.getMsg = function () {
        return ej.Spreadsheet.msg;
    };

    ej.Spreadsheet.SelectionType = {
        Row: "row",
        Column: "column",
        Default: "default"
    };

    ej.Spreadsheet.SelectionUnit = {
        Single: "single",
        Range: "range",
        MultiRange: "multirange"
    };

    ej.Spreadsheet.Align = {
        Left: "left",
        Right: "right",
        Center: "center"
    };

    ej.Spreadsheet.CFormatRule = {
        GreaterThan: "greaterthan",
        LessThan: "lessthan",
        Between: "between",
        EqualTo: "equalto",
        TextContains: "textcontains",
        DateOccur: "dateoccur",
        DataBar: "databar",
        ColorScale: "colorscale",
        IconSet: "iconset"
    };

    ej.Spreadsheet.ContextMenu = {
        Cell: "cell",
        RowHeader: "rowheader",
        ColumnHeader: "columnheader",
        Footer: "footer"
    };

    ej.Spreadsheet.CFormatHighlightColor = {
        RedFillwithDarkRedText: "redft",
        YellowFillwithDarkYellowText: "yellowft",
        GreenFillwithDarkGreenText: "greenft",
        RedFill: "redf",
        RedText: "redt",
    };
    ej.Spreadsheet.DataBar = {
        Blue: "b",
        Green: "g",
        Red: "r",
        Orange: "o",
        LightBlue: "lb",
        Purple: "p"
    };

    ej.Spreadsheet.ColorScale = {
        GreenYellowRed: "gyr",
        RedYellowGreen: "ryg",
        GreenWhiteRed: "gwr",
        RedWhiteGreen: "rwg",
        BlueWhiteRed: "bwr",
        RedWhiteBlue: "rwb",
        WhiteRed: "wr",
        RedWhite: "rw",
        GreenWhite: "gw",
        WhiteGreen: "wg",
        GreenYellow: "gy",
        YellowGreen: "yg"
    };

    ej.Spreadsheet.IconSet = {
        ThreeArrows: "threearrows",
        ThreeArrowsGray: "threearrowsgray",
        ThreeTriangles: "threetriangles",
        ThreeTrafficLights: "threetrafficlights",
        ThreeTrafficLightsRimmed: "threetrafficlightsrimmed",
        ThreeSigns: "threesigns",
        ThreeSymbolsCircled: "threesymbolscircled",
        ThreeSymbolsUnCircled: "threesymbolsuncircled",
        ThreeFlags: "threeflags",
        ThreeStars: "threestars"
    };

    ej.Spreadsheet.BorderType = {
        Top: "top",
        Left: "left",
        Right: "right",
        Bottom: "bottom",
        OutSide: "outside",
        AllBorder: "allborder",
        ThickBox: "thickbox",
        ThickBottom: "thickbottom",
        TopandBottom: "topandbottom",
        TopandThickBottom: "topandthickbottom"
    };
    ej.Spreadsheet.ChartProperties = {
        PrimaryHorizontal: "PHAxis",
        PrimaryVertical: "PVAxis",
        PrimaryHorizontalAxisTitle: "PHAxisTitle",
        PrimaryVerticalAxisTitle: "PVAxisTitle",
        TitleNone: "CTNone",
        TitleCenter: "CTCenter",
        TitleFar: "CTFar",
        TitleNear: "CTNear",
        DataLabelNone: "DLNone",
        DataLabelCenter: "DLCenter",
        DataLabelInsideBase: "DLIBase",
        DataLabelInsideEnd: "DLIEnd",
        DataLabelOutsideEnd: "DLOEnd",
        PrimaryMajorHorizontal: "PMajorH",
        PrimaryMajorVertical: "PMajorV",
        PrimaryMinorHorizontal: "PMinorH",
        PrimaryMinorVertical: "PMinorV",
        LegendsNone: "LNone",
        LegendsLeft: "LLeft",
        LegendsRight: "LRight",
        LegendsBottom: "LBottom",
        LegendsTop: "LTop"
    };
    ej.Spreadsheet.HideTypes = {
        Default: "default",
        Freeze: "freeze"
    }
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.selection = function (obj) {
        this.XLObj = obj;
        this._isRightClick = false;
        this._colhdrClick = false;
        this._rowhdrClick = false;
        this._aFillDownHandler = false;
        this._isOutsideBordering = false;
        this._isGridBordering = false;
        this._isRowSelected = false;
        this._isColSelected = false;
        this._isEndReached = true;
        this._canTouchMove = false;
    };

    ej.spreadsheetFeatures.selection.prototype = {
        _selectionMouseDownHandler: function (e) {
            var moveEvt, endEvt, xlObj = this.XLObj, sheet = xlObj.getSheet(), trgt = e.target;
            if ($(trgt).hasClass('e-cf-databar') || $(trgt).hasClass('e-databar')) {
                trgt = $(trgt).parents('td')[0] || e.target;
                xlObj._isCFDirty = true;
            } else {
                xlObj._isCFDirty = false;
            }
            if (xlObj._isTouchEvt) {
                if (xlObj._browserDetails.name === "msie")
                    e.preventDefault();
                if (xlObj._isSelected(e.target) || xlObj._hasClass(e.target, "e-autofill")) {
                    moveEvt = xlObj._getBrowserEvt("move");
                    this._canTouchMove = true;  
                }
                endEvt = xlObj._getBrowserEvt("end");
            }
            else {
                e.preventDefault();
                moveEvt = xlObj._getBrowserEvt('move', true);
                endEvt = xlObj._getBrowserEvt('end', true);
                endEvt += " mouseleave"
            }
            xlObj._on($(document), endEvt, this._mouseUpHandler);
            if ((e.which === 3 || e.button === 2) || xlObj.model.selectionSettings.selectionUnit === ej.Spreadsheet.SelectionUnit.Single)
                this._isRightClick = true;
            else if (moveEvt)
                xlObj._on(xlObj.element, moveEvt, this._mouseMoveHandler);
            if (trgt.tagName == "TD") {
                if (xlObj.XLEdit._isFormulaEdit) {
                    if (e.ctrlKey) {
                        this._clearBorder(xlObj._arrayAsString(xlObj._ctrlFormulaBorder));
                        xlObj._ctrlKeyCount = xlObj._formulaRange.length;
                    }
                    xlObj._dStartCell = xlObj._getCellIdx(trgt);
                }
                else if (e.shiftKey && sheet._startCell.rowIndex != -1)
                    sheet._endCell = xlObj._getCellIdx(trgt);
                else {
                    sheet._startCell = xlObj._getCellIdx(trgt);
                    sheet._activeCell = xlObj._getCellIdx(trgt);
                }
                if (trgt.className.indexOf("e-rowheader") > -1)
                    this._rowhdrClick = true;
            }
            else if (trgt.parentNode && trgt.parentNode.tagName == "TH") {  // check for parentnode issue for all
                if (e.shiftKey && sheet._startCell.rowIndex != -1)
                    sheet._endCell = { rowIndex: 0, colIndex: trgt.parentNode.cellIndex };
                else {
                    sheet._startCell = { rowIndex: 0, colIndex: trgt.parentNode.cellIndex };
                    sheet._activeCell = { rowIndex: 0, colIndex: trgt.parentNode.cellIndex };
                }
                if (trgt.className.indexOf("e-headercelldiv") > -1)
                    this._colhdrClick = true;
            }
            else if (trgt.className == "e-autofill")
                this._aFillDownHandler = true;
        },

        _mouseMoveHandler: function (e) {
            var status, chngdTouch, trgtCell, xlObj = this, selObj = xlObj.XLSelection, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx),
                trgt = e.target, range, type = xlObj.model.selectionSettings.selectionType, types = ej.Spreadsheet.SelectionType, imgElem = $(e.target).get(0), cont;
            if (xlObj._isTouchEvt) {
                xlObj._isTouchMoveSel = true;
                chngdTouch = xlObj._getOriginalEvt(e);
                trgt = document.elementFromPoint(chngdTouch.clientX, chngdTouch.clientY);
                if (!trgt)
                    return;
            }
           if($(trgt).hasClass('e-cf-databar') || $(trgt).hasClass('e-databar')) 
            xlObj._isCFDirty = true;// : false;
            if ($(trgt).hasClass("e-rowcell") || $(trgt).hasClass("e-rowheader") || $(trgt).hasClass("e-cf-databar") || $(trgt).hasClass("e-databar")) {
                this.XLSelection._isEndReached = false;
                xlObj._getContent(sheetIdx).find("td[class *='border']").removeClass(xlObj._ctrlFormulaBorder[xlObj._ctrlKeyCount % 6].join(" "));
                if (xlObj.XLEdit._isFormulaEdit) {
                    if (e.ctrlKey) {
                        xlObj._dEndCell = xlObj._getCellIdx(trgt);
                        selObj._processFormulaRange(xlObj._ctrlFormulaBorder, true);
                    }
                    else {
                        xlObj._dEndCell = xlObj._getCellIdx(trgt);
                        selObj._processFormulaRange(xlObj._ctrlFormulaBorder, true);
                    }
                    return;
                }
                else if (selObj._aFillDownHandler && $(trgt).parents(".e-rowheadercontent").length === 0) {
                    if (xlObj.model.allowAutoFill) {
                        trgtCell = xlObj._getCellIdx(e.target);
                        if (sheet._isFreezed && trgtCell.rowIndex <= sheet.frozenRows && sheet._hiddenFreezeRows.indexOf(sheet.frozenRows) > -1)
                            selObj._scrollCalculation(sheetIdx, trgt, { position: "vertical", action: "Decrement" });
                        else if (sheet._isFreezed && trgtCell.colIndex <= sheet.frozenColumns && sheet._hiddenFreezeCols.indexOf(sheet.frozenColumns) > -1)
                            selObj._scrollCalculation(sheetIdx, trgt, { position: "horizontal", action: "Decrement" });
                        else
                            xlObj.XLDragFill._selectAutoFillRange(trgt);
                        return;
                    }
                }
                else {
                    if (trgt.nodeName !== "TD")
                        trgt = $(trgt).parents('td')[0];
                    sheet._startCell = sheet._activeCell;
                    sheet._endCell = xlObj._getCellIdx(trgt);
                    if (sheet._isFreezed)
                        xlObj.XLFreeze._selectionScroll();
                    selObj._processBoundary();
                    if ($(trgt).parents(".e-spreadsheetcontentcontainer").length > 0) {
                        if (e.ctrlKey && xlObj.model.selectionSettings.selectionType === ej.Spreadsheet.SelectionType.Default && xlObj.model.selectionSettings.selectionUnit === ej.Spreadsheet.SelectionUnit.MultiRange) {
                            cont = xlObj._getContent(xlObj.getActiveSheetIndex());
                            cont.find("td[class *='activecell']").removeClass("e-activecell");
                            cont.find("td[class *='focus']").removeClass("e-focusright e-focusbottom");
                            range = xlObj.swapRange([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]);
                            xlObj.getRange(range).addClass("e-ctrlselected");
                            selObj._focusRange(sheet._startCell, sheet._endCell, xlObj._selectionBorder);
                            xlObj.model.allowAutoFill && xlObj.XLDragFill.hideAutoFillElement();
                            return;
                        }
                        else {
                            if (type === types.Row || selObj._rowhdrClick)
                                selObj.selectRows(sheet._startCell.rowIndex, sheet._endCell.rowIndex);
                            else if (type === types.Column || selObj._colhdrClick)
                                selObj.selectColumns(sheet._startCell.colIndex, sheet._endCell.colIndex);
                            else
                                selObj.selectRange(sheet._startCell, sheet._endCell, trgt);
                            if (sheet._isFreezed)
                                xlObj.XLFreeze._refreshSelection();
                        }
                    }
                    else if ($(trgt).parents(".e-rowheadercontent").length > 0)
                        if (selObj._colhdrClick || selObj._rowhdrClick) {
                            if (type === types.Column)
                                selObj.selectColumns(0, sheet.colCount - 1);
                            else
                                selObj.selectRows(sheet._startCell.rowIndex, sheet._endCell.rowIndex);
                            if (sheet._isFreezed)
                                xlObj.XLFreeze._refreshSelection();
                        }
                        else {
                            status = { position: "horizontal", action: "Decrement" };
                            selObj._scrollCalculation(sheetIdx, trgt, status);
                        }
                    else
                        return;
                }
            }
            else if (!ej.isNullOrUndefined(trgt.parentNode) && trgt.parentNode.tagName == "TH") {
                sheet._endCell = { rowIndex: 0, colIndex: trgt.parentNode.cellIndex };
                sheet._startCell = sheet._activeCell;
                if (sheet._isFreezed)
                    xlObj.XLFreeze._selectionScroll();
                selObj._processBoundary();
                if (selObj._colhdrClick || selObj._rowhdrClick) {
                    if (type === types.Row)
                        selObj.selectRows(0, sheet.rowCount - 1);
                    else
                        selObj.selectColumns(sheet._startCell.colIndex, sheet._endCell.colIndex);
                    if (sheet._isFreezed)
                        xlObj.XLFreeze._refreshSelection();
                }
                else {
                    status = { position: "vertical", action: "Decrement" };
                    selObj._scrollCalculation(sheetIdx, trgt, status);
                }
            }
            else if (imgElem.id.indexOf("sparkline") > 1 || imgElem.id.indexOf("chart") < 1 && (trgt.className.indexOf("e-hhandlespace") > -1 || trgt.className.indexOf("e-hhandle") > -1 || trgt.className.indexOf("e-hup") > -1 || trgt.className.indexOf("e-hdown") > -1)) {
                status = { position: "vertical", action: "Increment" };
                selObj._scrollCalculation(sheetIdx, trgt, status);
            }

            else if (imgElem.id.indexOf("chart") < 1 && (trgt.className.indexOf("e-vhandlespace") > -1 || trgt.className.indexOf("e-vhandle") > -1 || trgt.className.indexOf("e-vup") > -1 || trgt.className.indexOf("e-vdown") > -1)) {
                status = { position: "horizontal", action: "Increment" };
                selObj._scrollCalculation(sheetIdx, trgt, status);
            }
            else
                return;
        },

        _mouseUpHandler: function (e) {
            e.target = this._changeTargetWithOffset(e);
            var trgt, $trgt, mergeBtn, style, prctRange, cell, currcell, autofillRange, options, btnObj, moveEvt, endEvt, chngdTouch, prfmDragFill = true,
                xlObj = this, selObj = xlObj.XLSelection, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), range = sheet.selectedRange,
                sheetElement = xlObj.getSheetElement(sheetIdx), type = xlObj.model.selectionSettings.selectionType, scell = sheet._startCell, eCell = sheet._endCell,
                types = ej.Spreadsheet.SelectionType, cont = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"), isRibbonUpdated = false;
            if (!xlObj.XLEdit._isEdit)
                xlObj._setSheetFocus();
            if (xlObj._isTouchEvt) {
                endEvt = xlObj._getBrowserEvt("end");
                if (selObj._canTouchMove)
                    moveEvt = xlObj._getBrowserEvt("move");
                xlObj._isTouchMoveSel = false;
            }
            else {
                moveEvt = xlObj._getBrowserEvt('move', true);
                endEvt = xlObj._getBrowserEvt('end', true);
                endEvt += " mouseleave"
            }
            if (moveEvt)
                xlObj._off(xlObj.element, moveEvt, selObj._mouseMoveHandler);
            xlObj._off($(document), endEvt, selObj._mouseUpHandler);
            if (xlObj._isTouchEvt) {
                if (!selObj._aFillDownHandler && xlObj._isTouchScroll || (!selObj._canTouchMove && !xlObj._isUniqueTarget(xlObj._touchArgs, e))) {
                    selObj._canTouchMove = xlObj._isTouchScroll = false;
                    return;
                }
                selObj._canTouchMove = xlObj._isTouchScroll = false;
                chngdTouch = xlObj._getOriginalEvt(e);
                trgt = document.elementFromPoint(chngdTouch.clientX, chngdTouch.clientY);
                if (!trgt) {
                    if (this.model.allowAutoFill)
                        this.XLDragFill.positionAutoFillElement();
                    return;
                }
            }
            trgt = trgt || e.target, $trgt = $(trgt);
            if (trgt.tagName == "TD" || (trgt.tagName == "INPUT" && !$trgt.parents(".e-formulabar").length) || selObj._aFillDownHandler) {
                if ($trgt.parents(".e-rowheadercontent").length) {
                    selObj._isOutsideBordering = selObj._isGridBordering = false;
                    cont.removeClass("e-ss-drwbrdrcursor e-ss-drwbrdrgridcursor").addClass("e-ss-cursor");
                }
                xlObj._preventctrlkey = e.ctrlKey;
                if (xlObj.XLEdit._isFormulaEdit) {
                    cont.find("td[class *='border']").removeClass(xlObj._ctrlFormulaBorder.join(" ").replace(/,/g, " "));
                    if (e.ctrlKey) {
                        xlObj._dEndCell = xlObj._getCellIdx(trgt);
                        selObj._processFormulaRange(xlObj._formulaBorder);
                    }
                    else {
                        selObj._clearBorder(xlObj._formulaBorder.join(" ").replace(/,/g, " ") + " " + xlObj._ctrlFormulaBorder.join(" ").replace(/,/g, " "));
                        xlObj._ctrlKeyCount = 0;
                        xlObj._dEndCell = xlObj._getCellIdx(trgt);
                        selObj._processFormulaRange(xlObj._formulaBorder);
                        xlObj._formulaRange = [];
                    }
                    xlObj._formulaRange.push(xlObj._getProperAlphaRange(sheetIdx, xlObj._dStartCell.rowIndex, xlObj._dStartCell.colIndex, xlObj._dEndCell.rowIndex, xlObj._dEndCell.colIndex));
                    return;
                }
                else if (selObj._aFillDownHandler) {
                    currcell = trgt.tagName === "TD" ? xlObj._getCellIdx(trgt) : xlObj._dautoFillCell;
                    if (xlObj.model.allowAutoFill)
                        autofillRange = xlObj.XLDragFill._getAutoFillRange(currcell);
                    if (!autofillRange || !autofillRange.fillRange) {
                        selObj._aFillDownHandler = false;
                        xlObj.XLDragFill && xlObj.XLDragFill.positionAutoFillElement();
                        return;
                    }
                    prctRange = xlObj.swapRange(autofillRange.fillRange);
                    if (xlObj.model.allowLockCell && xlObj.getSheet(sheetIdx).isSheetProtected) {
                        if (xlObj._isPropExists([prctRange], "isLocked", sheetIdx))
                            prfmDragFill = false;
                    }
                    if (prfmDragFill && xlObj._isPropExists([prctRange], "isReadOnly", sheetIdx))
                        prfmDragFill = false;
                    if (!prfmDragFill) {
                        selObj._aFillDownHandler = false;
                        xlObj.XLSelection.selectRange(scell, eCell);
                        isRibbonUpdated = true;
                        xlObj.XLDragFill.positionAutoFillElement();
                        return;
                    }
                    else if ("direction" in autofillRange) {
                        xlObj._pStartCell = sheet._startCell;
                        xlObj._pEndCell = sheet._endCell;
                        xlObj._pFillCell = currcell;
                        if (xlObj.inRange(sheet.selectedRange, currcell.rowIndex, currcell.colIndex))
                            xlObj.clearRangeData(null, null, $(selObj.getSelectedCells()).not(".e-autofillcell"));
                        else if (xlObj.model.allowAutoFill)
                            xlObj.XLDragFill.autoFill({ dataRange: sheet.selectedRange, fillRange: autofillRange.fillRange, direction: autofillRange.direction, fillType: xlObj.model.autoFillSettings.fillType });
                        sheet._startCell = autofillRange.startCell;
                        sheet._endCell = autofillRange.endCell;
                    }
                    else
                        selObj._aFillDownHandler = false;
                    selObj.refreshSelection(xlObj.swapRange([autofillRange.startCell.rowIndex, autofillRange.startCell.colIndex, autofillRange.endCell.rowIndex, autofillRange.endCell.colIndex]));
                }
                else if (selObj._isOutsideBordering || selObj._isGridBordering) {  // for border drawing
                    style = (xlObj._borderStyle == "double") ? "3px " + xlObj._borderStyle + " " + xlObj._borderColor : "1px " + xlObj._borderStyle + " " + xlObj._borderColor;
                    if (selObj._isRightClick)
                        sheet._endCell = sheet._startCell;
                    else {
                        sheet._startCell = sheet._activeCell;
                        sheet._endCell = xlObj._getCellIdx(trgt);
                        selObj._processBoundary();
                    }
                    if ($trgt.parents(".e-spreadsheetcontentcontainer").length) {
                        options = { top: style, right: style, bottom: style, left: style };
                        if (selObj._isGridBordering)
                            options.isGridBorder = true;
                        xlObj.XLFormat.applyBorder(options, xlObj.swapRange([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]));
                        selObj._cleanUp(true);
                    }
                    else
                        return;
                }
                else {
                    if (trgt.tagName == "INPUT" && $trgt.parents("tr").length)
                        sheet._endCell = selObj._isRightClick ? sheet._startCell : xlObj._getCellIdx($trgt.parents("td")[0]);
                    else {
                        if (selObj._isRightClick)
                            sheet._endCell = sheet._startCell;
                        else {
                            sheet._startCell = sheet._activeCell;
                            sheet._endCell = xlObj._getCellIdx(trgt);
                            selObj._processBoundary();
                        }
                    }
                    if ($trgt.parents(".e-spreadsheetcontentcontainer").length) {
                        if (e.ctrlKey && xlObj.model.selectionSettings.selectionType === ej.Spreadsheet.SelectionType.Default && xlObj.model.selectionSettings.selectionUnit === ej.Spreadsheet.SelectionUnit.MultiRange) {
                            cont.find("td[class *='activecell']").removeClass("e-activecell");
                            cont.find("td[class *='focus']").removeClass("e-focustop e-focusleft");
                            cont.find("td[class *='ctrlselected']").removeClass("e-ctrlselected");
                            range = xlObj.swapRange([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]);
                            xlObj.getRange(range).addClass("e-selected");
                            xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex).addClass('e-activecell');
                            selObj._focusRange(sheet._startCell, sheet._endCell, xlObj._selectionBorder);
                            if (xlObj.model.allowAutoFill)
                                xlObj.XLDragFill.hideAutoFillElement();
                            xlObj.getSheet(sheetIdx)._selectedCells.push(xlObj._getSelectedRange(xlObj.getSheet(sheetIdx)._startCell, xlObj.getSheet(sheetIdx)._endCell));  // consider
                            if (xlObj.model.showRibbon && xlObj.model.allowComments && sheetElement.find(".e-selected.e-commentcell").length)
                                xlObj.XLRibbon._enableButtons(["Review_Comments_DeleteComment"], "ejButton");
                            return;
                        }
                        else {
                            if (type === types.Row || selObj._rowhdrClick)
                                selObj.selectRows(sheet._startCell.rowIndex, sheet._endCell.rowIndex);
                            else if (type === types.Column || selObj._colhdrClick)
                                selObj.selectColumns(sheet._startCell.colIndex, sheet._endCell.colIndex);
                            else
                                selObj.selectRange(sheet._startCell, sheet._endCell, trgt);
                            isRibbonUpdated = true;
                            if (sheet._isFreezed)
                                xlObj.XLFreeze._refreshSelection();
                        }
                    }
                    else if ($trgt.parents(".e-rowheadercontent").length) {
                        if (selObj._colhdrClick || selObj._rowhdrClick) {
                            if (type === types.Column)
                                selObj.selectColumns(0, sheet.colCount - 1);
                            else
                                selObj.selectRows(sheet._startCell.rowIndex, sheet._endCell.rowIndex);
                            isRibbonUpdated = true;
                            selObj._hdrClick = false;
                        }
                        selObj._isOutsideBordering = selObj._isGridBordering = false;
                        cont.removeClass("e-ss-drwbrdrcursor e-ss-drwbrdrgridcursor").addClass("e-ss-cursor");
                    }
                    else
                        return;
                }
                if (trgt.tagName === "TD" && xlObj.model.showRibbon) {
                    btnObj = $("#" + xlObj._id + "_Ribbon_clearfilter").data("ejButton");
                    if (btnObj)
                        xlObj.XLRibbon._changeClrFltrStatus(btnObj, "button", xlObj._getCellIdx(trgt));
                }
            }
            else if (!selObj._aFillDownHandler && !ej.isNullOrUndefined(trgt.parentNode) && trgt.parentNode.tagName == "TH") {
                sheet._startCell = sheet._activeCell;
                sheet._endCell = selObj._isRightClick ? sheet._startCell : { rowIndex: 0, colIndex: trgt.parentNode.cellIndex };
                selObj._processBoundary();
                if (selObj._colhdrClick || selObj._rowhdrClick) {
                    if (type === types.Row)
                        selObj.selectRows(0, sheet.rowCount - 1);
                    else
                        selObj.selectColumns(sheet._startCell.colIndex, sheet._endCell.colIndex);
                    isRibbonUpdated = true;
                }
                selObj._isOutsideBordering = selObj._isGridBordering = false;
                cont.removeClass("e-ss-drwbrdrcursor e-ss-drwbrdrgridcursor").addClass("e-ss-cursor");
            }
            else if (typeof trgt.className != "object" && trgt.className && trgt.className.indexOf("e-spreadsheetcolumnheader") > -1) {
                selObj.selectSheet(true);
                selObj._isOutsideBordering = selObj._isGridBordering = false;
                cont.removeClass("e-ss-drwbrdrcursor e-ss-drwbrdrgridcursor").addClass("e-ss-cursor");
            }
            if (xlObj.model.allowCellFormatting && xlObj.XLFormat._formatEnable)
                xlObj.XLFormat._fPMouseUp(e);
            if (xlObj.model.showRibbon && !isRibbonUpdated)
                xlObj.XLEdit._isEdit ? xlObj.XLRibbon._disableRibbonIcons() : xlObj.XLRibbon._updateRibbonIcons();
            if (xlObj.model.allowAutoFill && !selObj._isOutsideBordering && !selObj._isGridBordering)
                xlObj.XLDragFill.positionAutoFillElement(selObj._aFillDownHandler);
            selObj._isRightClick = selObj._aFillDownHandler = false;
            selObj._colhdrClick = selObj._rowhdrClick = false;
            if (xlObj.model.showRibbon) {
                mergeBtn = $("#" + xlObj._id + "_Ribbon_merge").data("ejSplitButton");
                if (!ej.isNullOrUndefined(mergeBtn) && (xlObj.model.allowLockCell && !sheet.isSheetProtected))
                    xlObj.XLRibbon._isDirtySelect ? mergeBtn.option("enabled", false) : mergeBtn.option("enabled", true);
            }
            if (xlObj.model.allowEditing && this.XLEdit._isEdit) {
                cell = xlObj.getSheet(sheetIdx)._startCell;
                xlObj.getCell(cell.rowIndex, cell.colIndex).find('.e-ss-input').focus();
            }
        },

        _processBoundary: function () {
            var i, status, cell, cells, mergeIdx, idx, arr = [], xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                sheet = xlObj.getSheet(sheetIdx), sCell = sheet._startCell, eCell = sheet._endCell,
                range = xlObj.swapRange([sCell.rowIndex, sCell.colIndex, eCell.rowIndex, eCell.colIndex]);
            sheet._startCell = { rowIndex: range[0], colIndex: range[1] };
            sheet._endCell = { rowIndex: range[2], colIndex: range[3] };
            cells = xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[0], colIndex: range[3] });// top
            cells = cells.concat(xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[3] }, { rowIndex: range[2], colIndex: range[3] }));// right
            cells = cells.concat(xlObj._getSelectedRange({ rowIndex: range[2], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }));// bottom
            cells = cells.concat(xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[1] }));// left
            i = cells.length;
            while (i--) {
                cell = cells[i];
                mergeIdx = xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "mergeIdx", sheetIdx);
                idx = (cell.rowIndex + ":" + cell.colIndex).toString();
                status = xlObj.hasSpan(cell) && arr.indexOf(idx) === -1 && (arr.push(idx), this._updateRange(cell, range));
                if (mergeIdx) {
                    idx = (mergeIdx.rowIndex + ":" + mergeIdx.colIndex).toString();
                    if (arr.indexOf(idx) === -1) {
                        arr.push(idx);
                        status = this._updateRange(mergeIdx, range);
                    }
                }
                if (status)
                    break;
            }
            if (status)
                this._processBoundary();
        },

        _updateRange: function (cell, range) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), temp = range.slice(0),
                mergeRange = xlObj._getMergedIdx(cell.rowIndex, cell.colIndex), minr = cell.rowIndex,
                minc = cell.colIndex, maxr = mergeRange.rowIndex, maxc = mergeRange.colIndex;
            minr < range[0] && (range[0] = minr);
            minc < range[1] && (range[1] = minc);
            maxr > range[2] && (range[2] = maxr);
            maxc > range[3] && (range[3] = maxc);
            if (range[0] != temp[0] || range[1] != temp[1] || range[2] != temp[2] || range[3] != temp[3]) {
                sheet._startCell = { rowIndex: range[0], colIndex: range[1] };
                sheet._endCell = { rowIndex: range[2], colIndex: range[3] };
                return true;
            }
        },

        selectRange: function (range, endCell, trgt, isbgSelect) {
            var args, cells, cnt, currRange, isTrue, isUndefined, isVirScroll, prevRange, sheet, sheetIdx, startCell = range,
                xlObj = this.XLObj, selected = "e-selected";
            if (!xlObj.model.allowSelection)
                return;
            if (!xlObj._isObject(range)) {
                range = xlObj._getRangeArgs(range, "object");
                startCell = { rowIndex: range[0], colIndex: range[1] };
                endCell = { rowIndex: range[2], colIndex: range[3] };
            }
            sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx);
            isVirScroll = xlObj.model.scrollSettings.allowVirtualScrolling;
            if (isVirScroll)
                sheet._goToCollection = { multiple: false, selected: [] };
            prevRange = sheet.selectedRange;
            currRange = xlObj.swapRange([startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]);
            isTrue = !(xlObj.isImport || xlObj.model.isImport) && (!sheet._isImported || sheet._isLoaded);
            if (isTrue && xlObj.model.beforeCellSelect) {
                args = { prevRange: prevRange, currRange: currRange, sheetIdx: sheetIdx };
                if (trgt)
                    args.target = trgt;
                if (!xlObj._intrnlReq && xlObj._trigger("beforeCellSelect", args))
                    return false;
            }
            xlObj._dStartCell = startCell;
            xlObj._dEndCell = endCell;
            sheet.selectedRange = currRange.slice(0);
            !xlObj._isScrolling && this._cleanUp(false);
            if (xlObj.model.scrollSettings.allowScrolling && isVirScroll && sheet._isColSelected) {
                if (sheet._virtualRowIdx.indexOf(currRange[0]) === -1)
                    currRange[0] = sheet._virtualRowIdx[0];
                if (sheet._virtualRowIdx.indexOf(currRange[2]) === -1)
                    currRange[2] = sheet._virtualRowIdx[sheet._virtualRowIdx.length - 1];
            }
            isUndefined = xlObj.isUndefined(isbgSelect);
            if (isUndefined) {
                cells = xlObj.getRange(currRange);
                cnt = cells.length;
                if (cnt) {
                    while (cnt--)
                        xlObj.addClass(cells[cnt], selected);
                }
            }
            if (!xlObj.inRange(sheet.selectedRange, sheet._activeCell.rowIndex, sheet._activeCell.colIndex)) // to set first cell as active cell #default
                sheet._activeCell = { rowIndex: sheet.selectedRange[0], colIndex: sheet.selectedRange[1] };
            sheet._activeCell = xlObj._getMergeParent(sheet._activeCell.rowIndex, sheet._activeCell.colIndex);
            if (xlObj._isRowViewable(sheetIdx, sheet._activeCell.rowIndex))
                xlObj.addClass(xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex)[0], "e-activecell");
            if (isUndefined) {
                this._focusRange(startCell, endCell, xlObj._selectionBorder);
                this._highlightHeader(currRange);
            }
            sheet._selectedCells = xlObj._getSelectedRange(startCell, endCell);
            if (xlObj.model.allowFormulaBar && !xlObj.XLEdit._isFormulaEdit)
                xlObj.updateFormulaBar();
            xlObj.XLDragFill && xlObj.XLDragFill.positionAutoFillElement();
            if (isUndefined && (xlObj.model.enableContextMenu || xlObj.model.showRibbon))
                xlObj.XLRibbon._dirtySelect(cells);
            xlObj._isMultiSelect = true;
            if (xlObj.model.showRibbon && !xlObj._isScrolling)
                xlObj.XLRibbon._updateRibbonIcons();
            if (!xlObj._isSheetNavigate)
                sheet._isEmptyActiveCell = sheet._isRangeSelected = sheet._isRowSelected = sheet._isColSelected = sheet._isSheetSelected = false;
            if (isTrue && xlObj.model.cellSelected) {
                args = { selectedRange: sheet.selectedRange, target: trgt, sheetIdx: sheetIdx, activeCell: xlObj.getActiveCell() };
                if (!xlObj._intrnlReq)
                    xlObj._trigger("cellSelected", args);
            }
        },

        selectRow: function (rowIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex());
            if (!xlObj.model.allowSelection)
                return;
            sheet._startCell = { rowIndex: rowIdx, colIndex: 0 };
            sheet._endCell = { rowIndex: rowIdx, colIndex: sheet.colCount - 1 };
            this.selectRange(sheet._startCell, sheet._endCell);
            this._selectRow(xlObj._getRowIdx(rowIdx), "e-rowselected");
            sheet._isRowSelected = true;
            this._isRowSelected = true;
        },

        selectRows: function (startIndex, endIndex) {
            var sheet, xlObj = this.XLObj;
            if (!xlObj.model.allowSelection)
                return;
            sheet = xlObj.getSheet(xlObj.getActiveSheetIndex());
            sheet._startCell = { rowIndex: startIndex, colIndex: 0 };
            sheet._endCell = { rowIndex: endIndex, colIndex: sheet.colCount - 1 };
            this.selectRange(sheet._startCell, sheet._endCell);
            this._markHeaderSelection([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex], "row");
            sheet._isRowSelected = true;
            this._isRowSelected = true;
        },

        selectColumn: function (colIdx) {
            var sheet, xlObj = this.XLObj;
            if (!xlObj.model.allowSelection)
                return;
            sheet = xlObj.getSheet(xlObj.getActiveSheetIndex());
            sheet._startCell = { rowIndex: 0, colIndex: colIdx };
            sheet._endCell = { rowIndex: sheet.rowCount - 1, colIndex: colIdx };
            this.selectRange(sheet._startCell, sheet._endCell);
            this._selectColumn(colIdx, "e-colselected");
            sheet._isColSelected = true;
            this._isColSelected = true;
        },

        selectColumns: function (startIndex, endIndex) {
            var sheet, xlObj = this.XLObj;
            if (!xlObj.model.allowSelection)
                return;
            sheet = xlObj.getSheet(xlObj.getActiveSheetIndex());
            sheet._startCell = { rowIndex: 0, colIndex: startIndex };
            sheet._endCell = { rowIndex: sheet.rowCount - 1, colIndex: endIndex };
            this.selectRange(sheet._startCell, sheet._endCell);
            this._markHeaderSelection([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex], "column");
            sheet._isColSelected = true;
            this._isColSelected = true;
        },

        selectSheet: function (isMouse) {
            var rowIdx, colIdx, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), actCell = xlObj.getActiveCell();
            if (!xlObj.model.allowSelection)
                return;
            if (isMouse) {
                rowIdx = sheet._topRow.idx;
                colIdx = sheet._leftCol.idx;
                if (actCell.rowIndex != rowIdx || actCell.colIndex != colIdx) {
                    sheet._activeCell = { rowIndex: sheet._topRow.idx, colIndex: sheet._leftCol.idx };
                    xlObj.XLScroll.scrollToCell(xlObj._getRangeArgs([rowIdx, colIdx, rowIdx, colIdx]));
                }
            }
            sheet._startCell = { rowIndex: 0, colIndex: 0 };
            sheet._endCell = { rowIndex: sheet.rowCount - 1, colIndex: sheet.colCount - 1 };
            this.selectRange(sheet._startCell, sheet._endCell);
            xlObj.element.find(".e-spreadsheetcolumnheader").addClass("e-sheetselected");
            sheet._isSheetSelected = true;
        },

        refreshSelection: function (range) {
            var xlObj = this.XLObj;
            range = xlObj._getRangeArgs(range, "object")
            var sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), minr = range[0], minc = range[1], maxr = range[2], maxc = range[3];
            if (sheet._isRowSelected)
                this.selectRows(minr, maxr);
            else if (sheet._isColSelected)
                this.selectColumns(minc, maxc);
            else if (sheet._isSheetSelected)
                this.selectSheet();
            else
                this.selectRange({ rowIndex: minr, colIndex: minc }, { rowIndex: maxr, colIndex: maxc });
        },

        getSelectedCells: function (sheetIdx) {
            return this.XLObj._getContent(this.XLObj._getSheetIndex(sheetIdx))[0].querySelectorAll("td.e-selected");
        },

        _select: function (args, classname) {
            var elem = this.XLObj.getCell(args.rowIndex, args.colIndex);
            if (elem)
                elem.addClass(classname);
        },

        _selectRow: function (args, classname) {
            var elem = this.XLObj._getJSSheetRowHeaderContent(this.XLObj.getActiveSheetIndex()).find("td:eq(" + args + ")");
            if (elem)
                elem.addClass(classname);
        },

        _selectRows: function (startRIndex, endRIndex, classname) {
            var len, sRIndex, eRIndex, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                sheet = xlObj.getSheet(sheetIdx), elems = xlObj._getJSSheetRowHeaderContent(sheetIdx).find("td");
            sRIndex = xlObj._getRowIdx(startRIndex);
            eRIndex = xlObj._getRowIdx(endRIndex);
            if (sRIndex === -1) {
                if (startRIndex < sheet._virtualRowIdx[0])
                    sRIndex = 0;
                else
                    return;
            }
            if (eRIndex === -1) {
                len = sheet._virtualRowIdx.length - 1;
                if (endRIndex > sheet._virtualRowIdx[len])
                    eRIndex = len;
                else
                    return;
            }
            elems = (sRIndex !== eRIndex) ? elems.slice(sRIndex, eRIndex + 1) : elems.eq(eRIndex);
            len = elems.length;
            if (len) {
                while (len--)
                    xlObj.addClass(elems[len], classname);
            }
        },


        _selectColumn: function (args, classname) {
            var elem = this.XLObj._getJSSheetHeader(this.XLObj.getActiveSheetIndex()).find("th:eq(" + args + ")");
            if (elem)
                elem.addClass(classname);
        },

        _selectColumns: function (startCIndex, endCIndex, classname) {
            var i, xlObj = this.XLObj, elems = xlObj._getJSSheetHeader(xlObj.getActiveSheetIndex()).find("th");
            elems = (endCIndex !== startCIndex) ? elems.slice(startCIndex, endCIndex + 1) : elems.eq(endCIndex);
            i = elems.length;
            if (i) {
                while (i--)
                    xlObj.addClass(elems[i], classname);
            }
        },

        _focusBorder: function (startcell, endcell, classes) {  // consider
            var xlObj = this.XLObj, range = xlObj.swapRange([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]),
                minr = range[0], minc = range[1], maxr = range[2], maxc = range[3];
            if (minr)
                xlObj.getRange([minr - 1, minc, minr - 1, maxc]).addClass(classes[1]); // top, original minr -1 in 3rd args, minc in 2nd args                            
            xlObj.getRange([minr, maxc, maxr, maxc]).addClass(classes[0]); // right
            xlObj.getRange([maxr, minc, maxr, maxc]).addClass(classes[1]); // bottom
            if (minc)
                xlObj.getRange([minr, minc - 1, maxr, minc - 1]).addClass(classes[0]); // left, original is minc - 1 in 2nd args, maxr in 3rd args
        },

        _focusRange: function (startcell, endcell, border) {
            var elem, i = 4, xlObj = this.XLObj, elems = [xlObj.getFocusTopElem(), xlObj.getFocusRightElem(), xlObj.getFocusBottomElem(), xlObj.getFocusLeftElem()],
                classes = ["e-focustop ", "e-focusright ", "e-focusbottom ", "e-focusleft "];
            while (i--) {
                elem = elems[i][0];
                xlObj._removeClass(elem);
                xlObj.addClass(elem, classes[i] + border[i]);
            }
            this._refreshBorder(xlObj.swapRange([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]));
        },

        _refreshBorder: function (range) {
            range = range ? range : this.XLObj.getSheet().selectedRange;
            var type, time, bleft, lleft, ttop, tleft, hide = "e-hide", i = 4, minr = range[0], minc = range[1], xlObj = this.XLObj, focusInfo = this._focusInfo(range),
                topElem = xlObj.getFocusTopElem(), rightElem = xlObj.getFocusRightElem(), bottomElem = xlObj.getFocusBottomElem(),
                leftElem = xlObj.getFocusLeftElem(), elems = [topElem, rightElem, bottomElem, leftElem], ltop = ttop = focusInfo.topLeft.top,
                twid = (focusInfo.topRight.left + focusInfo.topRight.width) - focusInfo.topLeft.left,
                rtop = focusInfo.topRight.top, rleft = focusInfo.topRight.left + focusInfo.topRight.width, rhgt = (focusInfo.bottomRight.top + focusInfo.bottomRight.height) - rtop,
                btop = focusInfo.bottomLeft.top + focusInfo.bottomLeft.height, bwid = (focusInfo.bottomRight.left + focusInfo.bottomRight.width) - focusInfo.bottomLeft.left, lhgt = btop - ttop;
            bleft = lleft = tleft = focusInfo.topLeft.left;
            while (i--)
                xlObj._removeClass(elems[i][0], hide);
            if (xlObj.model.selectionSettings.enableAnimation) {
                type = xlObj.model.selectionSettings.animationType;
                time = xlObj.model.selectionSettings.animationTime;
                minr ? topElem.animate({ top: ttop.toString(), left: tleft.toString(), width: twid.toString() }, time, type) : topElem.addClass(hide);
                rightElem.animate({ top: rtop.toString(), left: rleft.toString(), height: rhgt.toString() }, time, type);
                bottomElem.animate({ top: btop.toString(), left: bleft.toString(), width: bwid.toString() }, time, type);
                minc ? leftElem.removeClass(hide).animate({ top: ltop.toString(), left: lleft.toString(), height: lhgt.toString() }, time, type) : leftElem.addClass(hide);
            }
            else {
                if (topElem) {
                    if (minr) {
                        topElem[0].style.top = ttop + "px";
                        topElem[0].style.left = tleft + "px";
                        topElem[0].style.width = twid + "px";
                    }
                    else
                        topElem.addClass(hide)
                }
                if (rightElem) {
                    rightElem[0].style.top = rtop + "px";
                    rightElem[0].style.left = rleft + "px";
                    rightElem[0].style.height = rhgt + "px";
                }
                if (bottomElem) {
                    bottomElem[0].style.top = btop + "px";
                    bottomElem[0].style.left = bleft + "px";
                    bottomElem[0].style.width = bwid + "px";
                }
                if (leftElem) {
                    if (minc) {
                        leftElem[0].style.top = ltop + "px";
                        leftElem[0].style.left = lleft + "px";
                        leftElem[0].style.height = lhgt + "px";
                    }
                    else
                        leftElem.addClass(hide)
                }
            }
        },

        _focusInfo: function (range) {
            var obj = {}, minr = range[0], minc = range[1], maxr = range[2], maxc = range[3], xlObj = this.XLObj;
            obj.topLeft = xlObj._getCellInfo({ rowIndex: minr, colIndex: minc });
            obj.topRight = xlObj._getCellInfo((minc === maxc) ? { rowIndex: minr, colIndex: maxc } : xlObj._getMergedIdx(minr, maxc));
            obj.bottomLeft = xlObj._getCellInfo({ rowIndex: maxr, colIndex: minc });
            obj.bottomRight = xlObj._getCellInfo(xlObj._getMergedIdx(maxr, maxc));
            return obj;
        },

        _highlightHeader: function (range) {
            this._selectRows(range[0], range[2], "e-rowhighlight");
            this._selectColumns(range[1], range[3], "e-colhighlight");
        },

        _hideShowSelElem: function (dsply) {
            var xlObj = this.XLObj, method = (dsply === "block") ? "_removeClass" : "addClass";
            if (!xlObj.model.allowSelection)
                return;
            xlObj[method](xlObj.getAutoFillElem()[0], "e-hide");
            xlObj[method](xlObj.getFocusBottomElem()[0], "e-hide");
            xlObj[method](xlObj.getFocusTopElem()[0], "e-hide");
            xlObj[method](xlObj.getFocusLeftElem()[0], "e-hide");
            xlObj[method](xlObj.getFocusRightElem()[0], "e-hide");
        },

        _markHeaderSelection: function (range, type) {
            var i, j, xlObj = this.XLObj;
            range = xlObj.swapRange(range);
            i = range[0];
            if (type === "row") {
                j = range[2];
                while (i <= j) {
                    if (xlObj._isRowViewable(xlObj.getActiveSheetIndex(), i))
                        this._selectRow(xlObj._getRowIdx(i), "e-rowselected");
                    i++;
                }
            }
            else {
                i = range[1];
                j = range[3];
                while (i <= j) {
                    this._selectColumn(i, "e-colselected");
                    i++;
                }
            }
        },

        _processFormulaRange: function (border) {
            var alpharange, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), scell = xlObj._dStartCell, ecell = xlObj._dEndCell,
                editcell = xlObj._getContent(sheetIdx).find(".e-editedcell");
            this._focusBorder(scell, ecell, border[xlObj._ctrlKeyCount % 6]);
            if (xlObj.model.allowAutoFill) {
                alpharange = xlObj._getAlphaRange(sheetIdx, scell.rowIndex, scell.colIndex, ecell.rowIndex, ecell.colIndex);
                xlObj.XLDragFill.hideAutoFillElement();
                xlObj.XLEdit._updateFormulaCellRange(alpharange);
            }
            xlObj.XLEdit._isCellEdit ? xlObj.XLEdit._focusElements(editcell) : xlObj._getInputBox().focus();
        },


        _scrollCalculation: function (sheetIdx, target, status) {
            var interval, reachedEnd, hScroll, vScroll, xlObj = this.XLObj, sheet, diff;
            if (xlObj.model.scrollSettings.allowVirtualScrolling)
                return;
            sheet = xlObj.getSheet(xlObj.getActiveSheetIndex());
            xlObj.XLSelection._isEndReached = true;
            interval = setInterval(function () {
                hScroll = xlObj.XLScroll._hScroller(sheetIdx);
                vScroll = xlObj.XLScroll._vScroller(sheetIdx);
                if (!xlObj.XLSelection._isEndReached) {
                    clearInterval(interval);
                    return;
                }
                if (status.position === "horizontal") {
                    if (status.action == "Increment") {
                        reachedEnd = Math.ceil(parseFloat(hScroll.element.find(".e-hhandle").css('left'))) + Math.ceil(parseFloat(hScroll.element.find(".e-hhandle").width())) >= hScroll.element.find(".e-hhandlespace").width() - 2;
                        if (reachedEnd) {
                            if (xlObj.model.scrollSettings.scrollMode != ej.Spreadsheet.scrollMode.Normal)
                                xlObj.XLScroll._scrollX(sheetIdx);
                            else
                                clearInterval(interval);
                        }
                        else
                            hScroll.scroll(hScroll.value() + sheet.columnWidth, true);
                        if (!xlObj.XLShape._shapeROStart && !xlObj.XLShape._shapeRSStart)
                            sheet._endCell.colIndex = sheet.colCount - 1;
                    }
                    else {
                        diff = hScroll.value() - sheet.columnWidth;
                        if (diff < 0)
                            diff = 0;
                        if (hScroll.value() >= 0)
                            hScroll.scroll(diff, true);
                        if (xlObj.XLSelection._aFillDownHandler)
                            sheet._endCell.colIndex = sheet._leftCol.idx;
                        if (sheet._frozenColumns > 1) {
                            sheet._startCell = sheet._activeCell;
                            sheet._endCell.rowIndex = (sheet.selectedRange[2] === sheet._startCell.rowIndex) ? sheet.selectedRange[0] : sheet.selectedRange[2];
                            sheet._endCell.colIndex = sheet._fleftColIdx;
                        }
                    }
                }
                else if (status.position === "vertical") {
                    if (status.action == "Increment") {
                        reachedEnd = Math.ceil(parseFloat(vScroll.element.find(".e-vhandle").css('top'))) + Math.ceil(parseFloat(vScroll.element.find(".e-vhandle").height())) >= vScroll.element.find(".e-vhandlespace").height() - 2;
                        if (reachedEnd) {
                            if (xlObj.model.scrollSettings.scrollMode != ej.Spreadsheet.scrollMode.Normal)
                                xlObj.XLScroll._scrollY(sheetIdx);
                            else
                                clearInterval(interval);
                        }
                        else
                            vScroll.scroll(vScroll.value() + xlObj.model.rowHeight, true);
                        if (!xlObj.XLShape._shapeROStart && !xlObj.XLShape._shapeRSStart)
                            sheet._endCell.rowIndex = sheet.rowCount - 1;
                    }
                    else {
                        diff = vScroll.value() - xlObj.model.rowHeight;
                        if (diff < 0)
                            diff = 0;
                        if (vScroll.value() > 0)
                            vScroll.scroll(diff, true);
                        if (!xlObj.XLShape._shapeROStart && !xlObj.XLShape._shapeRSStart) {
                            if (sheet._topRow.idx < 1 && sheet._ftopRowIdx + 1 === sheet._frozenRows)
                                return;
                            sheet._startCell = sheet._activeCell;
                            sheet._endCell.rowIndex = sheet._frozenRows > 1 ? sheet._ftopRowIdx : sheet._topRow.idx - 1;
                            sheet._endCell.colIndex = sheet._frozenRows > 1 ? (sheet.selectedRange[3] === sheet._startCell.colIndex) ? sheet.selectedRange[1] : sheet.selectedRange[3] : target.parentNode.cellIndex;
                        }
                    }
                }
                if (!xlObj.XLShape._shapeROStart && !xlObj.XLShape._shapeRSStart) {
                    if (xlObj.XLSelection._aFillDownHandler)
                        xlObj.XLDragFill._selectAutoFillRange(null, sheet._endCell)
                    else
                        xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                }
            }, 200);
            if (xlObj._browserDetails.name === "msie" && xlObj._browserDetails.version === "8.0") {
                target.attachEvent("onmouseup", function () {
                    clearInterval(interval);
                });
                document.attachEvent("onmouseup", function () {
                    clearInterval(interval);
                });
            }
            else {
                target.addEventListener("mouseup", function () {
                    clearInterval(interval);
                });
                document.addEventListener("mouseup", function () {
                    clearInterval(interval);
                });
            }
        },

        _cleanUp: function (border) {
            var i, cells, isNormal = false, hide = "e-hide", xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), topElem = xlObj.getFocusTopElem(),
                sElem = xlObj.getSheetElement(sheetIdx), className = "e-activecell|e-selected|e-rowhighlight|e-colhighlight|e-rowselected|e-colselected|e-sheetselected";
            if (xlObj.model.allowAutoFill)
                xlObj.XLDragFill._autoFillCleanUp();
            if (sheet._isSheetSelected && !xlObj.model.scrollSettings.allowVirtualScrolling) {
                isNormal = true;
                sElem.detach();
            }
            cells = sElem.find(".e-selected,.e-rowselected,.e-colselected,.e-rowhighlight,.e-colhighlight,.e-sheetselected,.e-activecell");
            i = cells.length;
            while (i--)
                cells[i].className = cells[i].className.replace(new RegExp(className, "g"), '').replace(/ +/g, ' ');
            if (isNormal)
                xlObj.getMainPanel(sheetIdx).find(".e-spreadsheet-list").append(sElem);
            if (border && topElem) {
                xlObj.addClass(topElem[0], hide);
                xlObj.addClass(xlObj.getFocusRightElem()[0], hide);
                xlObj.addClass(xlObj.getFocusBottomElem()[0], hide);
                xlObj.addClass(xlObj.getFocusLeftElem()[0], hide);
            }
            sheet._selectedCells = [];
        },
        clearAll: function (skipBorder) {
            this._cleanUp(!skipBorder);
        },
        _clearBorder: function (classes) {
            var xlObj = this.XLObj;
            xlObj._getContent(xlObj.getActiveSheetIndex()).find("td[class *='border']").removeClass(classes);
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.filter = function (obj) {
        this.XLObj = obj;
        this._isSearchEdit = false;
        this._isDecimal = false;
        this._colName = "";
        this._colType = "";
        this._tableId = "";
    };

    ej.spreadsheetFeatures.filter.prototype = {
        //Filtering
        _renderExcelFilter: function () {
            var xlObj = this.XLObj, model = { instance: xlObj, showSortOptions: xlObj.model.allowSorting, maxFilterLimit: xlObj.model.sheets[xlObj.getActiveSheetIndex()].filterSettings.maxFilterChoices, filterHandler: ej.proxy(this._filterHandler, this), cancelHandler: ej.proxy(this._cancelHandler, this), customFilterHandler: ej.proxy(this._customFilterHandler, this), enableComplexBlankFilter: false, blankValue: "", interDeterminateState: true };
            xlObj._excelFilter = new ej.excelFilter(model);
            xlObj.element.append(ej.buildTag("div#" + xlObj._id + "_filter_custom.e-filterdlg" + ".e-" + xlObj._id + "-dlg", "", { display: 'none' }));
        },

        _customFilterHandler: function () {
            var xlObj = this.XLObj;
            if (this._isDecimal) {
                $("#" + xlObj._id + "number_CustomValue1").ejNumericTextbox("option", { decimalPlaces: 2 });
                $("#" + xlObj._id + "number_CustomValue2").ejNumericTextbox("option", { decimalPlaces: 2 });
            }
        },

        _renderFilterDialogs: function (type) {
            var xlObj = this.XLObj;
            if (document.getElementById(xlObj._id + "_filter_custom").className.indexOf("e-dialog") < 0)
                this._renderCustomFilter();
            xlObj._excelFilter.renderDialog(type);
            this._refreshCustomFilter(type);
            xlObj.element.find(".e-excelfilter.e-dlgcontainer").hide();
            $(document.body).append($("#" + xlObj._id + type + "_excelDlg"));
        },

        _createSelection: function (sheetIdx, endrowIndex, colIndex, filteredIndex) {
            var xlObj = this.XLObj, usedRow = xlObj.getSheet(sheetIdx).usedRange.rowIndex, endRowIdx = endrowIndex, x = 0, isHide, value2;
            for (var i = endrowIndex; i <= usedRow; i++) {
                isHide = xlObj.XLEdit.getPropertyValue(i, x, "isHide");
                value2 = xlObj.XLEdit.getPropertyValue(i, colIndex, "value2", sheetIdx);
                if (xlObj.XLEdit.getPropertyValue(i, colIndex, "tableName", sheetIdx))
                    break;
                if ((!isHide && !xlObj.XLEdit.getPropertyValue(i, colIndex, "isMHide") && !value2) && i >= endrowIndex)
                    return { endRowIndex: i, filteredIndex: filteredIndex };
                else if (!isHide && value2) {
                    endRowIdx = i + 1;
                    filteredIndex.push(i);
                }
                else
                    endRowIdx = endRowIdx;
            }
            return { endRowIndex: endRowIdx, filteredIndex: filteredIndex };
        },

        _getSelectedRangeData: function (startCell, endCell, tableId, cellIndex) {
            var temp, xlObj = this.XLObj, x = 0, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), filteredRangeIndex = [], columnName, i, j, cellData,
                selCellColor = [], color, cells, rangeData = [], container = xlObj._dataContainer, sheetData = container.sheets[sheetIdx], multiFltrIdx = xlObj.getSheet(sheetIdx)._multifilterIdx;
            if (tableId === -1)
                sheet.filterSettings.range = xlObj._generateHeaderText(multiFltrIdx[0] + 1) + startCell.rowIndex + ":" + xlObj._generateHeaderText(multiFltrIdx[multiFltrIdx.length - 1] + 1) + (endCell.rowIndex + 1);
            if (sheet._multipleFiltering)
                endCell.colIndex = sheet._multifilterIdx[sheet._multifilterIdx.length - 1];
            for (i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                temp = {};
                for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                    columnName = xlObj._generateHeaderText(j + 1);
                    if (i in sheetData) {
                        if (!(x in sheetData[i]) || (x in sheetData[i] && (ej.isNullOrUndefined(sheetData[i][x].isRHide) && ej.isNullOrUndefined(sheetData[i][x].isFHide)))) {
                            if (!(x in sheetData[i]) || (x in sheetData[i] && (ej.isNullOrUndefined(sheetData[i][x].isFilterHide) || (!ej.isNullOrUndefined(sheetData[i][x].isFilterHide) && sheetData[i][x].filterID === tableId)))) {
                                temp["idx"] = i;
                                if (i in sheetData && j in sheetData[i]) {
                                    cellData = sheetData[i][j];
                                    if (j === cellIndex) {
                                        color = xlObj.XLEdit.getPropertyValue(i, j, "formats");
                                        if (!ej.isNullOrUndefined(color)) {
                                            cells = { id: j, background: color["background-color"], foreground: color["color"] };
                                            selCellColor.push(cells);
                                        }
                                    }
                                    if (ej.isNullOrUndefined(container.sharedData[cellData.value]))
                                        temp[columnName] = "";
                                    else
                                        temp[columnName] = xlObj._isDateTime(container.sharedData[cellData.value]) ? cellData.value2 : container.sharedData[xlObj.isFormula(container.sharedData[cellData.value]) ? cellData.value2 : cellData.value];
                                }
                                else
                                    temp[columnName] = "";
                            }
                        }
                    }
                    if (!(i in sheetData) && i < endCell.rowIndex) {
                        temp["idx"] = i;
                        temp[columnName] = "";
                    }
                }
                if (xlObj.getObjectLength(temp) > 0) {
                    rangeData.push(temp);
                    filteredRangeIndex.push(i);
                }
            }
            sheet._selectedCellColors = selCellColor;
            sheet._selectedRange = { startRow: startCell.rowIndex, endRow: endCell.rowIndex, dataSourceIndexes: filteredRangeIndex };
            sheet.filterSettings.filteredRange = rangeData;
        },

        _getColumnType: function (sheetIdx, startRow, endRow, cellIndex) {
            var cellType = "string", value, type;
            for (var i = startRow; i < endRow; i++) {
                value = this.XLObj.XLEdit.getPropertyValue(i, cellIndex, "value", sheetIdx);
                type = this.XLObj.XLEdit.getPropertyValue(i, cellIndex, "type", sheetIdx);
                if (type == "text" || (!$.isNumeric(value))) {
                    cellType = "string";
                    return cellType;
                }
                else {
                    if (!this._isDecimal)
                        this._isDecimal = ((value % 1) != 0);
                    cellType = "number";
                }
            }
            return cellType;
        },

        _getColumnByField: function (sheetIdx, field) {
            var xlObj = this.XLObj, column, sheet = xlObj.getSheet(sheetIdx);
            for (column = 0; column < sheet.columns.length; column++)
                if (sheet.columns[column]["field"] === field)
                    break;
            return column === sheet.columns.length ? null : sheet.columns[column];
        },

        _checkEmptyText: function (sheetIdx) {
            var xlObj = this.XLObj, selectedCell = xlObj.model.sheets[sheetIdx]._selectedCells;
            for (var i = 0, len = selectedCell.length; i < len; i++) {
                if (!ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(selectedCell[i].rowIndex, selectedCell[i].colIndex, "value", sheetIdx)))
                    return true;
            }
            xlObj._showAlertDlg("Alert", "Alert", null, 440);
            return false;
        },

        _getFilterIcon: function () {
            var filterIcon = ej.buildTag("span .e-icon", "", {});
            filterIcon.addClass("e-spanfilter e-filterspan e-ssfilter");
            return filterIcon;
        },

        filterByActiveCell: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), value;
            if (!xlObj.model.allowFiltering || xlObj.model.isReadOnly)
                return;
            var activeCell = xlObj.model.sheets[sheetIdx]._activeCell, activeElem = xlObj.getCell(activeCell.rowIndex, activeCell.colIndex), selCells = xlObj.model.sheets[sheetIdx]._selectedCells;
            if (this._checkEmptyText(sheetIdx)) {
                if (activeElem.find("span").is('.e-ssfiltered, .e-ssfilter, .e-ssfilter-asc, .e-ssfiltered-asc, .e-ssfilter-dsc, .e-ssfiltered-dsc'))
                    xlObj._showAlertDlg("Alert", "HeaderAlert", "", 440);
                else {
                    value = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "value", sheetIdx);
                    value = xlObj._isDateTime(value) ? xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "value2", sheetIdx) : value;
                    this._filterActiveCell(sheetIdx, activeCell, selCells, value);
                }
            }
        },

        _filterActiveCell: function (sheetIdx, activeCell, selCells, value, range) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx);
            sheet._activeCell = activeCell;
            this._filterByValue(sheetIdx, range, sheet.columns[activeCell.colIndex].field, "or", "equal", value, selCells);
            xlObj.model.allowComments && xlObj.XLComment._updateCmntArrowPos();
            if (xlObj.model.isGridMode && xlObj._isAutoWHMode)
                xlObj._setElemDimension();
        },

        _filterByValue: function (sheetIdx, range, columnName, pred, operator, value, selCells) {
            var xlObj = this.XLObj, rng, activeCell, filterColumn, fQMgr, query, obj, objectIndex = -1, i, len, fltrVal,
            temp, arg = {}, tabRange, details, colIdx = xlObj.XLEdit.getColumnIndexByField(columnName), sheet = xlObj.getSheet(sheetIdx);
            if (ej.isNullOrUndefined(range))
                selCells = selCells;
            else {
                rng = xlObj.getRangeIndices(range);
                selCells = xlObj._getSelectedRange({ rowIndex: rng[0] + 1, colIndex: rng[1] }, { rowIndex: rng[2], colIndex: rng[3] });
            }
            activeCell = selCells[0];
            if (!ej.isNullOrUndefined(range)) {
                fltrVal = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "value2", sheetIdx);
                if (ej.isNullOrUndefined(fltrVal) || fltrVal !== value) {
                    for (i = rng[0]; i < rng[2]; i++) {
                        fltrVal = xlObj.XLEdit.getPropertyValue(i, colIdx, "value2", sheetIdx);
                        if (!ej.isNullOrUndefined(fltrVal) && fltrVal === value) {
                            activeCell = { rowIndex: i, colIndex: colIdx };
                            break;
                        }
                    }
                }
            }
            details = { currentFilteringColumn: columnName, action: "filter", predicated: pred, requestType: "filterbycell", reqType: "filter", filteredValue: value, selCells: $.extend(true, [], selCells), activeCell: activeCell };
            tabRange = this._applyFilterByValue(sheetIdx, activeCell, selCells, value);
            xlObj._excelFilter._predicates[sheetIdx] = {};
            filterColumn = { field: columnName, value: value, predicate: pred, operator: operator, matchcase: false };
            arg.currentFilterCollection = value;
            xlObj._excelFilter._predicates[sheetIdx][columnName] = ej.Predicate(columnName, operator, value);
            sheet.filterSettings.filteredColumns.push(filterColumn);
            fQMgr = ej.DataManager(sheet.filterSettings.filteredColumns);
            query = new ej.Query().where("field", ej.FilterOperators.equal, columnName);
            obj = fQMgr.executeLocal(query);
            for (i = 0, len = obj.length; i < len; i++) {
                objectIndex = $.inArray(obj[i], sheet.filterSettings.filteredColumns);
                (objectIndex > -1) && sheet.filterSettings.filteredColumns.splice(objectIndex, 1);
            }
            sheet.filterSettings.filteredColumns.push(filterColumn);
            details.filteredcolumns = tabRange.filteredColumns = sheet.filterSettings.filteredColumns;
            if (tabRange.filteredColumns.length < 1) {
                var multiIdx = tabRange.multifilterIdx, fieldName;
                for (i = multiIdx[0]; i <= multiIdx[multiIdx.length - 1]; i++) {
                    fieldName = xlObj._generateHeaderText(i + 1);
                    if (!ej.isNullOrUndefined(tabRange.fColumns[fieldName]))
                        tabRange.fColumns[fieldName] = [];
                }
            }
            else
                tabRange.fColumns[columnName] = $.extend(true, [], tabRange.filteredColumns);
            tabRange.predicate = xlObj._excelFilter._predicates[sheetIdx];
            details.tableID = tabRange.tableID;
            details.filteredCells = tabRange.filteredCells;
            xlObj.XLSelection._refreshBorder();
            details.operation = "filterbycell";
            details.selRange = xlObj._getAlphaRange(sheetIdx, tabRange.startRow - 1, tabRange.multifilterIdx[0], tabRange.endRow, tabRange.multifilterIdx[tabRange.multifilterIdx.length - 1]);
            xlObj._processBindings(details) && (sheet.filterSettings.filteredColumns = temp);
        },

        _applyFilterByValue: function (sheetIdx, activeCell, selCells) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), cellIndex = [], endCell, startRowIdx, endRowIdx, filterIcon, tableID,
                tab = sheet.filterSettings.tableRange, filteredCells = [], tabRange, tabIdx, exists = false, activeObj, i, j, len, filterColl = xlObj.getSheet(sheetIdx)._filterColl;
            tableID = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "tableName", sheetIdx);
            tableID = tableID ? xlObj._getTableID(tableID) : -1;
            for (i = 0, len = tab.length; i < len; i++) {
                if (tab[i].tableID === tableID) {
                    tabIdx = i;
                    break;
                }
            }
            if (!ej.isNullOrUndefined(tabIdx) && ((tab[tabIdx].tableID === tableID) && tab[tabIdx].selectedCellIndexes.indexOf(activeCell.colIndex) !== -1) && ((tab[i].startRow <= activeCell.rowIndex) && (tab[i].endRow >= activeCell.rowIndex))) {
                tabRange = tab[tabIdx];
                sheet.filterSettings.filteredRange = tab[tabIdx].filteredRange;
                sheet._selectedRange = tab[tabIdx].selectedRange;
                tabRange.action = "filtering";
            }
            else {
                sheet._multipleFiltering = false;
                sheet._multifilterIdx = [];
                xlObj._dupDetails = true;
                this.clearFilter("remove");
                xlObj._dupDetails = false;
                var rowKeys = xlObj.getObjectKeys(filterColl), colKeys, cell;
                for (i = rowKeys.length - 1; i >= 0; i--) {
                    colKeys = xlObj.getObjectKeys(filterColl[i]);
                    for (j = colKeys.length - 1; j >= 0; j--) {
                        if (xlObj._isRowViewable(sheetIdx, rowKeys[i])) {
                            cell = xlObj.getCell(rowKeys[i], colKeys[j]);
                            cell.find(".e-filterspan").remove();
                            cell.removeClass("e-filterhdr");
                        }
                        delete filterColl[rowKeys[i]][colKeys[j]];
                    }
                }
                if (selCells.length < 2 || (selCells[0].rowIndex === selCells[selCells.length - 1].rowIndex)) {
                    startRowIdx = -1;
                    endRowIdx = selCells[selCells.length - 1].rowIndex;
                    for (i = selCells[0].rowIndex; i >= 0; i--) {
                        if (ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(i, selCells[0].colIndex, "value2"))) {
                            startRowIdx = i;
                            break;
                        }
                    }
                    startRowIdx = (startRowIdx === -1) ? 1 : startRowIdx + 2; // For text cell is act as a header
                    endRowIdx = this._createSelection(sheetIdx, endRowIdx, selCells[0].colIndex, []).endRowIndex - 1;
                    endCell = { rowIndex: endRowIdx, colIndex: activeCell.colIndex };
                    this._getSelectedRangeData({ rowIndex: startRowIdx, colIndex: activeCell.colIndex }, endCell, -1, activeCell.colIndex);
                }
                else {
                    startRowIdx = activeCell.rowIndex;
                    endRowIdx = this._createSelection(sheetIdx, selCells[selCells.length - 1].rowIndex, selCells[0].colIndex, []).endRowIndex - 1;
                    endCell = { rowIndex: endRowIdx, colIndex: activeCell.colIndex };
                    this._getSelectedRangeData({ rowIndex: startRowIdx, colIndex: activeCell.colIndex }, endCell, -1, activeCell.colIndex);
                }
                for (i = selCells[0].colIndex, len = selCells[selCells.length - 1].colIndex; i <= len; i++) {
                    cellIndex.push(i);
                    filterIcon = this._getFilterIcon();
                    startRowIdx = (startRowIdx === 0) ? 1 : startRowIdx;
                    activeObj = { rowIndex: startRowIdx - 1, colIndex: i };
                    this._applyFilterIcon(activeObj, filterIcon);
                    filteredCells.push(activeObj);
                }
                xlObj.XLScroll._getColWidths(sheetIdx, selCells[0].colIndex);
                (cellIndex.length > 1) && (sheet._multipleFiltering = true);
                sheet._multifilterIdx = cellIndex;
                sheet._selectedCellIndexes = cellIndex;
                for (i = 0, len = tab.length; i < len; i++) {
                    if (tab[i].tableID === tableID) {
                        tabIdx = i;
                        exists = true;
                        break;
                    }
                }
                if (!exists) {
                    sheet.filterSettings.tableRange.push({
                        action: "filtering", filterCollection: [],
                        startRow: startRowIdx, endRow: endCell.rowIndex, tableID: -1, fColumns: {}, flterdIdxes: [], multiFiltering: sheet._multipleFiltering, multifilterIdx: sheet._multifilterIdx, selectedCellIndexes: sheet._multifilterIdx, selectedRange: $.extend(true, {}, sheet._selectedRange), filteredRange: sheet.filterSettings.filteredRange, hiddenIdx: []
                    });
                    tabRange = tab[tab.length - 1];
                }
                else {
                    tabRange = tab[tabIdx];
                    tabRange.startRow = activeCell.rowIndex;
                    tabRange.endRow = endCell.rowIndex;
                    tabRange.multiFiltering = sheet._multipleFiltering;
                    tabRange.multifilterIdx = sheet._multifilterIdx;
                    tabRange.selectedCellIndexes = sheet._multifilterIdx;
                    tabRange.selectedRange = $.extend(true, {}, sheet._selectedRange);
                    tabRange.filteredRange = $.extend(true, {}, sheet.filterSettings.filteredRange);
                    tabRange.hiddenIdx = [];
                    tabRange.flterdIdxes = [];
                    tabRange.fColumns = {};
                    tabRange.tableID = tableID;
                    tabRange.filterCollection = [];
                    tabRange.action = "filtering";
                }
                tabRange.filteredCells = filteredCells;
            }
            return tabRange;
        },

        clearFilter: function (status) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var isCleared = false, isFilterApplied = false, sheetIdx = xlObj.getActiveSheetIndex(), columnName, fltrdCol, sheet = xlObj.getSheet(sheetIdx), filterColl = $.extend(true, {}, sheet._filterColl), dupDetails = xlObj._dupDetails,
                selRange, tblRange = sheet.filterSettings.tableRange, tabIdx = -1, i, j, filterRange, filteredCells = [], container = xlObj._dataContainer.sheets[sheetIdx];
            var rowKey, colKey, rowKeys = xlObj.getObjectKeys(filterColl), colKeys, cell, filterCollection = [], fltrdRange = sheet.filterSettings.filteredRange, filteredCols = sheet.filterSettings.filteredColumns;
            if (!tblRange.length)
                return;
            for (i = 0; i < tblRange.length; i++) {
                if (tblRange[i].tableID === -1) {
                    tabIdx = i;
                    isFilterApplied = true;
                    break;
                }
            }
            if (!isFilterApplied)
                return;
            selRange = tblRange[tabIdx].selectedRange;
            for (i = rowKeys.length - 1; i >= 0; i--) {
                colKeys = xlObj.getObjectKeys(filterColl[rowKeys[i]]);
                for (j = colKeys.length - 1; j >= 0; j--) {
                    rowKey = parseInt(rowKeys[i]);
                    colKey = parseInt(colKeys[j]);
                    if (ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowKey, colKey, "tableName", sheetIdx))) {
                        filteredCells.push({ rowIndex: rowKey, colIndex: colKey });
                        fltrdCol = filterColl[rowKeys[i]][colKeys[j]];
                        if (fltrdCol.status.indexOf("e-ssfiltered") > -1) {
                            columnName = xlObj.model.sheets[sheetIdx].columns[colKeys[j]].field;
                            filterCollection.push({ "fieldName": columnName, "filterCollection": tblRange[tabIdx].filterCollection, action: "filtering", tableID: -1, predicate: xlObj._excelFilter._predicates[sheetIdx][columnName] });
                            delete xlObj._excelFilter._predicates[sheetIdx][columnName];
                            xlObj._dupDetails = true;
                            this._clearFilterColumn(columnName, "", "", "Or", "", "", -1);
                            xlObj._dupDetails = false;
                            isCleared = true;
                        }
                        if (status === "remove") {
                            delete filterColl[rowKeys[i]][colKeys[j]];
                            delete container[rowKeys[i]][colKeys[j]]["isFilterHeader"];
                            delete container[rowKeys[i]][colKeys[j]]["filterState"];
                            delete container[rowKeys[i]][colKeys[j]]["isFilterVisible"];
                            if (xlObj._isRowViewable(sheetIdx, rowKey)) {
                                cell = xlObj.getCell(rowKey, colKey);
                                $.isNumeric(xlObj.XLEdit.getPropertyValue(rowKey, colKey)) && cell.addClass(xlObj._rAlign);
                                cell.find(".e-filterspan").remove();
                                xlObj.addClass(cell[0], "e-wrapword");
                                if (xlObj.XLEdit.getPropertyValue(rowKey, colKey, "isFilterWrap"))
                                    xlObj.setWrapText("wrap", xlObj._getAlphaRange(sheetIdx, rowKey, colKey, rowKey, colKey));
                                xlObj._removeClass(cell[0], "e-filterhdr");
                            }
                        }
                    }
                }
            }
            if (status === "remove") {
                xlObj._dupDetails = dupDetails;
                sheet._filterColl = filterColl;
                (tabIdx > -1) && (filterRange = tblRange.splice(tabIdx, 1)[0]);
                xlObj.model.allowComments && xlObj.XLComment._updateCmntArrowPos();
                if (!xlObj._isUndoRedo && !xlObj._dupDetails) {
                    var details = { sheetIndex: sheetIdx, operation: "remove-filter", status: status, process: "apply-filter", filteredCells: filteredCells, requestType: "filter", reqType: "filter", fRange: xlObj.getSheet(sheetIdx).filterSettings.range, filterRange: filterRange, filterCollection: filterCollection, filteredCols: filteredCols, fltrdRange: fltrdRange, selRange: selRange };
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            }
            if (isCleared) {
                $("#" + xlObj._id + "_Ribbon_Data_SortFilter_ClearFilter").ejButton("disable");
            }
        },

        filter: function (range) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowFiltering || xlObj.model.isReadOnly)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), applyFltr = false, activeCell = sheet._activeCell, tableId, colIdx,
                tabRange = sheet.filterSettings.tableRange, tabIdx, i, len, stRow, fltrStr, args;
            sheet._multipleFiltering = false;
            sheet._multifilterIdx = [];
            tableId = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "tableName", sheetIdx);
            if (!ej.isNullOrUndefined(tableId))
                tableId = xlObj._getTableID(tableId);
            for (i = 0, len = tabRange.length; i < len; i++) {
                if (tabRange[i].tableID === -1)
                    applyFltr = true;
                tabIdx = i;
            }
            args = { range: xlObj._getRangeArgs(range, "string"), reqType: ej.Spreadsheet.Actions.Filtering, sheetIndex: sheetIdx };
            if (xlObj._trigActionBegin(args))
                return true;
            range = args.range;
            if (applyFltr) {
                this.clearFilter("remove");
                sheet.filterSettings.filteredRange = [];
                sheet._selectedRange = {};
                sheet._selectedCellIndexes = [];
                sheet.filterSettings.filteredColumns = [];
                xlObj._excelFilter._predicates[sheetIdx] = {};
            }
            if (!ej.isNullOrUndefined(tableId) && tableId > -1) {
                stRow = tabRange[tabIdx].startRow;
                colIdx = tabRange[tabIdx].multifilterIdx;
                for (i = 0, len = colIdx.length; i < len; i++) {
                    fltrStr = this._getFilterHeader(sheetIdx, stRow, colIdx[i]);
                    if (!ej.isNullOrUndefined(fltrStr) && fltrStr.status.indexOf("e-ssfiltered") > -1)
                        this._clearFilterColumn(sheet.columns[i].field, "", "", "", "", "", tableId);
                }
                this._clearFilterTableIcon(sheetIdx, tableId);
                applyFltr = true;
            }
            if (applyFltr) {
                args = { sheetIdx: sheetIdx, reqType: "clear-Filter" };
                if (xlObj._trigActionComplete(args))
                    return;
            }
            else
                this._filterCellRange(sheetIdx, range);
            xlObj._isFiltered = !applyFltr;
            xlObj.model.allowComments && xlObj.XLComment._updateCmntArrowPos();
        },

        _applyFilterIcon: function (activeObj, filterIcon) {
            var activeEle, xlObj = this.XLObj, ralign = this.XLObj._rAlign, sheetIdx = xlObj.getActiveSheetIndex(), rowIdx = activeObj.rowIndex, colIdx = activeObj.colIndex, sheet = xlObj.getSheet(sheetIdx),
                isViewed = xlObj._isRowViewable(sheetIdx, rowIdx), filterColl = sheet._filterColl, isWrap = false;
            if (isViewed) {
                activeEle = xlObj.getCell(rowIdx, colIdx, sheetIdx);
                activeEle[0].insertBefore(filterIcon[0], activeEle[0].childNodes[activeEle[0].childNodes.length - 1]);
                activeEle.addClass("e-filterhdr");
                activeEle.removeClass("e-ralign");
            }
            if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "wrap", sheetIdx)) {
                isWrap = true;
                xlObj.setWrapText("unwrap", xlObj._getAlphaRange(sheetIdx, rowIdx, colIdx, rowIdx, colIdx));
            }
            xlObj.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { isFilterHeader: true, filterState: "filter", isFilterVisible: true, isFilterWrap: isWrap }, sheetIdx: sheetIdx })
            if (xlObj.isNumber(xlObj.model.allowFiltering && xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx)))
                isViewed && xlObj._removeClass(activeEle[0], ralign);
            if (!(rowIdx in filterColl))
                filterColl[rowIdx] = {};
            if (!(colIdx in filterColl[rowIdx]))
                filterColl[rowIdx][colIdx] = {};
            filterColl[rowIdx][colIdx].status = "e-ssfilter";
            filterColl[rowIdx][colIdx].isTable = (filterIcon[0].className.indexOf("e-ft") > -1);
        },

        _filterCellRange: function (sheetIdx, range) {
            var xlObj = this.XLObj, selCells, addFilter = false, exists, tableIdx, tableRange, isVisible, cellIndex = [], rowIconIdx = -1, selFilterPosn = false, colCount = 0,
                filterIcon, i, j, len, ln, rng, startCell, endCell, tabRange, sheet = xlObj.getSheet(sheetIdx), filteredRangeIndex = [], isSingleCell = false, pCells,
                filterCellIndex = [], filteredCells = [], isEmpty = false, details = { sheetIndex: sheetIdx, reqType: "filter", operation: "apply-filter" }, args = { sheetIndex: sheetIdx, range: range, reqType: "filter", type: "actionBegin", action: "filtercellrange" };
            if (xlObj._trigActionBegin(args))
                return;
            range = args.range;
            if (ej.isNullOrUndefined(range)) {
                if (!xlObj.model.allowSelection)
                    return;
                selCells = sheet._selectedCells;
            }
            else {
                rng = xlObj.getRangeIndices(range);
                selCells = xlObj._getSelectedRange({ rowIndex: rng[0], colIndex: rng[1] }, { rowIndex: rng[2], colIndex: rng[3] });
            }
            if (selCells.length < 2) {
                pCells = selCells;
                !ej.isNullOrUndefined(range) && xlObj.performSelection(range, sheetIdx);
                xlObj.selectAll(false);
                selCells = sheet._selectedCells;
                isSingleCell = true;
            }
            xlObj.XLRibbon._dirtySelect();
            if (xlObj.XLRibbon._isDirtySelect || selCells.length == 0)
                return;
            for (i = selCells[0].colIndex, len = selCells[selCells.length - 1].colIndex; i <= len; i++) {
                cellIndex.push(i);
                rowIconIdx = selCells[0].rowIndex;
                if (isSingleCell) {
                    if (!sheet._isSheetSelected) {
                        filterCellIndex.push(i);
                        sheet._multifilterIdx.push(i);
                        addFilter = true;
                    }
                }
                else {
                    if (!selFilterPosn || cellIndex.length > 0)
                        for (j = rowIconIdx, ln = selCells[selCells.length - 1].rowIndex; j <= ln; j++) {
                            isVisible = xlObj._isRowVisible(sheetIdx, j);
                            if (isVisible) {
                                if (xlObj.XLEdit.getPropertyValue(j, i, "value2", sheetIdx) || (filterCellIndex.length && xlObj.XLEdit.getPropertyValue(0, i, "isCHide", sheetIdx))) {
                                    if (rowIconIdx === -1 || rowIconIdx > j)
                                        rowIconIdx = j;
                                    selFilterPosn = true;
                                    addFilter = true;
                                    isEmpty = true;
                                }
                            }
                            (rowIconIdx < j && colCount === 0) && filteredRangeIndex.push(j);
                        }
                    if (isEmpty) {
                        filterCellIndex.push(i);
                        sheet._multifilterIdx.push(i);
                        isEmpty = false;
                    }
                }
                colCount++;
            }
            (filterCellIndex.length > 1) && (sheet._multipleFiltering = true);
            filteredCells = [];
            if (addFilter) {
                for (i = 0, len = filterCellIndex.length; i < len; i++) {
                    filterIcon = this._getFilterIcon();
                    this._applyFilterIcon({ rowIndex: rowIconIdx, colIndex: filterCellIndex[i] }, filterIcon);
                    filteredCells.push({ rowIndex: rowIconIdx, colIndex: filterCellIndex[i] });
                }
                startCell = { rowIndex: rowIconIdx + 1, colIndex: selCells[0].colIndex };
                endCell = { rowIndex: selCells[selCells.length - 1].rowIndex };
                sheet._selectedRange = { startRow: startCell.rowIndex, endRow: endCell.rowIndex, dataSourceIndexes: filteredRangeIndex };
                this._getSelectedRangeData(startCell, selCells[selCells.length - 1], -1, startCell.colIndex);
                sheet._selectedCellIndexes = cellIndex;
                details = {
                    sheetIndex: sheetIdx,
                    filteredCells: filteredCells,
                    reqType: "filter",
                    operation: "apply-filter",
                    tableID: -1,
                    type: "actionBegin"
                }
                tableRange = sheet.filterSettings.tableRange;
                for (i = 0, len = tableRange.length; i < len; i++) {
                    if (tableRange[i].tableID === -1) {
                        exists = true;
                        tableIdx = i;
                    }
                }
                if (!exists)
                    sheet.filterSettings.tableRange.push({ filterCollection: [], startRow: startCell.rowIndex, endRow: endCell.rowIndex, tableID: -1, multiFiltering: sheet._multipleFiltering, multifilterIdx: sheet._multifilterIdx, selectedCellIndexes: sheet._multifilterIdx, selectedRange: sheet._selectedRange, filteredRange: sheet.filterSettings.filteredRange, filteredColumns: sheet.filterSettings.filteredColumns, fColumns: {}, predicate: {}, hiddenIdx: [], fltrdIdxes: [], filterColumnName: [] });
                else {
                    tabRange = sheet.filterSettings.tableRange[tableIdx];
                    tabRange.startRow = startCell.rowIndex;
                    tabRange.endRow = endCell.rowIndex;
                    tabRange.multiFiltering = sheet._multipleFiltering;
                    tabRange.multifilterIdx = sheet._multifilterIdx;
                    tabRange.selectedCellIndexes = sheet._multifilterIdx;
                    tabRange.selectedRange = sheet._selectedRange;
                    tabRange.filteredRange = sheet.filterSettings.filteredRange;
                    tabRange.filteredColumns = sheet.filterSettings.filteredColumns;
                    tabRange.predicate = xlObj._excelFilter._predicates[sheetIdx];
                    tabRange.hiddenIdx = [];
                    tabRange.flterdIdxes = [];
                    tabRange.fColumns = {};
                    tabRange.filterColumnName = [];
                    tabRange.filterCollection = [];
                }
                xlObj.XLScroll._getColWidths(sheetIdx, sheet._multifilterIdx[0]);
                if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isExport) {
                    if (pCells)
                        range = [pCells[0].rowIndex, pCells[0].colIndex, pCells[pCells.length - 1].rowIndex, pCells[pCells.length - 1].colIndex];
                    else if (xlObj.isUndefined(range))
                        range = [selCells[0].rowIndex, selCells[0].colIndex, selCells[selCells.length - 1].rowIndex, selCells[selCells.length - 1].colIndex];
                    else
                        range = xlObj.getRangeIndices(range);
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                    !ej.isNullOrUndefined(range) && xlObj.performSelection(range, sheetIdx);
                }
            }
            else
                xlObj._showAlertDlg("Alert", "Alert", "", 440);

        },

        openFilterDialog: function (range) {
            var filterSpan, xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            if (typeof (range) === "string")
                range = xlObj.getRangeIndices(range);
            filterSpan = xlObj.getCell(range[0], range[1]).find('span.e-filterspan');
            (filterSpan.length > 0) && this._filterClickHandler({ target: filterSpan[0] });
        },

        _filterClickHandler: function (e) {
            var xlObj = this.XLObj, trgtCell, isTable, $target = $(e.target), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), isFiltered = false, endRowIdx, columnName, columns, colType, i, len, startIdx, endIdx, curIdx,
                fltrVal, tableId, selectedRange, tableRange, tableFilteredColumn = [], tablePredicate = {}, position, startCell, endCell, tabIdx, selection, strMenuObj, numMenuObj, oper = ["showItems", "hideItems"];
            columnName = xlObj._generateHeaderText(e.target.parentNode.cellIndex + 1);
            this._isDecimal = false;
            if ((xlObj.model.allowLockCell && xlObj.getSheet(sheetIdx).isSheetProtected) || xlObj.preventFilterPopup)
                return;
            ($target[0].className.indexOf("e-ssfiltered") > -1) && (isFiltered = true);
            curIdx = e.target.parentNode.cellIndex;
            if ($target[0].className.indexOf("e-ssfilter") > -1) {
                tableRange = xlObj.model.sheets[sheetIdx].filterSettings.tableRange;
                trgtCell = xlObj._getCellIdx($target.parent()[0]);
                isTable = xlObj.XLEdit.getPropertyValue(trgtCell.rowIndex, trgtCell.colIndex, "tableName");
                tableId = (!ej.isNullOrUndefined(isTable)) ? parseInt(isTable.replace("e-table", "")) : -1;
                for (i = 0, len = tableRange.length; i < len; i++) {
                    if (tableRange[i].tableID === tableId) {
                        tabIdx = i;
                        if (tableRange[i].multiFiltering) {
                            startIdx = tableRange[i].multifilterIdx[0];
                            endIdx = tableRange[i].multifilterIdx[tableRange[i].multifilterIdx.length - 1];
                        }
                        else
                            startIdx = endIdx = e.target.parentNode.cellIndex;
                        startCell = { rowIndex: tableRange[i].startRow, colIndex: startIdx };
                        endCell = { rowIndex: tableRange[i].endRow, colIndex: endIdx };
                        sheet._multipleFiltering = tableRange[i].multiFiltering;
                        sheet._multifilterIdx = tableRange[i].multifilterIdx;
                        selectedRange = sheet._selectedRange = tableRange[i].selectedRange;
                        sheet.filterSettings.filteredRange = tableRange[i].filteredRange;
                        sheet._selectedCellIndexes = tableRange[i].selectedCellIndexes;
                    }
                }
                if (tableId === -1) {
                    selection = this._createSelection(sheetIdx, selectedRange.endRow, curIdx, selectedRange.dataSourceIndexes);
                    endRowIdx = (selection.endRowIndex > selectedRange.endRow) ? selection.endRowIndex - 1 : selection.endRowIndex;
                    if (selectedRange.endRow != endRowIdx) {
                        for (i = selectedRange.endRow + 1; i <= endRowIdx; i++) {
                            fltrVal = { field: columnName, value: xlObj.XLEdit.getPropertyValue(i, curIdx, "value2", sheetIdx), matchcase: false, operator: "equal", predicate: "or" };
                            sheet.filterSettings.filteredColumns.push(fltrVal);
                            tableRange[tabIdx].filteredColumns.push(fltrVal);
                            tableRange[tabIdx].selectedRange.endRow = endRowIdx;
                        }
                    }
                    endCell = { rowIndex: endRowIdx, colIndex: curIdx };
                    tableRange[tabIdx].selectedRange = sheet._selectedRange = { startRow: startCell.rowIndex, endRow: endCell.rowIndex, dataSourceIndexes: selection.filteredIndex };
                    tableRange[tabIdx].endRow = endRowIdx;
                }
                this._getSelectedRangeData(startCell, endCell, tableId, curIdx);
                columns = sheet.columns;
                colType = this._getColumnType(sheetIdx, selectedRange.startRow, selectedRange.endRow, curIdx);
                for (i = 0, len = columns.length; i < len; i++) {
                    if (columns[i].field === columnName) {
                        xlObj._$colType = colType;
                        xlObj._$curFieldName = columns[i].field;
                        break;
                    }
                }
                xlObj._showDialog(xlObj._id + "_Filter", xlObj._$colType);
                position = xlObj._getXYPos($target, $("#" + xlObj._id + xlObj._$colType + "_excelDlg"), 18, 18); // 18 for filter Icons
                tableRange = xlObj.model.sheets[sheetIdx].filterSettings.tableRange;
                for (i = 0, len = tableRange.length; i < len; i++) {
                    if (tableRange[i].tableID === tableId) {
                        tableFilteredColumn = tableRange[i].filteredColumns;
                        tablePredicate = tableRange[i].predicate;
                    }
                }
                xlObj._excelFilter._predicates[sheetIdx] = tablePredicate;
                this._isSearchEdit = true;
                $.extend(true, xlObj._excelFilter._columnsFiltered, sheet._filteredColumns);
                if (xlObj._phoneMode || xlObj._tabMode)
                    this._openNormalFilterDlg(columnName, xlObj._$colType, tableId, tabIdx);
                else
                    xlObj._excelFilter.openXFDialog({ field: columnName, dataSource: sheet.filterSettings.filteredRange ? sheet.filterSettings.filteredRange : sheet.dataSource, position: { X: position.xPos, Y: position.yPos }, type: xlObj._$colType, format: xlObj._$colFormat, filteredColumns: tableFilteredColumn, sortedColumns: [], key: sheetIdx, tableID: tableId, selectedColors: sheet._selectedCellColors, isFiltered: isFiltered, blank: "", enableColor: true, filteredByColor: sheet._filteredByColor });
            }
            strMenuObj = $("#" + xlObj._id + "string_MenuItem").data("ejMenu");
            numMenuObj = $("#" + xlObj._id + "number_MenuItem").data("ejMenu");
            strMenuObj && strMenuObj[xlObj.model.allowSorting ? oper[0] : oper[1]](strMenuObj.element.find("li:lt(4)"));
            numMenuObj && numMenuObj[xlObj.model.allowSorting ? oper[0] : oper[1]](numMenuObj.element.find("li:lt(4)"));
        },

        _cancelHandler: function () {
            this._isSearchEdit = false;
        },

        applyFilter: function (args) {
            var xlObj = this.XLObj, predicate = args.predicate || ej.Predicate(args.field, args.operator, args.value, !args.matchcase), fColl = [], sheetIdx = xlObj.getActiveSheetIndex();
            !xlObj._isFiltered && xlObj.XLFilter.filter(args.filterRange);
            if (ej.isNullOrUndefined(xlObj._excelFilter._predicates[sheetIdx])) {
                xlObj._excelFilter._predicates[sheetIdx] = {};
                xlObj._excelFilter._predicates[sheetIdx][args.field] = {};
            }
            xlObj._excelFilter._predicates[sheetIdx][args.field] = predicate;
            if (args.filterCollection)
                fColl = args.filterCollection;
            else
                fColl.push({ actualFilterOperator: args.operator, actualFilterValue: args.value, actualPredicate: args.predicate, field: args.field, isCustom: true, matchcase: args.matchcase, operator: args.operator, predicate: args.predicate, value: args.value });
            this._filterHandler({ action: "filtering", fieldName: args.field, tableID: args.tableID || -1, ejpredicate: predicate, filterCollection: fColl });
        },


        _filterHandler: function (args) {
            if (args.originalEvent) {
                var clName = args.originalEvent.target.parentElement.className;
                if (clName && clName.indexOf("hdr") > -1)
                    return;
            }
            var i, len, tab, avble = false, tabIdx = -1, colIdx, range, arg = {}, fQMgr, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), query, obj, objectIndex, tableFilteredColumn = [], tablePredicate = {}, cell, endColWidth = sheet.columnsWidthCollection[sheet.colCount - 1], vBarWidth = xlObj.element.find('#vscrollBar').width();
            arg.requestType = (args.action === "sorting" || args.action === "filterbycolor") ? args.action : "filtering";
            tab = sheet.filterSettings.tableRange;

            xlObj.XLFilter._isSearchEdit = false;
            for (i = 0, len = tab.length; i < len; i++) {
                if (tab[i].tableID === args.tableID) {
                    $.extend(true, tableFilteredColumn, tab[i].filteredColumns);
                    tablePredicate = tab[i].predicate;
                    avble = true;
                    tabIdx = i;
                }
            }
            if (args.action === "clearfiltering" && args.reqType === "filterbycolor")
                arg.requestType = tab[tabIdx].action;
            arg.tableID = args.tableID;
            if (args.action === "filtering" || args.action === "clearfiltering") {
                arg.rowIndex = tab[tabIdx].startRow - 1;
                arg.colIndex = xlObj._generateColCount(args.fieldName) - 1;
                fQMgr = ej.DataManager(tableFilteredColumn);
                query = new ej.Query().where("field", ej.FilterOperators.equal, args.fieldName);
                obj = fQMgr.executeLocal(query);
                arg.filteredColumns = tableFilteredColumn;
                for (i = 0, len = obj.length; i < len; i++) {
                    objectIndex = $.inArray(obj[i], tableFilteredColumn);
                    (objectIndex >= 0) && tableFilteredColumn.splice(objectIndex, 1);
                }
                if (args.action === "clearfiltering")
                    delete xlObj._excelFilter._predicates[sheetIdx][args.fieldName];
                else
                    ej.merge(tableFilteredColumn, args.filterCollection);
                tablePredicate = xlObj._excelFilter._predicates[sheetIdx];
            }
            if (avble) {
                tab[tabIdx].filteredColumns = tableFilteredColumn;
                tab[tabIdx].filterCollection = args.filterCollection;
                tab[tabIdx].predicate = tablePredicate;
                tab[tabIdx].action = args.action;
                if (tableFilteredColumn.length < 1) {
                    var multiIdx = tab[tabIdx].multifilterIdx, fieldName;
                    for (i = multiIdx[0]; i <= multiIdx[multiIdx.length - 1]; i++) {
                        fieldName = xlObj._generateHeaderText(i + 1);
                        if (!ej.isNullOrUndefined(tab[tabIdx].fColumns[fieldName]))
                            tab[tabIdx].fColumns[fieldName] = [];
                    }
                }
                else
                    tab[tabIdx].fColumns[args.fieldName] = $.extend(true, [], tableFilteredColumn);
            }
            range = sheet.filterSettings.tableRange[tabIdx].selectedRange;
            var colIndexs = sheet.filterSettings.tableRange[tabIdx].selectedCellIndexes, filterColl = sheet._filterColl;
            if (args.action === "filtering" || args.action === "clearfiltering") {
                arg.currentFilteringColumn = args.fieldName;
                arg.ejpredicate = args.ejpredicate;
                arg.filterCollection = $.extend(true, [], args.filterCollection);
                arg.action = args.action;
                if (arg.requestType === "filterbycolor")
                    arg.reqType = arg.requestType;
                else
                    arg.reqType = "filter";
                arg.sheetIndex = sheetIdx;
                arg.filteredcolumns = tableFilteredColumn;
                arg.predicate = tablePredicate;
            }
            else if (args.action === "sorting") {
                if (!xlObj.model.allowSorting)
                    return;
                arg.requestType = arg.action = args.action;
                colIdx = xlObj.XLEdit.getColumnIndexByField(args.sortDetails.field);
                xlObj.XLSort._isSortByFilter = true;
                if (xlObj.XLSort.sortByRange(xlObj.swapRange([range.startRow, colIndexs[0], range.endRow, colIndexs[colIndexs.length - 1]]), args.sortDetails.field, args.sortDetails.direction, args.tableID))
                    return;
                this._changeSortIcon({ rowIndex: range.startRow - 1, colIndex: colIdx }, args.sortDetails.direction);
                for (i = 0, len = colIndexs.length; i < len; i++) {
                    if (colIndexs[i] != colIdx && ((filterColl[range.startRow - 1][colIndexs[i]].status.indexOf("-asc") > -1) || (filterColl[range.startRow - 1][colIndexs[i]].status.indexOf("-dsc") > -1))) {
                        filterColl[range.startRow - 1][colIndexs[i]].status = "e-ssfilter";
                        if (xlObj._isRowViewable(sheetIdx, range.startRow - 1)) {
                            cell = xlObj.getCell(range.startRow - 1, colIndexs[i]).find('.e-filterspan')[0];
                            xlObj._removeClass(cell, "e-ssfilter-asc");
                            xlObj._removeClass(cell, "e-ssfilter-dsc");
                            xlObj.addClass(cell, "e-ssfilter");
                        }
                    }
                }
            }
            else {
                arg.requestType = arg.action = args.action;
                arg.range = sheet._selectedRange;
                if (xlObj.model.allowSorting && xlObj.XLSort._sortRangeAlert([range.startRow, colIndexs[0], range.endRow, colIndexs[colIndexs.length - 1]]))
                    return;
                var colors;
                if (args.action === "sortbycolor") {
                    arg.sortColumn = args.sortDetails.field;
                    arg.operation = args.sortDetails.operation;
                    colors = args.sortDetails.color.replace("rgb(", "").replace(")", "").split(",");
                }
                else {
                    if (xlObj._isUndoRedo) {
                        arg.filterColumn = args.columnName;
                        arg.operation = args.operation;
                    }
                    else {
                        arg.filterColumn = args.filterDetails.field;
                        arg.operation = args.filterDetails.operation;
                        colors = args.filterDetails.color.replace("rgb(", "").replace(")", "").split(",");
                    }
                    arg.tableID = args.tableID;
                    xlObj.model.sheets[sheetIdx]._filteredByColor = arg.filterColumn;
                }
                var r, g, b;
                if (!xlObj._isUndoRedo) {
                    r = colors[0];
                    g = colors[1];
                    b = colors[2];
                }
                if (arg.operation === "sortbgcolor" || arg.operation === "filterbgcolor")
                    arg.bgcolor = xlObj._isUndoRedo ? args.bgcolor : this._convertrgbtohex(parseInt(r), parseInt(g), parseInt(b));
                else
                    arg.fgcolor = xlObj._isUndoRedo ? args.fgcolor : this._convertrgbtohex(parseInt(r), parseInt(g), parseInt(b));
            }
            arg.oprType = "filter";
            arg.selRange = xlObj._getAlphaRange(sheetIdx, tab[tabIdx].startRow - 1, tab[tabIdx].multifilterIdx[0], tab[tabIdx].endRow, tab[tabIdx].multifilterIdx[tab[tabIdx].multifilterIdx.length - 1]);
            if (args.action !== "sorting")
                xlObj._processBindings(arg);
            if (args.action === "clearfiltering")
                xlObj.XLRibbon._isFilterSelect.status = false;
            xlObj.model.allowComments && xlObj.XLComment._updateCmntArrowPos();
            xlObj.model.allowSelection && xlObj.XLSelection._refreshBorder();
            if (xlObj.model.showRibbon)
                xlObj.XLRibbon._refreshRibbonIcons();
            if (xlObj._isFrozen(xlObj.getFrozenRows()))
                xlObj.XLFreeze._refreshFreezeRowDiv();
            if (xlObj.model.isGridMode) {
                xlObj._isAutoWHMode && xlObj._setElemDimension();
                if (xlObj.model.scrollSettings.allowScrolling)
                    if (xlObj.element.find('#vscrollBar')[0].style.display == "none" && !xlObj._isGridModeWidthChange) {
                        xlObj.getSheetElement(sheetIdx).find(".e-spreadsheetheader").removeClass("e-scrollcss");
                        xlObj.setWidthToColumns([{ colIndex: sheet.colCount - 1, width: endColWidth + vBarWidth }]);
                        xlObj._isGridModeWidthChange = true;
                    }
                    else
                        if (xlObj._isGridModeWidthChange) {
                            xlObj.setWidthToColumns([{ colIndex: sheet.colCount - 1, width: endColWidth - vBarWidth }]);
                            xlObj._isGridModeWidthChange = false;
                        }
            }
        },

        _convertrgbtohex: function (r, g, b) {
            return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        },

        _clearFilterColumn: function (fieldName, filterOperator, filterValue, predicate, matchcase, actualFilterValue, tableId) {
            var xlObj = this.XLObj, tabRange, args = {}, i, len, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), firstLoop = false, filterObject = {}, dataManger, query, obj, objectIndex,
                tab = sheet.filterSettings.tableRange, filteredcolumns = [], fltrcolIdx;
            args.requestType = ej.Grid.Actions.Filtering;
            args.currentFilterObject = [];
            (!Array.isArray(filterOperator)) && (filterOperator = $.makeArray(filterOperator));
            (!Array.isArray(filterValue)) && (filterValue = $.makeArray(filterValue));
            this._currentFilterColumn = this._getColumnByField(sheetIdx, fieldName);
            for (var idx = 0, ln = filterOperator.length; idx < ln; idx++) {
                filterObject = { field: fieldName, operator: filterOperator[idx], value: filterValue[idx], matchcase: matchcase, predicate: predicate, actualFilterValue: actualFilterValue };
                if (!firstLoop) {
                    for (i = 0, len = tab.length; i < len; i++) {
                        if (tab[i].tableID === tableId) {
                            tabRange = tab[i];
                            $.extend(true, filteredcolumns, tab[i].filteredColumns);
                            xlObj._excelFilter._predicates[sheetIdx] = tab[i].predicate;
                            sheet.filterSettings.filteredRange = sheet.filterSettings.tableRange[i].filteredRange;
                            sheet._selectedCellIndexes = tab[i].selectedCellIndexes;
                            sheet._selectedRange = tab[i].selectedRange;
                            sheet._multifilterIdx = tab[i].multifilterIdx;
                        }
                    }
                    dataManger = ej.DataManager(filteredcolumns);
                    query = new ej.Query().where("field", ej.FilterOperators.equal, filterObject.field);
                    obj = dataManger.executeLocal(query);
                    for (i = 0, len = obj.length; i < len; i++) {
                        objectIndex = $.inArray(obj[i], filteredcolumns);
                        if (objectIndex !== -1)
                            filteredcolumns.splice(objectIndex, 1);
                    }
                }
            }
            fltrcolIdx = $.inArray(fieldName, sheet._filteredColumns);
            if (fltrcolIdx > -1)
                sheet._filteredColumns.splice(fltrcolIdx, 1);
            if (xlObj._isUndoRedo && xlObj.isUndefined(tabRange))
                return;
            firstLoop = true;
            delete xlObj._excelFilter._predicates[sheetIdx][fieldName];
            tabRange.filteredColumns = filteredcolumns;
            tabRange.predicate = xlObj._excelFilter._predicates[sheetIdx];
            args.currentFilterObject.push(filterObject);
            args.filterCollection = filteredcolumns;
            args.currentFilteringColumn = fieldName;
            args.filteredcolumns = filteredcolumns;
            args.action = "clearfiltering";
            args.reqType = "filter";
            args.tableID = tableId;
            args.selRange = xlObj._getAlphaRange(sheetIdx, tabRange.startRow - 1, tabRange.multifilterIdx[0], tabRange.endRow, tabRange.multifilterIdx[tabRange.multifilterIdx.length - 1]);
            if (xlObj._processBindings(args)) {
                sheet.filterSettings.filteredColumns.reverse().splice(0, filterOperator.length);
                sheet.filterSettings.filteredColumns.reverse();
            }
            xlObj.model.allowComments && xlObj.XLComment._updateCmntArrowPos();
            xlObj.model.allowSelection && xlObj.XLSelection._refreshBorder();
        },

        _getFilterHeader: function (sheetIdx, rowIdx, colIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), filterColl = sheet._filterColl;
            if (!ej.isNullOrUndefined(filterColl[rowIdx]) && !ej.isNullOrUndefined(filterColl[rowIdx][colIdx]))
                return filterColl[rowIdx][colIdx];
        },

        //Format As Table
        _filterTable: function (sheetIdx, id, range) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), cellIndex = [], alfltr = false, multiFltr = false, tabRange, filterIcon, filClass,
                filterHdr;
            sheet._multipleFiltering = false;
            sheet._multifilterIdx = [];
            var endCell = range ? range.endCell : $.extend(true, {}, sheet._endCell), startCell = range ? range.startCell : $.extend(true, {}, sheet._startCell);
            for (var i = startCell.colIndex; i <= endCell.colIndex; i++) {
                filterHdr = this._getFilterHeader(sheetIdx, startCell.rowIndex, i);
                if (!ej.isNullOrUndefined(filterHdr) && filterHdr.status.indexOf("e-ssfilter") > -1)
                    alfltr = true;
                else {
                    filterIcon = this._getFilterIcon();
                    filClass = "e-ft" + id;
                    filterIcon.addClass(filClass);
                    this._applyFilterIcon({ rowIndex: startCell.rowIndex, colIndex: i }, filterIcon);
                    cellIndex.push(i);
                    sheet._multifilterIdx.push(i);
                }
            }
            xlObj.XLScroll._getColWidths(sheetIdx, startCell.colIndex);
            if (!alfltr) {
                if (cellIndex.length > 1) {
                    sheet._multipleFiltering = true;
                    multiFltr = true;
                }
                startCell.rowIndex = startCell.rowIndex + 1;
                this._getSelectedRangeData(startCell, endCell, id, startCell.colIndex);
                if (!xlObj._isFATResize)
                    sheet.filterSettings.tableRange.push({ filterCollection: [], startRow: startCell.rowIndex, endRow: endCell.rowIndex, tableID: id, multiFiltering: multiFltr, multifilterIdx: cellIndex, selectedCellIndexes: cellIndex, selectedRange: $.extend(true, {}, sheet._selectedRange), filteredRange: sheet.filterSettings.filteredRange, filteredColumns: sheet.filterSettings.filteredColumns, fColumns: {}, predicate: {}, hiddenIdx: [], filterColumnName: [] });
                else {
                    tabRange = sheet.filterSettings.tableRange;
                    var len = tabRange.length; 
                    if (tabRange.length)
                        for (i = 0; i < len; i++) {
                            if (tabRange[i].tableID === id) {
                                tabRange[i].endRow = endCell.rowIndex;
                                break;
                            }
                        }
                    xlObj._isFATResize = false;
                }
            }
        },

        _clearFilterTable: function (sheetIdx, tableId, rmFltr) {
            var sheet = this.XLObj.getSheet(sheetIdx ? sheetIdx : this.getActiveSheetIndex()), tableRange;
            tableRange = sheet.filterSettings.tableRange;
            for (var i = 0, len = tableRange.length; i < len; i++) {
                if (tableRange[i].tableID === tableId) {
                    this._clearAllFilter(sheetIdx, i, rmFltr);
                    len = tableRange.length;
                }
            }
        },

        _clearAllFilter: function (sheetIdx, tabIdx, rmFltr) {
            var xlObj = this.XLObj, container = xlObj._dataContainer.sheets[sheetIdx], sheet = xlObj.getSheet(sheetIdx), tableRange = sheet.filterSettings.tableRange, fltrCell, cell, j, ln, field,
                multiIdx, startRow, fltrState;
            sheet._selectedRange = tableRange[tabIdx].selectedRange;
            multiIdx = tableRange[tabIdx].multifilterIdx;
            startRow = tableRange[tabIdx].startRow;
            for (j = 0, ln = multiIdx.length; j < ln; j++) {
                field = sheet.columns[multiIdx[j]].field;
                fltrState = xlObj.XLEdit.getPropertyValue(startRow - 1, multiIdx[j], "filterState");
                if (!ej.isNullOrUndefined(fltrState) && fltrState.indexOf("filtered") > -1)
                    this._clearFilterColumn(field, "", "", "Or", "", "", tableRange[tabIdx].tableID);
                if (!rmFltr) {
                    if (xlObj._isRowViewable(sheetIdx, startRow - 1)) {
                        fltrCell = xlObj.getCell(startRow - 1, multiIdx[j]);
                        xlObj.addClass(fltrCell[0], "e-wrapword");
                        cell = fltrCell.find('.e-filterspan');
                        $(cell).remove();
                        fltrCell.removeClass("e-filterhdr");
                    }
                    if (container[startRow - 1][multiIdx[j]]) {
                        delete container[startRow - 1][multiIdx[j]]["isFilterHeader"];
                        delete container[startRow - 1][multiIdx[j]]["filterState"];
                    }
                    delete sheet._filterColl[startRow - 1][multiIdx[j]];
                }
            }
            if (!rmFltr) {
                tableRange.splice(tabIdx, 1);
            }
        },

        _clearFilterTableIcon: function (sheetIdx, tableId) {
            var xlObj = this.XLObj, isFilterVisible, filterSpan, sheet = xlObj.getSheet(sheetIdx), tableRange = sheet.filterSettings.tableRange, multiIdx, startRow, j, ln, cell;
            for (var i = 0, len = tableRange.length; i < len; i++) {
                if (tableRange[i].tableID === tableId) {
                    sheet._selectedRange = tableRange[i].selectedRange;
                    sheet.filterSettings.filteredRange = tableRange[i].filteredRange;
                    multiIdx = tableRange[i].multifilterIdx;
                    startRow = tableRange[i].startRow;
                    for (j = 0, ln = multiIdx.length; j < ln; j++) {
                        //Need to Update in Container ( filter Icon is hidden or not )
                        isFilterVisible = xlObj.XLEdit.getPropertyValue(startRow - 1, multiIdx[j], "isFilterVisible");
                        if (xlObj._isRowViewable(sheetIdx, startRow - 1)) {
                            cell = xlObj.getCell(startRow - 1, multiIdx[j]);
                            filterSpan = cell.find('.e-filterspan');
                            if (isFilterVisible) {
                                filterSpan.hide();
                                xlObj._removeClass(cell[0], "e-filterhdr");
                            }
                            else {
                                xlObj.addClass(cell[0], "e-filterhdr");
                                filterSpan.show();
                            }
                        }
                        xlObj.XLEdit._updateDataContainer({ rowIndex: startRow - 1, colIndex: multiIdx[j] }, { dataObj: { isFilterVisible: !isFilterVisible } });
                    }
                }
            }
        },

        _insertFilterIcon: function (i, j, tabRange) { //fRow- Filtered Row, fApplied - filter Applied
            var filterIcon;
            filterIcon = this._getFilterIcon();
            if (tabRange.tableID > -1)
                this.XLObj.XLEdit._updateDataContainer({ rowIndex: i, colIndex: j }, { dataObj: { tableName: "e-table" + tabRange.tableID } });
            this._applyFilterIcon({ rowIndex: i, colIndex: j }, filterIcon);
        },

        _changeFilterIcon: function (cellObj, status, fltrState) {
            var fSpan, activeCell, fltrStr, isViewed = false, xlObj = this.XLObj, rowIdx = cellObj.rowIndex, colIdx = cellObj.colIndex, ralign = xlObj._rAlign, sheetIdx = xlObj.getActiveSheetIndex();
            fltrStr = this._getFilterHeader(sheetIdx, rowIdx, colIdx).status;
            if (xlObj._isRowViewable(sheetIdx, rowIdx)) {
                activeCell = xlObj.getCell(rowIdx, colIdx);
                fSpan = activeCell.find('.e-filterspan')[0];
                activeCell.removeClass(ralign);
                isViewed = true;
            }
            if (status === "filter") {
                if (fltrState.indexOf("filtered") < 0) {
                    xlObj.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { filterState: fltrState.replace("filter", "filtered") } });
                    xlObj.getSheet(sheetIdx)._filterColl[rowIdx][colIdx].status = fltrStr.replace("e-ssfilter", "e-ssfiltered");
                    if (isViewed)
                        fSpan.className = fSpan.className.replace("e-ssfilter", "e-ssfiltered");
                }
            }
            else {
                xlObj.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { filterState: fltrState.replace("filtered", "filter") } });
                xlObj.getSheet(sheetIdx)._filterColl[rowIdx][colIdx].status = fltrStr.replace("e-ssfiltered", "e-ssfilter");
                if (isViewed && !xlObj.isUndefined(fSpan))
                    fSpan.className = fSpan.className.replace("e-ssfiltered", "e-ssfilter");
            }
        },

        _changeSortIcon: function (cellObj, status) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), fSpan, idx, fltrStr, fStr, isViewed = false, filterColl = xlObj.getSheet(sheetIdx)._filterColl;
            fltrStr = filterColl[cellObj.rowIndex][cellObj.colIndex].status;
            idx = (fltrStr.indexOf("e-ssfiltered") > -1) ? 12 : 10;
            fStr = fltrStr.substr(0, idx);
            if (xlObj._isRowViewable(sheetIdx, cellObj.rowIndex)) {
                fSpan = xlObj.getCell(cellObj.rowIndex, cellObj.colIndex).find('.e-filterspan')[0];
                fltrStr = fSpan.className;
                idx = fltrStr.indexOf("e-ssfilter") + idx;
                isViewed = true;
            }
            if (status === "ascending") {
                filterColl[cellObj.rowIndex][cellObj.colIndex]["status"] = fStr + "-asc";
                if (isViewed)
                    fSpan.className = fltrStr.substr(0, idx) + "-asc";
            }
            else {
                filterColl[cellObj.rowIndex][cellObj.colIndex]["status"] = fStr + "-dsc";
                if (isViewed)
                    fSpan.className = fltrStr.substr(0, idx) + "-dsc";
            }
        },

        _extendFilterRange: function (tid, range) {//extend the filter range
            var xlObj = this.XLObj, j, dataSrcIdx, tabRange = xlObj.getSheet(xlObj.getActiveSheetIndex()).filterSettings.tableRange;
            if (tabRange.length) {
                for (var i = 0, len = tabRange.length; i < len; i++) {
                    if (tabRange[i].tableID == tid) {
                        if (tabRange[i].endRow < range[2]) {
                            dataSrcIdx = tabRange[i].selectedRange.dataSourceIndexes;
                            tabRange[i].endRow = tabRange[i].selectedRange.endRow = range[2];
                            if (dataSrcIdx[dataSrcIdx.length - 1] < tabRange[i].endRow) {
                                for (j = dataSrcIdx[dataSrcIdx.length - 1], len = tabRange[i].endRow; j < len; j++)
                                    dataSrcIdx.push(j + 1);
                            }
                        }
                        break;
                    }
                }
            }
        },

        _updateFilterIcons: function (stRow, endRow, colIdx, action) {
            var xlObj = this.XLObj, fltrState, cellObj, numFltr = $("#" + xlObj._id + "numberSelectAll").ejCheckBox("instance"), isNumFltr = numFltr ? false : numFltr.model.checked,
                strFltr = $("#" + xlObj._id + "stringSelectAll").ejCheckBox("instance"), isStrFltr = strFltr ? false : strFltr.model.checked;
            for (var i = stRow; i <= endRow; i++) {
                cellObj = { rowIndex: i, colIndex: colIdx };
                fltrState = xlObj.XLEdit.getPropertyValue(i, colIdx, "filterState");
                if (fltrState.indexOf("filtered") > -1 && (action == "clearfiltering" || (isNumFltr || isStrFltr)))
                    this._changeFilterIcon(cellObj, "filtered", fltrState);
                else if (fltrState.indexOf("filtered") < 0 && action != "clearfiltering")
                    this._changeFilterIcon(cellObj, "filter", fltrState);
                break;
            }
        },

        _fltrRowHighlight: function (startRow, endRow, status) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), rowHdrCnt = xlObj._getJSSheetRowHeaderContent(sheetIdx), rowHdrCell = rowHdrCnt.find("table tr:gt(" + (startRow - 1) + "):lt(" + ((endRow - startRow) + 1) + ")"), tableCltn = xlObj.model.sheets[sheetIdx].filterSettings.tableRange, len, i;
            var filterRowCln = xlObj.model.sheets[sheetIdx].filteredRowsCollection;
            if (xlObj.model.scrollSettings.allowVirtualScrolling) {
                rowHdrCell = rowHdrCnt.find("table tr").filter(function () { return ($(this).attr("data-idx") >= startRow && $(this).attr("data-idx") <= endRow); });
            }
            if (status === "clear") {
                rowHdrCell.find("td[class *='filterhiglight']").removeClass("e-filterhiglight");
                xlObj.clearRangeData([startRow, 0, endRow, 0], ["isFilterHighlight"]);
                if (filterRowCln.length) {
                    for (var j = 0; j < filterRowCln.length; j++) {
                        for (i = 0, len = tableCltn.length; i < len; i++) {
                            if (filterRowCln[j] >= tableCltn[i].startRow && filterRowCln[j] <= tableCltn[i].endRow && !xlObj.XLEdit.getPropertyValue(filterRowCln[j], 0, "isRHide")) {
                                xlObj.updateUniqueData({ "isFilterHighlight": true }, [tableCltn[i].startRow, 0, tableCltn[i].endRow, 0]);
                                if (xlObj.model.scrollSettings.allowVirtualScrolling)
                                    rowHdrCnt.find("table tr").filter(function () { return ($(this).attr("data-idx") >= tableCltn[i].startRow && $(this).attr("data-idx") <= tableCltn[i].endRow); }).find("td").addClass("e-filterhiglight");
                                else
                                    rowHdrCnt.find("table tr:gt(" + (tableCltn[i].startRow - 1) + "):lt(" + ((tableCltn[i].endRow - tableCltn[i].startRow) + 1) + ")").find("td").addClass("e-filterhiglight");
                            }
                        }
                    }
                }
            }
            else if (status === "add") {
                rowHdrCell.find("td").addClass("e-filterhiglight");
                xlObj.updateUniqueData({ "isFilterHighlight": true }, [startRow, 0, endRow, 0]);
            }
        },

        _checkFilterApplied: function (sheetIdx, rowIdx, rowCount, colIdx, colCount, status) {
            var chkObj, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), tblRange = sheet.filterSettings.tableRange, isAlert;
            xlObj._isFilterApplied = false;
            for (var i = 0, len = tblRange.length; i < len; i++) {
                isAlert = false;
                if (tblRange[i].filteredColumns.length) {
                    chkObj = xlObj._checkFilterMerge(sheetIdx, [tblRange[i].startRow - 1, tblRange[i].multifilterIdx[0], tblRange[i].endRow, tblRange[i].multifilterIdx[tblRange[i].multifilterIdx.length - 1]], rowIdx, rowCount, colIdx, colCount, status, "filter", isAlert);
                    xlObj._isFilterApplied = !chkObj.isAlert;
                }
                else
                    xlObj._isFilterApplied = false;
                if (xlObj._isFilterApplied)
                    return true;
            }
            return false;
        },

        _updateFilterCollection: function (sheetIdx, idx, count, position, operation) {
            var i, j, c, iLen, jLen, cLen, startCell, endCell, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), tblRange = sheet.filterSettings.tableRange, tbl, colIdx,
                fltrState, field;
            count = count + 1;
            if (position === "row") {
                for (i = 0, iLen = tblRange.length; i < iLen; i++) {
                    tbl = tblRange[i];
                    colIdx = tbl.multifilterIdx;
                    if (operation === "insert") {
                        if (idx <= tbl.endRow) {
                            tbl.endRow = tbl.endRow + count;
                            if (idx < tbl.startRow) {
                                tbl.startRow = tbl.startRow + count;
                                if (tbl.tableID > -1)
                                    xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: count, isInsertBefore: true });
                            }
                            else {
                                if (tbl.tableID > -1)
                                    xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: count });
                            }
                        }
                    }
                    else {
                        if (idx <= tbl.endRow) {
                            tbl.endRow = tbl.endRow - count;
                            if (idx < tbl.startRow) {
                                tbl.startRow = tbl.startRow - count;
                                if (tbl.tableID > -1)
                                    xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: -count, isInsertBefore: true });
                            }
                            else {
                                if (tbl.tableID > -1)
                                    xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: -count });
                            }
                        }
                    }
                    startCell = { rowIndex: tbl.startRow, colIndex: colIdx[0] };
                    endCell = { rowIndex: tbl.endRow, colIndex: colIdx[colIdx.length - 1] };
                    this._getSelectedRangeData(startCell, endCell, tbl.tableID);
                    tbl.selectedRange = $.extend(true, {}, sheet._selectedRange);
                    tbl.filteredRange = $.extend(true, {}, sheet.filterSettings.filteredRange);
                }
            }
            else {
                var cIdx, dupCol;
                for (i = 0, iLen = tblRange.length; i < iLen; i++) {
                    tbl = tblRange[i], colIdx = tbl.multifilterIdx;
                    dupCol = $.extend(true, [], colIdx);
                    cIdx = 0;
                    this._updateFilteredColumns(i, idx, count, operation);
                    if (operation === "insert") {
                        if (idx <= colIdx[0]) {
                            for (j = colIdx.length - 1; j >= 0; j--) {
                                colIdx[cIdx] = colIdx[cIdx] + count;
                                cIdx++;
                            }
                            if (tbl.tableID > -1)
                                xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: count, isInsertBefore: true });
                        }
                        else if (idx <= colIdx[colIdx.length - 1]) {
                            if (tbl.tableID > -1)
                                xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: count });
                            for (j = dupCol[dupCol.length - 1], jLen = dupCol[dupCol.length - 1] + count; j <= jLen; j++) {
                                if (colIdx.indexOf(j) === -1)
                                    colIdx.push(j);
                            }
                        }
                    }
                    else {
                        if (idx <= colIdx[0]) {
                            for (j = 0; j < colIdx.length; j++)
                                colIdx[j] = colIdx[j] - count;
                            if (tbl.tableID > -1)
                                xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: -count, isInsertBefore: true });
                        }
                        else if (idx <= colIdx[colIdx.length - 1]) {
                            for (c = idx, cLen = colIdx[colIdx.length - 1]; c <= cLen; c++) {
                                field = xlObj._generateHeaderText(c + 1);
                                fltrState = xlObj.XLEdit.getPropertyValue(tbl.startRow - 1, c, "filterState");
                                if (!ej.isNullOrUndefined(fltrState) && fltrState.indexOf("filtered") > -1)
                                    this._clearFilterColumn(field, "", "", "Or", "", "", tbl.tableID);
                            }
                            colIdx.splice(colIdx.length - count, count);
                            if (tbl.tableID > -1)
                                xlObj.XLFormat._refreshTableRowCol({ tid: tbl.tableID, pos: position, cnt: -count });
                        }
                    }
                    startCell = { rowIndex: tbl.startRow, colIndex: colIdx[0] };
                    endCell = { rowIndex: tbl.endRow, colIndex: colIdx[colIdx.length - 1] };
                    this._getSelectedRangeData(startCell, endCell, tbl.tableID);
                    tbl.selectedRange = $.extend(true, {}, sheet._selectedRange);
                    tbl.filteredRange = $.extend(true, {}, sheet.filterSettings.filteredRange);
                    if (colIdx.length < 2)
                        tbl.multiFiltering = false;
                }
            }
        },

        _updateFilteredColumns: function (tabIdx, cIdx, count, operation) {
            var xlObj = this.XLObj, filterIdx, sheetIdx = xlObj.getActiveSheetIndex(), tableRange = xlObj.getSheet(sheetIdx).filterSettings.tableRange[tabIdx],
                filteredColumns = $.extend(true, [], tableRange.filteredColumns), fColumns = $.extend(true, {}, tableRange.fColumns), fCols = $.extend(true, {}, tableRange.fColumns);
            for (var i = 0, len = filteredColumns.length; i < len; i++) {
                colIdx = xlObj.XLEdit.getColumnIndexByField(tableRange.filteredColumns[i]["field"]);
                if (cIdx <= colIdx) {
                    if (operation === "delete")
                        if (cIdx === colIdx)
                            filteredColumns.splice(i, 1);
                        else
                            filteredColumns[i]["field"] = xlObj._generateHeaderText(colIdx - count + 1);
                    else
                        filteredColumns[i]["field"] = xlObj._generateHeaderText(colIdx + count + 1);
                }
            }
            tableRange.filteredColumns = filteredColumns;
            var colIdx, filter, pCol, cCol, pColHeaderTxt, cColHeaderTxt, fColKeys = xlObj.getObjectKeys(fColumns);
            tableRange.predicate = tableRange.predicate;
            for (i = fColKeys.length - 1; i >= 0; i--) {
                filterIdx = xlObj.XLEdit.getColumnIndexByField(fColKeys[i]);
                for (var k = cIdx; k < cIdx + count; k++) {
                    if (k <= filterIdx) {
                        filter = $.extend(true, [], fColumns[fColKeys[i]]);
                        for (var j = 0; j < filter.length; j++) {
                            colIdx = xlObj.XLEdit.getColumnIndexByField(filter[j]["field"]);
                            if (k <= colIdx) {
                                if (operation === "delete")
                                    if (k === colIdx)
                                        filter.splice(i, 1);
                                    else
                                        filter[j]["field"] = xlObj._generateHeaderText(colIdx - count + 1);
                                else
                                    filter[j]["field"] = xlObj._generateHeaderText(colIdx + count + 1);
                            }
                        }
                        pCol = xlObj.XLEdit.getColumnIndexByField(fColKeys[i]);
                        pColHeaderTxt = xlObj._generateHeaderText(pCol + 1);
                        if (operation === "delete") {
                            cCol = pCol - count;
                            if (k === pCol) {
                                delete tableRange.predicate[pColHeaderTxt];
                                delete fCols[pColHeaderTxt];
                            }
                            else {
                                cColHeaderTxt = xlObj._generateHeaderText(cCol + 1);
                                fCols[cColHeaderTxt] = filter;
                                delete fCols[pColHeaderTxt];
                                tableRange.predicate[cColHeaderTxt] = xlObj._excelFilter.generatePredicate(filter);
                                delete tableRange.predicate[pColHeaderTxt];
                            }
                        }
                        else {
                            cCol = pCol + count;
                            cColHeaderTxt = xlObj._generateHeaderText(cCol + 1);
                            fCols[cColHeaderTxt] = filter;
                            delete fCols[pColHeaderTxt];
                            tableRange.predicate[cColHeaderTxt] = xlObj._excelFilter.generatePredicate(filter);
                            delete tableRange.predicate[pColHeaderTxt];
                        }
                    }
                }
            }
            tableRange.fColumns = fCols;
        },

        _renderCustomFilter: function () {
            var xlObj = this.XLObj, dlgId = xlObj._id + "_filter_custom", $dlg = $("#" + dlgId), $content = ej.buildTag("div#" + dlgId + "_content"),
                $filter = ej.buildTag("input#" + dlgId + "_filterBtn.e-filter", {}, {}, { "type": "button", "value": "Filter" }), $clear = ej.buildTag("input#" + dlgId + "_clearBtn.e-clear", {}, {}, { "type": "button", "value": "Clear" });
            $dlg.append($content.append(ej.buildTag("div.e-fltrbtndiv").append($filter).append($clear)));
            this._createButton("filter", $filter);
            this._createButton("clear", $clear);
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("Filter"), width: "100%", height: "100%", cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg", open: function () { $("#" + xlObj._id + "_formatdlg_okbtn").focus(); }, close: ej.proxy(this._customFltrDlgClose, this) });
        },

        _customFltrDlgClose: function () {
            $("#" + this.XLObj._id + "_filter_custom_" + this._colType).hide();
        },

        _refreshCustomFilter: function (type) {
            var xlObj = this.XLObj, dlgId = xlObj._id + "_filter_custom", $drpdown = ej.buildTag("input#" + dlgId + "_" + type + "_ddinput.e-" + xlObj._id + "_customddl", {}, {}, { "type": "text" }), $tBox = ej.buildTag("input#" + dlgId + "_" + type + "_acString.e-filterval", {}, { "height": "26px", "width": "100%" }, { "type": "text" }), strMenuOpt = [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Starts With", value: "startswith" }, { text: "Ends With", value: "endswith" }, { text: "Contains", value: "contains" }],
                $content = $("#" + dlgId + "_content"), numMenuOpt = [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }];
            $content.prepend(ej.buildTag("div#" + dlgId + "_" + type, "", { display: "none" }).append(ej.buildTag("div.e-operdiv").append($drpdown)).append(ej.buildTag("div.e-textdiv").append($tBox)));
            $drpdown.ejDropDownList({ dataSource: numMenuOpt, width: "100%", fields: { id: "value", text: "text", value: "value" }, select: $.proxy(this._onNumFormatSelect, this), selectedItemIndex: 0 });
            switch (type) {
                case "string":
                    $drpdown.ejDropDownList("option", { dataSource: strMenuOpt, selectedItemIndex: 0 });
                    $tBox.ejAutocomplete({
                        width: "100%", height: 26, enableDistinct: true
                    });
                    break;
                case "number":
                    $tBox.ejNumericTextbox({ showSpinButton: false, height: "26px", decimalPlaces: 2, width: "100%" });
                    break;
                case "boolean":
                    $tBox.ejCheckBox({});
                    break;
                case "date":
                    $tBox.ejDatePicker({ width: "100%" });
                    break;
            }
        },

        _createButton: function (name, element) {
            var $func = (name == "filter") ? ej.proxy(this._fltrBtnHandler, this) : ej.proxy(this._fltrClrHandler, this);
            element.ejButton({ size: "normal", type: "button", height: 22, width: 60, "click": $func, showRoundedCorner: true });
        },

        _fltrBtnHandler: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), dlgId = xlObj._id + "_filter_custom", filterType = $("#" + dlgId + "_" + this._colType + "_ddinput").ejDropDownList("model.value"), filterVal = $("#" + dlgId + "_" + this._colType + "_acString").val();
            var arg = { action: "filtering", filterCollection: [{ field: this._colName, matchcase: true, operator: filterType, value: filterVal, predicate: "or" }], fieldName: this._colName, ejpredicate: { field: this._colName, operator: filterType, value: filterVal, isComplex: false, ignoreCase: false }, tableID: this._tableId };
            xlObj._excelFilter._predicates[sheetIdx][this._colName] = ej.Predicate(this._colName, filterType, filterVal);
            this._filterHandler(arg);
            $("#" + dlgId).ejDialog("close");
            $("#" + dlgId + "_" + this._colType).hide();
        },

        _fltrClrHandler: function () {
            var xlObj = this.XLObj, dlgId = xlObj._id + "_filter_custom";
            this._clearFilterColumn(this._colName, "", "", "Or", "", "", this._tableId);
            $("#" + dlgId).ejDialog("close");
            $("#" + dlgId + "_" + this._colType).hide();
        },

        _openNormalFilterDlg: function (colName, type, tableId, tableIdx) {
            var xlObj = this.XLObj, dlgId = xlObj._id + "_filter_custom";
            $("#" + dlgId + "_" + type).show();
            $("#" + dlgId).ejDialog("open");
            $("#" + dlgId + "_" + type + "_ddinput").ejDropDownList("option", { selectedItemIndex: 0 });
            this._colName = colName; this._colType = type; this._tableId = tableId;
            if (type === "string")
                $("#" + dlgId + "_" + type + "_acString").ejAutocomplete("option", { fields: { key: this._colName, text: this._colName }, dataSource: xlObj.getSheet(xlObj.getActiveSheetIndex()).filterSettings.tableRange[tableIdx].filteredRange })
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.ribbon = function (obj) {
        this.XLObj = obj;
        this._appTabCollection = {};
        this._tabCollection = [];
        this._contextualTabCollection = [];
        this._smallBtnHeight = 25;
        this._mediumBtnHeight = 35;
        this._bigBtnHeight = 75;
        this._splitBtnHeight = 75;
        this._dropDownHeight = 25;
        this._ribbonState = true;
        this._isSetModel = false;
        this._isDesignTab = true;
        this._isDirtySelect = false;
        this._isMergeSelect = false;
        this._isFirstColumn = false;
        this._isFilterSelect = {};
        this._hasTitle = "";
        this._isNmgrid = "";
        this._sparklineDesignType = "";
        this._isEditGroupLocationClick = false;
        this._isEditSingleSparklineClick = false;
        this._isPanelVisible = false;
        this._ctrlCreated = false;
        this._homeBtnIds = ["Home_Clipboard_Paste", "Home_Font_IncreaseFontSize", "Home_Font_DecreaseFontSize", "Home_Alignment_DecreaseIndent", "Home_Alignment_IncreaseIndent", "Home_Number_IncreaseDecimal", "Home_Number_DecreaseDecimal", "Home_Actions_Undo", "Home_Actions_Redo", "Home_Number_Accounting", "Home_Number_CommaStyle", "Home_Number_Percentage", "Home_Clipboard_Cut", "Home_Clipboard_Copy"];
        this._homeSptBtnIds = ["Home_Clipboard_PasteOptions", "Home_Font_Border", "Home_Styles_ConditionalFormatting", "Home_Styles_FormatAsTable", "Home_Styles_CellStyles", "Others_Editing_FindSelect", "Home_Editing_Clear", "Home_Alignment_Merge", "Home_Editing_SortFilter", "Home_Editing_AutoSum"];
        this._homeToggleBtnIds = ["Home_Font_Bold", "Home_Font_Italic", "Home_Font_Underline", "Home_Font_StrikeThrough", "Home_Alignment_AlignLeft", "Home_Alignment_AlignRight", "Home_Alignment_AlignCenter", "Home_Alignment_TopAlign", "Home_Alignment_MiddleAlign", "Home_Alignment_BottomAlign", "Home_Alignment_WrapText", "Home_Clipboard_FormatPainter"];
        this._homeDdIds = ["Home_Number_NumberFormat", "Home_Font_FontSize", "Home_Font_FontFamily"];
        this._homeCpIds = ["Home_Font_FillColor", "Home_Font_FontColor"];
        this._insertBtnIds = ["Insert_Tables_PivotTable", "Insert_Tables_Table", "Insert_Links_Hyperlink", "Insert_Illustrations_Pictures", "Insert_Sparkline_Line", "Insert_Sparkline_Column", "Insert_Sparkline_Winloss"];
        this._insertSptBtnIds = ["Insert_Charts_ColumnChart", "Insert_Charts_BarChart", "Insert_Charts_StockChart", "Insert_Charts_LineChart", "Insert_Charts_AreaChart", "Insert_Charts_PieChart", "Insert_Charts_ScatterChart"];
        this._dataBtnIds = ["Data_SortFilter_SortAtoZ", "Data_SortFilter_SortZtoA", "Data_SortFilter_Filter", "Data_SortFilter_ClearFilter", "Data_DataTools_DataValidation"];
        this._dataSptBtnIds = ["Data_DataTools_DataValidationOptions"];
        this._pageLayChckBxIds = ["PageLayout_Show_Headings", "PageLayout_Show_Gridlines"];
        this._pageLayBtnIds = ["PageLayout_PageLayout_PageSize", "PageLayout_Print_Print", "PageLayout_Print_PrintSelected"];
        this._pageLaySptBtnIds = ["PageLayout_PageLayout_PageSizeOptions"];
        this._reviewTglBtnIds = ["Review_Changes_ProtectSheet", "Review_Changes_ProtectWorkbook", "Review_Changes_LockCell"];
        this._cmntBtnIds = ["Review_Comments_NewComment", "Review_Comments_DeleteComment", "Review_Comments_PreviousComment", "Review_Comments_NextComment", "Review_Comments_ShowHideComment"];
        this._cmntTglBtnIds = ["Review_Comments_ShowAllComments"];
        this._othersBtnIds = ["Others_Cells_InsertCell", "Others_Cells_DeleteCell", "Others_Formulas_NameManager", "Others_Formulas_DefineName", "Others_CalCulation_CalculateNow", "Others_CalCulation_CalculateSheet"];
        this._othersSptBtnIds = ["Others_Cells_InsertCellOptions", "Others_Cells_DeleteCellOptions", "Others_Editing_FindSelect", "Others_Window_FreezePanes", "Others_CalCulation_CalculationOptions"];
        this._contextualBtnIds = ["Design_Tools_ResizeTable", "Design_Tools_ConvertToRange"];
        this._contextualInputIds = ["Ribbon_Design_Properties_TableName"];
        this._contextualCheckBoxIds = ["Design_TableStyleOptions_FirstColumn", "Design_TableStyleOptions_LastColumn", "Design_TableStyleOptions_TotalRow", "Design_TableStyleOptions_FilterColumn"];
        this._protectStateBtnIds = ["Home_Clipboard_Cut", "Home_Clipboard_Copy", "Others_Editing_FindSelect", "Home_Clipboard_Paste", "Home_Clipboard_PasteOptions", "Home_Actions_Undo", "Home_Actions_Redo", "Review_Changes_ProtectSheet", "Review_Changes_ProtectWorkbook", "PageLayout_Print_Print", "PageLayout_Print_PrintSelected", "Others_Cells_InsertCellOptions", "Others_Cells_DeleteCellOptions", "Others_Cells_InsertCell", "Others_Cells_DeleteCell"];
        this._chartDesignBtnIds = ["ChartDesign_Data_SwitchRowColumn", "ChartDesign_Data_SelectData", "ChartDesign_Type_ChangeChartType"];
        this._chartDesignSptBtnIds = ["ChartDesign_ChartLayouts_AddChartElement"];
        this._chartDesignDdIds = ["ChartDesign_ChartThemes_ChartThemes"];
        this._sparklineDesignSptBtnIds = ["SparklineDesign_Sparkline_EditData", "SparklineDesign_Style_SparklineColor", "SparklineDesign_Style_MarkerColor"];
        this._formatBtnIds = ["Format_Adjust_ChangePicture"];
        this._formatSptBtnIds = ["Format_Adjust_ResetPicture", "Format_Border_PictureBorder"];
        this._pasteMenuData = [
            { id: "PasteSpecial", text: obj._getLocStr("PasteSpecial"), parentId: null },
            { id: "PasteValues", text: obj._getLocStr("PasteValues"), parentId: null }
        ];
        this._fontFamily = [{ value: "1", text: "Angsana New" }, { value: "2", text: "Arial" }, { value: "3", text: "Arial Black" }, { value: "4", text: "Batang" }, { value: "5", text: "Book Antiqua" }, { value: "6", text: "Browallia New" }, { value: "7", text: "Calibri" }, { value: "8", text: "Cambria" }, { value: "9", text: "Candara" }, { value: "10", text: "Century" }, { value: "11", text: "Comic Sans MS" }, { value: "12", text: "Consolas" }, { value: "13", text: "Constantia" }, { value: "14", text: "Corbel" }, { value: "15", text: "Cordia New" }, { value: "16", text: "Courier" }, { value: "17", text: "Courier New" }, { value: "18", text: "DilleniaUPC" }, { value: "19", text: "Dotum" }, { value: "20", text: "FangSong" }, { value: "21", text: "Garamond" }, { value: "22", text: "Georgia" }, { value: "23", text: "Gulim" }, { value: "24", text: "GungSuh" }, { value: "25", text: "KaiTi" }, { value: "26", text: "JasmineUPC" }, { value: "27", text: "Malgun Gothic" }, { value: "28", text: "Mangal" }, { value: "29", text: "Meiryo" }, { value: "30", text: "Microsoft JhengHei" }, { value: "31", text: "Microsoft YaHei" }, { value: "32", text: "MingLiu" }, { value: "33", text: "MingLiU_HKSCS" }, { value: "34", text: "MS Gothic" }, { value: "35", text: "MS Mincho" }, { value: "36", text: "MS PGothic" }, { value: "37", text: "MS PMincho" }, { value: "38", text: "PMingliU" }, { value: "39", text: "PMingLiU-ExtB" }, { value: "40", text: "SimHei" }, { value: "41", text: "SimSun" }, { value: "42", text: "SimSun-ExtB" }, { value: "43", text: "Tahoma" }, { value: "44", text: "Times" }, { value: "45", text: "Times New Roman" }, { value: "46", text: "Trebuchet MS" }, { value: "47", text: "Verdana" }, { value: "48", text: "Yu Gothic" }, { value: "49", text: "Yu Mincho" }];
        this._fontSize = [{ value: "8pt", text: "8" }, { value: "9pt", text: "9" }, { value: "10pt", text: "10" }, { value: "11pt", text: "11" }, { value: "12pt", text: "12" }, { value: "14pt", text: "14" }, { value: "16pt", text: "16" }, { value: "18pt", text: "18" }, { value: "20pt", text: "20" }, { value: "22pt", text: "22" }, { value: "24pt", text: "24" }, { value: "26pt", text: "26" }, { value: "28pt", text: "28" }, { value: "36pt", text: "36" }, { value: "48pt", text: "48" }, { value: "72pt", text: "72" }];
        this._fontStyle = [{ value: "1", text: "Normal" }, { value: "2", text: "Bold" }, { value: "3", text: "Italic" }, { value: "4", text: "Bold Italic" }];
        this._mergeMenuData = [
            { id: "MergeAndCenter", text: obj._getLocStr("MergeAndCenter"), parentId: null, sprite: "e-icon e-ss-mergecenter" },
            { id: "MergeAcross", text: obj._getLocStr("MergeAcross"), parentId: null, sprite: "e-icon e-ss-mergeacross" },
            { id: "MergeCells", text: obj._getLocStr("MergeCells"), parentId: null, sprite: "e-icon e-ss-merge" },
            { id: "UnmergeCells", text: obj._getLocStr("UnmergeCells"), parentId: null, sprite: "e-icon e-ss-unmerge" }
        ];
        this._sortFltrMenuData = [
            { id: 'Ribbon_SortAtoZ', text: this.XLObj._getLocStr('SortAtoZ'), parentId: null, sprite: 'e-icon e-ssdrop-sortatoz' },
            { id: 'Ribbon_SortZtoA', text: this.XLObj._getLocStr('SortZtoA'), parentId: null, sprite: 'e-icon e-ssdrop-sortztoa' },
            { id: 'Ribbon_Filter', text: this.XLObj._getLocStr('Filter'), parentId: null, sprite: 'e-icon e-ssdrop-filter' },
            { id: 'Ribbon_ClearFilter', text: this.XLObj._getLocStr('ClearFilter'), parentId: null, sprite: 'e-icon e-ssdrop-clearfilter' }
        ];
        this._findMenuData = [
            { id: "Find", text: obj._getLocStr("Find") + "...", parentId: null, sprite: "e-icon e-ss-find" },
            { id: "Replace", text: obj._getLocStr("Replace") + "...", parentId: null, sprite: "e-icon e-ss-replace" },
            { id: "GoTo", text: obj._getLocStr("GoTo") + "...", parentId: null, sprite: "e-icon e-ss-goto" },
            { id: "GoToSpecial", text: obj._getLocStr("GoTo") + " " + obj._getLocStr("Special") + "...", parentId: null },
            { id: "Formulas", text: obj._getLocStr("Formulas"), parentId: null },
            { id: "Comments", text: obj._getLocStr("Comments"), parentId: null },
            { id: "CFormat", text: obj._getLocStr("ConditionalFormat"), parentId: null },
            { id: "Constants", text: obj._getLocStr("Constants"), parentId: null },
            { id: "DataValidation", text: obj._getLocStr("DataValidation"), parentId: null }
        ];
        this._calcOptData = [
            { id: this.XLObj._id + "_CalcAuto", text: obj._getLocStr("Automatic"), parentId: null, sprite: "e-icon e-ss-calcauto" },
            { id: this.XLObj._id + "_CalcManual", text: obj._getLocStr("Manual"), parentId: null, sprite: "e-icon" }
        ];
        this._valMenuData = [
            { id: "Validation", text: obj._getLocStr("DataValidation") + "...", parentId: null, sprite: "e-icon e-ss-validation" },
            { id: "HighlightVal", text: obj._getLocStr("HighlightVal"), parentId: null, sprite: "e-icon e-ss-hlval" },
            { id: "ClearHLVal", text: obj._getLocStr("ClearFormats"), parentId: null, sprite: "e-icon e-ss-clearval" },
            { id: "ClearVal", text: obj._getLocStr("ClearVal"), parentId: null, sprite: "e-icon e-ss-clearval" }
        ];
        this._pageSizes = [
            { id: "A4", text: "A4", parentId: null, sprite: "e-icon e-ss-A4size" },
            { id: "A3", text: "A3", parentId: null, sprite: "e-icon e-ss-A3size" },
            { id: "Letter", text: "Letter", parentId: null, sprite: "e-icon e-ss-lettersize" }
        ];
        this._viewMenuData = [
            { id: "freezePanes", text: obj._getLocStr("FreezePanes"), parentId: null, sprite: "e-icon e-ss-frzpane" },
            { id: "FreezeTopRow", text: obj._getLocStr("FreezeTopRow"), parentId: null, sprite: "e-icon e-ss-frzrow" },
            { id: "FreezeFirstColumn", text: obj._getLocStr("FreezeFirstColumn"), parentId: null, sprite: "e-icon e-ss-frzcln" }
        ];
        this._insertMenuData = [
            { id: 'InsertCells', text: obj._getLocStr('InsCells') + "...", parentId: null, sprite: 'e-icon e-ssr-inscell' },
            { id: 'InsertSheetRows', text: obj._getLocStr('InsRows'), parentId: null, sprite: 'e-icon e-ssr-insrow' },
            { id: 'InsertSheetColumns', text: obj._getLocStr('InsCols'), parentId: null, sprite: 'e-icon e-ssr-inscol' },
            { id: 'InsertSheet', text: obj._getLocStr('InsSheet'), parentId: null, sprite: 'e-icon e-ssr-inssheet' }
        ];
        this._resetPicture = [
            { id: "resetpicture", text: obj._getLocStr("ResetPicture"), parentId: null, sprite: "e-icon e-ss-resetpicture" },
            { id: "resetsize", text: obj._getLocStr("ResetSize"), parentId: null, sprite: "e-icon e-ss-resetpicture" }
        ];
        var borderstyle = obj._getLocStr("BorderStyles").split("/");
        this._borderMenuData = [
            { id: "bottom", text: obj._getLocStr("BottomBorder"), parentId: null, sprite: "e-icon e-ss-bottom" },
            { id: "top", text: obj._getLocStr("TopBorder"), parentId: null, sprite: "e-icon e-ss-top" },
            { id: "left", text: obj._getLocStr("LeftBorder"), parentId: null, sprite: "e-icon e-ss-left" },
            { id: "right", text: obj._getLocStr("RightBorder"), parentId: null, sprite: "e-icon e-ss-right" },
            { id: "noborder", text: obj._getLocStr("NoBorder"), parentId: null, sprite: "e-icon e-ss-noborder" },
            { id: "allborder", text: obj._getLocStr("AllBorder"), parentId: null, sprite: "e-icon e-ss-allborder" },
            { id: "outside", text: obj._getLocStr("OutsideBorder"), parentId: null, sprite: "e-icon e-ss-outside" },
            { id: "thickbox", text: obj._getLocStr("ThickBoxBorder"), parentId: null, sprite: "e-icon e-ss-thickbox" },
            { id: "doublebottom", text: obj._getLocStr("BottomDoubleBorder"), parentId: null, sprite: "e-icon e-ss-doublebottom" },
            { id: "thickbottom", text: obj._getLocStr("ThickBottomBorder"), parentId: null, sprite: "e-icon e-ss-thickbottom" },
            { id: "topandbottom", text: obj._getLocStr("TopandBottomBorder"), parentId: null, sprite: "e-icon e-ss-topandbottom" },
            { id: "topandthickbottom", text: obj._getLocStr("TopandThickBottomBorder"), parentId: null, sprite: "e-icon e-ss-topandthickbottom" },
            { id: "topanddoublebottom", text: obj._getLocStr("TopandBottomDoubleBorder"), parentId: null, sprite: "e-icon e-ss-topanddoublebottom" },
            { id: "drawborder", text: obj._getLocStr("DrawBorder"), parentId: null, sprite: "e-icon e-ss-drawborder" },
            { id: "drawbordergrid", text: obj._getLocStr("DrawBorderGrid"), parentId: null, sprite: "e-icon e-ss-drawbordergrid" },
            { id: obj._id + "_bordercolor", text: obj._getLocStr("BorderColor"), parentId: null },
            { id: obj._id + "_Ribbon_borderstyle", text: obj._getLocStr("BorderStyle"), parentId: null },
            { id: obj._id + "_Ribbon_bordercolor", text: "", parentId: obj._id + "_bordercolor" },
            { id: "solid", text: borderstyle[0], parentId: obj._id + "_Ribbon_borderstyle" },
            { id: "dashed", text: borderstyle[1], parentId: obj._id + "_Ribbon_borderstyle" },
            { id: "dotted", text: borderstyle[2], parentId: obj._id + "_Ribbon_borderstyle" },
            { id: "double", text: borderstyle[3], parentId: obj._id + "_Ribbon_borderstyle" }
        ];
        this._cFormatMenuData = [
            { id: obj._id + "_HLCellRules", text: obj._getLocStr("HighlightCellRules"), parentId: null, sprite: "e-icon e-ss-hlcellrules" },
            { id: "greaterthan", text: obj._getLocStr("GreaterThan") + "...", parentId: obj._id + "_HLCellRules", sprite: "e-icon e-ss-greaterthan" },
            { id: "lessthan", text: obj._getLocStr("LessThan") + "...", parentId: obj._id + "_HLCellRules", sprite: "e-icon e-ss-lessthan" },
            { id: "between", text: obj._getLocStr("Between") + "...", parentId: obj._id + "_HLCellRules", sprite: "e-icon e-ss-between" },
            { id: "equalto", text: obj._getLocStr("EqualTo") + "...", parentId: obj._id + "_HLCellRules", sprite: "e-icon e-ss-equalto" },
            { id: "textcontains", text: obj._getLocStr("TextthatContains") + "...", parentId: obj._id + "_HLCellRules", sprite: "e-icon e-ss-textcontains" },
            { id: "dateoccur", text: obj._getLocStr("DateOccurring") + "...", parentId: obj._id + "_HLCellRules", sprite: "e-icon e-ss-dateoccur" },
            { id: obj._id + "_DataBars", text: obj._getLocStr("DataBars"), parentId: null, sprite: "e-icon e-ss-databars" },
            { id: "databar", text: "", parentId: obj._id + "_DataBars", style: 'display: none' },
            { id: obj._id + "_ColorScales", text: obj._getLocStr("ColorScales"), parentId: null, sprite: "e-icon e-ss-colorscales" },
            { id: "colorscale", text: "", parentId: obj._id + "_ColorScales" },
            { id: obj._id + "_IconSets", text: obj._getLocStr("IconSets"), parentId: null, sprite: "e-icon e-ss-iconsets" },
            { id: "iconset", text: "", parentId: obj._id + "_IconSets" },
            { id: obj._id + "_CreateRule", text: obj._getLocStr('CreateRule'), parentId: null, sprite: "e-icon e-ss-createrule" },
            { id: obj._id + "_ClearRules", text: obj._getLocStr('ClearRules'), parentId: null, sprite: "e-icon e-ss-clearrules" },
            { id: "clearselected", text: obj._getLocStr('ClearRulesfromSelected'), parentId: obj._id + "_ClearRules" },
            { id: "clearall", text: obj._getLocStr('ClearRulesfromEntireSheets'), parentId: obj._id + "_ClearRules" }
        ];
        this._textAlign = [{ value: "1", text: "Left" }, { value: "2", text: "Center" }, { value: "3", text: "Right" }];
        this._verticalAlign = [{ value: "1", text: "Top" }, { value: "2", text: "Middle" }, { value: "3", text: "Bottom" }];
        var dataVal = obj._getLocStr("DataValidationAction").split("/");
        this._actions = [{ value: "Greater", text: dataVal[0] }, { value: "GreaterOrEqual", text: dataVal[1] }, { value: "Less", text: dataVal[2] }, { value: "LessOrEqual", text: dataVal[3] }, { value: "Equal", text: dataVal[4] }, { value: "NotEqual", text: dataVal[5] }, { value: "Between", text: dataVal[6] }, { value: "NotBetween", text: dataVal[7] }];
        dataVal = obj._getLocStr("DataValidationType").split("/");
        this._types = [{ value: "number", text: dataVal[0] }, { value: "decimal", text: dataVal[1] }, { value: "date", text: dataVal[2] }, { value: "time", text: dataVal[3] }, { value: "text", text: dataVal[4] }, { value: "list", text: dataVal[5] }];
        this._cFormatData = {
            greaterthan: ["GTTitle", "GTContent"], lessthan: ["LTTitle", "LTContent"], between: ["BWTitle", "BWContent"], equalto: ["EQTitle", "EQContent"], textcontains: ["ContainsTitle", "ContainsContent"], dateoccur: ["DateTitle", "DateContent"],
            toptenitems: ["TTTitle", "TTContent"], toptenpercent: ["TTPTitle", "TTPContent"], bottomtenitems: ["BTTitle", "BTContent"], bottomtenpercent: ["BTPTitle", "BTPContent"], aboveaverage: ["AAverageTitle", "AAverageContent"], belowaverage: ["BAverageTitle", "BAverageContent"]
        };
        this._styles = [{ value: "redft", text: obj._getLocStr("LightRedFillDark") }, { value: "yellowft", text: obj._getLocStr("YellowFillDark") }, { value: "greenft", text: obj._getLocStr("GreenFillDark") }, { value: "redf", text: obj._getLocStr("RedFill") }, { value: "redt", text: obj._getLocStr("RedText") }];
        this._currentCFormat = "";
        this._addrList = [];
        this._within = [{ value: "sheet", text: obj._getLocStr("Sheet") }, { value: "workbook", text: obj._getLocStr("Workbook") }];
        this._sType = [{ value: "columns", text: obj._getLocStr("Columns") }, { value: "rows", text: obj._getLocStr("Rows") }];
        this._vType = [{ value: "value", text: obj._getLocStr("Value") }, { value: "formula", text: obj._getLocStr("Formula") }, { value: "comment", text: obj._getLocStr("Comments") }];
        this._direction = [{ value: "down", text: obj._getLocStr("Down") }, { value: "up", text: obj._getLocStr("Up") }];
        this._gotoRBtnSet1 = ["Comments", "Blanks", "LastCell", "Formulas", "Constants"];
        this._gotoRBtnSet2 = ["RowDiff", "ColDiff", "CFormat", "DataValidation"];
        this._gotoChkBox = ["GotoNumbers", "GotoText", "GotoLogicals", "GotoError"];
        this._numberFormat = [{ value: "General", text: obj._getLocStr("LGeneral") }, { value: "Number", text: obj._getLocStr("NumberTab") }, { value: "Currency", text: obj._getLocStr("LCurrency") }, { value: "Accounting", text: obj._getLocStr("LAccounting") }, { value: "Percentage", text: obj._getLocStr("LPercentage") }, { value: "Text", text: obj._getLocStr("LText") }, { value: "Shortdate", text: obj._getLocStr("LShortdate") }, { value: "Longdate", text: obj._getLocStr("LLongdate") }, { value: "Time", text: obj._getLocStr("LTime") }, { value: "Scientific", text: obj._getLocStr("LScientific") }, { value: "Fraction", text: obj._getLocStr("LFraction") }, { value: "Custom", text: obj._getLocStr("LCustom") }];
        this._deleteMenuData = [
            { id: "DeleteCells", text: obj._getLocStr("DelCells") + "...", parentId: null, sprite: "e-icon e-ssr-delcell" },
            { id: "DeleteSheetRows", text: obj._getLocStr("DelRows"), parentId: null, sprite: "e-icon e-ssr-delrow" },
            { id: "DeleteSheetColumns", text: obj._getLocStr("DelCols"), parentId: null, sprite: "e-icon e-ssr-delcol" },
            { id: "DeleteSheet", text: obj._getLocStr("DelSheet"), parentId: null, sprite: "e-icon e-ssr-delsheet" }
        ];
        this._clearMenuData = [
            { id: "Clear_All", text: obj._getLocStr("ClearAll"), parentId: null, sprite: "e-icon e-ss-clear" },
            { id: "Clear_Formats", text: obj._getLocStr("ClearFormats"), parentId: null, sprite: "e-icon e-ss-clearformat" },
            { id: "Clear_Contents", text: obj._getLocStr("ClearContents"), parentId: null },
            { id: "Clear_Comments", text: obj._getLocStr("ClearComments"), parentId: null },
            { id: "Clear_Hyperlinks", text: obj._getLocStr("ClearHyperLinks"), parentId: null }
        ];
        this._autosumMenuData = [
            { id: "Sum", text: obj._getLocStr("Sum"), parentId: null, sprite: "e-icon e-ss-autosum" },
            { id: "Average", text: obj._getLocStr("Average"), parentId: null },
            { id: "Count", text: obj._getLocStr("CountNumber"), parentId: null },
            { id: "Max", text: obj._getLocStr("Max"), parentId: null },
            { id: "Min", text: obj._getLocStr("Min"), parentId: null }
        ];
        this._chartThemes = [{ value: "flatlight", text: "Flat Light" }, { value: "flatdark", text: "Flat Dark" }, { value: "azure", text: "Azure" }, { value: "azuredark", text: "Azure Dark" }, { value: "lime", text: "Lime" }, { value: "limedark", text: "Lime Dark" }, { value: "saffron", text: "Saffron" }, { value: "saffrondark", text: "Saffron Dark" }];
        this._isCustomCellStyleReset = false;
        this.allButtonIds = ["Home_Clipboard_Paste", "Home_Font_IncreaseFontSize", "Home_Font_DecreaseFontSize", "Home_Alignment_DecreaseIndent", "Home_Alignment_IncreaseIndent", "Home_Number_IncreaseDecimal", "Home_Number_DecreaseDecimal", "Home_Actions_Undo", "Home_Actions_Redo", "Home_Number_Accounting", "Home_Number_CommaStyle", "Home_Number_Percentage", "Home_Clipboard_Cut", "Home_Clipboard_Copy", "Insert_Tables_PivotTable", "Insert_Tables_Table", "Insert_Links_Hyperlink", "Insert_Illustrations_Pictures", "Insert_Sparkline_Line", "Insert_Sparkline_Column", "Insert_Sparkline_Winloss", "Data_SortFilter_SortAtoZ", "Data_SortFilter_SortZtoA",
            "Data_SortFilter_Filter", "Data_SortFilter_ClearFilter", "Data_DataTools_DataValidation", "PageLayout_PageLayout_PageSize", "PageLayout_Print_Print", "PageLayout_Print_PrintSelected", "Review_Comments_NewComment", "Review_Comments_DeleteComment", "Review_Comments_PreviousComment", "Review_Comments_NextComment", "Review_Comments_ShowHideComment", "Others_Cells_InsertCell", "Others_Cells_DeleteCell", "Others_Formulas_NameManager", "Others_Formulas_DefineName", "Others_CalCulation_CalculateNow", "Others_CalCulation_CalculateSheet", "Design_Tools_ResizeTable", "Design_Tools_ConvertToRange", "ChartDesign_Data_SwitchRowColumn", "ChartDesign_Data_SelectData", "ChartDesign_Type_ChangeChartType", "Format_Adjust_ChangePicture"];
        this.allSplitButtonIds = ["Home_Clipboard_PasteOptions", "Home_Font_Border", "Home_Styles_ConditionalFormatting", "Home_Styles_FormatAsTable", "Home_Styles_CellStyles", "Others_Editing_FindSelect", "Home_Editing_Clear", "Home_Alignment_Merge", "Home_Editing_SortFilter", "Home_Editing_AutoSum", "Insert_Charts_ColumnChart", "Insert_Charts_BarChart", "Insert_Charts_StockChart", "Insert_Charts_LineChart", "Insert_Charts_AreaChart", "Insert_Charts_PieChart", "Insert_Charts_ScatterChart", "Data_DataTools_DataValidationOptions", "PageLayout_PageLayout_PageSizeOptions", "Others_Cells_InsertCellOptions", "Others_Cells_DeleteCellOptions", "Others_Editing_FindSelect", "Others_Window_FreezePanes", "Others_CalCulation_CalculationOptions", "ChartDesign_ChartLayouts_AddChartElement", "Format_Adjust_ResetPicture", "Format_Border_PictureBorder", "SparklineDesign_Style_MarkerColor", "SparklineDesign_Style_SparklineColor", "SparklineDesign_Sparkline_EditData"]
        this.allToggleButtonIds = ["Home_Font_Bold", "Home_Font_Italic", "Home_Font_Underline", "Home_Font_StrikeThrough", "Home_Alignment_AlignLeft", "Home_Alignment_AlignRight", "Home_Alignment_AlignCenter", "Home_Alignment_TopAlign", "Home_Alignment_MiddleAlign", "Home_Alignment_BottomAlign", "Home_Alignment_WrapText", "Home_Clipboard_FormatPainter", "Review_Comments_ShowAllComments", "Review_Changes_ProtectSheet", "Review_Changes_ProtectWorkbook", "Review_Changes_LockCell"]
        this.allDropDownIds = ["ChartDesign_ChartThemes_ChartThemes", "Home_Number_NumberFormat", "Home_Font_FontSize", "Home_Font_FontFamily"];
        this.colorPickerIds = ["Home_Font_FillColor", "Home_Font_FontColor"];
        this.checkBoxIds = ["PageLayout_Show_Headings", "PageLayout_Show_Gridlines", "Design_TableStyleOptions_FirstColumn", "Design_TableStyleOptions_LastColumn", "Design_TableStyleOptions_TotalRow", "Design_TableStyleOptions_FilterColumn"];
        this.InputIds = ["Ribbon_Design_Properties_TableName"];
        this._fileMenuData = [
            { id: "File", text: obj._getLocStr("File"), parentId: null },
            { id: "New", text: obj._getLocStr("New"), parentId: "File", sprite: "e-icon e-ss-newsheet" },
            { id: "Open", text: obj._getLocStr("Open") + "...", parentId: "File", sprite: "e-icon e-ss-open" },
            { id: "Save", text: obj._getLocStr("SaveAs"), parentId: "File", sprite: "e-icon e-ss-saveas" },
            { id: "Print", text: obj._getLocStr("Print"), parentId: "File", sprite: "e-icon e-ssm-print" },
            { id: "ExportXL", text: obj._getLocStr("ExportXL"), parentId: "Save", sprite: "e-icon e-ssm-exportxl" },
            { id: "ExportCsv", text: obj._getLocStr("ExportCsv"), parentId: "Save", sprite: "e-icon e-ssm-exportcsv" },
            { id: "ExportPdf", text: obj._getLocStr("ExportPdf"), parentId: "Save", sprite: "e-icon e-ssm-exportpdf" },
            { id: "PrintSheet", text: obj._getLocStr("PrintSheet"), parentId: "Print", sprite: "e-icon e-ssm-print" },
            { id: "PrintSelected", text: obj._getLocStr("PrintSelected"), parentId: "Print", sprite: "e-icon e-ssm-printselected" }
        ];
        this._isAppTabCreate = false,
            this._isHomeTabCreate = false,
            this._isInsertTabCreate = false,
            this._isDataTabCreate = false,
            this._isPageLayoutTabCreate = false,
            this._isReviewTabCreate = false,
            this._isOthersTabCreate = false,
            this._isDesignTabCreate = false,
            this._isFormatTabCreate = false,
            this._isChartTabCreate = false,
            this._analyzeTabCreate = false,
            this._isSparklineTabCreate = false,

            this._isHomeTabTrgt = false,
            this._isInsertTabTrgt = false,
            this._isDataTabTrgt = false,
            this._isPageLayoutTrgtTab = false,
            this._isReviewTabTrgt = false,
            this._isOthersTabTrgt = false,
            this._isDesignTabTrgt = false,
            this._isFormatTabTrgt = false,
            this._isChartTabTrgt = false,
            this._analyzeTabTrgt = false,
            this._isSparklineTrgt = false,
            this._scopeBookCln = {}
    };

    ej.spreadsheetFeatures.ribbon.prototype = {

        _renderChartTypeDialog: function () {
            var $dlg, $tab, $okBtn, $canBtn, $btndiv, $ul, $li, $aTag, $divctnr, $btnctnr, xlObj = this.XLObj, dlgId = xlObj._id + "_charttypedlg";
            $dlg = ej.buildTag("div#" + dlgId + ".e-chartdialog", "", {}, { "overflow": "hidden" });
            $tab = ej.buildTag("div#" + dlgId + "_allcharttab.e-chtdlgtab");
            $divctnr = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
            $ul = ej.buildTag("ul .e-ul", "", "");
            $aTag = ej.buildTag("a", xlObj._getLocStr("AllCharts"), {}, { href: "#" + xlObj._id + "_allchart" });
            $li = ej.buildTag("li", $aTag);
            $dlg.append($divctnr.append($tab.append($ul.append($li))));
            $btndiv = ej.buildTag("div#" + dlgId + "_btndiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + dlgId + "_okbtn", "", {}, { type: "button" });
            $canBtn = ej.buildTag("input#" + dlgId + "_cantn", "", {}, { type: "button" });
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._chartTypeOk, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._chartTypeCancel, this), showRoundedCorner: true, width: 60 });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            xlObj.element.append($dlg);
            $tab.ejTab({ cssClass: "e-ss-dlgtab", width: "100%", height: "auto" });
            this._renderAllChartTab();
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("ChartType"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-charttype-dlg e-ss-mattab e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
            return $dlg;
        },

        _renderAllChartTab: function () {
            var i, j, len, chartCnt, chartLen, splt, $contentdiv, chart, colChart, chartTitle, $leftdiv, $listUl, chartColl = [],
                content = "", $li = "", xlObj = this.XLObj, xlId = xlObj._id, charttabId = xlId + "_chartdlg_allcharttab",
                chartName = ["Column-6", "Bar-6", "Radar-2", "Line-2", "Area-3", "Pie-3", "Scatter-1"], $div;
            $leftdiv = ej.buildTag("div#" + charttabId + "_content.e-ss-leftdiv", "");
            $contentdiv = ej.buildTag("div#" + charttabId + "_content.e-chtdlgcontent e-ss-rightdiv", "", { overflow: "auto" });
            $listUl = ej.buildTag("ul #" + charttabId + "_list .e-ul");
            for (chartCnt = 0, chartLen = chartName.length; chartCnt < chartLen; chartCnt++) {
                chart = chartName[chartCnt].split("-")[0];
                $li += "<li><span class='e-icon e-ss-dlg" + chart.toLowerCase() + "chart'></span>" + xlObj._getLocStr(chart) + "</li>";
                chartColl.push(chart);
            }
            $listUl.append($($li));
            $div = ej.buildTag("div#" + xlId + "_allchart_table.e-ss-maindiv", "", { cellspacing: "0", cellpadding: "0", display: "table", width: "100%" });
            $("#" + xlId + "_allchart").append($div);
            $div.append($leftdiv.append($listUl));
            this._createChartList(chartColl);
            $div.append($contentdiv);
            for (j = 0, chartLen = chartName.length; j < chartLen; j++) {
                splt = chartName[j].split("-");
                switch (splt[0]) {
                    case "Column":
                        chartTitle = [xlObj._getLocStr("ClusteredColumn"), xlObj._getLocStr("StackedColumn"), "100%&nbsp;" + xlObj._getLocStr("StackedColumn"), "3-D&nbsp;" + xlObj._getLocStr("ClusteredColumn"), "3-D&nbsp;" + xlObj._getLocStr("StackedColumn"), "3-D&nbsp;100%&nbsp;" + xlObj._getLocStr("StackedColumn")];
                        break;
                    case "Bar":
                        chartTitle = [xlObj._getLocStr("ClusteredBar"), xlObj._getLocStr("StackedBar"), "100%&nbsp;" + xlObj._getLocStr("StackedBar"), "3-D&nbsp;" + xlObj._getLocStr("ClusteredBar"), "3-D&nbsp;" + xlObj._getLocStr("StackedBar"), "3-D&nbsp;100%&nbsp;" + xlObj._getLocStr("StackedBar")];
                        break;
                    case "Radar":
                        chartTitle = [xlObj._getLocStr("Radar"), xlObj._getLocStr("RadarMarkers")];
                        break;
                    case "Line":
                        chartTitle = [xlObj._getLocStr("Line"), xlObj._getLocStr("LineMarkers")];
                        break;
                    case "Area":
                        chartTitle = [xlObj._getLocStr("Area"), xlObj._getLocStr("StackedArea"), "100%&nbsp;" + xlObj._getLocStr("StackedArea")];
                        break;
                    case "Pie":
                        chartTitle = [xlObj._getLocStr("Pie"), "3-D&nbsp;" + xlObj._getLocStr("Pie"), xlObj._getLocStr("Doughnut")];
                        break;
                    case "Scatter":
                        chartTitle = [xlObj._getLocStr("Scatter")];
                        break;
                }
                chart = splt[0].toLowerCase();
                colChart = ej.buildTag("div#" + xlId + "_" + chart + "chart");
                for (i = 1, len = parseInt(splt[1]); i <= len; i++)
                    content += "<div class='e-chartimg e-dlg" + chart + "chart" + i + "' title='" + chartTitle[i - 1] + "'></div>";
                $contentdiv.append(colChart.append(content));
                $("#" + xlId + "_" + chart + "chart").find(".e-dlg" + chart + "chart1").addClass("e-chartselect");
                colChart.hide();
                content = "";
            }
            xlObj._on($("#" + xlId + "_allchart").find(".e-chartimg"), "click", xlObj._allChartType);
            $("#" + xlId + "_columnchart").show();
        },

        _createChartList: function (chartName) {
            var xlObj = this.XLObj, charttabId = xlObj._id + "_chartdlg_allcharttab", $ddlInput, $listUl = $("#" + charttabId + "_list"), $drpdiv = ej.buildTag("div.e-ss-drpdiv");
            $ddlInput = ej.buildTag("input#" + charttabId + "_input");
            $("#" + xlObj._id + "_allchart").prepend($drpdiv.append($ddlInput));
            $ddlInput.ejDropDownList({ dataSource: chartName, width: "100%", fields: { id: "value", text: "text", value: "text" }, select: $.proxy(this._onChartChange, this), selectedItemIndex: 0 });
            $listUl.ejListBox({
                selectedItemIndex: 0, width: "120", height: "250",
                fields: { text: "text", value: "value" }, select: $.proxy(this._onChartChange, this),
                allowMultiSelection: false
            });
        },

        _onChartChange: function (args) {
            var i, xlObj = this.XLObj, chart = args.value ? args.value.toLowerCase() : args.text.toLowerCase(), allChart = ["column", "bar", "radar", "line", "area", "pie", "scatter"];
            for (i = 0; i < allChart.length; i++)
                $("#" + xlObj._id + "_" + allChart[i] + "chart").hide();
            $("#" + xlObj._id + "_" + chart + "chart").show();
            $("#" + xlObj._id + "_allchart").find(".e-chartimg").removeClass("e-chartselect");
            $("#" + xlObj._id + "_" + chart + "chart").find(".e-dlg" + chart + "chart1").addClass("e-chartselect");
        },

        _initValDialog: function () {
            var $dlg, $tab, $okBtn, $canBtn, $btndiv, $ul, $li, $aTag, xlObj = this.XLObj, $divctnr, $btnctnr;
            $dlg = ej.buildTag("div#" + xlObj._id + "_ValDialog");
            $tab = ej.buildTag("div#" + xlObj._id + "_ValDialog_valDlgTab");
            $divctnr = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
            //create tab Content
            $ul = ej.buildTag("ul .e-ul");
            $aTag = ej.buildTag("a", xlObj._getLocStr("Settings"), {}, { href: "#" + xlObj._id + "_Validation" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $tab.append($ul);
            $dlg.append($divctnr.append($tab));
            $btndiv = ej.buildTag("div#" + xlObj._id + "btnDiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + xlObj._id + "Dialog_OkBtn", "", {}, { type: "button" });
            $canBtn = ej.buildTag("input#" + xlObj._id + "Dialog_CancelBtn", "", {}, { type: "button" });
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._valDlgBtnClick, this, "ok"), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._valDlgBtnClick, this, "cancel"), showRoundedCorner: true, width: 60 });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            xlObj.element.append($dlg.append($btndiv));
            $tab.ejTab({ width: "100%", height: "auto", cssClass: "e-ss-dlgtab" });
            this._renderValDialog();
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("DataValidation"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-ss-valdlg e-ss-mattab e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
            this._dialogValidate("_ValDialog");
        },

        _initCFDialog: function () {
            var xlObj = this.XLObj, $dlg, $div, $okBtn, $canBtn, $btndiv, $btnctnr;
            $dlg = ej.buildTag("div#" + xlObj._id + "_CFDialog");
            xlObj.element.append($dlg);
            $div = ej.buildTag("div#" + xlObj._id + "_CondFormat.e-dlgctndiv");
            $dlg.append($div);
            $btndiv = ej.buildTag("div#" + xlObj._id + "cfBtnDiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + xlObj._id + "cfDialog_OkBtn", "", {}, { type: "button" });
            $canBtn = ej.buildTag("input#" + xlObj._id + "cfDialog_CancelBtn", "", {}, { type: "button" });
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: "25%", click: ej.proxy(this._dlgCFOk, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._dlgCFCancel, this), showRoundedCorner: true, width: "25%" });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("ConditionalFormat"), width: "auto", cssClass: "e-ss-dialog e-ss-cfdlg e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
            return $dlg;
        },

        _initHLDialog: function () {
            var xlObj = this.XLObj, $dlg, $tab, $ul, $li, $aTag, $btndiv, $okBtn, $canBtn, $divctnr, $btnctnr;
            $dlg = ej.buildTag("div#" + xlObj._id + "_HLDialog");
            $tab = ej.buildTag("div#" + xlObj._id + "_HLDialogTab");
            $divctnr = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
            //create tab Content
            $ul = ej.buildTag("ul .e-ul");
            $aTag = ej.buildTag("a", xlObj._getLocStr("WebPage"), {}, { href: "#" + xlObj._id + "_Web" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $aTag = ej.buildTag("a", xlObj._getLocStr("WorkSheet"), {}, { href: "#" + xlObj._id + "_Doc" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $tab.append($ul);
            $dlg.append($divctnr.append($tab));
            $btndiv = ej.buildTag("div#" + xlObj._id + "hlBtnDiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + xlObj._id + "hlDialog_OkBtn", "", {}, { type: "button" });
            $canBtn = ej.buildTag("input#" + xlObj._id + "hlDialog_CancelBtn", "", {}, { type: "button" });
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._dlgHLOk, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._dlgHLCancel, this), showRoundedCorner: true, width: 60 });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({
                enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("InsertHyperLink"), width: "auto", cssClass: "e-ss-dialog e-ss-hyperlinkdlg e-ss-mattab e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this), open: ej.proxy(function () {
                    var webAddr = $("#" + xlObj._id + "_Ribbon_webAddress"), cellAddr = $("#" + xlObj._id + "_Ribbon_cellAddress");
                    webAddr.focus().setInputPos(webAddr.val().length);
                    cellAddr.focus().setInputPos(cellAddr.val().length);
                })
            });
            $tab.ejTab({ width: "100%", itemActive: ej.proxy(this._hlTabChange, this), cssClass: "e-ss-dlgtab" });
            this._renderHLDialog();
        },

        _initFRDialog: function () {
            var xlObj = this.XLObj, $dlg, $tab, $findNextBtn, $findPrevBtn, $close, $btndiv, $btnctnr, $ul, $li, $ctnr, $aTag, $replaceBtn, $replaceAllBtn;
            $dlg = ej.buildTag("div#" + xlObj._id + "_FRDialog");
            $tab = ej.buildTag("div#" + xlObj._id + "_FRDialog_FPDlgTab");
            $ctnr = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
            //create tab Content
            $ul = ej.buildTag("ul .e-ul");
            $aTag = ej.buildTag("a", xlObj._getLocStr("Find"), {}, { href: "#" + xlObj._id + "_Find" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $aTag = ej.buildTag("a", xlObj._getLocStr("Replace"), {}, { href: "#" + xlObj._id + "_Replace" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $aTag = ej.buildTag("a", xlObj._getLocStr("Settings"), {}, { href: "#" + xlObj._id + "_Settings" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $tab.append($ul);
            $dlg.append($ctnr.append($tab));
            $btndiv = ej.buildTag("div#" + xlObj._id + "btnFRDiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $replaceBtn = ej.buildTag("input#" + xlObj._id + "FR_ReplaceBtn", "", { "margin-left": 0 }, { type: "button" });
            $replaceAllBtn = ej.buildTag("input#" + xlObj._id + "FR_ReplaceAllBtn", "", {}, { type: "button" });
            $findNextBtn = ej.buildTag("input#" + xlObj._id + "FR_NextBtn", "", {}, { type: "button" });
            $findPrevBtn = ej.buildTag("input#" + xlObj._id + "FR_PrevBtn", "", {}, { type: "button" });
            $close = ej.buildTag("input#" + xlObj._id + "FR_CloseBtn", "", {}, { type: "button" });
            $replaceBtn.ejButton({ text: xlObj._getLocStr("Replace"), showRoundedCorner: true, width: 55, click: ej.proxy(this._btnFROnClick, this, "FR_ReplaceBtn"), enabled: true }).css("visibility", "hidden");
            $replaceAllBtn.ejButton({ text: xlObj._getLocStr("ReplaceAll"), showRoundedCorner: true, click: ej.proxy(this._btnFROnClick, this, "FR_ReplaceAllBtn"), enabled: true }).css("visibility", "hidden");
            $findNextBtn.ejButton({ text: xlObj._getLocStr("FindNext"), showRoundedCorner: true, width: 69, click: ej.proxy(this._btnFROnClick, this, "FR_NextBtn"), enabled: true });
            $findPrevBtn.ejButton({ text: xlObj._getLocStr("FindPrev"), showRoundedCorner: true, width: 69, click: ej.proxy(this._btnFROnClick, this, "FR_PrevBtn"), enabled: true });
            $close.ejButton({ text: xlObj._getLocStr("Close"), click: ej.proxy(this._btnFROnClick, this, "FR_CloseBtn"), showRoundedCorner: true, width: 47 });
            $btndiv.append($btnctnr.append($replaceBtn, $replaceAllBtn, $findNextBtn, $findPrevBtn, $close));
            $dlg.append($btndiv);
            $dlg.ejDialog({
                showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("FindnReplace"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-ss-mattab e-ss-frdlg e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this), open: ej.proxy(function () {
                    if (xlObj._phoneMode) {
                        $("#" + xlObj._id + "FR_ReplaceBtn").hide();
                        $("#" + xlObj._id + "FR_ReplaceAllBtn").hide();
                    }
                    else {
                        $("#" + xlObj._id + "FR_ReplaceBtn").show();
                        $("#" + xlObj._id + "FR_ReplaceAllBtn").show();
                    }
                    var findTxt = $("#" + xlObj._id + "_Ribbon_textFind");
                    findTxt.focus().setInputPos(findTxt.val().length);
                })
            });
            $tab.ejTab({ width: "100%", itemActive: ej.proxy(this._findTabChange, this), cssClass: "e-ss-dlgtab" });
        },

        _initGoToDialog: function () {
            var xlObj = this.XLObj, $dlg, $tab, $btndiv, $ul, $li, $aTag, $okBtn, $canBtn, $ctnr, $btnctnr;
            $dlg = ej.buildTag("div#" + xlObj._id + "_GoDialog");
            $tab = ej.buildTag("div#" + xlObj._id + "_GoToDlgTab");
            $ctnr = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
            //create tab Content
            $ul = ej.buildTag("ul .e-ul");
            $aTag = ej.buildTag("a", xlObj._getLocStr("GoTo"), {}, { href: "#" + xlObj._id + "_GoTo" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $aTag = ej.buildTag("a", xlObj._getLocStr("GoTo") + " " + xlObj._getLocStr("Special"), {}, { href: "#" + xlObj._id + "_GoToSp" });
            $li = ej.buildTag("li", $aTag);
            $ul.append($li);
            $tab.append($ul);
            $dlg.append($ctnr.append($tab));
            $btndiv = ej.buildTag("div#" + xlObj._id + "btnDiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $dlg.append($btndiv.append($btnctnr));
            $okBtn = ej.buildTag("input#" + xlObj._id + "Dialog_GoOkBtn", "", {}, { type: "button" });
            $canBtn = ej.buildTag("input#" + xlObj._id + "Dialog_GoCancelBtn", "", {}, { type: "button" });
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: "23%", click: ej.proxy(this._gotoBtnClick, this, "ok"), cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._gotoBtnClick, this, "cancel"), showRoundedCorner: true, width: 60 });
            $btnctnr.append($okBtn, $canBtn);
            xlObj.element.append($dlg);
        },

        _initPvtDialog: function () {
            var xlObj = this.XLObj, $dlg, $okBtn, $canBtn, $btndiv, $btnctnr;
            $dlg = ej.buildTag("div#" + xlObj._id + "_PvtDialog");
            xlObj.element.append($dlg);
            $dlg.append(ej.buildTag("div#" + xlObj._id + "_Pivot.e-dlgctndiv"));
            $btndiv = ej.buildTag("div#" + xlObj._id + "pvtBtnDiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + xlObj._id + "PvtDialog_OkBtn");
            $canBtn = ej.buildTag("input#" + xlObj._id + "PvtDialog_CancelBtn");
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: "25%", click: ej.proxy(this._dlgPvtOk, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._dlgPvtCancel, this), showRoundedCorner: true, width: "25%" });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("CreatePivotTable"), width: "auto", cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg e-ss-pvtdlg", close: ej.proxy(this._dialogClose, this) });
        },

        _dialogClose: function () {
            this.XLObj._setSheetFocus();
        },

        _beforeDlgClose: function (args) {
            var gridOlay = $("#" + this.XLObj._id + "_nmgrid_dialogEdit_overLay");
            gridOlay.length && (args.cancel = true);
        },

        _homeTabObj: function () {
            var createdObj, xlObj = this.XLObj, imgtop = "imagetop", homeTab = { id: "home", text: xlObj._getLocStr("HOME"), groups: [] }, xlId = xlObj._id;
            createdObj = {
                id: "Clipboard",
                text: xlObj._getLocStr("Clipboard"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("Home_Clipboard_Paste", "paste", "textandimage", "e-icon e-ssr-paste", 45, this._mediumBtnHeight, "Paste", "PasteContent", false, imgtop, "", " (Ctrl+V)"),
                        this._generateSplitBtn("Home_Clipboard_PasteOptions", "Paste", "textandimage", xlId + "_Ribbon_Paste", { dataSource: this._pasteMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "", false, 45, this._mediumBtnHeight, "bottom", "", "dropdown", "e-ssr-pastesbtn", "Paste", "PasteSplitContent", " (Ctrl+V)")
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Home_Clipboard_Cut", "Cut", "textandimage", "e-icon e-ssr-cut", 58, this._smallBtnHeight, "Cut", "CutContent", "", "", "", " (Ctrl+X)"),
                        this._generateBtn("Home_Clipboard_Copy", "Copy", "textandimage", "e-icon e-ssr-copy", 67, this._smallBtnHeight, "Copy", "CopyContent", "", "", "", " (Ctrl+C)"),
                        this._generateToggleBtn("Home_Clipboard_FormatPainter", "FormatPainter", "textandimage", "e-icon e-ss-formatpainter", "FPTitle", 110, this._smallBtnHeight, "FPContent")
                    ],
                }]
            };
            homeTab.groups.push(createdObj);
            createdObj = {
                id: "Font",
                text: xlObj._getLocStr("Font"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateDD("Home_Font_FontFamily", "FontFamily", this._fontFamily, "7", 150, this._smallBtnHeight, "FontFamily", "FFContent"),
                        this._generateDD("Home_Font_FontSize", "FontSize", this._fontSize, "11pt", 65, this._smallBtnHeight, "FontSize", "FSContent"),
                        this._generateBtn("Home_Font_IncreaseFontSize", "IncreaseFontSize", "imageonly", "e-icon e-ss-increasefontsize", "", this._smallBtnHeight, "IncreaseFontSize", "IFSContent"),
                        this._generateBtn("Home_Font_DecreaseFontSize", "DecreaseFontSize", "imageonly", "e-icon e-ss-decreasefontsize", "", this._smallBtnHeight, "DecreaseFontSize", "DFSContent")
                    ],
                },
                {
                    groups: [
                        this._generateToggleBtn("Home_Font_Bold", "Bold", "imageonly", "e-icon e-ss-bold", "Bold", "", this._smallBtnHeight, "BoldContent", "", "", "", "", "", "", " (Ctrl+B)"),
                        this._generateToggleBtn("Home_Font_Italic", "Italic", "imageonly", "e-icon e-ss-italic", "Italic", "", this._smallBtnHeight, "ItalicContent", "", "", "", "", "", "", " (Ctrl+I)"),
                        this._generateToggleBtn("Home_Font_Underline", "Underline", "imageonly", "e-icon e-ss-underline", "Underline", "", this._smallBtnHeight, "ULineContent", "", "", "", "", "", "", " (Ctrl+U)"),
                        this._generateToggleBtn("Home_Font_StrikeThrough", "Linethrough", "imageonly", "e-icon e-ss-linethrough", "Linethrough", 25, this._smallBtnHeight, "LineTrContent", true, "", "", "", "", "", " (Ctrl+5)"),
                        this._generateSplitBtn("Home_Font_Border", "Border", "imageonly", xlId + "_Ribbon_Border", { dataSource: this._borderMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ss-bottom", true, 37, this._smallBtnHeight, "", "", "", "e-borderbtn", "Border", "BorderContent"),
                        this._generateCustomControl(xlId + "_Ribbon_Home_Font_FillColor", "BackgroundColor", "BackgroundColor", "BGContent"),
                        this._generateCustomControl(xlId + "_Ribbon_Home_Font_FontColor", "FontColor", "Color", "ColorContent")
                    ],
                }]
            };
            homeTab.groups.push(createdObj);
            createdObj = {
                id: "Alignment",
                text: xlObj._getLocStr("AlignmentTab"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateToggleBtn("Home_Alignment_TopAlign", "TopAlign", "imageonly", "e-icon e-ss-topalign", "TopAlign", "", "", "TopAlignContent"),
                        this._generateToggleBtn("Home_Alignment_MiddleAlign", "MiddleAlign", "imageonly", "e-icon e-ss-middlealign", "MiddleAlign", "", "", "MiddleAlignContent"),
                        this._generateToggleBtn("Home_Alignment_BottomAlign", "BottomAlign", "imageonly", "e-icon e-ss-bottomalign", "BottomAlign", "", "", "BottomAlignContent", true),
                        this._generateToggleBtn("Home_Alignment_WrapText", "WrapText", "textandimage", "e-icon e-ss-wraptext", "WrapText", 85, 25, "WrapTextContent")
                    ],
                },
                {
                    groups: [
                        this._generateToggleBtn("Home_Alignment_AlignLeft", "AlignLeft", "imageonly", "e-icon e-ss-alignleft", "AlignLeft", "", "", "AlignLeftContent"),
                        this._generateToggleBtn("Home_Alignment_AlignCenter", "AlignCenter", "imageonly", "e-icon e-ss-aligncenter", "AlignCenter", "", "", "AlignCenterContent"),
                        this._generateToggleBtn("Home_Alignment_AlignRight", "AlignRight", "imageonly", "e-icon e-ss-alignright", "AlignRight", "", "", "AlignRightContent", true),
                        this._generateSplitBtn("Home_Alignment_Merge", "MergeAndCenter", "textandimage", xlId + "_Ribbon_Merge", { dataSource: this._mergeMenuData, id: 'id', parentId: 'parentId', text: 'text', spriteCssClass: 'sprite' }, "e-icon e-ssr-merge", false, 136, 25, "right", "", "", "e-spreadsheet e-mergebtn", "MergeAndCenter", "MergeAndCenterContent")
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Home_Alignment_DecreaseIndent", "DecreaseIndent", "imageonly", "e-icon e-ss-decreaseindent", "", this._smallBtnHeight, "DecreaseIndent", "DecreaseIndentContent"),
                        this._generateBtn("Home_Alignment_IncreaseIndent", "IncreaseIndent", "imageonly", "e-icon e-ss-increaseindent", "", this._smallBtnHeight, "IncreaseIndent", "IncreaseIndentContent")
                    ],
                }]
            };
            homeTab.groups.push(createdObj);
            createdObj = {
                id: "Actions",
                text: xlObj._getLocStr("Actions"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateBtn("Home_Actions_Undo", "Undo", "textandimage", "e-icon e-ss-undo", 40, this._bigBtnHeight, "Undo", "UndoContent", false, imgtop, "", " (Ctrl+Z)"),
                        this._generateBtn("Home_Actions_Redo", "Redo", "textandimage", "e-icon e-ss-redo", 40, this._bigBtnHeight, "Redo", "RedoContent", false, imgtop, "", " (Ctrl+Y)")
                    ],
                }]
            };
            homeTab.groups.push(createdObj);
            createdObj = {
                id: "Number",
                text: xlObj._getLocStr("NumberTab"),
                alignType: ej.Ribbon.alignType.rows,
                enableGroupExpander: true,
                content: [{
                    groups: [
                        this._generateDD("Home_Number_NumberFormat", "NumberFormat", this._numberFormat, "General", 125, this._smallBtnHeight, "NumberFormat", "NumberFormatContent")
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Home_Number_Accounting", "AccountingStyle", "imageonly", "e-icon e-ss-accounting", "", this._smallBtnHeight, "AccountingStyle", "AccountingStyleContent"),
                        this._generateBtn("Home_Number_Percentage", "PercentageStyle", "imageonly", "e-icon e-ss-percentage", "", this._smallBtnHeight, "PercentageStyle", "PercentageStyleContent"),
                        this._generateBtn("Home_Number_CommaStyle", "CommaStyle", "imageonly", "e-icon e-ss-comma", "", this._smallBtnHeight, "CommaStyle", "CommaStyleContent", true),
                        this._generateBtn("Home_Number_IncreaseDecimal", "IncreaseDecimal", "imageonly", "e-icon e-ss-increasedecimal", "", this._smallBtnHeight, "IncreaseDecimal", "IncreaseDecimalContent"),
                        this._generateBtn("Home_Number_DecreaseDecimal", "DecreaseDecimal", "imageonly", "e-icon e-ss-decreasedecimal", "", this._smallBtnHeight, "DecreaseDecimal", "DecreaseDecimalContent")
                    ],
                }]
            };
            homeTab.groups.push(createdObj);
            createdObj = {
                id: "Styles",
                text: xlObj._getLocStr("Styles"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateSplitBtn("Home_Styles_ConditionalFormatting", "ConditionalFormat", "textandimage", xlId + "_CFormat", { dataSource: this._cFormatMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ssr-condformat", false, 75, this._splitBtnHeight, "bottom", imgtop, "dropdown", "e-spreadsheet e-cformatbtn", "ConditionalFormat", "CFContent"),
                        this._generateSplitBtn("Home_Styles_FormatAsTable", "FormatasTable", "textandimage", xlId + "_formatastable", "", "e-icon e-ssr-formatastable", false, 65, this._splitBtnHeight, "bottom", ej.ImagePosition.ImageTop, "dropdown", "e-spreadsheet e-formatastablebtn", "FormatAsTable", "FATContent"),
                        this._generateSplitBtn("Home_Styles_CellStyles", "CellStyles", "textandimage", xlId + "_cellstyles", "", "e-icon e-ssr-cellstyles", false, 55, this._splitBtnHeight, "bottom", ej.ImagePosition.ImageTop, "dropdown", "e-spreadsheet e-cellstylebtn", "CellStyles", "CellStylesContent")
                    ],
                }]
            };
            homeTab.groups.push(createdObj);
            createdObj = {
                id: "Editing",
                text: xlObj._getLocStr("Editing"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateSplitBtn("Home_Editing_SortFilter", "SortFilter", "textandimage", xlId + "_Ribbon_SortFilter", { dataSource: this._sortFltrMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ss-sortfilter", false, 50, this._splitBtnHeight, "bottom", "imagetop", "dropdown", "e-spreadsheet e-sortfltrbtn", "SortFilter", "SortFilterContent")
                    ],
                },
                {
                    groups: [
                        this._generateSplitBtn("Home_Editing_AutoSum", "AutoSum", "textandimage", xlId + "_Ribbon_AutoSum", { dataSource: this._autosumMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ssr-autosum", false, 100, 25, "right", "", "", "e-spreadsheet e-autosumbtn", "AutoSumTitle", "AutoSumContent"),
                        this._generateSplitBtn("Home_Editing_Clear", "Clear", "textandimage", xlId + "_Ribbon_Clear", { dataSource: this._clearMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ssr-clear", false, 80, 25, "right", "", "dropdown", "e-spreadsheet e-clearbtn", "Clear", "ClearContent")
                    ],
                }]
            };
            homeTab.groups.push(createdObj);
            this._tabCollection.push(homeTab);
        },

        _insertTabObj: function () {
            var createdObj, xlObj = this.XLObj, imgtop = "imagetop", insertTab = { id: "insert", text: xlObj._getLocStr("INSERT"), groups: [] }, xlId = xlObj._id;
            createdObj = {
                id: "Tables",
                text: xlObj._getLocStr("Tables"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateBtn("Insert_Tables_PivotTable", "PivotTable", "textandimage", "e-icon e-ssr-pivottable", 65, this._bigBtnHeight, "PivotTable", "PivotTableContent", false, imgtop),
                        this._generateBtn("Insert_Tables_Table", "Table", "textandimage", "e-icon e-ssr-table", 50, this._bigBtnHeight, "Table", "TableContent", false, imgtop)
                    ],
                }]
            };
            insertTab.groups.push(createdObj);
            createdObj = {
                id: "Illustrations",
                text: xlObj._getLocStr("Illustrations"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateBtn("Insert_Illustrations_Pictures", "Pictures", "textandimage", "e-icon e-ssr-pictures", 50, this._bigBtnHeight, "PicturesTitle", "PicturesContent", false, imgtop, "")
                    ],
                }]
            };
            insertTab.groups.push(createdObj);
            createdObj = {
                id: "Links",
                text: xlObj._getLocStr("Links"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateBtn("Insert_Links_Hyperlink", "HyperLink", "textandimage", "e-icon e-ssr-hyperlink", 60, this._bigBtnHeight, "HyperLinkTitle", ["HyperLinkContent", "HyperLinkPlaceContent"], false, imgtop, "", " (Ctrl+K)")
                    ],
                }]
            };
            insertTab.groups.push(createdObj);
            createdObj = {
                id: "Charts",
                text: xlObj._getLocStr("Charts"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateSplitBtn("Insert_Charts_ColumnChart", "ColumnChart", "imageonly", xlId + "_Ribbon_ColumnChart", "", "e-icon e-ss-colchart", false, 41, this._smallBtnHeight, "bottom", "ej.ImagePosition.ImageTop", "dropdown", "e-spreadsheet e-chartbtn", "ColumnChartTitle", "ColumnChartContent"),
                        this._generateSplitBtn("Insert_Charts_BarChart", "BarChart", "imageonly", xlId + "_Ribbon_BarChart", "", "e-icon e-ss-barchart", false, 41, this._smallBtnHeight, "bottom", "ej.ImagePosition.ImageTop", "dropdown", "e-spreadsheet e-chartbtn", "BarChartTitle", "BarChartContent"),
                        this._generateSplitBtn("Insert_Charts_StockChart", "StockChart", "imageonly", xlId + "_Ribbon_StockChart", "", "e-icon e-ss-stockchart", false, 41, this._smallBtnHeight, "bottom", "ej.ImagePosition.ImageTop", "dropdown", "e-spreadsheet e-chartbtn", "StockChartTitle", "StockChartContent")
                    ],
                },
                {
                    groups: [
                        this._generateSplitBtn("Insert_Charts_LineChart", "LineChart", "imageonly", xlId + "_Ribbon_LineChart", "", "e-icon e-ss-linechart", false, 41, this._smallBtnHeight, "bottom", "ej.ImagePosition.ImageTop", "dropdown", "e-spreadsheet e-chartbtn", "LineChartTitle", "LineChartContent"),
                        this._generateSplitBtn("Insert_Charts_AreaChart", "AreaChart", "imageonly", xlId + "_Ribbon_AreaChart", "", "e-icon e-ss-areachart", false, 41, this._smallBtnHeight, "bottom", "ej.ImagePosition.ImageTop", "dropdown", "e-spreadsheet e-chartbtn", "AreaChartTitle", "AreaChartContent"),
                        this._generateSplitBtn("Insert_Charts_PieChart", "PieChart", "imageonly", xlId + "_Ribbon_PieChart", "", "e-icon e-ss-piechart", false, 41, this._smallBtnHeight, "bottom", "ej.ImagePosition.ImageTop", "dropdown", "e-spreadsheet e-chartbtn", "PieChartTitle", "PieChartContent")
                    ],
                },
                {
                    groups: [
                        this._generateSplitBtn("Insert_Charts_ScatterChart", "ScatterChart", "imageonly", xlId + "_Ribbon_ScatterChart", "", "e-icon e-ss-scterchart", false, 41, this._smallBtnHeight, "bottom", "ej.ImagePosition.ImageTop", "dropdown", "e-spreadsheet e-chartbtn", "ScatterChartTitle", "ScatterChartContent")
                    ],
                }]
            };
            insertTab.groups.push(createdObj);
            if (xlObj.model.allowSparkline)
                insertTab.groups.push(xlObj.XLSparkline._tabInsert());
            this._tabCollection.push(insertTab);
        },

        _dataTabObj: function () {
            var createdObj, xlObj = this.XLObj, imgtop = "imagetop", dataTab = { id: "data", text: xlObj._getLocStr("DATATAB"), groups: [] };
            createdObj = {
                id: "SortFilter",
                text: xlObj._getLocStr("SortFilter"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("Data_SortFilter_SortAtoZ", "SortAtoZ", "textandimage", "e-icon e-ssr-sortatoz", 90, this._smallBtnHeight, "SortAtoZ", "SortAtoZContent", false, "", "e-datapadding"),
                        this._generateBtn("Data_SortFilter_SortZtoA", "SortZtoA", "textandimage", "e-icon e-ssr-sortztoa", 90, this._smallBtnHeight, "SortZtoA", "SortZtoAContent", false, "", "e-datapadding")
                    ]
                },
                {
                    groups: [
                        this._generateBtn("Data_SortFilter_Filter", "Filter", "textandimage", "e-icon e-ssr-filter", 60, this._smallBtnHeight, "Filter", "FilterContent", false, "", "e-datapadding"),
                        this._generateBtn("Data_SortFilter_ClearFilter", "ClearFilter", "textandimage", "e-icon e-ss-clearfilter", 90, this._smallBtnHeight, "ClearFilter", "ClearFilterContent", false, "", "e-datapadding")
                    ],
                }]
            };
            dataTab.groups.push(createdObj);
            createdObj = {
                id: "DataTools",
                text: xlObj._getLocStr("DataTools"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("Data_DataTools_DataValidation", "Validation", "imageonly", "e-icon e-ssr-validation", 70, 39, "DataValidation", "DVContent", false, imgtop),
                        this._generateSplitBtn("Data_DataTools_DataValidationOptions", "DataValidation", "textandimage", xlObj._id + "_Ribbon_Validation", { dataSource: this._valMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "", false, 70, this._mediumBtnHeight, "bottom", "", "dropdown", "e-ssr-validationsbtn", "DataValidation", "DVContent")
                    ],
                }]
            };
            dataTab.groups.push(createdObj);
            this._tabCollection.push(dataTab);
        },

        _pageTabObj: function () {
            var createdObj, xlObj = this.XLObj, imgtop = "imagetop", pageTab = { id: "pagelayout", text: xlObj._getLocStr("PAGELAYOUT"), groups: [] };
            createdObj = {
                id: "Show",
                text: xlObj._getLocStr("Show"),
                alignType: ej.Ribbon.alignType.rows,
                width: 105,
                content: [{
                    groups: [
                        { contentID: xlObj._id + "_Ribbon_pagesetupleft", type: ej.Ribbon.type.custom, height: 80 },
                    ],
                }]
            };
            pageTab.groups.push(createdObj);
            createdObj = {
                id: "PageLayout",
                text: xlObj._getLocStr("PageLayout"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("PageLayout_PageLayout_PageSize", "size", "imageonly", "e-icon e-ssr-pagesize", 65, 44, "size", "PageSizeContent", false, imgtop, ""),
                        this._generateSplitBtn("PageLayout_PageLayout_PageSizeOptions", "PageSize", "textandimage", xlObj._id + "_Ribbon_PageSize", { dataSource: this._pageSizes, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "", false, 65, this._mediumBtnHeight, "bottom", "", "dropdown", "e-ssr-pagesizesbtn", "PageSize", "PageSizeContent")
                    ],
                }]
            };
            pageTab.groups.push(createdObj);
            createdObj = {
                id: "Print",
                text: xlObj._getLocStr("Print"), alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("PageLayout_Print_Print", "Print", "textandimage", "e-icon e-ssr-print", 50, this._bigBtnHeight, "Print", "PrintContent", false, imgtop, "")
                    ]
                },
                {
                    groups: [
                        this._generateBtn("PageLayout_Print_PrintSelected", "PrintSelected", "textandimage", "e-icon e-ssr-printselected", 55, this._bigBtnHeight, "PrintSelected", "PrintSelectedContent", true, imgtop, "")
                    ],
                }]
            };
            pageTab.groups.push(createdObj);
            this._tabCollection.push(pageTab);
        },

        _reviewTabObj: function () {
            var createdObj, xlObj = this.XLObj, imgtop = "imagetop", reviewTab = { id: "review", text: xlObj._getLocStr("REVIEW"), groups: [] };
            createdObj = {
                id: "Comments",
                text: xlObj._getLocStr("Comments"), alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("Review_Comments_NewComment", "New", "textandimage", "e-icon e-ssr-newcmnt", 49, this._bigBtnHeight, "NewCommentTitle", "NewCommentContent", false, imgtop)
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Review_Comments_DeleteComment", "Delete", "textandimage", "e-icon e-ssr-deletecmnt", 49, this._bigBtnHeight, "DeleteComment", "DeleteCommentContent", false, imgtop)
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Review_Comments_PreviousComment", "Previous", "textandimage", "e-icon e-ssr-previouscmnt", 49, this._bigBtnHeight, "Previous", "PreviousContent", false, imgtop)
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Review_Comments_NextComment", "Next", "textandimage", "e-icon e-ssr-nextcmnt", 49, this._bigBtnHeight, "Next", "NextContent", false, imgtop)
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Review_Comments_ShowHideComment", "ShowHide", "textandimage", "e-icon e-ssr-showhidecmnt", 160, this._smallBtnHeight, "ShowHide", "ShowHideContent", false, "imageLeft", "e-ssr-cmntcolbtn"),
                        this._generateToggleBtn("Review_Comments_ShowAllComments", "ShowAll", "textandimage", "e-icon e-ssr-showallcmnt", "ShowAll", 155, this._smallBtnHeight, "ShowAllContent", false, "e-ssr-cmntcolbtn")
                    ],
                }]
            };
            reviewTab.groups.push(createdObj);
            createdObj = {
                id: "Changes",
                text: xlObj._getLocStr("Changes"),
                alignType: ej.Ribbon.alignType.row,
                content: [{
                    groups: [
                        this._generateToggleBtn("Review_Changes_ProtectSheet", "Protectsheet", "textandimage", "e-icon e-ssr-protectsheet", "Protectsheet", 60, this._bigBtnHeight, "ProtectSheetToolTip", false, "e-ssr-protectsheetbtn", "imagetop", "Unprotect"),
                        this._generateToggleBtn("Review_Changes_ProtectWorkbook", "ProtectWorkbook", "textandimage", "e-icon e-ssr-protect", "ProtectWorkbook", 60, this._bigBtnHeight, "ProtectWBContent", false, "e-ssr-cmntcolbtn", "imagetop"),
                        this._generateToggleBtn("Review_Changes_LockCell", "Lock", "textandimage", "e-icon e-ssr-protlockcell", "lock", 90, this._smallBtnHeight, "Lock", false, "e-ssr-lockbtn", "", "Unlock", "e-icon e-ssr-protunlockcell"),
                    ],
                },

                ]
            };
            reviewTab.groups.push(createdObj);
            this._tabCollection.push(reviewTab);
        },

        _otherTabObj: function () {
            var createdObj, xlObj = this.XLObj, imgtop = "imagetop", otherTab = { id: "others", text: xlObj._getLocStr("OTHERS"), groups: [] }, xlId = xlObj._id, conttype = ej.ContentType;
            createdObj = {
                id: "Window",
                text: xlObj._getLocStr("Window"), alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateSplitBtn("Others_Window_FreezePanes", "FreezePanes", "textandimage", xlObj._id + "_Ribbon_FPane", { dataSource: this._viewMenuData, id: 'id', parentId: 'parentId', text: 'text', spriteCssClass: 'sprite' }, "e-icon e-ssr-frzpane", false, 55, this._splitBtnHeight, "bottom", imgtop, "dropdown", "e-spreadsheet e-fpanebtn", "FreezePanes", "FreezePanesContent")
                    ],
                }]
            };
            otherTab.groups.push(createdObj);
            createdObj = {
                id: "Formulas",
                text: xlObj._getLocStr("Formula"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("Others_Formulas_NameManager", "NameManager", conttype.TextAndImage, "e-icon e-ssr-namemngr", 55, this._bigBtnHeight, "NameManager", ["NameManagerContent", "NameManagerFormulaContent"], false, imgtop, "")
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Others_Formulas_DefineName", "DefineName", conttype.TextAndImage, "e-icon e-ssr-definename", 110, 25, "DefineName", "DefineNameContent"),
                        this._generateSplitBtn("Others_Formulas_UseInFormula", "UseInFormula", "textandimage", xlObj._id + "_nmuseinformula", "", "e-icon e-ssr-useformula", false, 125, 25, ej.ArrowPosition.Bottom, ej.ImagePosition.ImageLeft, "dropdown", "e-spreadsheet e-useinformulabtn", "UseInFormula", "UseInFormulaContent")
                    ],
                }]
            };
            otherTab.groups.push(createdObj);
            createdObj = {
                id: "Cells",
                text: xlObj._getLocStr("Cells"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateBtn("Others_Cells_InsertCell", "Insert", "imageonly", "e-icon e-ssr-insert", 54, 40, "InsertTitle", ["InsertContent", "MultipleInsertContent"], false, imgtop),
                        this._generateSplitBtn("Others_Cells_InsertCellOptions", "Insert", "textandimage", xlId + "_Ribbon_Ins", { dataSource: this._insertMenuData, id: 'id', parentId: 'parentId', text: 'text', spriteCssClass: 'sprite' }, "", false, 54, this._mediumBtnHeight, "bottom", "", "dropdown", "e-insertsbtn", "InsertTitle", "InsertSBContent")
                    ],
                },
                {
                    groups: [
                        this._generateBtn("Others_Cells_DeleteCell", "Delete", "imageonly", "e-icon e-ssr-delete", 54, 40, "DeleteTitle", ["DeleteContent", "MultipleDeleteContent"], false, imgtop),
                        this._generateSplitBtn("Others_Cells_DeleteCellOptions", "Delete", "textandimage", xlId + "_Ribbon_Del", { dataSource: this._deleteMenuData, id: 'id', parentId: 'parentId', text: 'text', spriteCssClass: 'sprite' }, "", false, 54, this._mediumBtnHeight, "bottom", "", "dropdown", "e-deletesbtn", "DeleteTitle", ["DeleteContent", "MultipleDeleteContent"])
                    ],
                }]
            };
            otherTab.groups.push(createdObj);
            createdObj = {
                id: "Editing",
                text: xlObj._getLocStr("Editing"),
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        this._generateSplitBtn("Others_Editing_FindSelect", "FindSelect", "textandimage", xlId + "_Ribbon_FindRep", { dataSource: this._findMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ss-findselect", false, 55, this._splitBtnHeight, "bottom", "imagetop", "dropdown", "e-spreadsheet e-findbtn", "FindSelectTitle", "FindSelectContent")
                    ],
                }]
            };
            otherTab.groups.push(createdObj);
            createdObj = {
                id: "Calculation",
                text: xlObj._getLocStr("Calculation"),
                alignType: ej.Ribbon.alignType.columns,
                content: [{
                    groups: [
                        this._generateSplitBtn("Others_CalCulation_CalculationOptions", "CalculationOptions", "textandimage", xlId + "_Ribbon_CalcOpt", { dataSource: this._calcOptData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ss-calcopt", false, 67, this._splitBtnHeight, "bottom", "imagetop", "dropdown", "e-spreadsheet e-coptbtn", "CalcOptTitle", ["CalcOptContent", "CalcOptRecalcContent"])
                    ]
                },
                {
                    groups: [
                        this._generateBtn("Others_CalCulation_CalculateNow", "CalculateNow", conttype.TextAndImage, "e-icon e-ss-calcnow", 110, 30, "CalculateNow", ["CalculateNowContent", "CalculateNowTurnOffContent"]),
                        this._generateBtn("Others_CalCulation_CalculateSheet", "CalculateSheet", conttype.TextAndImage, "e-icon e-ss-calcsheet", 110, 30, "CalculateSheet", ["CalculateSheetContent", "CalculateSheetTurnOffContent"])
                    ]
                }],
            };
            otherTab.groups.push(createdObj);
            this._tabCollection.push(otherTab);
        },

        _renderRibbon: function (isSetModel) {
            var xlObj = this.XLObj, xlId = xlObj._id, xlEle = xlObj.element, click, xlMod = xlObj.model, ribbonElem = ej.buildTag("div", "", "", { id: xlId + "_Ribbon" }), i, tabName = [xlObj._getLocStr("HOME"), xlObj._getLocStr("INSERT"), xlObj._getLocStr("DATATAB"), xlObj._getLocStr("PAGELAYOUT"), xlObj._getLocStr("REVIEW"), xlObj._getLocStr("OTHERS")];
            isSetModel ? xlEle.prepend(ribbonElem) : xlEle.append(ribbonElem);
            xlEle.append(ej.buildTag("ul", "", { display: "none" }, { id: xlId + "_Menu" }));
            click = ej.SplitButton.prototype._documentClick;
            ej.SplitButton.prototype._documentClick = function (e) { // for ejmenu document click issue(JS-10113)
                if ((!$(e.target).is(".e-formatastable") && !$(e.target).is(".e-formatastable-adaptive")) && (!$(e.target).is(".e-cellstyles") && !$(e.target).is(".e-cellstyles-adaptive")))
                    click.call(this, e);
            };
            var tabColl = [xlObj._getLocStr("HOME"), xlObj._getLocStr("INSERT"), xlObj._getLocStr("PAGELAYOUT"), xlObj._getLocStr("DATATAB"), xlObj._getLocStr("OTHERS"), xlObj._getLocStr("FORMAT"), xlObj._getLocStr("DESIGN"), xlObj._getLocStr("CHARTDESIGN"), xlObj._getLocStr("ANALYZE"), xlObj._getLocStr("SPARKLINEDESIGN")];
            if (xlObj.model.ribbonSettings.enableOnDemand && !xlObj._isRibbonDestroyed)
                this._createTrgtElement(xlObj._getLocStr("HOME"));
            else {
                for (i = 0; i < tabColl.length; i++)
                    this._createTrgtElement(tabColl[i], ribbonElem);
            }
            if (!xlObj._isRefresh) {
                this._menuCustomize();
                this._homeTabObj();
                this._insertTabObj();
                this._dataTabObj();
                this._pageTabObj();
                this._reviewTabObj();
                this._otherTabObj();
                this._contextualTabObj();
            }
            ribbonElem.attr('style', 'overflow:hidden');
            ribbonElem.height(0);
            ribbonElem.width(0);
            ribbonElem.ejRibbon({
                width: "100%",
                allowResizing: true,
                applicationTab: this._appTabCollection,
                tabs: this._tabCollection,
                contextualTabs: this._contextualTabCollection,
                tabClick: $.proxy(this._onTabClick, this),
                tabSelect: $.proxy(this._onTabSelect, this),
                create: $.proxy(this._onControlCreated, this),
                collapse: $.proxy(this._onCollapse, this),
                backstageItemClick: $.proxy(this._onBackStageItemClick, this),
                groupExpand: $.proxy(this._onGroupExpander, this),
                pinState: $.proxy(this._onRibbonPin, this),
                expand: $.proxy(this._onRibbonExpand, this),
                groupClick: $.proxy(this._onRibbonGroupClick, this),
                _destroyed: $.proxy(this._rbnDestroy, this),
                enableOnDemand: xlObj.model.ribbonSettings.enableOnDemand,
                beforeTabClick: $.proxy(this._onBeforeTabClick, this)
            });
            ribbonElem.css("height", "auto");
            ribbonElem.width("100%");
            if (xlMod.scrollSettings.isResponsive) {
                ribbonElem.ejRibbon("option", { allowResizing: true });
                if ((xlObj._phoneMode || xlObj._tabMode) && (xlObj._orientation === "landscape"))
                    ribbonElem.ejRibbon("collapse");
            }
            if (xlObj.model.ribbonSettings.enableOnDemand && !xlObj._isRibbonDestroyed) {
                this._homeTabControls();
                this._updateRibCustomCss(xlObj._getLocStr("HOME"));
                this._isHomeTabCreate = true;
                this._hideRibbonElem(xlObj._getLocStr("HOME"));
            }
            else {
                this._isHomeTabCreate = true,
                    this._isInsertTabCreate = true,
                    this._isDataTabCreate = true,
                    this._isPageLayoutTabCreate = true,
                    this._isReviewTabCreate = true,
                    this._isOthersTabCreate = true,
                    this._isDesignTabCreate = true,
                    this._isFormatTabCreate = true,
                    this._isChartTabCreate = true,
                    this._analyzeTabCreate = true,
                    this._isAppTabCreate = true;
                this._isSparklineTabCreate = true;
                $("#" + xlId + "_Ribbon_review_Comments_5").css("vertical-align", "middle");
                for (i = 0; i < 6; i++) {
                    if (i !== 1 && i !== 4)
                        this._updateRibCustomCss(tabName[i]);
                    this._hideRibbonElem(tabName[i]);
                }
            }
            this._hideOtherControls();
        },

        _createTabControls: function (tabName) {
            var xlObj = this.XLObj;
            switch (tabName) {
                case xlObj._getLocStr("HOME"):
                    if (!this._isHomeTabCreate) {
                        this._homeTabControls();
                        this._isHomeTabCreate = true;
                        xlObj._on($('#' + xlObj._id + '_cellstyles'), "click", xlObj._cellStyleClick);
                        xlObj._on($('#' + xlObj._id + '_formatastable'), "click", xlObj._formatAsTableClick);
                        this._updateRibCustomCss(tabName);
                        this._hideRibbonElem(tabName);
                    }
                    break;
                case xlObj._getLocStr("INSERT"):
                    if (!this._isInsertTabCreate) {
                        this._isInsertTabCreate = true;
                        xlObj._on($(".e-" + xlObj._id + ".e-chartcell"), "click", xlObj._chartClickHandler);
                        this._hideRibbonElem(tabName);
                    }
                    break;
                case xlObj._getLocStr("DATATAB"):
                    if (!this._isDataTabCreate) {
                        this._isDataTabCreate = true;
                        this._updateRibCustomCss(tabName);
                        this._hideRibbonElem(tabName);
                    }
                    break;
                case xlObj._getLocStr("PAGELAYOUT"):
                    if (!this._isPageLayoutTabCreate) {
                        this._pageTabControls();
                        this._isPageLayoutTabCreate = true;
                        this._updateRibCustomCss(tabName);
                        this._hideRibbonElem(tabName);
                    }
                    break;
                case xlObj._getLocStr("REVIEW"):
                    if (!this._isReviewTabCreate) {
                        $("#" + xlObj._id + "_Ribbon_review_Comments_5").css("vertical-align", "middle");
                        this._isReviewTabCreate = true;
                        this._hideRibbonElem(tabName);
                    }
                    break;
                case xlObj._getLocStr("OTHERS"):
                    if (!this._isOthersTabCreate) {
                        this._othersTabControls();
                        this._isOthersTabCreate = true;
                        this._updateRibCustomCss(tabName);
                        xlObj._on($('#' + xlObj._id + '_nmuseinformula'), "click", ".e-nmuseinformularow", xlObj._useInFormulaClick);
                        this._hideRibbonElem(tabName);
                    }
                    break;
                case xlObj._getLocStr("FORMAT"):
                    if (!this._isFormatTabCreate)
                        this._isFormatTabCreate = true;
                    break;
                case xlObj._getLocStr("DESIGN"):
                    if (!this._isDesignTabCreate)
                        this._isDesignTabCreate = true;
                    break;
                case xlObj._getLocStr("CHARTDESIGN"):
                    if (!this._isChartTabCreate)
                        this._isChartTabCreate = true;
                    break;
                case xlObj._getLocStr("ANALYZE"):
                    if (!this._analyzeTabCreate)
                        this._isFormatTabCreate = true;
                    break;
                case xlObj._getLocStr("SPARKLINEDESIGN"):
                    if (!this._isSparklineTabCreate)
                        this._isSparklineTabCreate = true;
                    break;
            }
        },

        _createTrgtElement: function (actTab, ribbonElem) {
            var xlObj = this.XLObj; ribbonElem = ribbonElem ? ribbonElem : $("#" + xlObj._id + "_Ribbon");
            switch (actTab) {
                case xlObj._getLocStr("HOME"):
                    !this._isHomeTabTrgt && this._homeTabTrgtElem();
                    this._isHomeTabTrgt = true;
                    break;
                case xlObj._getLocStr("INSERT"):
                    !this._isInsertTabTrgt && this._onTabCreate();
                    this._isInsertTabTrgt = true;
                    break;
                case xlObj._getLocStr("DATATAB"):
                    !this._isDataTabTrgt && this._dataTabTrgtElem();
                    this._isDataTabTrgt = true;
                    break;
                case xlObj._getLocStr("PAGELAYOUT"):
                    !this._isPageLayoutTabTrgt && this._pageTabTrgtElem(ribbonElem);
                    this._isPageLayoutTabTrgt = true;
                    break;
                case xlObj._getLocStr("OTHERS"):
                    !this._isOthersTabTrgt && this._othersTabTrgtElem();
                    this._isOthersTabTrgt = true;
                    break;
                case xlObj._getLocStr("CHARTDESIGN"):
                    !this._isChartTabTrgt && this._renderChartDesignTab();
                    this._isChartTabTrgt = true;
                    break;
                case xlObj._getLocStr("ANALYZE"):
                    !this._analyzeTabTrgt && this._renderAnalyzeTab();
                    this._analyzeTabTrgt = true;
                    break;
                case xlObj._getLocStr("FORMAT"):
                    !this._isFormatTabTrgt && this._renderFormatTab();
                    this._isFormatTabTrgt = true;
                    break;
                case xlObj._getLocStr("DESIGN"):
                    !this._isDesignTabTrgt && this._renderDesignTab();
                    this._isDesignTabTrgt = true;
                    break;
                case xlObj._getLocStr("SPARKLINEDESIGN"):
                    if (xlObj.model.allowSparkline)
                        !this._isSparklineTrgt && xlObj.XLSparkline._renderSparklineTab();
                    this._isSparklineTrgt = true;
                    break;
            }
        },

        _onTabCreate: function () {
            var xlObj = this.XLObj, xlEle = xlObj.element, ribbonElem = $("#" + xlObj._id + "_Ribbon");
            xlEle.append(this._chartType("ColumnChart", 6, 2, 2, ["column", "stackingcolumn", "stackingcolumn100", "column", "stackingcolumn", "stackingcolumn100"], [xlObj._getLocStr("ClusteredColumn"), xlObj._getLocStr("StackedColumn"), "100%&nbsp;" + xlObj._getLocStr("StackedColumn"), "3-D&nbsp;" + xlObj._getLocStr("ClusteredColumn"), "3-D&nbsp;" + xlObj._getLocStr("StackedColumn"), "3-D&nbsp;100%&nbsp;" + xlObj._getLocStr("StackedColumn")]));
            xlEle.append(this._chartType("BarChart", 6, 2, 2, ["bar", "stackingbar", "stackingbar100", "bar", "stackingbar", "stackingbar100"], [xlObj._getLocStr("ClusteredBar"), xlObj._getLocStr("StackedBar"), "100%&nbsp;" + xlObj._getLocStr("StackedBar"), "3-D&nbsp;" + xlObj._getLocStr("ClusteredBar"), "3-D&nbsp;" + xlObj._getLocStr("StackedBar"), "3-D&nbsp;100%&nbsp;" + xlObj._getLocStr("StackedBar")]));
            xlEle.append(this._chartType("StockChart", 2, 2, 2, ["radar", "radar"], [xlObj._getLocStr("Radar"), xlObj._getLocStr("RadarMarkers")]));
            xlEle.append(this._chartType("LineChart", 2, 2, 3, ["line", "line"], [xlObj._getLocStr("Line"), xlObj._getLocStr("LineMarkers")]));
            xlEle.append(this._chartType("AreaChart", 3, 3, 3, ["Area", "stackingarea", "stackingarea100"], [xlObj._getLocStr("Area"), xlObj._getLocStr("StackedArea"), "100%&nbsp;" + xlObj._getLocStr("StackedArea")]));
            xlEle.append(this._chartType("PieChart", 3, 3, 4, ["pie", "pie", "doughnut"], [xlObj._getLocStr("Pie"), "3-D&nbsp;" + xlObj._getLocStr("Pie"), xlObj._getLocStr("Doughnut")]));
            xlEle.append(this._chartType("ScatterChart", 1, 2, 2, ["scatter"], [xlObj._getLocStr("Scatter")]));
            ribbonElem.append("<div id='" + xlObj._id + "_nmuseinformula' class='e-nmuseinformula' style='width:125px'></div>");
        },

        _rbnDestroy: function (args) {
            var xlObj = this.XLObj, xlId = xlObj._id, fillColor = "#" + xlId + "_Ribbon_Home_Font_FillColor", fontColor = "#" + xlId + "_Ribbon_Home_Font_FontColor",
                pictureColor = "#" + xlId + "_Ribbon_PictureColor", sparklineColor = "#" + xlId + "_Ribbon_SparklineColor", markerNegativePointColor = "#" + xlId + "_Ribbon_MarkerNegativePoint", markerHighPointColor = "#" + xlId + "_Ribbon_MarkerHighPoint", markerLowPoint = "#" + xlId + "_Ribbon_MarkerLowPoint", borderColor = "#" + xlId + "_Ribbon_Home_Font_BorderColor", borderCP = "#" + xlId + "_Ribbon_BorderCP",
                rObj = $("#" + xlId + "_Ribbon").ejRibbon("instance"), actTab = rObj.getTabText(rObj.model.selectedItemIndex), isRibDemand = xlObj.model.ribbonSettings.enableOnDemand;
            $(fillColor).data("ejColorPicker") && $(fillColor).ejColorPicker("destroy");
            $(fontColor).data("ejColorPicker") && $(fontColor).ejColorPicker("destroy");
            $(pictureColor).data("ejColorPicker") && $(pictureColor).ejColorPicker("destroy");
            $(borderColor).data("ejColorPicker") && $(borderColor).ejColorPicker("destroy");
            $(sparklineColor).data("ejColorPicker") && $(sparklineColor).ejColorPicker("destroy");
            $(markerNegativePointColor).data("ejColorPicker") && $(markerNegativePointColor).ejColorPicker("destroy");
            $(markerHighPointColor).data("ejColorPicker") && $(markerHighPointColor).ejColorPicker("destroy");
            $(markerLowPoint).data("ejColorPicker") && $(markerLowPoint).ejColorPicker("destroy");
            $("#" + xlId + "_Ribbon_Home_Font_BorderColor_Presets").parent().remove();
            $(borderCP).data("ejColorPicker") && $(borderCP).ejColorPicker("destroy");
            if (args && !args.destroy) {
                xlObj._off($('#' + xlId + '_cellstyles'), "click", xlObj._cellStyleClick);
                xlObj._off($('#' + xlId + '_formatastable'), "click", xlObj._formatAsTableClick);
                xlObj._off($('#' + xlId + '_databars_1'), "click", xlObj._databarItemClick);
                xlObj._off($('#' + xlObj._id + '_iconsets_2'), "click", xlObj._databarItemClick);
                xlObj._off($('#' + xlObj._id + '_iconsets_3'), "click", xlObj._databarItemClick);
                xlObj._off($('#' + xlObj._id + '_iconsets_4'), "click", xlObj._databarItemClick);
                xlObj._off($('#' + xlObj._id + '_iconsets_5'), "click", xlObj._databarItemClick);
                xlObj._off($('#' + xlObj._id + '_colorscales_1'), "click", xlObj._databarItemClick);
                $(borderColor)[0].style.display = "none";
                xlObj._off($(".e-" + xlId + ".e-chartcell"), "click", xlObj._chartClickHandler);
                if (!isRibDemand || (this._isHomeTabTrgt && actTab === xlObj._getLocStr("HOME"))) {
                    var xlEle = xlObj.element, rbnId = xlId + "_Ribbon_", fontElem = rbnId + "Home_Font_";
                    xlEle.append(ej.buildTag("input", "", { display: "none" }, { id: fontElem + "FillColor", type: "text" }));
                    xlEle.append(ej.buildTag("input", "", { display: "none" }, { id: fontElem + "FontColor", type: "text" }));
                    xlEle.append(ej.buildTag("input", "", { display: "none" }, { id: fontElem + "BorderColor", type: "text" }));
                    xlEle.append(ej.buildTag("div.e-spreadsheet e-formatastable", "", { display: "none" }, { id: xlObj._id + "_formatastable" }));
                    xlObj.element.append(this._renderCellStyles());
                }
                else
                    this._isHomeTabTrgt = false;
                if (!isRibDemand || (this._isInsertTabTrgt && actTab === xlObj._getLocStr("INSERT")))
                    this._onTabCreate();
                else
                    this._isInsertTabTrgt = false;
                this._isHomeTabCreate = this._isInsertTabCreate = this._isDataTabCreate = this._isPageLayoutTabCreate = this._isReviewTabCreate = false;
                this._isOthersTabCreate = this._isDesignTabCreate = this._isFormatTabCreate = this._isChartTabCreate = this._isSparklineTabCreate = this._analyzeTabCreate = this._isAppTabCreate = false;
                xlObj._isRibbonDestroyed = true;
            }
            else {
                $(document.body).append($("#" + xlId + " _formatastable").parent());
                $(document.body).append($("#" + xlId + " _cellstyles").parent());
            }
        },

        _updateRibCustomCss: function (tabName) {
            var xlObj = this.XLObj, xlId = xlObj._id, appenchild1, appenchild2, before, child, newnode, newnode1, parent, i = 0, len, opts = "Options", parentid, beforeid, appenchild2id, btncls;
            switch (tabName) {
                case xlObj._getLocStr("HOME"):
                    var colorcls = "e-ssr-colpickHprt", fnt = "_Ribbon_Home_Font", font = "_Ribbon_home_Font_Home_Font_", pst = "_Ribbon_home_Clipboard_Home_Clipboard_Paste", btn = ["e-mergebtn", "e-borderbtn", "e-autosumbtn"];
                    var id = [xlId + font + "FontFamily", xlId + font + "FontSize"], cls = ["e-ssr-fontfamily", "e-ssr-fontsize"];
                    appenchild2id = [xlId + pst + opts], beforeid = [xlId + pst], parentid = [xlId + "_Ribbon_home_Clipboard_1"], btncls = [" e-ssr-pastebtnHprt"];
                    //add class for fill color
                    xlObj.addClass(document.getElementById(xlId + fnt + "_FillColorWrapper").children[0], colorcls);
                    //add class for font color
                    xlObj.addClass(document.getElementById(xlId + fnt + "_FontColorWrapper").children[0], colorcls);
                    //add class for fillcolor fontcolor 4 span tags
                    child = xlObj.element[0].querySelectorAll(".e-ssr-colpickHprt .e-color-container,.e-ssr-colpickHprt .e-select");
                    while (i < 4) {
                        xlObj.addClass(child[i], "e-ssr-colorcontainer");
                        i++;
                    }
                    //add class for border,merge,autosum buttons
                    i = 0;
                    while (i < 3) {
                        xlObj.addClass(document.querySelectorAll("." + btn[i])[0].parentNode, "e-ssr-horizontalprt");
                        i++;
                    }
                    //add class for font family,font size
                    i = 0;
                    while (i < 2) {
                        xlObj.addClass(document.getElementById(id[i]), cls[i]);
                        i++;
                    }
                    break;
                case xlObj._getLocStr("DATATAB"):
                    var datavalid = "_Ribbon_data_DataTools_Data_DataTools_DataValidation";
                    appenchild2id = [xlId + datavalid + opts], beforeid = [xlId + datavalid], parentid = [xlId + "_Ribbon_data_DataTools_1"], btncls = [" e-ssr-dtvaldtnHprt"];
                    break;
                case xlObj._getLocStr("PAGELAYOUT"):
                    var pagelayout = "_Ribbon_pagelayout_PageLayout_PageLayout_PageLayout_PageSize", ribshow = "_Ribbon_PageLayout_Show_"; id = ["ej" + xlId + ribshow + "Headings", "ej" + xlId + ribshow + "Gridlines"]; cls = ["e-vheading", "e-vgridlines"];
                    appenchild2id = [xlId + pagelayout + opts], beforeid = [xlId + pagelayout], parentid = [xlId + "_Ribbon_pagelayout_PageLayout_1"], btncls = [" e-ssr-pagesizebtnHprt", " e-ssr-sizebtnHprt"];
                    //add class for heading, gridlines
                    i = 0;
                    while (i < 2) {
                        xlObj.addClass(document.getElementById(id[i]), cls[i]);
                        i++;
                    }
                    break;
                case xlObj._getLocStr("OTHERS"):
                    var insCell = "InsertCell", insDelCell = "_Ribbon_others_Cells_Others_Cells_", delCell = "DeleteCell";
                    appenchild2id = [xlId + insDelCell + insCell + opts, xlId + insDelCell + delCell + opts], beforeid = [xlId + insDelCell + insCell, xlId + insDelCell + delCell], parentid = [xlId + "_Ribbon_others_Cells_1", xlId + "_Ribbon_others_Cells_2"], btncls = [" e-ssr-insertbtnHprt", " e-ssr-deletebtnHprt"];
                    break;
            }
            // add class for insert,delete,data validation,paste,pagelayout
            i = 0, len = parentid.length;
            while (i < len) {
                parent = document.getElementById(parentid[i]);
                before = document.getElementById(beforeid[i]);
                appenchild1 = document.getElementById(beforeid[i]);
                appenchild2 = document.getElementById(appenchild2id[i]);
                newnode = document.createElement("span");
                newnode.className = "e-ssr-verticalHparent" + btncls[i];
                newnode.style.display = "inherit";
                parent.insertBefore(newnode, before);
                newnode.appendChild(appenchild1);
                newnode.appendChild(appenchild2);
                if (btncls[0] === " e-ssr-pagesizebtnHprt") {
                    newnode1 = document.createElement("span");
                    newnode1.className = "e-ssr-verticalHparent" + btncls[i + 1];
                    newnode1.style.display = "inherit";
                    newnode1.appendChild(newnode);
                    parent.appendChild(newnode1);
                }
                i++;
            }
        },

        _hideOtherControls: function () {
            var i = 0, arr = ["CElement", "SElement", "Paste", "Border", "Merge", "SortFilter", "Clear", "ColumnChart", "BarChart", "Validation", "PageSize",
                "FPane", "Ins", "Del", "FindRep", "PastePic", "PictureBorder", "AutoSum", "ResetPic", "PictureBorder", "StockChart",
                "LineChart", "AreaChart", "PieChart", "ScatterChart", "color_Presets", "PictureColor_Presets", "Home_Font_BorderColor_Presets"];
            while (i--)
                $("#" + this._id + "_Ribbon_" + arr[i]).hide();
            i = 0, arr = ["CFormat", "formatastable", "cellstyles", "ctxtmenu"];
            while (i--)
                $("#" + this._id + "_" + arr[i]).hide();
        },

        // ribbon backstage
        _renderAppTab: function () {
            var htmlStr, xlObj = this.XLObj, bspage = [];
            // backstage content elements
            htmlStr = "<div  id='" + xlObj._id + "_backstagetabnew' style='display:none' class='e-ssr-bstabnew'><div class='e-ssr-bscontent' title='" + xlObj._getLocStr("BlankWorkbook") + "'><div class='e-ssr-bsnewtmpl' ><button id='" + xlObj._id + "_bstab_new_blank' type='button' class = 'e-rbn-button' ></button></div></div></div>";
            htmlStr = htmlStr.concat("<div id='" + xlObj._id + "_backstagetabsaveas' style='display:none' class='e-ssr-bstabsaveas'><div class='e-ssr-bscontent'><div class='e-ssr-bssaveasopt'><button id='" + xlObj._id + "_bstab_saveas_excel' type='button' class = 'e-rbn-button'></button><span>" + xlObj._getLocStr("SaveAsExcel") + "</span></div><div class='e-ssr-bssaveasopt'><button id='" + xlObj._id + "_bstab_saveas_csv' type='button' class = 'e-rbn-button'></button><span>" + xlObj._getLocStr("SaveAsCsv") + "</span></div><div class='e-ssr-bssaveasopt'><button id='" + xlObj._id + "_bstab_saveas_pdf' type='button' class = 'e-rbn-button'></button><span>" + xlObj._getLocStr("SaveAsPdf") + "</span></div></div></div>");
            htmlStr = htmlStr.concat("<div id='" + xlObj._id + "_backstagetabprint' style='display:none' class='e-ssr-bstabprint'><div class='e-ssr-bscontent'><div class='e-ssr-bsprintopt'><button id='" + xlObj._id + "_bstab_print_sheet' type='button' class = 'e-rbn-button'></button><span>" + xlObj._getLocStr("PrintSheet") + "</span></div><div class='e-ssr-bsprintopt'><button id='" + xlObj._id + "_bstab_print_selected' type='button' class = 'e-rbn-button'></button><span>" + xlObj._getLocStr("PrintSelected") + "</span></div></div></div>");
            xlObj.element.append(htmlStr);
            // backstage object construction
            bspage.push({ id: "new", text: xlObj._getLocStr("New"), itemType: ej.Ribbon.itemType.tab, contentID: xlObj._id + "_backstagetabnew" });
            bspage.push({ id: "open", text: xlObj._getLocStr("Open") + "...", itemType: ej.Ribbon.itemType.tab });
            bspage.push({ id: "saveas", text: xlObj._getLocStr("SaveAs"), itemType: ej.Ribbon.itemType.tab, contentID: xlObj._id + "_backstagetabsaveas" });
            bspage.push({ id: "print", text: xlObj._getLocStr("Print"), itemType: ej.Ribbon.itemType.tab, contentID: xlObj._id + "_backstagetabprint" });
            this._appTabCollection = { type: ej.Ribbon.applicationTabType.backstage, backstageSettings: { text: xlObj._getLocStr("File"), headerWidth: 124, height: xlObj._responsiveHeight - 2, width: xlObj._responsiveWidth - 3, pages: bspage } };
        },

        _onBackStageItemClick: function (args) {
            if (!this._isAppTabCreate) {
                this._appTabControls();
                this._isAppTabCreate = true;
            }
            var xlObj = this.XLObj, evnt, arg, settings = xlObj.model.ribbonSettings.applicationTab;
            xlObj.XLEdit._isEdit && xlObj.XLEdit.saveCell();
            xlObj.XLComment && xlObj.XLComment._isCommentEdit && xlObj.XLComment._updateCurCmntVal();
            if (xlObj._isSheetRename && !xlObj._updateSheetNames(null, false)) {
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("hideBackstage");
                return;
            }
            if (settings.type === "menu") {
                evnt = { element: args.element };
                if (xlObj._trigger("menuClick", evnt))
                    return false;
                if (args.ID === "Open") {
                    xlObj.XLEdit._isEdit && xlObj.XLEdit.saveCell();
                    this._bSBtnClickHandler(args.ID.toLowerCase(), args);
                }
                else
                    this._bSBtnClickHandler(args.ID.toLowerCase(), args);
            }
            if (settings.type === "backstage") {
                if (args.type === "backstageItemClick") {
                    arg = { id: args.id, text: args.text, type: args.type, target: args.target, prop: args.model };
                    if (xlObj._trigger("menuClick", arg))
                        return false;
                    if (args.id === "open_backStageTab") {
                        xlObj.XLEdit._isEdit && xlObj.XLEdit.saveCell();
                        this._bSBtnClickHandler("open", args);
                    }
                }
                else {
                    arg = { e: args.e, type: args.type, status: args.status, target: args.target, id: args.target.id };
                    if (xlObj._trigger("menuClick", arg))
                        return false;
                    $("#" + xlObj._id + "_Ribbon").ejRibbon("hideBackstage");
                    xlObj._phoneMode && $("#" + xlObj._id + "_Ribbon").ejRibbon("goToMainContent");
                    var icon = args.model.prefixIcon;
                    this._bSBtnClickHandler(icon.indexOf("blank") > -1 ? icon.split("-")[2] : icon.split("-")[3], args);
                }
            }
        },

        _bSBtnClickHandler: function (tab, args) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), exportType,
                arg = { id: args.id || args.ID || args.target.id, status: args.status, prop: args.model, model: xlObj.model };
            if (xlObj._trigger("ribbonClick", arg))
                return false;
            $("#" + xlObj._id + "_Ribbon").ejRibbon("hideBackstage");
            switch (tab) {
                case "open":
                    if (xlObj.isDirty)
                        xlObj._showAlertDlg("confirm", "ImportAlert", "Open", 470);
                    else if (xlObj.model.importSettings.importMapper.length < 1) {
                        xlObj._showAlertDlg("Alert", "ImportExportUrl");
                        return;
                    }
                    else {
                        $("#" + xlObj._id + "_file .e-uploadinput").click();
                        (xlObj._browserDetails.name != "msie" && xlObj._browserDetails.name != "edge") && $("#" + xlObj._id + "_Ribbon_BackStage").show();
                        $("#" + xlObj._id + "_Ribbon").find(".e-backstagetitlecontent").text('').append("Open");
                    }
                    break;
                case "new":
                case "blank":
                    xlObj._isSheetsDirty() && xlObj._showAlertDlg("confirm", "DestroyAlert", "New", 470);
                    break;
                case "exportxl":
                case "exportcsv":
                case "exportpdf":
                    xlObj._showDialog(tab);
                    $("#" + xlObj._id + "_ExportFileNameDialog").ejDialog("open");
                    exportType = tab.split("export")[1];
                    xlObj.XLExport._exportType = exportType.indexOf("xl") > -1 ? "Excel" : exportType.charAt(0).toUpperCase() + exportType.slice(1);
                    break;
                case "print":
                case "printsheet":
                    xlObj.XLPrint.printSheet(sheetIdx);
                    break;
                case "printselected":
                    xlObj.XLPrint.printSelection(sheetIdx);
                    break;
            }
        },

        _contextualTabObj: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, imgtop = "imagetop", createdObj;
            createdObj = {
                backgroundColor: "#FCFBEB",
                borderColor: "#F2CC1C",
                tabs: [
                    {
                        id: "design",
                        text: xlObj._getLocStr("Design"),
                        groups: [
                            {
                                id: "Properties",
                                text: xlObj._getLocStr("Properties"),
                                alignType: ej.Ribbon.alignType.rows,
                                type: "custom",
                                contentID: xlId + "_Ribbon_Design_Properties_TableProperties"
                            },
                            {
                                id: "Tools",
                                text: xlObj._getLocStr("Tools"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        this._generateBtn("Design_Tools_ResizeTable", "ResizeTable", "textandimage", "e-icon e-ssr-resizetable", 101, this._smallBtnHeight, "ResizeTable", "ResizeTableContent"),
                                        this._generateBtn("Design_Tools_ConvertToRange", "ConvertToRange", "textandimage", "e-icon e-ssr-range", 130, this._smallBtnHeight, "ConvertToRange", "ConvertToRangeContent")
                                    ],
                                }
                                ]
                            },
                            {
                                id: "TableStyleOptions",
                                text: xlObj._getLocStr("TableStyleOption"),
                                alignType: ej.Ribbon.alignType.rows,
                                type: "custom",
                                contentID: xlId + "_Ribbon_Design_TableStyleOptions"
                            }
                        ]
                    }]
            };
            this._contextualTabCollection.push(createdObj);
            createdObj = {
                backgroundColor: "#EAF6BD",
                borderColor: "#90AA3C",
                tabs: [
                    {
                        id: "chartdesign",
                        text: xlObj._getLocStr("CHARTDESIGN"),
                        groups: [
                            {
                                id: "ChartLayouts",
                                text: xlObj._getLocStr("ChartLayouts"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        this._generateSplitBtn("ChartDesign_ChartLayouts_AddChartElement", "AddChartElement", "textandimage", xlId + "_Ribbon_CElement", "", "e-icon e-ssr-celements", true, 65, this._bigBtnHeight, "bottom", "imagetop", "dropdown", "e-spreadsheet e-chartlayoutbtn", "AddChartElement", "AddChartElementContent")
                                    ]
                                }]
                            },
                            {
                                id: "Data",
                                text: xlObj._getLocStr("ChartDesignData"),
                                alignType: ej.Ribbon.alignType.rows,
                                content: [{
                                    groups: [
                                        this._generateBtn("ChartDesign_Data_SwitchRowColumn", "SwitchRowColumn", "textandimage", "e-icon e-ssr-srcolumn", 72, this._bigBtnHeight, "SwitchRowColumn", "SwitchRowColumnContent", "", "imagetop"),
                                        this._generateBtn("ChartDesign_Data_SelectData", "SelectData", "textandimage", "e-icon e-ssr-selectdata", 50, this._bigBtnHeight, "SelectData", "SelectDataContent", false, imgtop)
                                    ]
                                }]
                            },
                            {
                                id: "Type",
                                text: xlObj._getLocStr("ChartDesignType"),
                                alignType: ej.Ribbon.alignType.rows,
                                content: [{
                                    groups: [
                                        this._generateBtn("ChartDesign_Type_ChangeChartType", "ChartType", "textandimage", "e-icon e-ssr-charttype", 65, this._bigBtnHeight, "ChartType", "ChartTypeContent", false, imgtop)
                                    ]
                                }]
                            },
                            {
                                id: "ChartThemes",
                                text: xlObj._getLocStr("ChartThemes"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        this._generateDD("ChartDesign_ChartThemes_ChartThemes", "ChartThemes", this._chartThemes, "1", 130, this._smallBtnHeight, "ChartThemes", "ChartThemesContent")
                                    ],
                                }]
                            },
                            {
                                id: "Size",
                                text: xlObj._getLocStr("ChartDesignSize"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [{
                                        contentID: xlId + "_Ribbon_ChartDesign_Size_ChartSize",
                                        enableSeparator: true,
                                        type: ej.Ribbon.type.custom,
                                        height: 80
                                    }]
                                }]
                            }
                        ]
                    }]
            };
            this._contextualTabCollection.push(createdObj);
            if (xlObj.model.allowSparkline)
                this._contextualTabCollection.push(xlObj.XLSparkline._contextualTabInsert());
            createdObj = {
                backgroundColor: "#FCFBEB",
                borderColor: "#F2CC1C",
                tabs: [
                    {
                        id: "format",
                        text: xlObj._getLocStr("FORMAT"),
                        groups: [
                            {
                                id: "Adjust",
                                text: xlObj._getLocStr("Adjust"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        this._generateBtn("Format_Adjust_ChangePicture", "ChangePicture", "textandimage", "e-icon e-ssr-changepicture", 120, this._mediumBtnHeight, "ChangePicture", "ChangePictureContent"),
                                        this._generateSplitBtn("Format_Adjust_ResetPicture", "ResetPicture", "textandimage", xlId + "_Ribbon_ResetPic", { dataSource: this._resetPicture, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }, "e-icon e-ssr-resetpicture", false, 120, this._mediumBtnHeight, "left", "", "dropdown", "e-ss-resetpictbtn", "ResetPicture", "ResetPictureContent")
                                    ],
                                }
                                ]
                            },
                            {
                                id: "Border",
                                text: xlObj._getLocStr("Border"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        this._generateSplitBtn("Format_Border_PictureBorder", "PictureBorder", "textandimage", xlId + "_Ribbon_PictureBorder", "", "e-icon e-ssr-pictureborder", false, 120, this._mediumBtnHeight, "left", "", "dropdown", "e-ss-pictbrdrbtn", "PictureBorder", "PictureBorderContent")
                                    ],
                                }
                                ]
                            },
                            {
                                id: "Size",
                                text: xlObj._getLocStr("FormatSize"),
                                alignType: ej.Ribbon.alignType.columns,
                                type: "custom",
                                contentID: xlId + "_Ribbon_Format_Size_PictureSize"
                            }
                        ]
                    }]
            };
            this._contextualTabCollection.push(createdObj);
            createdObj = {
                backgroundColor: "#FCF0F7",
                borderColor: "#C9599C",
                tabs: [
                    {
                        id: "analyze",
                        text: xlObj._getLocStr("ANALYZE"),
                        groups: [
                            {
                                id: "PivotTable",
                                text: xlObj._getLocStr("AnalyzePivotTable"),
                                alignType: ej.Ribbon.alignType.rows,
                                type: "custom",
                                contentID: xlId + "_pvttableproperties"
                            },
                            {
                                id: "DataSource",
                                text: xlObj._getLocStr("DataSource"),
                                alignType: ej.Ribbon.alignType.rows,
                                content: [{
                                    groups: [
                                        this._generateBtn("Analyze_DataSource_Refresh", "Refresh", "textandimage", "e-icon e-ssr-datarefresh", 50, this._bigBtnHeight, "RefreshTitle", "RefreshContent", false, imgtop),
                                        this._generateBtn("Analyze_DataSource_ChangeDataSource", "ChangeDataSource", "textandimage", "e-icon e-ssr-changedatasource", 50, this._bigBtnHeight, "ChangeDataSource", "ChangeDataSourceContent", false, imgtop)
                                    ],
                                }
                                ]
                            },
                            {
                                id: "Actions",
                                text: xlObj._getLocStr("Actions"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        this._generateBtn("Analyze_Actions_ClearAll", "ClearAll", "textandimage", "e-icon e-ssr-pivotclearall", 75, this._smallBtnHeight, "ClearAll", "ClearAllContent", false, "", "e-datapadding"),
                                        this._generateBtn("Analyze_Actions_MovePivotTable", "MovePivotTable", "textandimage", "e-icon e-ssr-movepivottable", 120, this._smallBtnHeight, "MovePivotTable", "MovePivotTableContent", false, "", "e-datapadding")
                                    ],
                                }
                                ]
                            },
                            {
                                id: "Show",
                                text: xlObj._getLocStr("Show"),
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        this._generateToggleBtn("Analyze_Show_FieldList", "FieldList", "textandimage", "e-icon e-ssr-fieldlist", "FieldListTitle", 50, this._bigBtnHeight, ["FieldListContent", "FieldListRemoveContent"], false, "", imgtop, null, null, true)
                                    ],
                                }
                                ]
                            }
                        ]
                    }]
            };
            this._contextualTabCollection.push(createdObj);
        },

        _onRibbonPin: function (args) {
            var xlObj = this.XLObj, settings = $.extend(true, {}, xlObj.model.scrollSettings);
            this._ribbonState = true;
            xlObj.getSheet(xlObj.getActiveSheetIndex())._isRibCollapsed = false;
            args.action = "toggleBtn";
            xlObj.model._isActPanelVisible = this._isPanelVisible;
            if (xlObj._isAutoWHMode) {
                this._refreshBackstageHeight();
                var dimension = xlObj._getElementDimension();
                xlObj.element.css({ height: dimension.height, width: dimension.width });
            }
            else
                xlObj._heightWidthCalculation(xlObj.getActiveSheetIndex(), settings, args);
            xlObj.model._isActPanelVisible && xlObj._refreshActivationPanel();
        },

        _onRibbonExpand: function (args) {
            var xlObj = this.XLObj, settings = $.extend(true, {}, xlObj.model.scrollSettings);
            args.action = "toggleBtn";
            if ((args.type === "expand" && (args.clickType === "dblclick") || xlObj._isKeyCtrlShftF2) || xlObj._phoneMode) {
                this._ribbonState = true;
                xlObj.getSheet(xlObj.getActiveSheetIndex())._isRibCollapsed = false;
                if (xlObj._isAutoWHMode) {
                    this._refreshBackstageHeight();
                    var dimension = xlObj._getElementDimension();
                    xlObj.element.css({ height: dimension.height, width: dimension.width });
                }
                else
                    xlObj._heightWidthCalculation(xlObj.getActiveSheetIndex(), settings, args);
                this.XLObj.model._isActPanelVisible && xlObj._refreshActivationPanel();
                xlObj._isKeyCtrlShftF2 = false;
            }
            else if (this.XLObj.model._isActPanelVisible) {
                xlObj.getActivationPanel().hide();
                this._isPanelVisible = xlObj.model._isActPanelVisible;
                xlObj.model._isActPanelVisible = false;
                xlObj._heightWidthCalculation(xlObj.getActiveSheetIndex(), settings, args);
            }
        },

        _onRibbonGroupClick: function (args) {
            var xlObj = this.XLObj;
            if (!xlObj._phoneMode)
                return;
            if ($(args.target).parents(".e-resizegroupdiv").length > 0 || (args.target.className.indexOf("e-resizegroupdiv") > -1) || (args.target.className.indexOf("e-ribdownarrow") > -1) || (args.target.className.indexOf("e-ribuparrow") > -1) || (args.target.className.indexOf("e-ribleftarrow") > -1)) {
                var settings = $.extend(true, {}, xlObj.model.scrollSettings);
                this._ribbonState = true;
                args.action = "toggleBtn";
                xlObj.model._isActPanelVisible = this._isPanelVisible;
                if (xlObj._isAutoWHMode) {
                    this._refreshBackstageHeight();
                    var dimension = xlObj._getElementDimension();
                    xlObj.element.css({ height: dimension.height, width: dimension.width });
                }
                else
                    xlObj._heightWidthCalculation(xlObj.getActiveSheetIndex(), settings, args);
                xlObj.model._isActPanelVisible && xlObj._refreshActivationPanel();
            }
        },

        _hideTabs: function () {  // to hide ribbon tabs
            var i, robj = $("#" + this.XLObj._id + "_Ribbon").ejRibbon("instance"), tnames = ["", this.XLObj._getLocStr("Design"), this.XLObj._getLocStr("CHARTDESIGN"), this.XLObj._getLocStr("FORMAT"), this.XLObj._getLocStr("ANALYZE"), this.XLObj._getLocStr("SPARKLINEDESIGN")];
            i = tnames.length;
            while (i = i - 1)
                robj.hideTab(tnames[i]);
        },

        // ribbon design tab
        _renderDesignTab: function () {
            var proxy = this.XLObj, htmlstr = '', tsotext = proxy._getLocStr('TableStyleOptions').split('/'), groupId = proxy._id + "_Ribbon_Design_TableStyleOptions";
            proxy.element.append('<input id=' + proxy._id + '_tableid type="text" style = "display:none"/>');
            htmlstr = '<div id=' + proxy._id + '_Ribbon_Design_Properties_TableProperties><div class="e-tablepropertiesrow" ><div class="e-tablepropertiescell">Table Name:</div></div><div class="e-tablepropertiesrow" ><div class="e-tablepropertiescell"><input type="text" id=' + proxy._id + '_Ribbon_Design_Properties_TableName class="ejinputtext" style="width:86px;opacity:0.7;height: 18px;text-indent: 3px;padding-left: 0px;box-sizing: content-box;" /></div></div></div>';
            htmlstr = htmlstr + '<div id=' + groupId + '><div class="e-tablestyleoptionsrow" ><div class="e-tablestyleoptionscell"><input id=' + groupId + '_FirstColumn type="checkbox" /><label class="e-tablestyleoptionslabel" for="' + groupId + '_FirstColumn">' + tsotext[0] + '</label></div><div class="e-tablestyleoptionscell" ><input id=' + groupId + '_LastColumn type="checkbox" /><label class="e-tablestyleoptionslabel" for="' + groupId + '_LastColumn">' + tsotext[1] + '</label></div></div><div class="e-tablestyleoptionsrow" ><div class="e-tablestyleoptionscell"><input id=' + groupId + '_TotalRow type="checkbox" /><label class="e-tablestyleoptionslabel" for="' + groupId + '_TotalRow">' + tsotext[2] + '</label></div><div class="e-tablestyleoptionscell" ><input id=' + groupId + '_FilterColumn type="checkbox" /><label class="e-tablestyleoptionslabel" for="' + groupId + '_FilterColumn">' + tsotext[3] + '</label></div></div></div>';
            proxy.element.append(htmlstr);
            $("#" + groupId + "_FirstColumn").ejCheckBox({ change: this._ribbonClickHandler });
            $("#" + groupId + "_LastColumn").ejCheckBox({ change: this._ribbonClickHandler });
            $("#" + groupId + "_TotalRow").ejCheckBox({ change: this._ribbonClickHandler });
            $("#" + groupId + "_FilterColumn").ejCheckBox({ change: this._ribbonClickHandler });
        },

        _renderFormatTab: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, xlEle = xlObj.element, rbnId = xlId + "_Ribbon", formatElem = rbnId + "_Format_Size_";
            xlEle.append(ej.buildTag("ul", "", { width: "auto", display: "none" }, { id: rbnId + "_ResetPic" }));
            xlEle.append(this._borderPicture());
            xlEle.append("<div id=" + formatElem + "PictureSize class= e-ss-numeric style='display:none'><table><tr><td style='padding-right:4px;'>" + xlObj._getLocStr("Height") + ": </label></td><td style='padding-bottom:3px;'><input id='" + formatElem + "PictureHeight' type='text' /></td></tr><tr><td><labe>" + xlObj._getLocStr("Width") + ": </label></td><td><input id='" + formatElem + "PictureWidth' type='text' /></td></tr></table></div>");
            $("#" + formatElem + "PictureHeight").ejNumericTextbox({ name: "numeric", value: 100, minValue: 25, incrementStep: 5, change: $.proxy(this._pictureSizeChange, this, "PictureWidth") });
            $("#" + formatElem + "PictureWidth").ejNumericTextbox({ name: "numeric", value: 100, minValue: 25, incrementStep: 5, change: $.proxy(this._pictureSizeChange, this, "PictureHeight") });
            $("#" + rbnId + "_PictureColor").ejColorPicker({ modelType: "palette", presetType: "basic", cssClass: "e-ss-colorpicker e-ss-menuclrpkr", change: this._ribbonClickHandler });
            var picCP = $("#" + rbnId + "_PictureColor").data("ejColorPicker");
            this._isSetModel = true;
            picCP.show();
            this._isSetModel = false;
            $("#" + rbnId + "_PictureColorWrapper").hide();
            $("#" + rbnId + "_PictureColor_popup").css({ "display": "block" });
            $("#" + xlId + "picturecolor ul li").find("a").remove();
            $("#" + xlId + "picturecolor ul li").append($("#" + rbnId + "_PictureColor_popup"));
        },

        _renderAnalyzeTab: function () {
            var xlObj = this.XLObj;
            xlObj.element.find("#" + xlObj._id + "_Ribbon_analyze_PivotTable_content").width(132);
            if (!xlObj.element.find("#" + xlObj._id + "_pvttableproperties").length)
                xlObj.element.append('<div id=' + xlObj._id + '_pvttableproperties style="display:none" ><div class="e-tablepropertiesrow" ><div class="e-tablepropertiescell">' + xlObj._getLocStr("PivotTableName") + ':</div></div><div class="e-tablepropertiesrow" ><div class="e-tablepropertiescell"><input type="text" id=' + xlObj._id + '_Ribbon_Analyze_PivotTable_PivotTableName class="ejinputtext" style="width:106px;opacity:0.7;height: 18px;text-indent: 3px;" /></div></div></div>');
        },

        _renderChartDesignTab: function () {
            var xlObj = this.XLObj, xlEle = xlObj.element, xlId = xlObj._id, chartElem = xlId + "_Ribbon_ChartDesign_Size_";
            xlEle.append(this._chartElementTag());
            xlEle.append("<div id=" + chartElem + "ChartSize class= e-ss-numeric style='width: 180;height: 80;'><table><tr><td><label class ='e-icon e-ssr-chartheight' style='width:25;height:25;display: visible' id = " + xlId + "_Ribbon_chartheightlbl /></td><td><input id='" + chartElem + "ChartHeight' type='text' /></td></tr><tr><td><label class ='e-icon e-ssr-chartwidth' style='width: 180;height: 80;' id = " + xlId + "_Ribbon_chartwidthlbl /></td><td><input id='" + chartElem + "ChartWidth' type='text' /></td></tr></table></div>");
            $("#" + chartElem + "ChartWidth").ejNumericTextbox({ name: "numeric", value: 200, minValue: 180, decimalPlaces: 1, incrementStep: 5, change: this._ribbonClickHandler });
            $("#" + chartElem + "ChartHeight").ejNumericTextbox({ name: "numeric", value: 200, minValue: 180, decimalPlaces: 1, incrementStep: 5, change: this._ribbonClickHandler });
        },

        // Name Manager(NM)
        _renderNameManagerDlg: function () {
            var xlObj = this.XLObj, htmlStr = "<div id = '" + xlObj._id + "_nmdlg' style=display:'none'; ><div class='e-dlgctndiv' style='width: 100%;' ><div class='e-dlg-fields e-nmdlg-content' style='width: 100%;'><div class='e-ss-nm-dlg-grid' style='height: 180px;'><div id='" + xlObj._id + "_nmgrid' style=display:'none';></div></div></div><div class='e-dlg-fields'><label class='e-dlg-fields'>" + xlObj._getLocStr("RefersTo") + ":</label><input type='text' class='e-nmrange ejinputtext' id='" + xlObj._id + "_nmrange' disabled='true' /></div><div class='e-dlg-btnfields' ><div class='e-dlg-btnctnr'><button id='" + xlObj._id + "_nmclose' >" + xlObj._getLocStr("Close") + "</button></div></div></div></div>";
            htmlStr = htmlStr + "<script id='" + xlObj._id + "_nmeditortemplate' class='e-hide' type='text/x-jsrender' ><div class='e-dlg-fields e-dlgctndiv'><table cellpadding='0' cellspacing='0'><tr><td>" + xlObj._getLocStr("Name") + ":</td><td><input id='" + xlObj._id + "_nmgridname' type='text' class='ejinputtext' name='name' value='{{: name}}'/></td></tr><tr class='e-dlgtd-fields'><td>" + xlObj._getLocStr("Scope") + ":</td><td><input class='ejinputtext' id='" + xlObj._id + "_nmgridscope' type='text' name='scope' value='" + xlObj._getLocStr("Workbook") + "'/></td></tr><tr class='e-dlgtd-fields'><td>" + xlObj._getLocStr("Comment") + ":</td><td><textarea id='" + xlObj._id + "_nmgridcomment' class='e-ss-textarea' style=' resize: none; height: 44px; width: 100%;' name='comment' value='{{: comment}}'>{{: comment}}</textarea></td></tr><tr class='e-dlgtd-fields'><td>" + xlObj._getLocStr("RefersTo") + ":</td><td><input type='text' class='ejinputtext' id='" + xlObj._id + "_nmgridrefersto' name = 'refersto' value='{{: refersto}}' /></td></tr></table></div></script>";
            xlObj.element.append(htmlStr);
            $("#" + xlObj._id + "_nmclose").ejButton({ showRoundedCorner: true, width: 68, click: $.proxy(this._nmdlgClose, xlObj) });
            this._renderNMGrid();
            $("#" + xlObj._id + "_nmdlg").ejDialog({ enableResize: false, showOnInit: false, title: xlObj._getLocStr('NameManager'), enableModal: true, width: "auto", height: "auto", cssClass: "e-ss-dialog e-ss-nmdlg e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this), beforeClose: ej.proxy(this._beforeDlgClose, this), open: ej.proxy(this._nmDlgOpen, this) });
        },
        _renderNMDDownList: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_nmgridscope").ejDropDownList({
                dataSource: this._nameMSheetNames(),
                width: "100%",
                height: "44px"
            });
        },
        _nameMSheetNames: function () {
            var xlObj = this.XLObj, sheetname = [], shtnameclt = [], i, len, sheets = xlObj._getSheetNames();
            shtnameclt[0] = { value: "Workbook", text: xlObj._getLocStr("Workbook") };
            for (i = 1, len = sheets.length; i <= len; i++) {
                if (sheets[i - 1].isVisible) {
                    sheetname[i] = sheets[i - 1].text;
                    shtnameclt[i] = { value: sheetname[i], text: sheetname[i] };
                }
            }
            return shtnameclt;
        },
        _renderNMGrid: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_nmgrid").ejGrid({
                locale: xlObj.model.locale,
                dataSource: xlObj.model.nameManager.slice(0),
                allowScrolling: true,
                allowSorting: true,
                enableAltRow: false,
                isResponsive: true,
                minWidth: 400,
                allowPaging: false,
                scrollSettings: { height: "100%" },
                cssClass: "e-ss-dialog e-ss-grid e-" + xlObj._id + "-dlg",
                selectionType: ej.Grid.SelectionType.Single,
                editSettings: { allowAdding: true, allowDeleting: false, editMode: ej.Grid.EditMode.DialogTemplate, dialogEditorTemplateID: "#" + xlObj._id + "_nmeditortemplate" },
                toolbarSettings: { showToolbar: true, toolbarItems: [ej.Grid.ToolBarItems.Add] },
                actionBegin: $.proxy(this._nmActionBegin, xlObj),
                actionComplete: $.proxy(this._nmActionComplete, xlObj),
                rowSelected: $.proxy(this._nmRecordSelected, xlObj),
                columns: [
                    { field: "name", headerText: xlObj._getLocStr("Name"), isPrimaryKey: true, width: 100 },
                    { field: "refersto", headerText: xlObj._getLocStr("RefersTo"), width: 120 },
                    { field: "scope", headerText: xlObj._getLocStr("Scope"), width: 80 },
                    { field: "comment", headerText: xlObj._getLocStr("Comment"), width: 100 }
                ]
            });
        },

        _updateNMRange: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_nmgridEditForm").find("#" + xlObj._id + "_nmgridrefersto").val("=" + xlObj._getDollarAlphaRange(xlObj.getSheet(xlObj.getActiveSheetIndex()).selectedRange, true));
        },

        _nmdlgClose: function () {
            $("#" + this._id + "_nmdlg").ejDialog("close");
        },

        _nmRecordSelected: function (args) {
            $("#" + this._id + "_nmdlg").find(".e-nmrange").val(args.data.refersto);
        },
        _nmDlgOpen: function () {
            var xlObj = this.XLObj;
            if (this._isNmgrid === "DefineName") {
                $("#" + xlObj._id + "_nmgrid").ejGrid("instance").addRecord();
                ($("#" + xlObj._id + "_nmgridEditForm input")[0]).focus();
            }
            this._isNmgrid = "";
        },
        _nmActionBegin: function (args) {  // validating input
            var i = 0, canBreak = false, len, prop, data, sheet = this.getSheet(this.getActiveSheetIndex());
            if (args.requestType === "save" && args.data.refersto) {
                data = args.data;
                data.sheetIndex = this._getSheetIndexByName(args.data.refersto.split("!")[0].replace(/[=\']/g, ""));
                args.cancel = true;
                if (!data.sheetIndex) {
                    this._showAlertDlg("Alert", "InvalidSheetIndex", "NMRangeAlert", 275);
                    return;
                }
                if (sheet._nmEdit) {
                    for (prop in sheet._nmValue) {
                        len = this.model.nameManager.length;
                        while (i < len) {
                            if (this.model.nameManager[i].name === sheet._nmValue.name) {
                                this.model.nameManager.splice(i, 1);
                                this._calcEngine.removeNamedRange(sheet._nmValue.name);
                                break;
                            }
                            i++;
                        }
                        i = this._formulaCollection.length;
                        while (i--) {
                            if (this._formulaCollection[i].display === sheet._nmValue.name) {
                                canBreak = true;
                                this._formulaCollection.splice(i, 1);
                                break;
                            }
                        }
                        if (canBreak)
                            break;
                    }
                }
                if (this.XLRibbon._validateNamedRange(data.name, data.refersto, data.scope))
                    args.cancel = false;
                else
                    canBreak && this.model.nameManager.push(sheet._nmValue);
            }
            if (args.requestType === "beginedit") {
                sheet._nmEdit = true;
                sheet._nmValue = { name: args.model.dataSource[args.model.selectedRowIndex].name, refersto: args.model.dataSource[args.model.selectedRowIndex].refersto, comment: args.model.dataSource[args.model.selectedRowIndex].comment, sheetIndex: args.model.dataSource[args.model.selectedRowIndex].sheetIndex, scope: args.model.dataSource[args.model.selectedRowIndex].scope };
            }
        },

        _nmActionComplete: function (args) {
            var gridInst = $("#" + this._id + "_nmgrid").data("ejGrid"), reqType = args.requestType, editDlgInst, editDlgInpElem;
            switch (reqType) {
                case "add":
                    editDlgInst = $("#" + this._id + "_nmgrid_dialogEdit").data("ejDialog");
                    editDlgInst.model.open = $.proxy(this.XLRibbon._updateNMRange(), this);
                    editDlgInst.option("allowDraggable", false);
                    editDlgInst.option("title", this._getLocStr("NewName"));
                    editDlgInpElem = $("#" + this._id + "_nmgridEditForm").find("input[type='button']:first");
                    editDlgInpElem.data("ejButton").option({ "text": this._getLocStr("Ok"), cssClass: "e-ss-okbtn" });
                    editDlgInpElem.parent().addClass("e-dlg-btnfields").css("text-align", "right");
                    this.XLRibbon._renderNMDDownList();
                    break;
                case "save":
                    this.XLRibbon._addNamedRange(args.data.name, args.data.refersto, args.data.comment, args.data.sheetIndex, args.data.scope);
                    break;
                case "delete":
                    this.XLRibbon._removeNamedRange(gridInst, args.data.name, args.data.scope);
                    break;
                case "cancel":
                    gridInst.element.focus();
                    break;
            }
        },

        _updateNamedRanges: function (name, refersto, skipAutoComp, scope) {
            var xlObj = this.XLObj;
            refersto = xlObj.XLEdit._parseSheetRef(refersto, true);
            if (scope.toUpperCase() === xlObj._getLocStr("Workbook").toUpperCase()) {
                xlObj._calcEngine.addNamedRange(name, refersto.replace("=", ""));
                this._scopeBookCln[name] = { isName: true };
            }
            else
                xlObj._calcEngine.addNamedRange(scope + "!" + name, refersto.replace("=", ""));
            this._updateScopeRange();
            if (!skipAutoComp)
                xlObj.XLEdit._refreshAutoComplete();
        },

        _updateUseInFormulaTrgt: function () {
            var i = 0, xlObj = this.XLObj, htmlStr = "", trgt = $("#" + xlObj._id + "_nmuseinformula"), nameMgr = xlObj.model.nameManager, len = nameMgr.length, sheetIdx = xlObj.getActiveSheetIndex(), scopeIndex, ranges;
            while (i < len) {
                if (nameMgr[i].scope.toUpperCase() !== xlObj._getLocStr("Workbook").toUpperCase()) {
                    scopeIndex = xlObj._getSheetIndexByName(nameMgr[i].scope);
                    ranges = xlObj.getSheet(sheetIdx)._scopeRanges;
                }
                if (nameMgr[i].scope.toUpperCase() === xlObj._getLocStr("Workbook").toUpperCase() || sheetIdx === scopeIndex && ranges && ranges[nameMgr[i]["name"]] && !ranges[nameMgr[i]["name"]]["isSameName"])
                    htmlStr = htmlStr + "<div class='e-nmuseinformularow' style = 'color:#333333'>" + nameMgr[i].name + "</div>";
                i++;
            }
            htmlStr.length ? $("#" + xlObj._id + "_Ribbon_Others_Formulas_UseInFormula").ejSplitButton("enable") : $("#" + xlObj._id + "_Ribbon_Others_Formulas_UseInFormula").ejSplitButton("disable");
            trgt.html("<div>" + htmlStr + "</div>");
        },

        addNamedRange: function (name, refersTo, comment, sheetIdx, scope) {
            var xlObj = this.XLObj; sheetIdx = sheetIdx || xlObj.getActiveSheetIndex();
            var gridInst = $("#" + xlObj._id + "_nmgrid").data("ejGrid"),
                args = { name: name, refersTo: refersTo, comment: comment, scope: (ej.isNullOrUndefined(scope)) ? "workbook" : scope, sheetIndex: sheetIdx, reqType: "named-range", type: "actionBegin", action: "addNamedRange" };
            if (xlObj._trigActionBegin(args))
                return;
            name = args.name;
            refersTo = args.refersTo;
            comment = args.comment;
            scope = args.scope;
            if (this._validateNamedRange(name, refersTo, scope)) {
                if (gridInst) {
                    gridInst.addRecord({ name: name, refersto: refersTo, comment: comment ? comment : "", scope: scope ? scope : "WorkBook", sheetIndex: sheetIdx });
                    gridInst.refreshContent();
                }
                else {
                    //for(i=0;i<len;i++) {
                    //if(nmgr[i].name.toUpperCase() === name.toUpperCase()) {
                    //	sheet = xlObj.getSheet(sheetIdx);
                    //	!sheet._scopeRanges[name] && (sheet._scopeRanges[name] = {});
                    //	sheet._scopeRanges[name]["isSameName"] = true;
                    //}
                    //}
                    // xlObj.model.nameManager.push({ name: name, refersto: refersTo, comment: comment, sheetIndex: sheetIdx, scope: scope ? scope : "workbook" });
                    this._addNamedRange(name, refersTo, comment, sheetIdx, scope);
                }
            }
        },

        _addNamedRange: function (name, refersTo, comment, sheetIdx, scope) {
            var xlObj = this.XLObj, i, scopeIndex, sheet;
            sheetIdx = sheetIdx || xlObj.getActiveSheetIndex();
            var args = { name: name, refersTo: refersTo, comment: comment, scope: (ej.isNullOrUndefined(scope)) ? "workbook" : scope, sheetIndex: sheetIdx, reqType: "named-range", type: "actionBegin", action: "addNamedRange" },
                nmgr = xlObj.model.nameManager, len = nmgr.length;
            if (xlObj._trigActionBegin(args))
                return;
            name = args.name;
            refersTo = args.refersTo;
            comment = args.comment;
            scope = args.scope ? args.scope : "workbook";
            scopeIndex = xlObj._getSheetIndexByName(scope)
            scopeIndex = scopeIndex ? scopeIndex : sheetIdx;
            if (scope.toUpperCase() !== xlObj._getLocStr("Workbook").toUpperCase()) {
                sheet = xlObj.getSheet(scopeIndex);
                if (sheet._scopeRanges[name]) {
                    sheet._scopeRanges[name]["name"] = scope + "!" + name;
                    sheet._scopeRanges[name]["refersto"] = refersTo;
                }
                else
                    sheet._scopeRanges[name] = { name: scope + "!" + name, refersto: refersTo };
            }
            for (i = 0; i < len; i++) {
                if (nmgr[i].name.toUpperCase() === name.toUpperCase() && ((nmgr[i].scope.toUpperCase() === "WORKBOOK" && scope.toUpperCase() !== "WORKBOOK") || nmgr[i].scope.toUpperCase() !== "WORKBOOK" && scope.toUpperCase() === "WORKBOOK")) {
                    scopeIndex = (scope.toUpperCase() === xlObj._getLocStr("Workbook").toUpperCase()) ? xlObj._getSheetIndexByName(nmgr[i].scope) : xlObj._getSheetIndexByName(scope);
                    if (!xlObj.getObjectLength(xlObj.getSheet(scopeIndex)._scopeRanges[name]))
                        xlObj.getSheet(scopeIndex)._scopeRanges[name] = {}
                    xlObj.getSheet(scopeIndex)._scopeRanges[name]["isSameName"] = true;
                }
            }
            if (!(xlObj.isImport || xlObj.model.isImport))
                xlObj.model.nameManager.push({ name: name, refersto: refersTo, comment: comment, sheetIndex: sheetIdx, scope: scope });
            this._updateNamedRanges(name, refersTo, false, scope);
            if (!(xlObj.isImport || xlObj.model.isImport))
                this._updateUseInFormulaTrgt();
            !xlObj._isSheetNavigate && xlObj._trigActionComplete(args);
        },

        removeNamedRange: function (name, scope) {
            if (!name)
                return;
            var xlObj = this.XLObj, gridInst = $("#" + xlObj._id + "_nmgrid").data("ejGrid"), nameMgrIdx;
            scope = scope ? scope : "workbook";
            if (gridInst) {
                gridInst.option("editSettings", { "allowDeleting": true });
                gridInst.deleteRecord("name", { name: name, scope: scope });
                gridInst.option("editSettings", { "allowDeleting": false });
            }
            else {
                nameMgrIdx = this._validateNameManager(name, scope);
                if (nameMgrIdx < 0)
                    return;
                xlObj.model.nameManager.splice(nameMgrIdx, 1);
                this._removeNamedRange(gridInst, name, scope);
            }
        },

        _removeNamedRange: function (gridInst, name, scope) {
            var i, nameMgr, xlObj = this.XLObj;
            gridInst && (xlObj.model.nameManager = gridInst.model.dataSource.slice(0));
            nameMgr = xlObj.model.nameManager;
            if (scope.toUpperCase() === xlObj._getLocStr("Workbook").toUpperCase())
                delete this._scopeBookCln[name];
            else {
                var scopeRange = xlObj.getSheet(xlObj._getSheetIndexByName(scope))._scopeRanges, scopeName = name;
                name = scopeRange[name].name;
                delete scopeRange[scopeName];
            }
            xlObj._calcEngine.removeNamedRange(name);
            xlObj._updateFormulaCollection();
            i = nameMgr.length;
            if (i) {
                while (i--)
                    xlObj._formulaCollection.push({ text: "=" + nameMgr[i].name, display: nameMgr[i].name });
            }
            this._updateUseInFormulaTrgt();

        },

        _updateScopeRange: function () {
            var i, xlObj = this.XLObj, nameMgr = xlObj.model.nameManager, len = nameMgr.length, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx);
            xlObj._updateFormulaCollection();
            for (i = 0; i < len; i++) {
                if (nameMgr[i].scope.toUpperCase() === xlObj._getLocStr("Workbook").toUpperCase() || xlObj._getSheetIndexByName(nameMgr[i].scope) === sheetIdx) {
                    if (sheet._scopeRanges[nameMgr[i].name] && sheet._scopeRanges[nameMgr[i].name].isSameName && nameMgr[i].scope.toUpperCase() !== xlObj._getLocStr("Workbook").toUpperCase())
                        xlObj._formulaCollection.push({ text: "=" + nameMgr[i].name + " (worksheet)", display: nameMgr[i].name + "(worksheet)" });
                    else
                        xlObj._formulaCollection.push({ text: "=" + nameMgr[i].name, display: nameMgr[i].name });
                }
            }
        },

        _validateNamedRange: function (name, refersTo, scope) {
            var range, libMgr, nameMgr, text, xlObj = this.XLObj, rangeAlert = "NMRangeAlert", invalidName = "NMNameAlert", uniqueName = "NMUniqueNameAlert", action;
            range = this._validateDollarRange(refersTo);
            if (name)
                (name.length > 0) && (libMgr = /^([a-zA-Z_0-9.]){0,255}$/.test(name) && this._validateLibraryFunctions(name));
            nameMgr = this._validateNameManager(name, scope);
            if (xlObj._isUndoRedo || (range && libMgr && nameMgr < 0) || xlObj.XLFormat._isTableNameAdded)
                return true;
            else {
                if (!range)
                    text = xlObj._getLocStr(rangeAlert), action = rangeAlert;
                else if (!libMgr)
                    text = xlObj._getLocStr(invalidName).split("/")[0], action = invalidName;  // not used completely
                else
                    text = xlObj._getLocStr(uniqueName), action = uniqueName;
                xlObj._showAlertDlg("Alert", "T-" + text, action, 370);
            }
        },

        _validateLibraryFunctions: function (name) {
            var i, arr = [], libraryFunc = this.XLObj.getCalcEngine().getLibraryFunctions();
            name = ej.isNullOrUndefined(name) ? "" : name.toString().toUpperCase();
            for (i in libraryFunc.items)  // for hashable issue (return false => always return true)
                arr.push(i);
            i = arr.length;
            while (i--)
                if (arr[i] === name) return false;
            return true;
        },

        _validateNameManager: function (name, scope) {
            var i = 0, nameMgr = this.XLObj.model.nameManager, length = nameMgr.length;
            name = ej.isNullOrUndefined(name) ? "" : name.toString().toUpperCase();
            scope = scope ? scope : "Workbook";
            while (i < length) {
                if (nameMgr[i].scope.toUpperCase() === scope.toUpperCase() && nameMgr[i].name.toUpperCase() === name)
                    return i;
                i++;
            }
            return -1;
        },

        _validateDollarRange: function (range) {
            try {
                if (range && range.indexOf("!") > -1) {
                    range = range.split("!")[1].replace(/\$/g, "");
                    this.XLObj.getRangeIndices(range);
                    return true;
                }
            }
            catch (err) {
                return false;
            }
        },

        // Format as table(FAT)
        _renderFormatAsTable: function () {
            var parent, child, len, xlObj = this.XLObj, i = 0, separator = [11, 19], j = 0, str = '', htmlstr = '',
                hdrtext = xlObj._getLocStr('FATHeaderText').split('/'),
                title = xlObj._getLocStr('FormatAsTableTitle').split('/'),
                name = ["Light1", "Light2", "Light3", "Light5", "Light8", "Light9", "Light10", "Light12", "Light15", "Light16", "Light17", "Light19", "Medium8", "Medium9", "Medium10", "Medium12", "Medium22", "Medium23", "Medium24", "Medium26", "Dark1", "Dark2", "Dark3", "Dark5"];
            while (i < 24) {
                str = str + xlObj._renderDIV('e-formatastablecell', '<div class="e-ss-cellstyles-' + (i + 1) + '" ></div>');
                if (i === separator[j]) {
                    str += '</br>';
                    j++;
                }
                i++;
            }
            i = 0, str = str.split('</br>');
            while (i < hdrtext.length * 2) {
                htmlstr += xlObj._renderDIV(i % 2 === 0 ? 'e-formatastableheader' : 'e-formatastablecontent', i % 2 === 0 ? hdrtext[i / 2] : str[0]);
                if (i % 2 != 0)
                    str.shift();
                i++;
            }
            parent = document.getElementById(xlObj._id + '_formatastable');
            parent.innerHTML = htmlstr;
            parent = $(parent);
            child = parent.find('.e-formatastablecell');
            i = 0, len = child.length;
            while (i < len) {
                $(child[i]).attr("id", "Table Style " + name[i]);
                $(child[i]).attr("title", xlObj._getLocStr("FATTitlePrefix") + title[i]);
                i++;
            }
            if (xlObj.XLFormat)
                xlObj.XLFormat._formatAsTableStyle = xlObj._FATStyles['TableStyleLight1'];
            parent.find(".e-formatastableheader:eq(0)").append("<span id ='" + xlObj._id + "_formatastable_back' class = 'e-formatastable-back e-icon e-ss-leftarrow'/>");
            parent.data("ejMenu").model.open = function () {
                parent.scrollTop(0);
            };
            return parent;
        },

        _renderFATNameDlg: function () {
            var htmlstr, xlObj = this.XLObj, proptext = xlObj._getLocStr('FATNameDlgText').split('/'), obj = { showRoundedCorner: true, width: "27%", click: $.proxy(this._fatNameDlgBtnClick, this) };
            htmlstr = '<div id=' + xlObj._id + '_fatnamedlg><div class="e-dlg-fields e-dlgctndiv e-ss-nmdlg"><table cellspacing="0" cellpadding="0"><tr><td>' + proptext[0] + '</td><td><input id="' + xlObj._id + '_fatname" class="ejinputtext" /></td></tr><tr class="e-dlgtd-fields"><td></td><td><input type="checkbox" id="' + xlObj._id + '_fatheader" style="background-color:#ffffff"/> <label for="' + xlObj._id + '_fatheader" class="e-ss-fathdr">' + proptext[1] + '</label></td></tr></table></div><div class="e-dlg-btnfields"><div class="e-dlg-btnctnr"><button id=' + xlObj._id + '_fatnamedlgok>' + xlObj._getLocStr('Ok') + '</button><button id=' + xlObj._id + '_fatnamedlgcancel>' + xlObj._getLocStr('Cancel') + '</button></div></div></div>'
            xlObj.element.append(htmlstr);
            $("#" + xlObj._id + "_fatheader").ejCheckBox();
            $('#' + xlObj._id + '_fatnamedlgok').ejButton(obj);
            $('#' + xlObj._id + '_fatnamedlgok').ejButton("option", "cssClass", "e-ss-okbtn");
            $('#' + xlObj._id + '_fatnamedlgcancel').ejButton(obj);
            $('#' + xlObj._id + '_fatnamedlg').ejDialog({ showOnInit: false, width: "auto", showRoundedCorner: true, title: xlObj._getLocStr('FormatAsTable'), enableModal: true, enableResize: false, cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
        },

        _renderChartNameDlg: function () {
            var htmlstr, xlObj = this.XLObj, proptext = xlObj._getLocStr('ChartTitleDlgText'), obj = { showRoundedCorner: true, width: "23%", click: $.proxy(this._chartNameDlgBtnClick, this) };
            htmlstr = '<div id=' + xlObj._id + '_chartnamedlg ><div class="e-dlg-fields e-dlgctndiv"><table cellpadding="0" cellspacing="0"><tr><td>' + proptext + '</td><td><input id="' + xlObj._id + '_chartname" class="ejinputtext" /></td></tr></table></div><div class="e-dlg-btnfields"><div class="e-dlg-btnctnr"><button id=' + xlObj._id + '_chartnamedlgok >' + xlObj._getLocStr('Ok') + '</button><button id=' + xlObj._id + '_chartnamedlgcancel>' + xlObj._getLocStr('Cancel') + '</button></div></div>';
            xlObj.element.append(htmlstr);
            $('#' + xlObj._id + '_chartnamedlgok').ejButton(obj);
            $('#' + xlObj._id + '_chartnamedlgok').ejButton("option", "cssClass", "e-ss-okbtn");
            $('#' + xlObj._id + '_chartnamedlgcancel').ejButton(obj);
            $('#' + xlObj._id + '_chartnamedlg').ejDialog({ showOnInit: false, width: "334px", minHeight: "auto", showRoundedCorner: true, title: xlObj._getLocStr('ChartTitle'), enableModal: true, enableResize: false, cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
        },

        _renderFATResizeTableDlg: function () {
            var xlObj = this.XLObj, obj = { showRoundedCorner: true, width: "15%", click: $.proxy(this._fatResizeTableBtnClick, this) },
                htmlstr = '<div id=' + xlObj._id + '_fatresizetabledlg ><div class="e-dlgctndiv"><table><tr><td>' + xlObj._getLocStr('FATResizeTableText') + '</td><td style="width: 50%;"><input id="' + xlObj._id + '_fatresizetablerange" class="ejinputtext" style="margin-left: 2px;"></td></tr></table><div class="e-dlg-fields">' + xlObj._getLocStr('FATReizeTableNote') + '</div></div><div class="e-dlg-btnfields"><div class="e-dlg-btnctnr"><button id=' + xlObj._id + '_fatresizetabledlgok >' + xlObj._getLocStr('Ok') + '</button><button id=' + xlObj._id + '_fatresizetabledlgcancel >' + xlObj._getLocStr('Cancel') + '</button></div></div></div>';
            xlObj.element.append(htmlstr);
            $('#' + xlObj._id + '_fatresizetabledlgok').ejButton(obj);
            $('#' + xlObj._id + '_fatresizetabledlgok').ejButton("option", "cssClass", "e-ss-okbtn");
            $('#' + xlObj._id + '_fatresizetabledlgcancel').ejButton(obj);
            $('#' + xlObj._id + '_fatresizetabledlg').ejDialog({ showOnInit: false, width: "494px", showRoundedCorner: true, title: xlObj._getLocStr('ResizeTable'), enableModal: true, enableResize: false, cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
        },


        _fatResizeTableBtnClick: function (args) {
            var xlObj = this.XLObj, rrange = document.getElementById(xlObj._id + '_fatresizetablerange').value, sheetIndex = xlObj.getActiveSheetIndex();
            var tid = document.getElementById(xlObj._id + '_tableid').value, tmgr = xlObj.getSheet(sheetIndex).tableManager,
                details = { sheetIndex: sheetIndex, reqType: "format-table", action: "Design_Tools_ResizeTable", tableId: tid }, canclose = true;
            if (args.model.text === xlObj._getLocStr('Ok')) {
                if (!xlObj._isvalidRange(rrange)) {
                    canclose = false;
                    xlObj._showAlertDlg("Alert", "InvalidReference", "", 375);
                }
                else {
                    details = this._resizeTable(rrange, tid, sheetIndex, details);
                    details.afterRange = xlObj.getRangeIndices(rrange);
                    details.format = tmgr[tid].format;
                    details.formatName = tmgr[tid].formatName;
                    details.header = $.extend(true, {}, xlObj.model.sheets[sheetIndex]._header);
                    details.isFilter = tmgr[tid].isFilter;
                    details.firstColumn = tmgr[tid].firstColumn;
                    details.lastColumn = tmgr[tid].lastColumn;
                    details.totalRow = tmgr[tid].totalRow;
                    xlObj.XLSelection.selectRange(tmgr[tid].range);
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            }
            if (canclose)
                $('#' + xlObj._id + '_fatresizetabledlg').ejDialog('close');
        },

        _resizeTable: function (rrange, tid, sheetIndex, details) {
            var xlObj = this.XLObj, tmgr = xlObj.getSheet(sheetIndex).tableManager, alertText, range, totRow;
            details = details || { sheetIndex: sheetIndex, reqType: "format-table", action: "Design_Tools_ResizeTable", tableId: tid };
            rrange = rrange.indexOf(':') != -1 ? xlObj.getRangeIndices(rrange) : xlObj._getRangeArgs(rrange, "object");
            alertText = this._validateResizeRange(rrange, tmgr[tid].range);
            if (!alertText) {
                details.beforeRange = $.extend(true, [], tmgr[tid].range);
                if (tmgr[tid].totalRow) {
                    totRow = $("#" + xlObj._id + "_Ribbon_Design_TableStyleOptions_TotalRow").data("ejCheckBox");
                    xlObj._dupDetails = true;
                    totRow.option("checked", false);
                    tmgr[tid].range = [rrange[0], rrange[1], rrange[2] - 1, rrange[3]];
                }
                else
                    tmgr[tid].range = rrange;
                this._isFilterSelect.isFiltered && xlObj.XLFilter._clearFilterTable(sheetIndex, parseInt(tid), true);
                xlObj.XLFormat._isFAT = true;
                xlObj.XLFormat._createTable(tid, { format: tmgr[tid].format });
                xlObj.XLFormat._isFAT = false;
                xlObj.XLFilter._extendFilterRange(tid, tmgr[tid].range);
                xlObj.XLFormat._updateTableFormula("updateRange", tmgr[tid], sheetIndex);
                if (tmgr[tid].range[2] == rrange[2] - 1) {
                    xlObj._dupDetails = true;
                    totRow.option("checked", true);
                }
                if (tmgr[tid].firstColumn) {
                    xlObj._dupDetails = true;
                    range = xlObj._getProperAlphaRange(sheetIndex, tmgr[tid].range[0] + 1, tmgr[tid].range[1], tmgr[tid].range[2], tmgr[tid].range[1]);
                    xlObj.XLFormat.format({ style: { 'font-weight': 'bold' } }, range);
                    xlObj._dupDetails = false;
                }
                if (tmgr[tid].lastColumn) {
                    xlObj._dupDetails = true;
                    range = xlObj._getProperAlphaRange(sheetIndex, tmgr[tid].range[0] + 1, tmgr[tid].range[3], tmgr[tid].range[2], tmgr[tid].range[3]);
                    xlObj.XLFormat.format({ style: { 'font-weight': 'bold' } }, range);
                    xlObj._dupDetails = false;
                }
            }
            else
                xlObj._showAlertDlg("Alert", alertText, "", 500);
            xlObj.XLSelection.selectRange(tmgr[tid].range);
            return details;
        },
        _firstLastColumn: function (tid, sheetIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), column = "", tableObj, tmgr = sheet.tableManager, range;
            tableObj = xlObj._dataContainer.sheets[sheetIdx][tmgr[tid].range[0]][tmgr[tid].range[1]];
            if (tid in tmgr) {
                range = tmgr[tid].range;
                range = this._isFirstColumn ? xlObj._getProperAlphaRange(sheetIdx, range[0] + 1, range[1], range[2], range[1]) : xlObj._getProperAlphaRange(sheetIdx, range[0] + 1, range[3], range[2], range[3]);
                if (this._isFirstColumn) {
                    column = "firstColumn";
                    ej.isNullOrUndefined(tmgr[tid].firstColumn) ? tmgr[tid][column] = true : delete tmgr[tid]["firstColumn"];
                    ej.isNullOrUndefined(tableObj.firstColumn) ? tableObj["firstColumn"] = true : tableObj["firstColumn"] = false;
                }
                else {
                    column = "lastColumn";
                    ej.isNullOrUndefined(tmgr[tid].lastColumn) ? tmgr[tid][column] = true : delete tmgr[tid]["lastColumn"];
                    ej.isNullOrUndefined(tableObj.lastColumn) ? tableObj["lastColumn"] = true : tableObj["lastColumn"] = false;
                }
                xlObj._dupDetails = true;
                xlObj.XLFormat.format({ style: { 'font-weight': tmgr[tid][column] ? 'bold' : 'normal' } }, range);
                xlObj._dupDetails = false;
            }
        },
        _totalRow: function (tid, sheetIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), tmgr = sheet.tableManager;
            ej.isNullOrUndefined(tmgr[tid].totalRow) ? xlObj.XLFormat._calculateTotalRow(sheetIdx, tid, true, true) : xlObj.XLFormat._calculateTotalRow(sheetIdx, tid, false, false);
        },
        _fatNameDlgBtnClick: function (args) {
            var obj, xlObj = this.XLObj, sid = xlObj._id, rowIdx, colIdx, arrayFormula;
            $('#' + sid + '_fatnamedlg').ejDialog('close');
            if (args.model.text === xlObj._getLocStr('Ok')) {
                rowIdx = xlObj._getSelectedCells().selCells[0].rowIndex;
                colIdx = xlObj._getSelectedCells().selCells[0].colIndex;
                arrayFormula = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "hasFormulaArray", xlObj.getActiveSheetIndex());
                if (arrayFormula)
                    xlObj._showAlertDlg("Alert", "ArrayaFormulaTableAlert", 430);
                else {
                    obj = { header: $("#" + sid + "_fatheader").ejCheckBox("checked"), name: document.getElementById(sid + '_fatname').value, format: xlObj.XLFormat._formatAsTableStyle.format };
                    if (xlObj.XLFormat._formatAsTableStyle.formatName)
                        obj["formatName"] = xlObj.XLFormat._formatAsTableStyle.formatName;
                    xlObj.XLFormat.createTable(obj);
                }
            }
        },

        _validateResizeRange: function (rrange, trange) {
            var xlObj = this.XLObj;
            if (rrange.length) {
                if (rrange[0] != trange[0] || rrange[1] != trange[1])
                    return "ResizeAlert";
                else if (rrange[3] != trange[3] || rrange[2] < trange[2])
                    return "ResizeRestrictAlert";
                else if (rrange[2] > xlObj.getSheet(xlObj.getActiveSheetIndex()).rowCount)
                    return "RangeNotCreated"
            }
            else
                return "InvalidReference";
        },

        _chartNameDlgBtnClick: function (args, title, action) {
            var cObj, details, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), dataVal = xlObj.getSheet(sheetIdx).shapeMngr.chart[xlObj.XLEdit.getPropertyValue(xlObj.XLShape._picCellIdx.rowIndex, xlObj.XLShape._picCellIdx.colIndex, 'chart')[0]], cname, sid = xlObj._id, cid = document.getElementById(sid + '_chart').value;
            cObj = $("#" + cid).data("ejChart");
            details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", cid: cid, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex, prev: {}, cur: {} };
            cname = title || document.getElementById(sid + '_chartname').value;
            if (args.model.text === xlObj._getLocStr('Ok')) {
                if (!cname.length) {
                    xlObj._showAlertDlg("Alert", "InvalidTitle", "InvalidChartTitleActn", 375);
                    return;
                }
                switch (xlObj._hasTitle) {
                    case "PX":
                        cObj.option("primaryXAxis", { title: { text: cname } });
                        dataVal.xAxis.title.text = cname;
                        details.action = "PX";
                        details.operation = action ? action : "PHAxisTitle";
                        break;
                    case "PY":
                        cObj.option("primaryYAxis", { title: { text: cname } });
                        dataVal.yAxis.title.text = cname;
                        details.action = "PY";
                        details.operation = action ? action : "PVAxisTitle";
                        break;
                    case "CT":
                        cObj.option("title", { text: cname });
                        dataVal.title.text = cname;
                        details.action = details.operation = "CT";
                        break;
                }
            }
            details.prev.text = xlObj._cOpt.prevText;
            if (xlObj._hasTitle == "CT") {
                details.prev.align = xlObj._cOpt.prevAlign;
                details.cur.align = xlObj._cOpt.curAlign;
            }
            details.cur.text = cname;
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
            xlObj._cOpt = {};
            document.getElementById(sid + '_chartname').value = "";
            $('#' + sid + '_chartnamedlg').ejDialog('close');
        },

        _designTabUpdate: function (tid, cellIdx) {
            var xlObj = this.XLObj;
            if (xlObj.model.showRibbon) {
                var xlId = xlObj._id, btnObj, robj = $('#' + xlObj._id + '_Ribbon').ejRibbon('instance'), tmgr = xlObj.getSheet(xlObj.getActiveSheetIndex()).tableManager;
                robj.showTab(xlObj._getLocStr('Design'));
                if (this._isDesignTab && !robj._isCollapsed)
                    robj.option({ selectedItemIndex: this._getTabIndex("design") });
                document.getElementById(xlObj._id + '_Ribbon_Design_Properties_TableName') && (document.getElementById(xlObj._id + '_Ribbon_Design_Properties_TableName').value = tmgr[tid].name);
                document.getElementById(xlObj._id + '_tableid') && (document.getElementById(xlObj._id + '_tableid').value = tid);
                this._isSetModel = true;
                $("#" + xlId + "_Ribbon_Design_TableStyleOptions_TotalRow").data("ejCheckBox").option({ checked: (tmgr[tid]["totalRow"] ? true : false) });
                $("#" + xlId + "_Ribbon_Design_TableStyleOptions_FirstColumn").data("ejCheckBox").option({ checked: (tmgr[tid]["firstColumn"] ? true : false) });
                $("#" + xlId + "_Ribbon_Design_TableStyleOptions_LastColumn").data("ejCheckBox").option({ checked: (tmgr[tid]["lastColumn"] ? true : false) });
                $("#" + xlId + "_Ribbon_Design_TableStyleOptions_FilterColumn").data("ejCheckBox").option({ enabled: xlObj.model.allowFiltering ? true : false });
                $("#" + xlId + "_Ribbon_Design_TableStyleOptions_FilterColumn").data("ejCheckBox").option({ checked: (tmgr[tid]["isFilter"] ? true : false) });
                this._isSetModel = false;
                btnObj = $("#" + xlObj._id + "_Ribbon_Data_SortFilter_ClearFilter").data("ejButton");
                if (btnObj)
                    this._changeClrFltrStatus(btnObj, "button", cellIdx);
            }
        },

        _formatTabUpdate: function () {
            var xlObj = this.XLObj;
            if (xlObj.model.showRibbon) {
                var robj = $("#" + xlObj._id + "_Ribbon").ejRibbon("instance"), heightElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Format_Size_PictureHeight"), widthElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Format_Size_PictureWidth");
                robj.showTab(xlObj._getLocStr("FORMAT"));
                xlObj._shapeChange = true;
                heightElem.length && heightElem.ejNumericTextbox("option", "value", xlObj.element.find(".e-ss-activeimg").height());
                widthElem && widthElem.ejNumericTextbox("option", "value", xlObj.element.find(".e-ss-activeimg").width());
                if (xlObj.model.showRibbon && !robj._isCollapsed)
                    robj.option({ selectedItemIndex: xlObj.XLRibbon._getTabIndex("format") });
                xlObj._shapeChange = false;
            }
        },

        _analyzeTabUpdate: function () {
            var xlObj = this.XLObj, elem, ribObj;
            if (!xlObj.model.enablePivotTable)
                return false;
            elem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Analyze_PivotTable_PivotTableName");
            ribObj = $("#" + xlObj._id + "_Ribbon").data("ejRibbon");
            elem.length && elem.val(xlObj.XLPivot.names[xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot")[0].id]);
            if (xlObj.model.showRibbon) {
                ribObj.showTab(xlObj._getLocStr("ANALYZE"));
                if (!ribObj._isCollapsed)
                    ribObj.option({ selectedItemIndex: xlObj.XLRibbon._getTabIndex("analyze") });
            }
        },

        _chartDesignTabUpdate: function (chartElem) {
            var xlObj = this.XLObj, dataVal, index, state;
            if (xlObj.model.showRibbon) {
                var robj = $('#' + xlObj._id + '_Ribbon').data('ejRibbon'), cid = chartElem.get(0).id, left = chartElem.get(0).offsetLeft, top = chartElem.get(0).offsetTop, cModel = chartElem.ejChart("model"), themesElem = robj.element.find("#" + xlObj._id + "_Ribbon_ChartDesign_ChartThemes_ChartThemes");
                index = xlObj._getIdxWithOffset(top, left, true);
                xlObj.XLShape._picCellIdx = { rowIndex: index.rowIdx, colIndex: index.colIdx };
                robj.showTab(xlObj._getLocStr("CHARTDESIGN"));
                dataVal = xlObj.XLChart._getShapeObj(cid, "chart");
                state = dataVal.isChartSeries ? "disable" : "enable";
                $("#" + xlObj._id + "_Ribbon_ChartDesign_Data_SelectData").ejButton(state);
                $("#" + xlObj._id + "_Ribbon_ChartDesign_Data_SwitchRowColumn").ejButton(state);
                if (!robj._isCollapsed)
                    robj.option({ selectedItemIndex: xlObj.XLRibbon._getTabIndex("chartdesign") });
                document.getElementById(xlObj._id + '_chart').value = cid;
                this._isSetModel = true;
                this._setShapeWidthHeight({ height: cModel.size.height, width: cModel.size.width, shapeType: "chart" });
                themesElem.length && themesElem.ejDropDownList("setSelectedValue", chartElem.ejChart("option", "theme"));
                this._isSetModel = false;
                if (xlObj.model.allowFormulaBar)
                    xlObj.updateFormulaBar();
            }
        },

        _setShapeWidthHeight: function (options) {
            var xlObj = this.XLObj, wNum, hNum;
            if (options.shapeType == "chart") {
                wNum = $("#" + xlObj._id + "_Ribbon_ChartDesign_Size_ChartWidth").data("ejNumericTextbox");
                hNum = $("#" + xlObj._id + "_Ribbon_ChartDesign_Size_ChartHeight").data("ejNumericTextbox");
            }
            else {
                wNum = $("#" + xlObj._id + "_Ribbon_Format_Size_PictureWidth").data("ejNumericTextbox");
                hNum = $("#" + xlObj._id + "_Ribbon_Format_Size_PictureHeight").data("ejNumericTextbox");
            }
            xlObj._shapeChange = true;
            if (xlObj.model.showRibbon) {
                hNum.option({ value: options.height });
                wNum.option({ value: options.width });
            }
            xlObj._shapeChange = false;
        },

        changeDimension: function (options) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), actImg, elem, opt, chartEle, picElem, details = { sheetIndex: sheetIdx, reqType: "shape", rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex, actionType: "shapechange" }, cObj;
            if (options.shapeType == "picture") {
                actImg = xlObj.getSheetElement(sheetIdx).find('.e-ss-activeimg');
                picElem = actImg.length ? actImg[0] : $('#' + options.id);
                details.prev = { width: picElem.width(), height: picElem.height() }
                elem = $("#" + options.id); opt = { width: options.width, height: options.height };
                elem.css(opt);
                details.action = "picturesize";
                details.shapeType = "picture";
                details.cur = { width: picElem.width(), height: picElem.height() };
            }
            else {
                cObj = $("#" + options.id).data('ejChart');
                details.prev = { width: cObj.model.size.width, height: cObj.model.size.height };
                opt = { width: options.width.toString(), height: options.height.toString() };
                chartEle = cObj.element;
                cObj.option("size", opt);
                chartEle[0].style.height = options.height + "px";
                chartEle[0].style.width = options.width + "px";
                details.action = "width";
                details.shapeType = "chart";
                details.cid = options.id;
                details.cur = { width: cObj.model.size.width, height: cObj.model.size.height };
            }
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
            this._setShapeWidthHeight(options);
        },

        _toggleDesignTab: function (cellObj) {
            var xlObj = this.XLObj, btnObj, rObj, sheetIdx = xlObj.getActiveSheetIndex();
            if (xlObj.model.showRibbon) {
                rObj = $('#' + xlObj._id + '_Ribbon').data("ejRibbon");
                if (ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(cellObj.rowIndex, cellObj.colIndex, "tableName")) || xlObj.getSheetElement(sheetIdx).find(".e-ss-activeimg").length) {
                    rObj.hideTab(xlObj._getLocStr('Design'));
                    if (!rObj._isCollapsed)
                        rObj.option({ selectedItemIndex: 1 });
                }
            }
            btnObj = $("#" + xlObj._id + "_Ribbon_Data_SortFilter_ClearFilter").data("ejButton");
            this._changeClrFltrStatus(btnObj, "button", cellObj);
        },

        _toggleChartDesignTab: function () {
            this._toggleContextualTab(this.XLObj._getLocStr("CHARTDESIGN"));
        },

        _toggleFormatTab: function () {
            this._toggleContextualTab(this.XLObj._getLocStr("FORMAT"));
        },

        _toggleAnalyzeTab: function () {
            this._toggleContextualTab(this.XLObj._getLocStr("ANALYZE"));
        },

        _toggleContextualTab: function (tabName) {
            var xlObj = this.XLObj;
            if (xlObj.model.showRibbon) {
                var rObj = $('#' + xlObj._id + '_Ribbon').data("ejRibbon");
                rObj.hideTab(tabName);
                if (!rObj._isCollapsed)
                    rObj.option({ selectedItemIndex: 1 });
            }
        },

        _getTabIndex: function (name) {
            if (!this.XLObj.model.showRibbon)
                return;
            var model = $('#' + this.XLObj._id + '_Ribbon').ejRibbon("model"), tabs = model.tabs, ctabs = model.contextualTabs, i = 0;
            while (i < ctabs.length) {
                tabs = tabs.concat(ctabs[i].tabs);
                i++;
            }
            i = tabs.length;
            while (i--)
                if (tabs[i].id === name) return ++i;
        },

        _getFormatAsTableInput: function (str) {
            var xlObj = this.XLObj, str1, str2, istr, cstr, i = 0, j = 0, arr = [], abbr = { hl: 'headerLayout', cl: 'contentLayout', hb: 'headerBorder', cb: 'contentBorder' }, obj = {};
            str = str.split('&'); // for layout input
            while (i < str.length) {
                istr = str[i].split('?'); // to separate headerlayout: '' like that
                str1 = istr[0], str2 = istr[1];
                if (str1 === 'hl')
                    obj[abbr[str1]] = xlObj._getStyleAsJSON(str2, true);
                else if (str1 === 'cl') {
                    cstr = str2.split(','); // for multiple content layout
                    while (j < cstr.length) {
                        arr.push(cstr[j].length ? xlObj._getStyleAsJSON(cstr[j], true) : {});
                        j++;
                    }
                    obj[abbr[str1]] = arr;
                }
                else if (str1 === 'cb') {
                    cstr = str2.split('-'); // for border
                    obj[abbr[str1]] = { border: this._getBorderObj(cstr[0], cstr[1]) };
                }
                i++;
            }
            return obj;
        },

        _getBorderObj: function (prop, value) {
            var i, border = { t: { top: '' }, r: { right: '' }, b: { bottom: '' }, l: { left: '' }, o: { top: '', right: '', bottom: '', left: '' }, tb: { top: '', bottom: '' }, gb: { top: '', right: '', bottom: '', left: '' } };
            for (i in border[prop])
                border[prop][i] = value;
            if (prop === 'gb')
                border[prop]["isGridBorder"] = true;
            return border[prop];
        },

        // Cell Style Feature
        _renderCellStyles: function () {
            var indx, txt, cnt = 1, count = 1, i = 0, index = 4, cdiv = [], cls = 'e-cellstylecell ', str = '', xlObj = this.XLObj, fcoll = xlObj._dataContainer.hashCode,
                cstylehdrtext = xlObj._getLocStr('CellStyleHeaderText').split('/'), gbntext = xlObj._getLocStr('CellStyleGBN').split('/'),
                gbnformat = [fcoll[0], fcoll[1], fcoll[2], fcoll[3]], thtext = xlObj._getLocStr('CellStyleTH').split('/'), thformat = fcoll.slice(4, 6), tcsformat = fcoll.slice(6, 18);
            while (i < index) {
                txt = gbntext[i];
                str = str + xlObj._renderDIV(cls + gbnformat[i], txt, txt);
                i++;
            }
            cdiv.push(str), str = '', i = 0, index = 2;
            while (i < index) {
                txt = thtext[i];
                if (i === 1)
                    str = str + '<div class="' + cls + thformat[i] + '"  style="font-size: 11pt;" title="' + txt + '">' + txt + '</div>';
                else
                    str = str + xlObj._renderDIV(cls + thformat[i], txt, txt);
                i++;
            }
            cdiv.push(str), str = '', i = 0, index = 12;
            while (i < index) {
                if (i >= 0 && i < 4)
                    txt = "20% - " + xlObj._getLocStr('Accent') + (i + 1);
                else if (i >= 4 && i < 8) {
                    txt = "60% - " + xlObj._getLocStr('Accent') + cnt;
                    cnt++;
                }
                else {
                    txt = xlObj._getLocStr('Accent') + count;
                    count++;
                }
                str = str + xlObj._renderDIV(cls + tcsformat[i], txt, txt);
                i++;
            }
            cdiv.push(str), str = '', i = 0;
            while (i < cstylehdrtext.length * 2) {
                indx = i % 2;
                str = str + xlObj._renderDIV(indx === 0 ? 'e-cellstyleheader' : 'e-cellstylecontent', indx === 0 ? cstylehdrtext[i / 2] : cdiv[0]);
                if (indx != 0)
                    cdiv.shift();
                i++;
            }
            var parent = $('<div id=' + xlObj._id + '_cellstyles class="e-spreadsheet e-cellstyles" style="display:none;">' + str + '</div>');
            parent.find(".e-cellstyleheader:eq(0)").append("<span id ='" + xlObj._id + "_cellstyles_back' class = 'e-cellstyles-back e-icon e-ss-leftarrow'/>");
            parent.append(ej.buildTag("div.e-cellstyleheader"), ej.buildTag("div.e-cellstylecell e-format6N6N2N111N1N1N1N1N", xlObj._getLocStr('NewCellStyle'), "", { title: xlObj._getLocStr('NewCellStyle') }));
            return parent;
        },

        _homeTabTrgtElem: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, xlEle = xlObj.element, rbnId = xlId + "_Ribbon_", fontElem = rbnId + "Home_Font_";
            xlEle.append(ej.buildTag("input", "", { display: "none" }, { id: fontElem + "FillColor", type: "text" }));
            xlEle.append(ej.buildTag("input", "", { display: "none" }, { id: fontElem + "FontColor", type: "text" }));
            xlEle.append(ej.buildTag("input", "", { display: "none" }, { id: fontElem + "BorderColor", type: "text" }));
            xlEle.append(ej.buildTag("div.e-spreadsheet e-formatastable", "", { display: "none" }, { id: xlObj._id + "_formatastable" }));
            xlEle.append(this._renderCellStyles());
            xlEle.append(ej.buildTag("ul", "", { display: "none" }, { id: xlId + "_Ribbon_Merge" }));
            xlEle.append(ej.buildTag("ul", "", { width: "auto", display: "none" }, { id: rbnId + "Paste" }));
            xlEle.append(ej.buildTag("ul", "", { width: "auto", display: "none" }, { id: rbnId + "Border" }));
            xlEle.append(ej.buildTag("ul.e-spreadsheet", "", { display: "none" }, { id: xlId + "_CFormat" }));
            xlEle.append(ej.buildTag("ul", "", { display: "none" }, { id: rbnId + "Clear" }));
            xlEle.append(ej.buildTag("ul", "", { display: "none" }, { id: rbnId + "SortFilter" }));
            xlEle.append(ej.buildTag("ul", "", { display: "none" }, { id: rbnId + "AutoSum" }));
        },
        _pageTabTrgtElem: function (ribbonElem) {
            var xlObj = this.XLObj, xlId = xlObj._id, xlEle = xlObj.element, pagesetupdiv, pagesetupleftdiv, table, td1, td2, td11, tr, tr1, td12, gdlnviewlbl, hdrviewlbl, headerVchk, gridVchk, rbnId = xlId + "_Ribbon_", pageId = rbnId + "PageLayout_Show_";
            ribbonElem = xlObj.isUndefined(ribbonElem) ? $("#" + xlId + "_Ribbon").data("ejRibbon").element : ribbonElem;
            xlEle.append(ej.buildTag("ul", "", { display: "none" }, { id: rbnId + "PageSize" }));
            pagesetupdiv = ej.buildTag("div", "", { width: "140", height: "80", display: "none" }, { id: rbnId + "pagesetup" });
            pagesetupleftdiv = ej.buildTag("div", "", { width: "70", height: "80", "float": "left" }, { id: rbnId + "pagesetupleft" });
            table = ej.buildTag("table"); tr = ej.buildTag("tr"); tr1 = ej.buildTag("tr"); td1 = ej.buildTag("td", "", { padding: "6px 0px 6px 6px" }); td2 = ej.buildTag("td", "", { padding: "6px 0px 6px 6px" }); td11 = ej.buildTag("td", "", { padding: "6px 0px 6px 6px" }); td12 = ej.buildTag("td", "", { padding: "6px 0px 6px 6px" });
            gdlnviewlbl = ej.buildTag("label.e-viewlinlbl", "", { width: "40" }, { id: rbnId + "pagesetup_viewgrdlnlbl", "for": pageId + "Gridlines" });
            hdrviewlbl = ej.buildTag("label.e-viewhdrlbl", "", { width: "40", display: "visible" }, { id: rbnId + "pagesetup_viewhdrlbl", "for": pageId + "Headings" });
            headerVchk = ej.buildTag("input", "", "", { id: pageId + "Headings", type: "checkbox" });
            gridVchk = ej.buildTag("input", "", "", { id: pageId + "Gridlines", type: "checkbox" });
            td1.append(gridVchk);
            td2.append(gdlnviewlbl);
            tr.append(td1).append(td2);
            td11.append(headerVchk);
            td12.append(hdrviewlbl);
            tr1.append(td11).append(td12);
            table.append(tr1).append(tr);
            pagesetupleftdiv.append(table);
            pagesetupdiv.append(pagesetupleftdiv);
            ribbonElem.append(pagesetupdiv);
        },
        _othersTabTrgtElem: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, xlEle = xlObj.element, rbnId = xlId + "_Ribbon_";
            xlEle.append(ej.buildTag("ul", "", { width: "auto", display: "none" }, { id: rbnId + "FPane" }));
            xlEle.append(ej.buildTag("ul", "", { width: "auto" }, { id: rbnId + "Ins" }));
            xlEle.append(ej.buildTag("ul", "", { width: "auto" }, { id: rbnId + "Del" }));
            xlEle.append(ej.buildTag("ul", "", { width: "auto", display: "none" }, { id: rbnId + "FindRep" }));
            xlEle.append(ej.buildTag("ul", "", { display: "none" }, { id: rbnId + "CalcOpt" }));
        },
        _dataTabTrgtElem: function () {
            var xlObj = this.XLObj;
            xlObj.element.append(ej.buildTag("ul", "", { width: "auto", display: "none" }, { id: xlObj._id + "_Ribbon_Validation" }));
        },
        _formatTabTrgtElem: function () {
            var xlObj = this.XLObj;
            xlObj.element.append(ej.buildTag("ul", "", { width: "auto", display: "none" }, { id: xlObj._id + "_Ribbon_ResetPic" }));
        },

        _onBeforeTabClick: function (args) {
            this.XLObj.model.ribbonSettings.enableOnDemand && this._createTrgtElement(args.activeHeader.innerText);
        },

        _onTabClick: function (args) {
            var xlObj = this.XLObj, tabName = args.activeHeader.innerText;
            xlObj._trigger("beforeTabClick", args);
            args.prevActiveIndex !== -1 && xlObj.model.allowComments && xlObj.model.allowEditing && (xlObj.XLEdit._isEdit || xlObj.XLComment._isCommentEdit || xlObj._isSheetRename || !xlObj.getSheet(xlObj.getActiveSheetIndex()).isSheetProtected) && !this._isDirtySelect && this._enableRibbonIcons(args.activeIndex);
            xlObj.model.ribbonSettings.enableOnDemand && this._createTabControls(tabName);
            xlObj._trigger("tabClick", args);
        },

        _onCollapse: function (args) {
            var xlObj = this.XLObj, settings = $.extend(true, {}, xlObj.model.scrollSettings);
            xlObj.getSheet(xlObj.getActiveSheetIndex())._isRibCollapsed = true;
            if (this._ribbonState || args.isMobile) {
                !xlObj._phoneMode && (this._ribbonState = false);
                args.action = "toggleBtn";
                if (xlObj._isAutoWHMode) {
                    this._refreshBackstageHeight();
                    var dimension = xlObj._getElementDimension();
                    xlObj.element.css({ height: dimension.height, width: dimension.width });
                }
                else
                    xlObj._heightWidthCalculation(xlObj.getActiveSheetIndex(), settings, args);
                xlObj.model._isActPanelVisible && xlObj._refreshActivationPanel();
            }
        },

        _onTabSelect: function (args) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex());
            if (xlObj.model.showRibbon) {
                if (xlObj.XLEdit._isEdit || (xlObj.model.allowComments && xlObj.XLComment._isCommentEdit) || xlObj._isSheetRename || sheet.isSheetProtected)
                    this._disableRibbonIcons();
                else
                    this._enableRibbonIcons();
                this._updateRibbonIcons();
                if (xlObj.model.isReadOnly)
                    xlObj._readOnly();
                if (xlObj._phoneMode) {
                    var settings = $.extend(true, {}, xlObj.model.scrollSettings);
                    this._ribbonState = true;
                    args.action = "toggleBtn";
                    xlObj.model._isActPanelVisible = this._isPanelVisible;
                    if (xlObj._isAutoWHMode) {
                        this._refreshBackstageHeight();
                        var dimension = xlObj._getElementDimension();
                        xlObj.element.css({ height: dimension.height, width: dimension.width });
                    }
                    else
                        xlObj._heightWidthCalculation(xlObj.getActiveSheetIndex(), settings, args);
                }
            }
            if (xlObj.XLEdit.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "tableName"))
                this._isDesignTab = (args.activeIndex == this._getTabIndex("design") || args.activeIndex == this._getTabIndex("format") || args.activeIndex == this._getTabIndex("chartdesign"));
            xlObj._trigger("tabSelect", args);
        },

        _valDTypeOnChange: function (args) {
            var xlObj = this.XLObj;
            if ($.validator)
                $("#" + xlObj._id + "_Form_ValDialog").validate().resetForm();
            if (args.value === "Between" || args.value === "NotBetween") {
                $("#" + xlObj._id + "_Ribbon_lbMax").show();
                $("#" + xlObj._id + "_Ribbon_btnMax").show();
                $("#" + xlObj._id + "_Ribbon_lbMin").text(xlObj._getLocStr("NumberStart"));
            }
            else {
                $("#" + xlObj._id + "_Ribbon_lbMax").hide();
                $("#" + xlObj._id + "_Ribbon_btnMax").hide();
                $("#" + xlObj._id + "_Ribbon_lbMin").text(xlObj._getLocStr("DataValue"));
            }
            this._dialogValidate("_ValDialog");
        },

        _valTypeOnChange: function (args) {
            var xlObj = this.XLObj, actionObj = $("#" + xlObj._id + "_Ribbon_ddAction").data("ejDropDownList");
            actionObj.enable();
            if (args.model.dataSource[args.model.selectedItemIndex].value === "list") {
                $("#" + xlObj._id + "_Ribbon_lbMax").hide();
                $("#" + xlObj._id + "_Ribbon_btnMax").hide();
                actionObj.disable();
            }
            else if (actionObj._selectedValue === "Between" || actionObj._selectedValue === "NotBetween") {
                $("#" + xlObj._id + "_Ribbon_lbMax").show();
                $("#" + xlObj._id + "_Ribbon_btnMax").show();
            }
            $("#" + xlObj._id + "_Ribbon_lbMin").text(xlObj._getLocStr(args.selectedText + "Start"));
            $("#" + xlObj._id + "_Ribbon_lbMax").text(xlObj._getLocStr(args.selectedText + "End"));
            this._dialogValidate("_ValDialog");
        },

        _valDlgBtnClick: function (id) {
            var xlObj = this.XLObj, alertdlg, sheetIdx;
            if (id === "ok" && $.validator && $("#" + xlObj._id + "_Form_ValDialog").valid()) {
                var cbObj = $("#" + xlObj._id + "_Ribbon_blank").data("ejCheckBox");
                var showErrorAlert = $("#" + xlObj._id + "_Ribbon_freetext").data("ejCheckBox").isChecked();
                var typeObj = $("#" + xlObj._id + "_Ribbon_ddType").data("ejDropDownList");
                var actionObj = $("#" + xlObj._id + "_Ribbon_ddAction").data("ejDropDownList"), calcNamedRanges = xlObj.getCalcEngine().getNamedRanges(), isNamedRange;
                if (typeObj._selectedValue === "List") {
                    var value = $("#" + xlObj._id + "_Ribbon_btnMin").val(), val = value, splitStr, range, getSheet;
                    alertdlg = $("#" + xlObj._id + "_alertdlg");
                    if (value.indexOf("=") > -1) {
                        value = value.split("=")[1];
                        isNamedRange = calcNamedRanges.getItem(value.toUpperCase());
                        if (isNamedRange)
                            value = isNamedRange;
                        if (value.indexOf("!") > -1) {
                            splitStr = value.split("!");
                            sheetIdx = isNamedRange ? xlObj._getSheetIdxFromSheetValue(splitStr[0]) : xlObj._getSheetIndexByName(splitStr[0]);
                            value = splitStr[1];
                        }
                        if (sheetIdx === false) {
                            xlObj._renderAlertDlgContent(alertdlg, "Alert", xlObj._getLocStr("ListAlert"), "ListValidation");
                            xlObj._alertDialog.element.ejDialog("open") && alertdlg.focus();
                            return;
                        }
                        value.indexOf("$") > -1 && (value = value.split("$").join(""));
                        value.indexOf(":") < 0 && (value = value + ":" + value);
                        sheetIdx = xlObj.isUndefined(sheetIdx) ? xlObj.getActiveSheetIndex() : sheetIdx;
                        getSheet = xlObj.getSheet(sheetIdx);
                        range = xlObj.getRangeIndices(value);
                        if (isNaN(range[0]) || isNaN(range[1]) || isNaN(range[2]) || isNaN(range[3]) || getSheet.colCount <= range[3] || getSheet.rowCount <= range[2]) {
                            xlObj._renderAlertDlgContent(alertdlg, "Alert", xlObj._getLocStr("ListAlert"), "ListValidation");
                            xlObj._alertDialog.element.ejDialog("open") && alertdlg.focus();
                            return;
                        }
                        if (range[2] === range[0] || range[3] === range[1]) {
                            xlObj.XLValidate.applyDVRules(null, ["list", val], this._types[typeObj.selectedIndexValue].value, cbObj.isChecked(), showErrorAlert);
                        }
                        else {
                            xlObj._renderAlertDlgContent(alertdlg, "Alert", xlObj._getLocStr("ListValAlert"), "ListValidation");
                            xlObj._alertDialog.element.ejDialog("open") && alertdlg.focus();
                            return;
                        }
                    }
                    else
                        xlObj.XLValidate.applyDVRules(null, ["list", val], this._types[typeObj.selectedIndexValue].value, cbObj.isChecked(), showErrorAlert);
                }
                else
                    xlObj.XLValidate.applyDVRules(null, [this._actions[actionObj.selectedIndexValue].value, $("#" + xlObj._id + "_Ribbon_btnMin").val(), $("#" + xlObj._id + "_Ribbon_btnMax").val()], this._types[typeObj.selectedIndexValue].value, cbObj.isChecked(), showErrorAlert);
                xlObj._setddlCell();
            }
            else if (!$.validator)
                id = "cancel";
            if (id === "cancel" || (id === "ok" && $.validator && $("#" + xlObj._id + "_Form_ValDialog").valid())) {
                $("#" + xlObj._id + "_Ribbon_ddType").data("ejDropDownList").option({ selectedItemIndex: 0 });
                $("#" + xlObj._id + "_Ribbon_ddAction").data("ejDropDownList").option({ selectedItemIndex: 6 });
                $("#" + xlObj._id + "_Ribbon_blank").data("ejCheckBox").option({ checked: true });
                $("#" + xlObj._id + "_Ribbon_freetext").data("ejCheckBox").option({ checked: true });
                $("#" + xlObj._id + "_Ribbon_btnMin").val("");
                $("#" + xlObj._id + "_Ribbon_btnMax").val("");
                $("#" + xlObj._id + "_ValDialog").ejDialog("close");
                xlObj._setSheetFocus();
            }
        },

        _renderValDialog: function () {
            var xlObj = this.XLObj;
            if ($("#" + xlObj._id + "_Ribbon_MainDiv").length < 1) {
                var $stgctnr = ej.buildTag("div.e-dlgctndiv", "", {}, { height: "100%" }), $mainDiv = ej.buildTag("div.e-dlg-fields", "", {}, { id: xlObj._id + "_Ribbon_MainDiv" }), $subDiv;
                $("#" + xlObj._id + "_Validation").append($stgctnr);
                $("#" + xlObj._id + "_Validation").append($mainDiv);
                var $label = ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("Allow"));
                $mainDiv.append($label);
                var $ddType = ej.buildTag("input.e-" + xlObj._id + "-ddl", "", "", { id: xlObj._id + "_Ribbon_ddType", type: "text" });
                $mainDiv.append($ddType);
                $ddType.ejDropDownList({
                    dataSource: this._types,
                    fields: { id: "Types", text: "text", value: "text" }, selectedItemIndex: 1,
                    cssClass: "e-" + xlObj._id + "-ddl",
                    width: "100%",
                    change: $.proxy(this._valTypeOnChange, this)
                });
                var $chkinput = ej.buildTag("input#" + xlObj._id + "_Ribbon_blank");
                var $chklabel = ej.buildTag("label", xlObj._getLocStr("IgnoreBlank"), {}, { "for": xlObj._id + "_Ribbon_blank" });
                var table = ej.buildTag("table.e-val-chk");
                var tr = ej.buildTag("tr");
                var td = ej.buildTag("td", "", {}, { width: 30 });
                td.append($chkinput);
                tr.append(td);
                td = ej.buildTag("td");
                td.append($chklabel);
                tr.append(td);
                table.append(tr);
                $chkinput.ejCheckBox();
                $chkinput = ej.buildTag("input#" + xlObj._id + "_Ribbon_freetext");
                $chklabel = ej.buildTag("label#" + xlObj._id + "_Ribbon_lblfreetext", xlObj._getLocStr("FreeText"), {}, { "for": xlObj._id + "_Ribbon_lblfreetext" });
                tr = ej.buildTag("tr#" + xlObj._id + "_val_freetext");
                td = ej.buildTag("td", "", {}, { width: 30 });
                td.append($chkinput);
                tr.append(td);
                td = ej.buildTag("td");
                td.append($chklabel);
                tr.append(td);
                table.append(tr);
                $mainDiv.append(table);
                $chkinput.ejCheckBox({ checked: true });
                $label = ej.buildTag("label.e-dlg-fields").text(xlObj._getLocStr("Data"));
                $mainDiv.append($label);
                var $ddAction = ej.buildTag("input.e-" + xlObj._id + "-ddl", "", "", { id: xlObj._id + "_Ribbon_ddAction", type: "text" });
                $mainDiv.append($ddAction);
                $ddAction.ejDropDownList({
                    dataSource: this._actions,
                    fields: { id: "Types", text: "text", value: "value" }, selectedItemIndex: 6,
                    cssClass: "e-" + xlObj._id + "-ddl",
                    width: "100%",
                    change: $.proxy(this._valDTypeOnChange, this)
                });
                $subDiv = ej.buildTag("div.e-dlgctndiv e-dlg-fields", "", {}, { id: xlObj._id + "_Ribbon_SubDiv" });
                table = ej.buildTag("table");
                tr = ej.buildTag("tr"), td = ej.buildTag("td");
                $label = ej.buildTag("label.e-dlg-fields", "", "", { id: xlObj._id + "_Ribbon_lbMin" }).text(xlObj._getLocStr("NumberStart"));
                table.append(tr.append(td.append($label)));
                tr = ej.buildTag("tr"), td = ej.buildTag("td");
                var $min = ej.buildTag("input.ejinputtext", "", { width: "100%" }, { id: xlObj._id + "_Ribbon_btnMin", type: "text", name: xlObj._id + "_valMin" });
                table.append(tr.append(td.append($min)));
                tr = ej.buildTag("tr"), td = ej.buildTag("td");
                $label = ej.buildTag("label.e-dlg-fields", "", "", { id: xlObj._id + "_Ribbon_lbMax" }).text(xlObj._getLocStr("NumberEnd"));
                table.append(tr.append(td.append($label)));
                tr = ej.buildTag("tr"), td = ej.buildTag("td");
                var $max = ej.buildTag("input.ejinputtext", "", { width: "100%" }, { id: xlObj._id + "_Ribbon_btnMax", type: "text", name: xlObj._id + "_valMax" });
                table.append(tr.append(td.append($max)));
                $stgctnr.append($mainDiv, $subDiv.append(table));
                $("#" + xlObj._id + "_Ribbon_SubDiv").wrapInner('<form id="' + xlObj._id + '_Form_ValDialog" onsubmit="return false"></form>');
            }
        },

        _dialogValidate: function (dlgid, inputid) {
            var xlObj = this.XLObj, id = xlObj._id, obj, elem = $("#" + id + "_Form" + dlgid), val, i, len, cellAddr, webAddr, date, inputLength, input, number, time, splitStr, type, condType, decimal, formulaRule;
            if ($.validator) {
                elem.validate({
                    errorElement: "div",
                    wrapper: "div",
                    errorPlacement: function (error, elem) {
                        error.insertAfter(elem.closest("input"));
                        error.children().addClass("e-dlg-field-validation-error");
                        error.css({ "position": "relative" });
                        error.offset({ left: elem.offset().left, top: elem.offset().top + 19 });
                    },
                    onfocusout: function (element) {
                        this.element(element);
                    },
                });
                type = $("#" + id + "_Ribbon_ddAction").ejDropDownList("getValue");
                switch (dlgid) {
                    case "_ValDialog":
                        obj = $("#" + id + "_Ribbon_ddType").data("ejDropDownList");
                        val = obj.getSelectedValue();
                        break;
                    case "_CFDialog":
                        if (inputid === id + "_CreateRule")
                            val = "formulaRule";
                        else
                            val = inputid.charAt(0).toUpperCase() + inputid.slice(1).toLowerCase();
                        break;
                    case "_GoToDiv":
                    case "_Ribbon_PvtRange":
                    case "_Ribbon_PvtLocation":
                    case "_Ribbon_SparklineRange":
                    case "_Ribbon_SparklineLocation":
                    case "_datarange":
                    case "_Ribbon_cellAddress":
                        val = "cellAddr";
                        break;
                    case "_xlFileName":
                    case "_Ribbon_webAddress":
                        val = "webAddr";
                        break;
                }
                $("#" + id + "_Form" + dlgid).validate().resetForm();
                input = new Array(), inputLength = $("#" + id + "_Form" + dlgid).find("input").length, date = { required: true, date: true, messages: { date: xlObj._getLocStr("DateValidationMsg"), required: xlObj._getLocStr("RequiredField") } }, cellAddr = { required: true, celladdr: true }, number = { required: true, numberVal: true };
                decimal = { required: true, number: true, messages: { required: xlObj._getLocStr("RequiredField"), number: xlObj._getLocStr("NumberValidationMsg") } }, time = { required: true, time: true }, webAddr = { required: true }, condType = { required: true, betweentype: true };
                formulaRule = { required: true, formularule: true },
                    $.validator.addMethod("time", function (value) {
                        return value === "" || value.match(/^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?(\s(AM|am|PM|pm))?$/);
                    }, xlObj._getLocStr("TimeValidationMsg"));
                $.validator.addMethod("date", function (value, elem) {
                    var dateSplit = value.split("/");
                    return this.optional(elem) || !/Invalid|NaN/.test(new Date((/chrom(e|ium)/.test(navigator.userAgent.toLowerCase())) ? value : dateSplit[1] + "/" + dateSplit[0] + "/" + dateSplit[2]));
                }, xlObj._getLocStr("DateValidationMsg"));
                $.validator.addMethod("celladdr", function (value, elem) {
                    var range, id = $(elem).data("parentID"), xlObj = $("#" + id).data("ejSpreadsheet"), sheetIdx, getSheet, sheetName = true;
                    if ($("#" + xlObj._id + "_Ribbon_sheentName").length)
                        sheetIdx = $("#" + xlObj._id + "_Ribbon_sheentName").ejTreeView("option", "selectedNode");
                    if (xlObj.isUndefined(sheetIdx) || sheetIdx < 0)
                        sheetIdx = xlObj.getActiveSheetIndex();
                    (value.indexOf("=") > -1) && (value = value.split('=')[1]);
                    if (value.indexOf("!") > -1) {
                        splitStr = value.split("!");
                        sheetIdx = xlObj._getSheetIndexByName(splitStr[0]);
                        value = splitStr[1];
                    }
                    if (sheetIdx < 1)
                        sheetName = false;
                    getSheet = xlObj.getSheet(sheetIdx);
                    value.indexOf("$") > -1 && (value = value.split("$").join(""));
                    range = xlObj.getRangeIndices(value);
                    range = (getSheet.colCount <= range[3] || getSheet.rowCount <= range[2]) ? null : value;
                    return (value.match(/^(?:\bxfXF[a-zA-D]|xX[a-eA-E][a-zA-Z]|[a-wA-W][a-zA-Z]{2}|[a-zA-Z]{2}|[a-zA-Z])\$?(?:104857[0-6]|10485[0-6]\d|1048[0-4]\d{2}|104[0-7]\d{3}|10[0-3]\d{4}|[1-9]\d{1,5}|[1-9]):(?:\bxfXF[a-zA-D]|xX[a-eA-E][a-zA-Z]|[a-wA-W][a-zA-Z]{2}|[a-zA-Z]{2}|[a-zA-Z])\$?(?:104857[0-6]|10485[0-6]\d|1048[0-4]\d{2}|104[0-7]\d{3}|10[0-3]\d{4}|[1-9]\d{1,5}|[1-9])$/) || value.match(/^(?:\bxfXF[a-zA-D]|xX[a-eA-E][a-zA-Z]|[a-wA-W][a-zA-Z]{2}|[a-zA-Z]{2}|[a-zA-Z])\$?(?:104857[0-6]|10485[0-6]\d|1048[0-4]\d{2}|104[0-7]\d{3}|10[0-3]\d{4}|[1-9]\d{1,5}|[1-9])$/) && (sheetName)) && range;
                }, xlObj._getLocStr("CellAddrsValidationMsg"));
                $.validator.addMethod("betweentype", function (value, elem) {
                    var id = elem.id.split("_")[0], val = $("#" + elem.id.split("_")[0] + "_Ribbon_ddType").ejDropDownList("getSelectedValue"), minVal = $("#" + id + "_Ribbon_btnMin").val(), maxVal = $("#" + elem.id.split("_")[0] + "_Ribbon_btnMax").val();
                    if (minVal === "" || maxVal === "" || parseFloat(minVal) > parseFloat(maxVal))
                        value = null;
                    if (val === "Date" && Date.parse(minVal) > Date.parse(maxVal))
                        value = null;
                    if (val === "Time" && new Date("01/01/1990 " + minVal).getTime() > new Date("01/01/1990 " + maxVal).getTime())
                        value = null;
                    return value;
                }, xlObj._getLocStr("BetweenAlert"));
                $.validator.addMethod("numberVal", function (value) {
                    if ($.isNumeric(value)) {
                        if (parseFloat(value) % 1 !== 0)
                            value = null;
                        $.validator.messages.numberVal = xlObj._getLocStr("NumberValMsg");
                        return value;
                    }
                    else
                        $.validator.messages.numberVal = xlObj._getLocStr("NumberAlertMsg");
                }, $.validator.messages.numberVal);
                $.validator.addMethod("formularule", function (value) {
                    return value === "" || (value.startsWith("=") && value.indexOf("!") < 0);
                }, xlObj._getLocStr("FormulaRuleMsg"));

                for (i = 0, len = inputLength; i < len; i++) {
                    input[i] = $("#" + id + "_Form" + dlgid).find("input")[i].id;
                    switch (val) {
                        case "Date":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", date);
                            break;
                        case "Time":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", time);
                            break;
                        case "Number":
                        case "TextLength":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", number);
                            break;
                        case "Decimal":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", decimal);
                            break;
                        case "List":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", webAddr);
                            break;
                        case "cellAddr":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", cellAddr);
                            break;
                        case "webAddr":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", webAddr);
                            break;
                        case "formulaRule":
                            $("#" + input[i]).rules("remove");
                            $("#" + input[i]).rules("add", formulaRule);
                            break;

                    }
                    if (val !== "List" && (type === "Between" || type === "NotBetween"))
                        $("#" + id + "_Ribbon_btnMax").rules("add", condType);
                }
            }
        },

        _renderCFDialog: function (args) {
            var $mainDiv, $subDiv, $label, $input, dlgObj, xlObj = this.XLObj;
            dlgObj = $("#" + xlObj._id + "_CFDialog").data("ejDialog");
            if (args.ID === xlObj._id + "_CreateRule")
                dlgObj.option({ title: xlObj._getLocStr("NewRule") });
            else
                dlgObj.option({ title: xlObj._getLocStr(this._cFormatData[args.ID][0]) });
            if ($("#" + xlObj._id + "_Ribbon_CFSubDiv").length < 1) {
                $subDiv = ej.buildTag("div.e-dlg-fields", "", {}, { id: xlObj._id + "_Ribbon_CFSubDiv" });
                if (args.ID === "aboveaverage" || args.ID === "belowaverage") {
                    $label = ej.buildTag("label.e-dlg-fields").text(xlObj._getLocStr("BelowAbove"));
                } else {
                    $label = ej.buildTag("label.e-dlg-fields").text(xlObj._getLocStr("With"));
                }
                $subDiv.append($label);
                var $ddStyle = ej.buildTag("input.e-" + xlObj._id + "-ddl", "", {}, { id: xlObj._id + "_Ribbon_ddStyle", type: "text" });
                $subDiv.append($ddStyle);
                $ddStyle.ejDropDownList({
                    dataSource: this._styles,
                    fields: { id: "Types", text: "text", value: "value" }, selectedItemIndex: 0,
                    cssClass: "e-" + xlObj._id + "-ddl",
                    width: "100%",
                    change: $.proxy(this._ddOnChange, this),
                });
                $("#" + xlObj._id + "_CondFormat").append($subDiv);
                $("#" + xlObj._id + "_CondFormat").addClass("e-cfdiv");
            }
            if ($("#" + xlObj._id + "_Ribbon_CFMainDiv").length > 0)
                $("#" + xlObj._id + "_Ribbon_CFMainDiv").remove();
            $mainDiv = ej.buildTag("div.e-dlg-fields", "", "", { id: xlObj._id + "_Ribbon_CFMainDiv" });
            $("#" + xlObj._id + "_CondFormat").prepend($mainDiv);
            if (args.ID == "between") {
                $input = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_input2", type: "text" });
                $mainDiv.prepend($input);
                $label = ej.buildTag("label.e-dlg-fields").text(xlObj._getLocStr("And")).css('display', "table");
                $mainDiv.prepend($label);
            }
            $input = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_input1", type: "text" });
            $mainDiv.prepend($input);
            if (args.ID == "toptenitems" || args.ID == "toptenpercent" || args.ID == "bottomtenitems" || args.ID == "bottomtenpercent") {
                $input.ejNumericTextbox({
                    name: "numeric",
                    width: "100%",
                    minValue: 1,
                    maxValue: 1000,
                    value: 10
                });
            }
            if (args.ID === xlObj._id + "_CreateRule")
                $label = ej.buildTag("label.e-dlg-fields").text(xlObj._getLocStr("NewRuleLabelContent"));
            else
                $label = ej.buildTag("label.e-dlg-fields").text(xlObj._getLocStr(this._cFormatData[args.ID][1]));
            $mainDiv.prepend($label);
            if (args.ID === "aboveaverage" || args.ID === "belowaverage") {
                $input.hide();
            }
            $("#" + xlObj._id + "_Ribbon_CFMainDiv").wrapInner('<form id="' + xlObj._id + '_Form_CFDialog" onsubmit="return false"></form>');
            this._dialogValidate("_CFDialog", args.ID);
        },

        _dlgCFOk: function () {
            var xlObj = this.XLObj;
            if ($("#" + xlObj._id + "_Form_CFDialog").valid()) {
                var ddObj = $("#" + xlObj._id + "_Ribbon_ddStyle").data("ejDropDownList"), rule;
                rule = (xlObj.XLRibbon._currentCFormat === xlObj._id + "_CreateRule") ? "formularule" : xlObj.XLRibbon._currentCFormat;
                xlObj.XLCFormat._cFormat(rule, $("#" + xlObj._id + "_Ribbon_input1").val(), $("#" + xlObj._id + "_Ribbon_input2").val(), ddObj.getSelectedValue());
                $("#" + xlObj._id + "_CFDialog").ejDialog("close");
                xlObj._setSheetFocus();
            }
        },

        _dlgCFCancel: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_Form_CFDialog").validate().resetForm();
            $("#" + xlObj._id + "_CFDialog").ejDialog("close");
            xlObj._setSheetFocus();
        },

        _sheetData: function () {
            var xlObj = this.XLObj, sheetname = new Array(), shtnameclt = new Array(), i, len, sheets = xlObj._getSheetNames();
            shtnameclt[0] = { id: 1, name: xlObj._getLocStr("SheetReference"), hasChild: true, expanded: true };
            for (i = 1, len = sheets.length; i <= len; i++) {
                if (sheets[i - 1].isVisible) {
                    sheetname[i] = sheets[i - 1].text;
                    shtnameclt[i] = { id: i + 1, pid: 1, name: sheetname[i], hasChild: true, expanded: true };
                }
            }
            return shtnameclt;
        },

        _renderHLDialog: function () {
            var xlObj = this.XLObj;
            if ($("#" + xlObj._id + "_Ribbon_WebDiv").length < 1) {
                var $WebDiv, $label, $find, $SheetDiv, $lb, $div, $table, $tr, $divctnr, $td;
                $WebDiv = ej.buildTag("div.e-dlgctndiv", "", {}, { id: xlObj._id + "_Ribbon_WebDiv" });
                $table = ej.buildTag("table", "", {}, { "cellpadding": 0, "cellspacing": 0 });
                $tr = ej.buildTag("tr"); $td = ej.buildTag("td", "", { width: "32%" });
                $table.append($tr.append($td));
                $label = ej.buildTag("label", xlObj._getLocStr("HyperlinkText"));
                $td.append($label);
                $td = ej.buildTag("td");
                $find = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_findText", type: "text" });
                $tr.append($td.append($find));

                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td");
                $table.append($tr.append($td));
                $label = ej.buildTag("label", xlObj._getLocStr("WebAddress"), "", { id: xlObj._id + "_Ribbon_address" });
                $td.append($label);
                $td = ej.buildTag("td");
                $find = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_webAddress", type: "text" });
                $tr.append($td.append($find));
                $("#" + xlObj._id + "_Web").append($WebDiv.append($table));

                $SheetDiv = ej.buildTag("div.e-dlgctndiv", "", "", { id: xlObj._id + "_Ribbon_DocDiv" });
                $divctnr = ej.buildTag("div.e-dlg-fields");
                $table = ej.buildTag("table"), $tr = ej.buildTag("tr"), $td = ej.buildTag("td", "", { width: "32%" });
                $table.append($tr.append($td));
                $label = ej.buildTag("label", xlObj._getLocStr("HyperlinkText"));
                $td.append($label);
                $td = ej.buildTag("td");
                $find = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_cellText", type: "text" });
                $tr.append($td.append($find));

                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td");
                $table.append($tr.append($td));
                $label = ej.buildTag("label", xlObj._getLocStr("CellAddress"));
                $td.append($label);
                $td = ej.buildTag("td");
                $find = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_cellAddress", type: "text" });
                $find.data("parentID", xlObj._id);
                $tr.append($td.append($find));
                $div = ej.buildTag("div.e-dlg-fields", "", "", { id: xlObj._id + "_Ribbon_Sheet" });
                $SheetDiv.append($divctnr.append($table), $div);
                $label = ej.buildTag("label", xlObj._getLocStr("SheetIndex"));
                $div.append($label);
                $lb = ej.buildTag("div", "", "", { id: xlObj._id + "_Ribbon_sheentName" });
                $div.append($lb);
                $lb.ejTreeView({ fields: { id: "id", parentId: "pid", text: "name", hasChild: "hasChild", dataSource: this._sheetData(), expanded: "expanded" }, nodeSelect: $.proxy(this._sheetSelect, xlObj), height: 90 });
                $("#" + xlObj._id + "_Doc").append($SheetDiv);
                $("#" + xlObj._id + "_Ribbon_cellAddress").wrap("<form id='" + xlObj._id + "_Form_Ribbon_cellAddress' onsubmit='return false'></form>");
                this._dialogValidate("_Ribbon_cellAddress");
                $("#" + xlObj._id + "_Ribbon_webAddress").wrap("<form id='" + xlObj._id + "_Form_Ribbon_webAddress' onsubmit='return false'></form>");
                this._dialogValidate("_Ribbon_webAddress");
            }
        },

        _sheetSelect: function (args) {
            var i, len, shtName = this._getSheetNames(), cellElem = $("#" + this._id + "_Ribbon_cellAddress"), btnElem = $("#" + this._id + "hlDialog_OkBtn").data("ejButton"), valElem = $("#" + this._id + "_Ribbon_cellText");
            if (args.model.selectedNode > 0) {
                cellElem.attr("disabled", false);
                btnElem.enable();
                cellElem.focus().setInputPos(1);
                for (i = 0, len = shtName.length; i < len; i++) {
                    if (shtName[i].text === valElem.val().split("!")[0])
                        valElem.val(args.value + "!" + cellElem.val());
                }

            }
            else {
                cellElem.attr("disabled", true);
                btnElem.disable();
            }
        },


        _dlgHLOk: function () {
            var xlObj = this.XLObj;
            if ($("#" + xlObj._id + "_Form_Ribbon_cellAddress").valid() && $("#" + xlObj._id + "_Form_Ribbon_webAddress").valid()) {
                this.XLObj._dlgHLClick = true;
                xlObj._setLink();
                this._dlgHLCancel();
            }
        },

        _dlgHLCancel: function () {
            $("#" + this.XLObj._id + "_HLDialog").ejDialog("close");
        },

        _renderFRDialog: function () {
            var $findDiv, $label, $find, $replace, $chkinput, $dd, $settingsDiv, xlObj = this.XLObj, $table, $tr, $td;
            if ($("#" + xlObj._id + "_Ribbon_FindDiv").length < 1) {
                $findDiv = ej.buildTag("div.e-dlgctndiv e-ss-finddiv", "", { height: "auto" }, { id: xlObj._id + "_Ribbon_FindDiv" });
                $("#" + xlObj._id + "_Find").append($findDiv);
                $table = ej.buildTag("table");
                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td", "", { width: "30%" });
                $table.append($tr.append($td));
                $label = ej.buildTag("label", xlObj._getLocStr("FindLabel"), "", { id: xlObj._id + "_Ribbon_lbFind" });
                $td.append($label);
                $td = ej.buildTag("td");
                $find = ej.buildTag("input.ejinputtext", "", "", { id: xlObj._id + "_Ribbon_textFind", type: "text" });
                $td.append($find);
                $tr.append($td);
                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td");
                $table.append($tr.append($td));
                $label = ej.buildTag("label", xlObj._getLocStr("ReplaceLabel"), "", { id: xlObj._id + "_Ribbon_lbReplace" });
                $td.append($label);
                $td = ej.buildTag("td");
                $replace = ej.buildTag("input.ejinputtext", "", "", { id: xlObj._id + "_Ribbon_textReplace", type: "text" });
                $td.append($replace);
                $tr.append($td);
                $findDiv.append($table);
                $("#" + xlObj._id + "_Ribbon_lbReplace").hide();
                $("#" + xlObj._id + "_Ribbon_textReplace").hide();
                $settingsDiv = ej.buildTag("div.e-dlgctndiv e-ss-stgdiv", "", {}, { id: xlObj._id + "_Ribbon_SettingsDiv" });
                $table = ej.buildTag("table");
                $tr = ej.buildTag("tr"), $td = ej.buildTag("td", "", { width: "50%" });
                $table.append($tr.append($td));
                $chkinput = ej.buildTag("input#" + xlObj._id + "_Ribbon_Case");
                $label = ej.buildTag("label", xlObj._getLocStr("MatchCase"), {}, { "for": xlObj._id + "_Ribbon_Case" });
                $td.append($chkinput);
                $td.append($label);
                $chkinput.ejCheckBox();
                $td = ej.buildTag("td");
                $chkinput = ej.buildTag("input#" + xlObj._id + "_Ribbon_AllContent");
                $label = ej.buildTag("label", xlObj._getLocStr("MatchAll"), {}, { "for": xlObj._id + "_Ribbon_AllContent" });
                $td.append($chkinput);
                $chkinput.ejCheckBox();
                $td.append($label);
                $tr.append($td);
                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td");
                $table.append($tr.append($td));
                $label = ej.buildTag("label").text(xlObj._getLocStr("Within"));
                $td.append($label);
                $td = ej.buildTag("td");
                $label = ej.buildTag("label").text(xlObj._getLocStr("Search"));
                $td.append($label);
                $tr.append($td);
                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td");
                $table.append($tr.append($td));
                $dd = ej.buildTag("input", "", "", { id: xlObj._id + "_Ribbon_ddWithin", type: "text" });
                $td.append($dd);
                $dd.ejDropDownList(xlObj._generateEJDD(this._within, { id: "Types", text: "text", value: "value" }, 0, 110, 25));
                $td = ej.buildTag("td");
                $dd = ej.buildTag("input", "", "", { id: xlObj._id + "_Ribbon_ddSearch", type: "text" });
                $td.append($dd);
                $dd.ejDropDownList(xlObj._generateEJDD(this._sType, { id: "Types", text: "text", value: "value" }, 0, 120, 25));
                $tr.append($td);
                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td");
                $table.append($tr.append($td));
                $label = ej.buildTag("label", xlObj._getLocStr("Lookin"));
                $td.append($label);
                $td = ej.buildTag("td");
                $label = ej.buildTag("label", xlObj._getLocStr("Replace") + " " + xlObj._getLocStr("Direction"));
                $tr.append($td.append($label));
                $tr = ej.buildTag("tr.e-dlgtd-fields"), $td = ej.buildTag("td");
                $table.append($tr.append($td));
                $dd = ej.buildTag("input", "", "", { id: xlObj._id + "_Ribbon_ddLookin", type: "text" });
                $td.append($dd);
                $dd.ejDropDownList(xlObj._generateEJDD(this._vType, { id: "Types", text: "text", value: "value" }, 0, 110, 25, "Type"));
                $td = ej.buildTag("td");
                $dd = ej.buildTag("input", "", "", { id: xlObj._id + "_Ribbon_ddDirection", type: "text" });
                $tr.append($td.append($dd));
                $dd.ejDropDownList(xlObj._generateEJDD(this._direction, { id: "Types", text: "text", value: "value" }, 0, 120, 25));
                $("#" + xlObj._id + "_Settings").append($settingsDiv.append($table));
            }
        },

        _frTypeChange: function (name, args) {
            if (name === "Type" && (args.value === "comment")) {
                $("#" + this._id + "_Ribbon_textReplace").attr("disabled", true);
                $("#" + this._id + "FR_ReplaceBtn").ejButton("disable");
                $("#" + this._id + "FR_ReplaceAllBtn").ejButton("disable");
            }
            else {
                $("#" + this._id + "_Ribbon_textReplace").prop("disabled", false);
                $("#" + this._id + "FR_ReplaceBtn").ejButton("enable");
                $("#" + this._id + "FR_ReplaceAllBtn").ejButton("enable");
            }
        },

        _hlTabChange: function (args) {
            var xlObj = this.XLObj, treeObj = $("#" + xlObj._id + "_Ribbon_sheentName").data("ejTreeView"), sheetIdx = xlObj.getActiveSheetIndex(), docTab = $("#" + xlObj._id + "_Doc"), webTab = $("#" + xlObj._id + "_Web"),
                webAddrElem = $("#" + xlObj._id + "_Ribbon_webAddress"), webElem = $("#" + xlObj._id + "_Ribbon_findText"), cellAddrElem = $("#" + xlObj._id + "_Ribbon_cellAddress"), cellElem = $("#" + xlObj._id + "_Ribbon_cellText"),
                activeCell = xlObj.getActiveCell(sheetIdx), cellIdx = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "hyperlink", sheetIdx);
            switch (args.activeIndex) {
                case 0:
                    webAddrElem.focus().setInputPos(webAddrElem.val().length);
                    webElem.val(cellElem.val());
                    docTab.hide();
                    webTab.show();
                    $("#" + xlObj._id + "hlDialog_OkBtn").ejButton("enable");
                    break;
                case 1:
                    !cellAddrElem.val().length && cellAddrElem.val("A1");
                    docTab.show();
                    webTab.hide();
                    if (cellIdx && cellIdx.cellAddr)
                        sheetIdx = parseInt(cellIdx.cellAddr.split("_")[1]);
                    treeObj.selectNode(sheetIdx + 1);
                    webElem.val().length ? cellElem.val(webElem.val()) : cellElem.val(treeObj.getText(sheetIdx + 1) + "!A1");
                    cellAddrElem.focus().setInputPos(cellAddrElem.val().length);
                    break;
            }
        },

        _findTabChange: function (args) {
            var $findDiv, xlObj = this.XLObj;
            switch (args.activeIndex) {
                case 0:
                    $findDiv = $("#" + xlObj._id + "_Ribbon_FindDiv");
                    $("#" + xlObj._id + "_Ribbon_lbReplace").hide();
                    $("#" + xlObj._id + "_Ribbon_textReplace").hide();
                    $("#" + xlObj._id + "FR_ReplaceBtn").css("visibility", "hidden");
                    $("#" + xlObj._id + "FR_ReplaceAllBtn").css("visibility", "hidden");
                    $("#" + xlObj._id + "_Find").append($findDiv);
                    $("#" + xlObj._id + "FR_PrevBtn").show();
                    $("#" + xlObj._id + "FR_NextBtn").show();
                    $("#" + xlObj._id + "_Ribbon_textFind").focus().setInputPos($("#" + xlObj._id + "_Ribbon_textFind").val().length);
                    if (xlObj._phoneMode) {
                        $("#" + xlObj._id + "FR_ReplaceBtn").hide();
                        $("#" + xlObj._id + "FR_ReplaceAllBtn").hide();
                    }
                    else {
                        $("#" + xlObj._id + "FR_ReplaceBtn").show();
                        $("#" + xlObj._id + "FR_ReplaceAllBtn").show();
                    }
                    break;
                case 1:
                    $findDiv = $("#" + xlObj._id + "_Ribbon_FindDiv");
                    $("#" + xlObj._id + "_Ribbon_lbReplace").show();
                    $("#" + xlObj._id + "_Ribbon_textReplace").show();
                    $("#" + xlObj._id + "FR_ReplaceBtn").css("visibility", "visible").show();
                    $("#" + xlObj._id + "FR_ReplaceAllBtn").css("visibility", "visible").show();
                    if (xlObj._phoneMode) {
                        $("#" + xlObj._id + "FR_PrevBtn").hide();
                        $("#" + xlObj._id + "FR_NextBtn").hide();
                    }
                    else {
                        $("#" + xlObj._id + "FR_PrevBtn").show();
                        $("#" + xlObj._id + "FR_NextBtn").show();
                    }
                    $("#" + xlObj._id + "_Replace").append($findDiv);
                    $("#" + xlObj._id + "_Ribbon_textFind").focus().setInputPos($("#" + xlObj._id + "_Ribbon_textFind").val().length);
                    break;
                case 2:
                    $("#" + xlObj._id + "FR_PrevBtn").hide();
                    $("#" + xlObj._id + "FR_NextBtn").hide();
                    $("#" + xlObj._id + "FR_ReplaceBtn").css("visibility", "hidden");
                    $("#" + xlObj._id + "FR_ReplaceAllBtn").css("visibility", "hidden");
                    $("#" + xlObj._id + "_Ribbon_ddWithin").focus();
                    xlObj._phoneMode ? $("#" + xlObj._id + "_Ribbon_SettingsDiv").find('td:eq(1)').hide() : $("#" + xlObj._id + "_Ribbon_SettingsDiv").find('td:eq(1)').show();
                    break;
            }
        },

        _gotoTabChange: function (args) {
            var xlObj = this.XLObj;
            if (args.activeIndex == 0)
                $("#" + xlObj._id + "_textRef").focus().setInputPos($("#" + xlObj._id + "_textRef").val().length);
        },

        _btnFROnClick: function (id) {
            var xlObj = this.XLObj;
            xlObj.showWaitingPopUp();
            var sheetIdx = xlObj.getActiveSheetIndex(), rowIndex = xlObj.getSheet(sheetIdx)._startCell.rowIndex, colIndex = xlObj.getSheet(sheetIdx)._startCell.colIndex, mCase = $("#" + xlObj._id + "_Ribbon_Case").data("ejCheckBox").isChecked(), mAll = $("#" + xlObj._id + "_Ribbon_AllContent").data("ejCheckBox").isChecked();
            var within = this._within[$("#" + xlObj._id + "_Ribbon_ddWithin").data("ejDropDownList").selectedIndexValue].value, search = this._sType[$("#" + xlObj._id + "_Ribbon_ddSearch").data("ejDropDownList").selectedIndexValue].value, lookin = this._vType[$("#" + xlObj._id + "_Ribbon_ddLookin").data("ejDropDownList").selectedIndexValue].value, direction = this._direction[$("#" + xlObj._id + "_Ribbon_ddDirection").data("ejDropDownList").selectedIndexValue].value, isFinded;
            switch (id) {
                case "FR_NextBtn":
                case "FR_PrevBtn":
                    xlObj.XLSearch._findCount = 0;
                    isFinded = id === "FR_NextBtn" ? xlObj.XLSearch._findNext($("#" + xlObj._id + "_Ribbon_textFind").val(), sheetIdx, mCase, mAll, lookin, within, search) : xlObj.XLSearch._findPrev($("#" + xlObj._id + "_Ribbon_textFind").val(), sheetIdx, mCase, mAll, lookin, within, search);
                    if (!isFinded) {
                        xlObj.XLSearch._updateSelection(rowIndex, colIndex, sheetIdx);
                        xlObj.hideWaitingPopUp();
                        xlObj._showAlertDlg("Alert", "NotFound");
                    }
                    break;
                case "FR_ReplaceBtn":
                    xlObj.XLSearch._replaceData($("#" + xlObj._id + "_Ribbon_textFind").val(), $("#" + xlObj._id + "_Ribbon_textReplace").val(), sheetIdx, mCase, mAll, lookin, direction, within, search);
                    break;
                case "FR_ReplaceAllBtn":
                    xlObj.XLSearch._replaceAllData($("#" + xlObj._id + "_Ribbon_textFind").val(), $("#" + xlObj._id + "_Ribbon_textReplace").val(), mCase, mAll, lookin, within);
                    break;
                case "FR_CloseBtn":
                    $("#" + xlObj._id + "_FRDialog").ejDialog("close");
                    xlObj._setSheetFocus();
                    break;
            }
            xlObj.hideWaitingPopUp();
        },

        _renderGoToDialog: function () {
            var $gotoDiv, $gotoSpDiv, $label, $list, $input, xlObj = this.XLObj, $subdiv;
            $("#" + xlObj._id + "_GoToDlgTab").ejTab({ width: "100%", itemActive: ej.proxy(this._gotoTabChange, this), cssClass: "e-ss-dlgtab" });
            if ($("#" + xlObj._id + "_GoToDiv").length < 1) {
                $gotoDiv = ej.buildTag("div.e-dlgctndiv", "", {}, { id: xlObj._id + "_GoToDiv" });
                $("#" + xlObj._id + "_GoTo").append($gotoDiv);
                $subdiv = ej.buildTag("div.e-dlg-fields");
                $label = ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("GoToName"));
                $list = ej.buildTag("ul#" + xlObj._id + "_GotoAddr");
                $gotoDiv.append($subdiv.append($label, $list));
                $("#" + xlObj._id + "_GotoAddr").ejListBox({
                    dataSource: this._addrList,
                    height: "120",
                    width: "100%",
                    selected: $.proxy(this._gotoValChange, this),
                    fields: { id: "Types", text: "text", value: "value" }
                });

                $subdiv = ej.buildTag("div.e-dlg-fields");
                $label = ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("Reference"));
                $input = ej.buildTag("input.ejinputtext", "", "", { id: xlObj._id + "_textRef", type: "text" });
                $input.data("parentID", xlObj._id);
                $gotoDiv.append($subdiv.append($label, $input));

                $gotoSpDiv = ej.buildTag("div#" + xlObj._id + "_GoToSpDiv.e-dlgctndiv e-ss-gotosp-content", "", "");
                $subdiv = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
                $("#" + xlObj._id + "_GoToSp").append($gotoSpDiv.append($subdiv));
                $("#" + xlObj._id + "_GoToSp").css({ 'overflow': 'auto', 'height': 'auto' }); // buttons and headers
                $label = ej.buildTag("label.e-dlg-fields").text(xlObj._getLocStr("Select")).css('display', "table");
                $subdiv.append($label);
                this._renderGotoSp($subdiv, this._gotoRBtnSet1, this._gotoRBtnSet2, this._gotoChkBox);
                $("#" + xlObj._id + "_GoDialog").ejDialog({
                    showOnInit: false, enableModal: true, enableResize: false, width: "auto", allowKeyboardNavigation: false, title: xlObj._getLocStr("GoTo"), cssClass: "e-ss-dialog e-ss-gotodlg e-ss-mattab e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this), open: ej.proxy(function () {
                        var gotoipt = $("#" + xlObj._id + "_textRef");
                        gotoipt.focus().setInputPos(gotoipt.val().length);
                    })
                });
                $('#' + xlObj._id + '_GoToDiv').wrapInner('<form id="' + xlObj._id + '_Form_GoToDiv" onsubmit="return false"></form>');
                this._dialogValidate('_GoToDiv');
            }
        },

        _renderGotoSp: function ($content, rBtnIdSet1, rBtnIdSet2, chkBoxIDs) {
            var input, lbl, table, tr, td, i, xlObj = this.XLObj, tabId = xlObj._id + "_gotoSpDiv", $chkinput;
            table = ej.buildTag("table");
            for (i = 0; i < rBtnIdSet1.length; i++) {
                tr = ej.buildTag("tr", "", { height: 35 });
                td = ej.buildTag("td");
                input = ej.buildTag("input#" + tabId + "_" + rBtnIdSet1[i], "", {}, { type: "radio", name: "gotospecial" });
                td.append(input);
                tr.append(td);
                input.ejRadioButton({ size: "medium", change: $.proxy(this._rBtnOnClick, this, rBtnIdSet1[i]) });
                td = ej.buildTag("td", "", { width: 100 });
                lbl = ej.buildTag("label", xlObj._getLocStr(rBtnIdSet1[i]), {}, { "for": tabId + "_" + rBtnIdSet1[i] });
                td.append(lbl);
                tr.append(td);
                if (!xlObj.isUndefined(rBtnIdSet2[i])) {
                    td = ej.buildTag("td");
                    input = ej.buildTag("input#" + tabId + "_" + rBtnIdSet2[i], "", {}, { type: "radio", name: "gotospecial" });
                    td.append(input);
                    tr.append(td);
                    input.ejRadioButton({ size: "medium", change: $.proxy(this._rBtnOnClick, this, rBtnIdSet2[i]) });
                    td = ej.buildTag("td");
                    lbl = ej.buildTag("label", xlObj._getLocStr(rBtnIdSet2[i]), {}, { "for": tabId + "_" + rBtnIdSet2[i] });
                    td.append(lbl);
                    tr.append(td);
                }
                table.append(tr);
            }
            for (i = 0; i < chkBoxIDs.length; i = i + 2) {
                tr = ej.buildTag("tr.e-ss-gotosp-chk");
                td = ej.buildTag("td");
                $chkinput = ej.buildTag("input#" + xlObj._id + "_" + chkBoxIDs[i]);
                td.append($chkinput);
                tr.append(td);
                td = ej.buildTag("td");
                lbl = ej.buildTag("label", xlObj._getLocStr(chkBoxIDs[i]), {}, { "for": xlObj._id + "_" + chkBoxIDs[i] });
                td.append(lbl);
                tr.append(td);
                $chkinput.ejCheckBox({ checked: true, enabled: false });
                td = ej.buildTag("td");
                $chkinput = ej.buildTag("input#" + xlObj._id + "_" + chkBoxIDs[i + 1]);
                td.append($chkinput);
                tr.append(td);
                td = ej.buildTag("td");
                lbl = ej.buildTag("label", xlObj._getLocStr(chkBoxIDs[i + 1]), {}, { "for": xlObj._id + "_" + chkBoxIDs[i + 1] });
                td.append(lbl);
                tr.append(td);
                $chkinput.ejCheckBox({ checked: true, enabled: false });
                table.append(tr);

            }
            $content.append(table);
            $("#" + tabId + "_" + "Blanks").ejRadioButton("option", { checked: true });
        },

        _renderPvtDialog: function () {
            var xlObj = this.XLObj;
            if ($("#" + xlObj._id + "_Ribbon_PvtDiv").length < 1) {
                var $pvtDiv, $label, $table, $tr, $td, input;
                $pvtDiv = ej.buildTag("div.e-dlgctndiv", "", {}, { id: xlObj._id + "_Ribbon_PvtDiv" });
                $table = ej.buildTag("table", "", {}, { "cellpadding": 0, "cellspacing": 0 });
                $tr = ej.buildTag("tr.e-ss-changerange");
                $td = ej.buildTag("td", "");
                $label = ej.buildTag("label", xlObj._getLocStr("Range"));
                $td.append($label);
                $tr.append($td);
                $td = ej.buildTag("td", "");
                input = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_PvtRange", type: "text" });
                input.data("parentID", xlObj._id);
                $tr.append($td.append(input));
                $table.append($tr);

                $tr = ej.buildTag("tr.e-ss-movepvttbl");
                $td = ej.buildTag("td");
                $label = ej.buildTag("label", xlObj._getLocStr("ChoosePivotTable"));
                $td.append($label);
                $td.attr("colspan", 2);
                $table.append($tr.append($td));

                $tr = ej.buildTag("tr.e-ss-movepvttbl");
                $td = ej.buildTag("td");
                $td.attr("colspan", 2);
                input = ej.buildTag("input#" + xlObj._id + "_dlg_newsheet", "", {}, { type: "radio", name: "sheet" });
                $td.append(input);
                $label = ej.buildTag("label", " " + xlObj._getLocStr("NewWorksheet"));
                $td.append($label);
                $table.append($tr.append($td));
                input.ejRadioButton({ size: "medium", checked: true, change: $.proxy(this._rBtnPvtOnClick, this, "new") });

                $tr = ej.buildTag("tr.e-ss-movepvttbl");
                $td = ej.buildTag("td");
                $td.attr("colspan", 2);
                input = ej.buildTag("input#" + xlObj._id + "_dlg_existsheet", "", {}, { type: "radio", name: "sheet" });
                $td.append(input);
                $label = ej.buildTag("label", " " + xlObj._getLocStr("ExistingWorksheet"));
                $td.append($label);
                $table.append($tr.append($td));
                input.ejRadioButton({ size: "medium", change: $.proxy(this._rBtnPvtOnClick, this, "existing") });

                $tr = ej.buildTag("tr.e-ss-movepvttbl");
                $td = ej.buildTag("td");
                $label = ej.buildTag("label", xlObj._getLocStr("Location"));
                $td.append($label);
                $tr.append($td);
                $td = ej.buildTag("td");
                input = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_PvtLocation", type: "text" });
                input.data("parentID", xlObj._id);
                $tr.append($td.append(input));
                $table.append($tr);

                $("#" + xlObj._id + "_Pivot").append($pvtDiv.append($table));
                $("#" + xlObj._id + "_Ribbon_PvtLocation").wrap("<form id='" + xlObj._id + "_Form_Ribbon_PvtLocation' onsubmit='return false'></form>").prop("disabled", true);
                this._dialogValidate("_Ribbon_PvtLocation");
                $("#" + xlObj._id + "_Ribbon_PvtRange").wrap("<form id='" + xlObj._id + "_Form_Ribbon_PvtRange' onsubmit='return false'></form>");
                this._dialogValidate("_Ribbon_PvtRange");
            }
        },

        _dlgPvtOk: function () {
            var xlObj = this.XLObj, dlg = $("#" + xlObj._id + "_PvtDialog");
            if ($("#" + xlObj._id + "_Form_Ribbon_PvtRange").valid() && $("#" + xlObj._id + "_Form_Ribbon_PvtLocation").valid()) {
                var error = xlObj.XLPivot._checkRange($("#" + xlObj._id + "_Ribbon_PvtRange").val(), $("#" + xlObj._id + "_Ribbon_PvtLocation").val());
                if (error.isRows)
                    xlObj._showAlertDlg("Alert", "PivotRowsAlert", "", 450);
                else if (error.isHeader)
                    xlObj._showAlertDlg("Alert", "PivotLabelsAlert", "", 550);
                else if (error.isOverlap)
                    xlObj._showAlertDlg("Alert", "PivotOverlapAlert", "", 450);
                else {
                    $("#" + xlObj._id + "_PvtDialog").ejDialog("close");
                    if (dlg.find(".e-ss-changerange:visible").length && dlg.find(".e-ss-movepvttbl:visible").length)
                        xlObj.XLPivot.createPivotTable($("#" + xlObj._id + "_Ribbon_PvtRange").val(), $("#" + xlObj._id + "_Ribbon_PvtLocation").val(), null);
                    else if (dlg.find(".e-ss-changerange:visible").length)
                        xlObj.XLPivot._changeDataSource();
                    else
                        xlObj.XLPivot._movePivotTable();
                }
            }
        },

        _dlgPvtCancel: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_PvtDialog").ejDialog("close");
            xlObj._setSheetFocus();
        },

        _rBtnPvtOnClick: function (id) {
            var xlObj = this.XLObj, newId = $("#" + xlObj._id + "_Ribbon_PvtRange"), existingId = $("#" + xlObj._id + "_Ribbon_PvtLocation");
            existingId.prop("disabled", id === "new");
            if (id === "new") {
                newId.focus().setInputPos(newId.val().length);
                $('#' + this.XLObj._id + '_Form_Ribbon_PvtLocation').validate().resetForm();
            }
            else
                existingId.setInputPos(existingId.val().length);
        },

        _rBtnOnClick: function (id) {
            var xlObj = this.XLObj, i;
            if (id === "Formulas" || id === "Constants") {
                for (i = 0; i < this._gotoChkBox.length; i++)
                    $("#" + xlObj._id + "_" + this._gotoChkBox[i]).data("ejCheckBox").option({ enabled: true });
            }
            else {
                for (i = 0; i < this._gotoChkBox.length; i++)
                    $("#" + xlObj._id + "_" + this._gotoChkBox[i]).data("ejCheckBox").option({ enabled: false });
            }
        },

        _gotoValChange: function (args) {
            $("#" + this.XLObj._id + "_textRef").val(args.model.value);
        },

        _getAddrFromDollarAddr: function (value) {
            var sIdx, splitStr
            if (value.indexOf("!") > -1) {
                splitStr = value.split("!");
                sIdx = this.XLObj._getSheetIndexByName(splitStr[0]);
                value = splitStr[1];
            }
            value.indexOf("$") > -1 && (value = value.split("$").join(""));
            value.indexOf(":") < 0 && (value = value + ":" + value);
            value = value.replace("=", "");
            return [sIdx, value];
        },

        _gotoBtnClick: function (id) {
            var xlObj = this.XLObj;
            switch (id) {
                case "ok":
                    if ($('#' + xlObj._id + '_Form_GoToDiv').valid()) {
                        var tabObj = $("#" + xlObj._id + "_GoToDlgTab").data("ejTab");
                        if (!tabObj.model.selectedItemIndex)
                            xlObj.XLSearch.goTo($.trim($("#" + xlObj._id + "_textRef").val().toString()));
                        else
                            xlObj.XLSearch._applyGoToRule($("#" + xlObj._id + "_GoToSpDiv").find(".e-circle_01").parents("div")[0].id.split("ej" + xlObj._id + "_gotoSpDiv_")[1].toLowerCase(), $("#" + xlObj._id + "_" + this._gotoChkBox[0]).data("ejCheckBox").isChecked(), $("#" + xlObj._id + "_" + this._gotoChkBox[1]).data("ejCheckBox").isChecked(), $("#" + xlObj._id + "_" + this._gotoChkBox[2]).data("ejCheckBox").isChecked(), $("#" + xlObj._id + "_" + this._gotoChkBox[3]).data("ejCheckBox").isChecked());
                        $("#" + xlObj._id + "_GoDialog").ejDialog("close");
                    }
                    break;
                case "cancel":
                    if ($.validator)
                        $('#' + xlObj._id + '_Form_GoToDiv').validate().resetForm();
                    $("#" + xlObj._id + "_GoDialog").ejDialog("close");
                    break;
            }
            xlObj._setSheetFocus();
        },

        _borderPicture: function () {
            var xlObj = this.XLObj;
            return "<ul id=" + xlObj._id + "_Ribbon_PictureBorder style='display:none' class='e-ss-pictureborder'><li id='" + xlObj._id + "picturecolor'><a>" + xlObj._getLocStr("ThemeColor") + "</a><ul><li><input id='" + xlObj._id + "_Ribbon_PictureColor'></input></li></ul></li><li id='nooutline' class='picturecolor'><a>" + xlObj._getLocStr("NoOutline") + "</a></li><li id='weight' class='picturecolor'><a>" + xlObj._getLocStr("Weight") + "</a><ul><li id='1px'><a>1px</a></li><li id='2px'><a>2px</a></li><li id='3px'><a>3px</a></li></ul></li><li id='dashes' class='picturecolor'><a>" + xlObj._getLocStr("Dashes") + "</a><ul><li id='solid'><a><div style='border:2px solid black'></div></a></li><li id='dotted'><a><div style='border:2px dotted black'></div></a></li><li id='dashed'><a><div style='border:2px dashed black'></div></a></li></ul></li></ul>";
        },
        _chartElementTag: function () {
            var xlObj = this.XLObj, element = '<ul id=' + xlObj._id + '_Ribbon_CElement class="e-spreadsheet" style="display:none">';
            element += '<li class="axes" id="Axes"><a><span class="e-ss-chartimg e-icon e-ss-axes"></span>' + xlObj._getLocStr("Axes") + '</a><ul><li class="phaxis e-ss-cmenuitem" id="PHAxis"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-phaxis"></span>' + xlObj._getLocStr("PHAxis") + '</a></li><li class="pvaxis e-ss-cmenuitem" id="PVAxis"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-pvaxis"></span>' + xlObj._getLocStr("PVAxis") + '</a></li></ul></li>';
            element += '<li class="axistitle" id="AxisTitle"><a><span class="e-ss-chartimg e-icon e-ss-axistitle"></span>' + xlObj._getLocStr("AxisTitle") + '</a><ul><li class="phaxistitle e-ss-cmenuitem" id="PHAxisTitle"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-phaxistitle"></span>' + xlObj._getLocStr("PHAxis") + '</a></li><li class="pvaxistitle e-ss-cmenuitem" id="PVAxisTitle"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-pvaxistitle"></span>' + xlObj._getLocStr("PVAxis") + '</a></li></ul></li>';
            element += '<li class="charttitle" id="ChartTitle"><a><span class="e-ss-chartimg e-icon e-ss-charttitle"></span>' + xlObj._getLocStr("ChartTitle") + '</a><ul><li class="ctnone e-ss-cmenuitem" id="CTNone"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-ctnone"></span>' + xlObj._getLocStr("CTNone") + '</a></li><li class="ctcenter e-ss-cmenuitem" id="CTCenter"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-ctcenter"></span>' + xlObj._getLocStr("CTCenter") + '</a></li><li class="ctfar e-ss-cmenuitem" id="CTFar"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-ctfar"></span>' + xlObj._getLocStr("CTFar") + '</a></li><li class="ctnear e-ss-cmenuitem" id="CTNear"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-ctnear"></span>' + xlObj._getLocStr("CTNear") + '</a></li></ul></li>';
            element += '<li class="datalabels" id="DataLabels"><a><span class="e-ss-chartimg e-icon e-ss-datalabels"></span>' + xlObj._getLocStr("DataLabels") + '</a><ul><li class="dlnone e-ss-cmenuitem" id="DLNone"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-dlnone"></span>' + xlObj._getLocStr("DLNone") + '</a></li><li class="dlcenter e-ss-cmenuitem" id="DLCenter"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-dlcenter"></span>' + xlObj._getLocStr("DLCenter") + '</a></li><li class="dliend e-ss-cmenuitem" id="DLIEnd"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-dliend"></span>' + xlObj._getLocStr("DLIEnd") + '</a></li><li class="dlibase e-ss-cmenuitem" id="DLIBase"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-dlibase"></span>' + xlObj._getLocStr("DLIBase") + '</a></li><li class="dloend e-ss-cmenuitem" id="DLOEnd"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-dloend"></span>' + xlObj._getLocStr("DLOEnd") + '</a></li></ul></li>';
            element += '<li class="gridline" id="Gridline"><a><span class="e-ss-chartimg e-icon e-ss-gridline"></span>' + xlObj._getLocStr("Gridline") + '</a><ul><li class="pmajorh e-ss-cmenuitem" id="PMajorH"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-pmajorh"></span>' + xlObj._getLocStr("PMajorH") + '</a></li><li class="pmajorv e-ss-cmenuitem" id="PMajorV"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-pmajorv"></span>' + xlObj._getLocStr("PMajorV") + '</a></li><li class="pminorh e-ss-cmenuitem" id="PMinorH"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon  e-ss-pminorh"></span>' + xlObj._getLocStr("PMinorH") + '</a></li><li class="pminorv e-ss-cmenuitem" id="PMinorV"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-pminorv"></span>' + xlObj._getLocStr("PMinorV") + '</a></li></ul></li>';
            element += '<li class="legend" id="Legend"><a><span class="e-ss-chartimg e-icon e-ss-legend"></span>' + xlObj._getLocStr("Legend") + '</a><ul><li class="lnone e-ss-cmenuitem" id="LNone"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-lnone"></span>' + xlObj._getLocStr("LNone") + '</a></li><li class="lright e-ss-cmenuitem" id="LRight"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-lright"></span>' + xlObj._getLocStr("LRight") + '</a></li><li class="lleft e-ss-cmenuitem" id="LLeft"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-lleft"></span>' + xlObj._getLocStr("LLeft") + '</a></li><li class="lbottom e-ss-cmenuitem" id="LBottom"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-lbottom"></span>' + xlObj._getLocStr("LBottom") + '</a></li><li class="ltop e-ss-cmenuitem" id="LTop"><a class="e-ss-chartlayout"><span class="e-ss-chartimg e-icon e-ss-ltop"></span>' + xlObj._getLocStr("LTop") + '</a></li></ul></li>';
            return element;
        },

        _cpClickHandler: function (name) {
            var xlObj = this.XLObj;
            if (name === "Ribbon_Home_Font_FillColor")
                xlObj.XLFormat.format({ "style": { "background-color": $("#" + xlObj._id + "_Ribbon_Home_Font_FillColor").ejColorPicker('option', 'value') } });
            else if (name === "Ribbon_Home_Font_FontColor")
                xlObj.XLFormat.format({ "style": { "color": $("#" + xlObj._id + "_Ribbon_Home_Font_FontColor").ejColorPicker('option', 'value') } });
            xlObj._setSheetFocus();
        },

        _ribbonClickHandler: function (args) {
            var dlg, color, pvtObj, i, cfObj, cid, hexcode, cfColor, gotoTabObj, cellRange, curProp, startCell, endCell, info, details, elem, element, cname, selectedIndex, activeCell, fsObj, tid, tmgr, range, obj = {}, xlObj = $("#" + this._id.split("_Ribbon")[0]).data("ejSpreadsheet"), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), temp = {}, style = {}, splitId = this._id.split("_"), sstyles = ej.Spreadsheet.SupportedStyles, size, arg, sheetCont, dataVal, selCells = sheet._selectedCells;
            if (xlObj._shapeChange || xlObj.XLRibbon._isSetModel)
                return;
            xlObj._isRibbonClick = true;
            sheetCont = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content");
            cfObj = $("#" + xlObj._id + "_Ribbon_Home_Number_NumberFormat").data("ejDropDownList");
            fsObj = $("#" + xlObj._id + "_Ribbon_Home_Font_FontSize").data("ejDropDownList");
            activeCell = $(xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex));
            if (xlObj.model.allowSelection && ((xlObj.model.allowFormatAsTable && xlObj.model.allowCellFormatting))) {
                if ((xlObj.XLFormat._formatEnable || xlObj.XLSelection._isOutsideBordering || xlObj.XLSelection._isGridBordering)) {
                    if (xlObj._id + "_Ribbon_Home_Font_BorderColor" !== this._id && xlObj._id + "_Ribbon_bordercolor" !== args.ID && !(xlObj._borderStyles.indexOf(args.ID) > -1)) {
                        xlObj.XLSelection._isGridBordering = xlObj.XLSelection._isOutsideBordering = xlObj.XLFormat._formatEnable = false;
                        $("#" + xlObj._id + "_Ribbon_Home_Clipboard_FormatPainter").ejToggleButton("option", { toggleState: false });
                        if ((args.type === "itemSelected" || args.type === "click") && !xlObj.isUndefined(args.model.prefixIcon) && (args.model.prefixIcon.split("e-ss-")[1] === args.ID || (args.model.prefixIcon.indexOf("e-ss-drawborder") > -1 || args.model.prefixIcon.indexOf("e-ss-drawbordergrid") > -1)))
                            xlObj.XLSelection._isGridBordering = xlObj.XLSelection._isOutsideBordering = true;
                        sheetCont.addClass("e-ss-cursor");
                        sheetCont.removeClass("e-ss-drwbrdrcursor e-ss-drwbrdrgridcursor e-ss-fpcursor");
                        xlObj.XLSelection._cleanUp(true);
                    }
                }
            }
            arg = { Id: this._id, isChecked: args.isChecked, status: args.status, prop: args.model, model: xlObj.model };
            if (xlObj._trigger("ribbonClick", arg)) {
                if (xlObj.model.showRibbon)
                    xlObj.XLRibbon._updateRibbonIcons();
                return false;
            }
            if (!ej.isNullOrUndefined(xlObj._getAutoFillOptElem()) && xlObj.model.autoFillSettings.showFillOptions) {
                xlObj._getAutoFillOptElem().addClass("e-hide");
                $("#" + xlObj._id + "_ctxtmenu").hide();
            }
            switch (this._id) {
                case xlObj._id + "_Ribbon_Home_Clipboard_Cut":
                    xlObj.XLClipboard.cut();
                    break;
                case xlObj._id + "_Ribbon_Home_Clipboard_Copy":
                    xlObj.XLClipboard.copy();
                    break;
                case xlObj._id + "_Ribbon_Home_Clipboard_Paste":
                case xlObj._id + "_Ribbon_Home_Clipboard_PasteOptions":
                    xlObj.XLClipboard._isSpecial = !(args.ID === "PasteValues");
                    xlObj.XLClipboard.paste();
                    break;
                case xlObj._id + "_Ribbon_Home_Actions_Undo":
                    xlObj.XLClipboard._triggerKeyDown(90, true);
                    break;
                case xlObj._id + "_Ribbon_Home_Actions_Redo":
                    xlObj.XLClipboard._triggerKeyDown(89, true);
                    break;
                case xlObj._id + "_Ribbon_Home_Alignment_WrapText":
                    xlObj._textFormatting("wrapText");
                    break;
                case xlObj._id + "_Ribbon_PageLayout_Print_Print":
                    xlObj.XLPrint.printSheet(sheetIdx);
                    break;
                case xlObj._id + "_Ribbon_PageLayout_Print_PrintSelected":
                    xlObj.XLPrint.printSelection(sheetIdx);
                    break;
                case xlObj._id + "_Ribbon_new":
                    xlObj._cellFormatHandler(this._id.replace(xlObj._id + "_Ribbon_", ""), args.selectedText);
                    break;
                case xlObj._id + "_Ribbon_Home_Font_Bold":
                    style[sstyles.FontWeight] = args.model.toggleState ? "bold" : "normal";
                    temp["style"] = style;
                    xlObj.XLFormat.format(temp);
                    break;
                case xlObj._id + "_Ribbon_Home_Font_Italic":
                    style[sstyles.FontStyle] = args.model.toggleState ? "italic" : "normal";
                    temp["style"] = style;
                    xlObj.XLFormat.format(temp);
                    break;
                case xlObj._id + "_Ribbon_Home_Font_Underline":
                case xlObj._id + "_Ribbon_Home_Font_StrikeThrough":
                    var txtDStyle = xlObj.XLFormat.getFormatFromHashCode(xlObj.XLFormat.getFormatClass(activeCell[0].className))["text-decoration"] || "";
                    if (splitId.indexOf("StrikeThrough") > -1)
                        splitId[splitId.indexOf("StrikeThrough")] = "line-through";
                    else if (splitId.indexOf("Underline") > -1)
                        splitId[splitId.indexOf("Underline")] = "underline";
                    if (args.model.toggleState) {
                        txtDStyle = txtDStyle.replace("none", "");
                        if (txtDStyle) {
                            if (txtDStyle.indexOf("underline") < 0)
                                style[sstyles.TextDecoration] = txtDStyle + " " + splitId[splitId.length - 1];
                            else
                                style[sstyles.TextDecoration] = splitId[splitId.length - 1] + " " + txtDStyle;
                        }
                        else
                            style[sstyles.TextDecoration] = splitId[splitId.length - 1];
                    }
                    else {
                        txtDStyle = $.trim(txtDStyle.replace(splitId[splitId.length - 1], ""));
                        style[sstyles.TextDecoration] = txtDStyle.length ? txtDStyle : "none";
                    }
                    temp["style"] = style;
                    xlObj.XLFormat.format(temp);
                    break;
                case xlObj._id + "_Ribbon_Home_Font_FontSize":
                    style[sstyles.FontSize] = args.value;
                    temp["style"] = style;
                    xlObj.XLFormat.format(temp);
                    break;
                case xlObj._id + "_Ribbon_Home_Font_IncreaseFontSize":
                case xlObj._id + "_Ribbon_Home_Font_DecreaseFontSize":
                    if (this._id == xlObj._id + "_Ribbon_Home_Font_IncreaseFontSize") {
                        selectedIndex = !ej.isNullOrUndefined(fsObj.selectedIndexValue) ? fsObj.selectedIndexValue + 1 : 6; //6-default increase fonsize index
                        !ej.isNullOrUndefined(xlObj.XLRibbon._fontSize[selectedIndex]) && fsObj.option({ selectedItemIndex: selectedIndex });
                    }
                    else if (this._id == xlObj._id + "_Ribbon_Home_Font_DecreaseFontSize") {
                        selectedIndex = !ej.isNullOrUndefined(fsObj.selectedIndexValue) ? fsObj.selectedIndexValue - 1 : 4; //6-default decrease fonsize index
                        !ej.isNullOrUndefined(xlObj.XLRibbon._fontSize[selectedIndex]) && fsObj.option({ selectedItemIndex: selectedIndex });
                    }
                    break;
                case xlObj._id + "_Ribbon_Home_Alignment_AlignLeft":
                case xlObj._id + "_Ribbon_Home_Alignment_AlignRight":
                case xlObj._id + "_Ribbon_Home_Alignment_AlignCenter":
                    element = $(this.element.parents("div").eq(1)).find(".e-text-align");
                    if (!ej.isNullOrUndefined(element[0])) {
                        $("#" + element[0].id).ejToggleButton("option", "toggleState", false);
                        element.removeClass("e-text-align");
                        (element[0].id != this.element[0].id) && this.element.addClass("e-text-align");
                    }
                    else
                        this.element.addClass("e-text-align");
                    style[sstyles.TextAlign] = args.model.toggleState ? splitId[splitId.length - 1].split("Align")[1] : "left";
                    temp["style"] = style;
                    xlObj.XLFormat.format(temp);
                    break;
                case xlObj._id + "_Ribbon_Home_Alignment_DecreaseIndent":
                case xlObj._id + "_Ribbon_Home_Alignment_IncreaseIndent":
                    var cellStyle, len, rightCnt = 0, isRightAlign = false, cellIndex;
                    if (selCells.length < 2) {
                        cellIndex = xlObj.getActiveCell();
                        cellStyle = xlObj.XLFormat.getFormatFromHashCode(xlObj.XLFormat.getFormatClass(xlObj.getCell(cellIndex.rowIndex, cellIndex.colIndex)[0].className));
                        size = (sstyles.TextIndent in cellStyle ? (this._id === xlObj._id + "_Ribbon_Home_Alignment_IncreaseIndent" ? Number(cellStyle[sstyles.TextIndent].replace("pt", "")) + 6 : Number(cellStyle[sstyles.TextIndent].replace("pt", "")) - 6) : (this._id === xlObj._id + "_Ribbon_Home_Alignment_DecreaseIndent" ? -6 : 6));
                        xlObj.XLRibbon._applyTextIndent(cellIndex, cellStyle, size, this);
                    }
                    else {
                        for (i = 0, len = selCells.length; i < len; i++) {
                            cellStyle = xlObj.XLFormat.getFormatFromHashCode(xlObj.XLFormat.getFormatClass(xlObj.getCell(selCells[i].rowIndex, selCells[i].colIndex)[0].className));
                            if (cellStyle[sstyles.TextAlign] == "right")
                                rightCnt++;
                        }
                        if (rightCnt === selCells.length)
                            isRightAlign = true;
                        for (i = 0, len = selCells.length; i < len; i++) {
                            cellStyle = xlObj.XLFormat.getFormatFromHashCode(xlObj.XLFormat.getFormatClass(xlObj.getCell(selCells[i].rowIndex, selCells[i].colIndex)[0].className));
                            if (!isRightAlign)
                                cellStyle[sstyles.TextAlign] = "left";
                            size = (sstyles.TextIndent in cellStyle ? (this._id === xlObj._id + "_Ribbon_Home_Alignment_IncreaseIndent" ? Number(cellStyle[sstyles.TextIndent].replace("pt", "")) + 6 : Number(cellStyle[sstyles.TextIndent].replace("pt", "")) - 6) : (this._id === xlObj._id + "_Ribbon_Home_Alignment_DecreaseIndent" ? -6 : 6));
                            xlObj.XLRibbon._applyTextIndent(selCells[i], cellStyle, size, this);
                        }
                    }
                    xlObj.XLSelection.refreshSelection();
                    xlObj.XLDragFill && xlObj.XLDragFill.positionAutoFillElement();
                    break;
                case xlObj._id + "_Ribbon_Home_Alignment_TopAlign":
                case xlObj._id + "_Ribbon_Home_Alignment_MiddleAlign":
                case xlObj._id + "_Ribbon_Home_Alignment_BottomAlign":
                    element = $(this.element.parents("div").eq(1)).find(".e-vertical-align");
                    if (!ej.isNullOrUndefined(element[0])) {
                        $("#" + element[0].id).ejToggleButton("option", "toggleState", false);
                        element.removeClass("e-vertical-align");
                        (element[0].id != this.element[0].id) && this.element.addClass("e-vertical-align");
                    }
                    else
                        this.element.addClass("e-vertical-align");
                    style[sstyles.VerticalAlign] = args.model.toggleState ? splitId[splitId.length - 1].split("Align")[0] : "bottom";
                    temp["style"] = style;
                    xlObj.XLFormat.format(temp);
                    break;
                case xlObj._id + "_Ribbon_Home_Font_FontFamily":
                    style[sstyles.FontFamily] = args.text;
                    temp["style"] = style;
                    xlObj.XLFormat.format(temp);
                    break;
                case xlObj._id + "_Ribbon_PageLayout_Show_Headings":
                    xlObj.showHeadings(args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_PageLayout_Show_Gridlines":
                    xlObj.showGridlines(args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_PageLayout_PageLayout_PageSize":
                case xlObj._id + "_Ribbon_PageLayout_PageLayout_PageSizeOptions":
                    var value = !ej.isNullOrUndefined(args.ID) ? args.ID : args.model.prefixIcon.substring(12);
                    xlObj.XLPrint._printSetting(value);
                    break;
                case xlObj._id + "_Ribbon_Home_Number_NumberFormat":
                    temp["type"] = args.value.toLowerCase();
                    if (temp.type !== "custom")
                        xlObj.XLFormat.format(temp);
                    else
                        xlObj._showDialog(xlObj._id + "_FormatCells");
                    break;
                case xlObj._id + "_Ribbon_Home_Number_IncreaseDecimal":
                case xlObj._id + "_Ribbon_Home_Number_DecreaseDecimal":
                    if (activeCell.data("type") != "number" && $.isNumeric(xlObj.XLEdit.getPropertyValueByElem(activeCell))) {
                        xlObj.XLRibbon._isSetModel = true;
                        cfObj.option({ selectedItemIndex: 1 }); //number type
                        xlObj.XLRibbon._isSetModel = false;
                    }
                    xlObj.XLFormat.updateDecimalPlaces(splitId[splitId.length - 1]);
                    break;
                case xlObj._id + "_Ribbon_Home_Number_Accounting":
                case xlObj._id + "_Ribbon_Home_Number_Percentage":
                    this._id === xlObj._id + "_Ribbon_Home_Number_Accounting" ? cfObj.option({ selectedItemIndex: 3 }) : cfObj.option({ selectedItemIndex: 4 });
                    temp["type"] = cfObj.model.value.toLowerCase();
                    break;
                case xlObj._id + "_Ribbon_Home_Number_CommaStyle":
                    cfObj.option({ selectedItemIndex: 1 });
                    temp["type"] = cfObj.model.value.toLowerCase();
                    break;
                case xlObj._id + "_Ribbon_Data_SortFilter_SortAtoZ":
                    xlObj.XLSort._sortHandler("SortAtoZ");
                    break;
                case xlObj._id + "_Ribbon_Data_SortFilter_SortZtoA":
                    xlObj.XLSort._sortHandler("SortZtoA");
                    break;
                case xlObj._id + "_Ribbon_Data_SortFilter_Filter":
                    xlObj.XLFilter.filter();
                    break;
                case xlObj._id + "_Ribbon_Data_SortFilter_ClearFilter":
                    cname = xlObj.XLEdit.getPropertyValue(xlObj.getActiveCell().rowIndex, xlObj.getActiveCell().colIndex, "tableName");
                    if (ej.isNullOrUndefined(cname))
                        xlObj.XLFilter.clearFilter();
                    else {
                        tid = xlObj._getTableID(cname);
                        xlObj.XLFilter._clearFilterTable(xlObj.getActiveSheetIndex(), tid, true);
                    }
                    break;
                case xlObj._id + "_Ribbon_Home_Font_BorderColor":
                    obj = $('#' + xlObj._id + '_Ribbon_BorderColor').data('ejColorPicker');
                    !ej.isNullOrUndefined(obj) && (obj.hide());
                    !ej.isNullOrUndefined(args.value) && (xlObj._borderColor = args.value);
                    break;
                case xlObj._id + "_Ribbon_Home_Font_Border":
                    var alphRange;
                    if ((xlObj._borderStyles.indexOf(args.ID) < 0)) {
                        if (ej.isNullOrUndefined(args.ID))
                            args.ID = args.model.prefixIcon.substring(12);
                        else
                            args.ID.indexOf("bordercolor") < 0 && $(this.element).find(".e-icon ").removeClass().addClass("e-icon e-ss-" + args.ID) && this.option({ prefixIcon: "e-icon e-ss-" + args.ID });
                    }
                    else
                        xlObj.XLRibbon._updateBordeStyle(args);
                    hexcode = xlObj._borderColor || '#000000';
                    startCell = sheet._startCell;
                    endCell = sheet._endCell;
                    alphRange = xlObj._getAlphaRange(sheetIdx, startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex);
                    if (xlObj.model.allowSelection && (xlObj.XLSelection._isOutsideBordering || xlObj.XLSelection._isGridBordering))
                        !(xlObj._borderStyles.indexOf(args.ID) > -1) && (args.ID.indexOf("bordercolor") < 0) && (xlObj.XLSelection._isOutsideBordering = xlObj.XLSelection._isGridBordering = false);
                    else
                        xlObj.setBorder({ "type": args.ID, "color": hexcode, "style": xlObj._borderStyle }, alphRange);
                    break;
                case xlObj._id + "_Ribbon_Data_DataTools_DataValidation":
                case xlObj._id + "_Ribbon_Data_DataTools_DataValidationOptions":
                    xlObj._showDialog(this._id);
                    if (args.ID == "ClearVal")
                        xlObj.XLValidate.clearDV();
                    else if (args.ID == "HighlightVal")
                        xlObj.XLValidate.highlightInvalidData();
                    else if (args.ID == "ClearHLVal")
                        xlObj.XLValidate.clearHighlightedValData();
                    else {
                        sheet = xlObj.getSheet(sheetIdx);
                        var selected = sheet._selectedCells, item;
                        len = selected.length; value = [];
                        for (i = 0; i < len; i++) {
                            var rle = xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "rule");
                            if (rle) {
                                item = xlObj._dataContainer.sheets[sheetIdx][selected[i].rowIndex][selected[i].colIndex].rule.customVal;
                                if (value.indexOf(item) == -1) {
                                    value.push(item);
                                }
                            }
                        }
                        if (value.length > 0)
                            xlObj._showAlertDlg("", "MoreValidationAlert", "OpenValDlg", 400, 130);
                        else {
                            $("#" + xlObj._id + "_ValDialog").ejDialog("open");
                            if ($.validator)
                                $("#" + xlObj._id + "_Form_ValDialog").validate().resetForm();
                            $("#" + xlObj._id + "_Ribbon_ddType_wrapper").focus();
                            var rules = xlObj.XLEdit.getPropertyValueByElem(xlObj.getActiveCellElem(sheetIdx), "rule");
                            if (rules) {
                                var rule = rules.customVal, splitStr = rule.split("_");
                                if (rule.indexOf("list") > -1) {
                                    $("#" + xlObj._id + "_Ribbon_ddType").ejDropDownList('option', 'selectedItemIndex', 5);
                                    $("#" + xlObj._id + "_Ribbon_btnMin").val(splitStr[0]);
                                }
                                else {
                                    var index;
                                    xlObj.XLRibbon._types.some(function (element, i) { if (splitStr[4] === element.value) { index = i; return true; } });
                                    $("#" + xlObj._id + "_Ribbon_ddType").ejDropDownList('option', 'selectedItemIndex', index);
                                    xlObj.XLRibbon._actions.some(function (element, i) { if (splitStr[0] === element.value) { index = i; return true; } });
                                    $("#" + xlObj._id + "_Ribbon_ddAction").ejDropDownList('option', 'selectedItemIndex', index);
                                    $("#" + xlObj._id + "_Ribbon_btnMin").val(splitStr[1].replace("^", ""));
                                    $("#" + xlObj._id + "_Ribbon_btnMax").val(splitStr[2].replace("^", ""));
                                }
                                $("#" + xlObj._id + "_Ribbon_blank").ejCheckBox("option", "checked", !rules.required);
                                $("#" + xlObj._id + "_Ribbon_freetext").ejCheckBox("option", "checked", JSON.parse(splitStr[splitStr.length - 3]));
                            }
                            else {
                                $("#" + xlObj._id + "_Ribbon_ddType").ejDropDownList('option', 'selectedItemIndex', 1);
                                $("#" + xlObj._id + "_Ribbon_ddAction").ejDropDownList('option', 'selectedItemIndex', 6);
                                $("#" + xlObj._id + "_Ribbon_btnMin").val("");
                                $("#" + xlObj._id + "_Ribbon_btnMax").val("");
                                $("#" + xlObj._id + "_Ribbon_blank").ejCheckBox("option", "checked", true);
                                $("#" + xlObj._id + "_Ribbon_freetext").ejCheckBox("option", "checked", true);
                            }
                        }
                    }
                    break;
                case xlObj._id + "_Ribbon_Home_Styles_ConditionalFormatting":
                    if (!args.ID.length)
                        break;
                    xlObj.XLRibbon._currentCFormat = args.ID;
                    if (args.ID.startsWith("clear"))
                        (args.ID === "clearselected") ? xlObj.XLCFormat.clearCF(xlObj.getSheet(sheetIdx).selectedRange) : xlObj.XLCFormat.clearCF();
                    else if (!(args.ID.indexOf("_HLCellRules") > 0 || args.ID.indexOf("_ClearRules") > 0 || args.ID.indexOf("_CreateRule") < -1 || args.ID.indexOf("_ColorScales") > -1 || args.ID.indexOf("_IconSets") > -1 || args.ID.indexOf("_DataBars") > -1)) {
                        xlObj._showDialog(this._id);
                        xlObj.XLRibbon._renderCFDialog(args);
                    }
                    break;
                case xlObj._id + "_Ribbon_Others_Editing_FindSelect":
                    var fRTabObj;
                    xlObj._showDialog(this._id);
                    gotoTabObj = $("#" + xlObj._id + "_GoToDlgTab").data("ejTab"), fRTabObj = $("#" + xlObj._id + "_FRDialog_FPDlgTab").data("ejTab");
                    switch (args.ID) {
                        case "Find":
                            (xlObj._responsiveHeight < 365) && $("#" + xlObj._id + "_FRDialog_wrapper").css('top', '0px');
                            $("#" + xlObj._id + "_FRDialog").ejDialog("open");
                            xlObj.XLRibbon._refreshFRDlg();
                            fRTabObj.option({ selectedItemIndex: 0 });
                            $("#" + xlObj._id + "_Ribbon_textFind").focus().setInputPos($("#" + xlObj._id + "_Ribbon_textFind").val().length);
                            if (xlObj.model.isReadOnly)
                                $("#" + xlObj._id + "_FRDialog_FPDlgTab").ejTab("option", { disabledItemIndex: [1, 2] });
                            else
                                $("#" + xlObj._id + "_FRDialog_FPDlgTab").ejTab("option", { enabledItemIndex: [1, 2] });
                            break;
                        case "Replace":
                            (xlObj._responsiveHeight < 365) && $("#" + xlObj._id + "_FRDialog_wrapper").css('top', '0px');
                            $("#" + xlObj._id + "_FRDialog").ejDialog("open");
                            xlObj.XLRibbon._refreshFRDlg();
                            fRTabObj.option({ selectedItemIndex: 1 });
                            $("#" + xlObj._id + "_Ribbon_textFind").focus().setInputPos($("#" + xlObj._id + "_Ribbon_textFind").val().length);
                            break;
                        case "GoTo":
                            $("#" + xlObj._id + "_GoDialog").ejDialog("open");
                            gotoTabObj.option({ selectedItemIndex: 0 });
                            $("#" + xlObj._id + "_textRef").focus().setInputPos($("#" + xlObj._id + "_Ribbon_textFind").val().length);
                            if ($.validator)
                                $('#' + xlObj._id + '_Form_GoToDiv').validate().resetForm();
                            break;
                        case "GoToSpecial":
                            $("#" + xlObj._id + "_GoDialog").ejDialog("open");
                            gotoTabObj.option({ selectedItemIndex: 1 });
                            $("#" + xlObj._id + "_Blanks").focus();
                            break;
                        default:
                            xlObj.XLSearch._applyGoToRule(args.ID.toLowerCase(), true, true, true, true);
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_Others_CalCulation_CalculationOptions":
                    switch (args.ID) {
                        case xlObj._id + "_CalcAuto":
                            xlObj.XLEdit.calcOption(true);
                            break;
                        case xlObj._id + "_CalcManual":
                            xlObj.XLEdit.calcOption(false);
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_Others_CalCulation_CalculateNow":
                    xlObj.XLEdit.calcNow();
                    break;
                case xlObj._id + "_Ribbon_Others_CalCulation_CalculateSheet":
                    xlObj.XLEdit.calcNow(xlObj.getActiveSheetIndex());
                    break;
                case xlObj._id + "_Ribbon_Home_Clipboard_FormatPainter":
                    if (!args.model.toggleState) {
                        xlObj.performSelection(xlObj.getActiveCell(), xlObj.getActiveCell());
                        return false;
                    }
                    xlObj.XLFormat._formatEnable = true;
                    sheetCont.removeClass("e-ss-cursor");
                    sheetCont.addClass("e-ss-fpcursor");
                    xlObj.XLFormat._formatPainter();
                    break;
                case xlObj._id + '_Ribbon_Design_Tools_ConvertToRange':
                    xlObj.XLFormat.convertToRange({ alert: true });
                    break;
                case xlObj._id + '_Ribbon_Design_Tools_ResizeTable':
                    tid = parseInt(document.getElementById(xlObj._id + '_tableid').value);
                    range = sheet.tableManager[tid].range;
                    xlObj._showDialog(xlObj._id + '_Ribbon_Design_Tools_ResizeTable')
                    $('#' + xlObj._id + '_fatresizetablerange').val(xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]));
                    $('#' + xlObj._id + '_fatresizetabledlg').ejDialog('open');
                    break;
                case xlObj._id + '_Ribbon_Design_TableStyleOptions_FirstColumn':
                case xlObj._id + '_Ribbon_Design_TableStyleOptions_LastColumn':
                    if (this._id === xlObj._id + '_Ribbon_Design_TableStyleOptions_FirstColumn') {
                        xlObj.XLRibbon._isFirstColumn = true;
                        tid = document.getElementById(xlObj._id + '_tableid').value;
                        range = sheet.tableManager[tid].range;
                        range = xlObj._getProperAlphaRange(sheetIdx, range[0] + 1, range[1], range[2], range[1]);
                        xlObj.XLRibbon._firstLastColumn(tid, sheetIdx);
                        curProp = "firstColumn";
                    }
                    else {
                        xlObj.XLRibbon._isFirstColumn = false;
                        tid = document.getElementById(xlObj._id + '_tableid').value;
                        range = sheet.tableManager[tid].range;
                        range = xlObj._getProperAlphaRange(sheetIdx, range[0] + 1, range[3], range[2], range[3]);
                        xlObj.XLRibbon._firstLastColumn(tid, sheetIdx);
                        curProp = "lastColumn";
                    }
                    details = { sheetIndex: sheetIdx, reqType: "format-table", action: "firstlastcolumn", range: range, check: args.isChecked, id: args.model.id, tableId: parseInt(tid), prop: curProp };
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                    break;
                case xlObj._id + '_Ribbon_Design_TableStyleOptions_TotalRow':
                    tid = document.getElementById(xlObj._id + '_tableid').value;
                    xlObj.XLRibbon._totalRow(tid, sheetIdx);
                    break;
                case xlObj._id + '_Ribbon_Design_TableStyleOptions_FilterColumn':
                    if (!xlObj.model.allowFiltering)
                        return;
                    tmgr = sheet.tableManager, tid = document.getElementById(xlObj._id + '_tableid').value;
                    xlObj.XLFilter._clearFilterTableIcon(sheetIdx, parseInt(document.getElementById(xlObj._id + '_tableid').value));
                    tmgr[tid]["isFilter"] = args.isChecked;
                    details = { sheetIndex: sheetIdx, reqType: "format-table", action: "filtericon", id: args.model.id, check: args.isChecked, tableId: parseInt(tid) };
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                    break;
                case xlObj._id + '_Ribbon_Insert_Tables_Table':
                    xlObj._showDialog(this._id);
                    xlObj.XLRibbon._openFATDlg();
                    break;
                case xlObj._id + "_Ribbon_Review_Comments_NewComment":
                    $("#" + xlObj._id + "_Ribbon_Review_Comments_NewComment").text() === xlObj._getLocStr("NewComment") ? xlObj.XLComment.setComment() : xlObj.XLComment.editComment();
                    break;
                case xlObj._id + "_Ribbon_Review_Comments_DeleteComment":
                    xlObj.XLComment.deleteComment();
                    break;
                case xlObj._id + "_Ribbon_Review_Comments_ShowAllComments":
                    xlObj.XLComment.showAllComments();
                    break;
                case xlObj._id + "_Ribbon_Review_Comments_ShowHideComment":
                    xlObj.XLComment.showHideComment();
                    break;
                case xlObj._id + "_Ribbon_Review_Comments_NextComment":
                    xlObj.XLComment.findNextComment();
                    break;
                case xlObj._id + "_Ribbon_Review_Comments_PreviousComment":
                    xlObj.XLComment.findPrevComment();
                    break;
                case xlObj._id + "_Ribbon_Insert_Links_Hyperlink":
                    xlObj._showDialog(this._id);
                    break;
                case xlObj._id + "_Ribbon_Home_Editing_SortFilter":
                    switch (args.ID) {
                        case "Ribbon_SortAtoZ":
                        case "Ribbon_SortZtoA":
                            xlObj.model.allowSorting && xlObj.XLSort._sortHandler(args.ID);
                            break;
                        case "Ribbon_Filter":
                            xlObj.model.allowFiltering && xlObj.XLFilter.filter();
                            break;
                        default:
                            cname = xlObj.getCell(xlObj.getActiveCell().rowIndex, xlObj.getActiveCell().colIndex)[0].className;
                            if (cname.indexOf("e-table") < 0)
                                xlObj.XLFilter.clearFilter();
                            else {
                                tid = xlObj._getTableID(cname);
                                xlObj.XLFilter._clearFilterTable(xlObj.getActiveSheetIndex(), parseInt(tid), true);
                            }
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_Others_Cells_InsertCell":
                case xlObj._id + "_Ribbon_Others_Cells_InsertCellOptions":
                    if (selCells.length < 1)
                        return;
                    startCell = selCells[0], endCell = selCells[selCells.length - 1];
                    switch (args.ID) {
                        case "InsertCells":
                            if (xlObj._getJSSheetRowHeaderContent(sheetIdx).find('.e-rowselected').length)
                                xlObj.insertEntireRow(startCell.rowIndex, endCell.rowIndex);
                            else if (xlObj._getJSSheetHeader(sheetIdx).find('.e-colselected').length) {
                                xlObj._insDelStatus = "insert";
                                xlObj.insertEntireColumn(startCell.colIndex, endCell.colIndex);
                            }
                            else
                                xlObj._showDialog(this._id);
                            break;
                        case "InsertSheetRows":
                            xlObj.insertEntireRow(startCell.rowIndex, endCell.rowIndex);
                            break;
                        case "InsertSheetColumns":
                            xlObj._insDelStatus = "insert";
                            xlObj.insertEntireColumn(startCell.colIndex, endCell.colIndex);
                            break;
                        case "InsertSheet":
                            xlObj.insertSheet();
                            break;
                        default:
                            if (xlObj.element.find('.e-rowselected').length > 0)
                                xlObj.insertEntireRow(startCell.rowIndex, endCell.rowIndex);
                            else if (xlObj.element.find('.e-colselected').length > 0) {
                                xlObj._insDelStatus = "insert";
                                xlObj.insertEntireColumn(startCell.colIndex, endCell.colIndex);
                            }
                            else
                                xlObj.insertShiftBottom(startCell, endCell);
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_Others_Cells_DeleteCell":
                case xlObj._id + "_Ribbon_Others_Cells_DeleteCellOptions":
                    if (selCells.length < 1)
                        return;
                    startCell = selCells[0], endCell = selCells[selCells.length - 1];
                    switch (args.ID) {
                        case "DeleteCells":
                            if (xlObj._getJSSheetRowHeaderContent(sheetIdx).find('.e-rowselected').length)
                                xlObj.deleteEntireRow(startCell.rowIndex, endCell.rowIndex, []);
                            else if (xlObj._getJSSheetHeader(sheetIdx).find('.e-colselected').length) {
                                xlObj._insDelStatus = "delete";
                                xlObj.deleteEntireColumn(startCell.colIndex, endCell.colIndex, []);
                            }
                            else
                                xlObj._showDialog(this._id);
                            break;
                        case "DeleteSheetRows":
                            xlObj.deleteEntireRow(startCell.rowIndex, endCell.rowIndex, []);
                            break;
                        case "DeleteSheetColumns":
                            xlObj._insDelStatus = "delete";
                            xlObj.deleteEntireColumn(startCell.colIndex, endCell.colIndex, []);
                            break;
                        case "DeleteSheet":
                            xlObj.deleteSheet(sheetIdx, true);
                            break;
                        default:
                            if (xlObj.element.find('.e-rowselected').length > 0)
                                xlObj.deleteEntireRow(startCell.rowIndex, endCell.rowIndex);
                            else if (xlObj.element.find('.e-colselected').length > 0) {
                                xlObj._insDelStatus = "insert";
                                xlObj.deleteEntireColumn(startCell.colIndex, endCell.colIndex);
                            }
                            else
                                xlObj.deleteShiftUp(startCell, endCell);
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_Home_Editing_Clear":
                    range = sheet.selectedRange;
                    switch (args.ID) {
                        case "Clear_All":
                            range = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                            xlObj._isTrigCellSave = true;
                            xlObj.clearAll(range);
                            break;
                        case "Clear_Formats":
                            range = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                            xlObj.clearAllFormat(range);
                            break;
                        case "Clear_Contents":
                            range = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                            xlObj._isTrigCellSave = true;
                            xlObj.clearContents(range);
                            break;
                        case "Clear_Comments":
                            xlObj.clearComments(sheetIdx);
                            break;
                        default:
                            xlObj.clearHyperlinks();
                            break;
                    }
                    xlObj.model.allowSelection && xlObj.XLSelection._clearBorder(xlObj._arrayAsString(xlObj._cutFocus), sheetIdx);
                    break;
                case xlObj._id + "_Ribbon_Insert_Tables_PivotTable":
                    xlObj._showDialog(this._id);
                    dlg = $("#" + xlObj._id + "_PvtDialog"); sheet = xlObj.getSheet(sheetIdx);
                    info = { sheetIndex: sheetIdx, model: xlObj.model.sheets };
                    if (xlObj._trigger("_createPivotTable", info))
                        return;
                    $("#" + xlObj._id + "_Ribbon_PvtRange").val("");
                    $("#" + xlObj._id + "_Ribbon_PvtLocation").val("");
                    if (sheet._selectedCells.length > 1) {
                        range = sheet.selectedRange;
                        $("#" + xlObj._id + "_Ribbon_PvtRange").val(sheet.sheetInfo.text + "!$" + xlObj._generateHeaderText(range[1] + 1) + "$" + (range[0] + 1) + ":$" + xlObj._generateHeaderText(range[3] + 1) + "$" + (range[2] + 1));
                    }
                    else if (!xlObj.isUndefined(xlObj.XLEdit.getPropertyValueByElem(xlObj.getActiveCellElem()))) {
                        xlObj.selectAll(false);
                        $("#" + xlObj._id + "_Ribbon_PvtRange").val(sheet.sheetInfo.text + "!$" + xlObj._generateHeaderText(sheet._startCell.colIndex + 1) + "$" + (sheet._startCell.rowIndex + 1) + ":$" + xlObj._generateHeaderText(sheet._endCell.colIndex + 1) + "$" + (sheet._endCell.rowIndex + 1));
                    }
                    dlg.find(".e-ss-changerange").show();
                    dlg.find(".e-ss-movepvttbl").show();
                    dlg.data("ejDialog").option("title", xlObj._getLocStr("CreatePivotTable"));
                    $("#" + xlObj._id + "_dlg_newsheet").click();
                    dlg.ejDialog("open");
                    break;
                case xlObj._id + "_Ribbon_Insert_Sparkline_Column":
                case xlObj._id + "_Ribbon_Insert_Sparkline_Line":
                case xlObj._id + "_Ribbon_Insert_Sparkline_Pie":
                case xlObj._id + "_Ribbon_Insert_Sparkline_Area":
                case xlObj._id + "_Ribbon_Insert_Sparkline_Winloss":
                    xlObj.XLRibbon._sparklineDesignType = this._id.split("_")[4];
                    xlObj._showDialog(this._id);
                    xlObj.XLSparkline._sparklineDlgBox();
                    break;
                case xlObj._id + "_Ribbon_Analyze_Show_FieldList":
                    if (args.model.toggleState) {
                        xlObj.XLPivot._displayActPanel = true;
                        xlObj.getActivationPanel().find("#" + xlObj._id + "_PivotTableSchema_" + xlObj._getContent(sheetIdx).find(".e-ss-activepivot")[0].id).show();
                        xlObj.showActivationPanel();
                    }
                    else {
                        xlObj.hideActivationPanel();
                        xlObj.XLPivot._displayActPanel = false;
                    }
                    break;
                case xlObj._id + "_Ribbon_Analyze_Actions_ClearAll":
                    var pvtID = xlObj.element.find(".e-ss-activepivot")[0].id, pivotGrid = $("#" + pvtID).data("ejPivotGrid"), pivotSchema;
                    pivotSchema = $("#" + xlObj._id + "_PivotTableSchema_" + pvtID).data("ejPivotSchemaDesigner");
                    xlObj.XLPivot._clearFilters(pivotGrid, pivotSchema);
                    pivotSchema.model.pivotControl = pivotGrid;
                    break;
                case xlObj._id + "_Ribbon_Analyze_Actions_MovePivotTable":
                    dlg = $("#" + xlObj._id + "_PvtDialog"), range, sheetIdx = xlObj.getActiveSheetIndex();
                    dlg.find(".e-ss-movepvttbl").show();
                    dlg.find(".e-ss-changerange").hide();
                    pvtObj = xlObj.getSheet(sheetIdx).pivotMngr.pivot[xlObj.element.find(".e-ss-activepivot")[0].id];
                    $("#" + xlObj._id + "_Ribbon_PvtLocation").val(xlObj.getSheet(sheetIdx).sheetInfo.text + "!$" + xlObj._generateHeaderText(pvtObj.colIndex + 1) + "$" + (pvtObj.rowIndex + 1));
                    dlg.data("ejDialog").option("title", xlObj._getLocStr("MovePivotTable"));
                    $("#" + xlObj._id + "_dlg_existsheet").click();
                    dlg.ejDialog("open");
                    break;
                case xlObj._id + "_Ribbon_Analyze_DataSource_Refresh":
                    xlObj.XLPivot.refreshDataSource();
                    break;
                case xlObj._id + "_Ribbon_Analyze_DataSource_ChangeDataSource":
                    dlg = $("#" + xlObj._id + "_PvtDialog");
                    dlg.find(".e-ss-changerange").show();
                    dlg.find(".e-ss-movepvttbl").hide();
                    pvtObj = xlObj.getSheet(sheetIdx).pivotMngr.pivot[xlObj.element.find(".e-ss-activepivot")[0].id];
                    range = pvtObj.dataRange;
                    $("#" + xlObj._id + "_Ribbon_PvtRange").val(pvtObj.dataSheetName + "!$" + xlObj._generateHeaderText(range[1] + 1) + "$" + (range[0] + 1) + ":$" + xlObj._generateHeaderText(range[3] + 1) + "$" + (range[2] + 1));
                    dlg.data("ejDialog").option("title", xlObj._getLocStr("ChangePivotTableDataSource"));
                    dlg.ejDialog("open");
                    break;
                case xlObj._id + "_Ribbon_ChartDesign_Type_ChangeChartType":
                    xlObj._showDialog(this._id);
                    xlObj.XLRibbon._refreshChartTypeDlg();
                    break;
                case xlObj._id + "_Ribbon_Insert_Illustrations_Pictures":
                    if (xlObj.model.importSettings.importMapper.length < 1) {
                        xlObj._showAlertDlg("Alert", "ImportExportUrl", "", 266);
                        return;
                    }
                    xlObj._uploadImage = true;
                    $("#" + xlObj._id + "_file .e-uploadinput").click();
                    xlObj.XLRibbon._toggleFormatTab();
                    break;
                case xlObj._id + "_Ribbon_Others_Formulas_NameManager":
                    xlObj.XLRibbon._openNameManagerDlg();
                    xlObj.XLRibbon._isNmgrid = "NameManager";
                    break;
                case xlObj._id + "_Ribbon_Others_Formulas_DefineName":
                    xlObj._showDialog(xlObj._id + "_Ribbon_Others_NameManager");
                    var grid = $("#" + xlObj._id + "_nmgrid").data("ejGrid");
                    grid.getContentTable().find('td').addClass("e-ss-emptyrecord")
                    if (grid.model.dataSource.length < 1)
                        grid.getContentTable().find('td').addClass("e-ss-emptyrecord");
                    else
                        grid.getContentTable().find('.e-ss-emptyrecord').removeClass("e-ss-emptyrecord");
                    xlObj.XLRibbon._refreshNMDlg();
                    xlObj.XLRibbon._isNmgrid = "DefineName";
                    break;
                case xlObj._id + "_Ribbon_Others_Window_FreezePanes":
                    switch (args.ID) {
                        case "freezePanes":
                            xlObj.XLFreeze.freezePanes();
                            break;
                        case "FreezeTopRow":
                            xlObj.XLFreeze.freezeTopRow();
                            break;
                        case "FreezeFirstColumn":
                            xlObj.XLFreeze.freezeLeftColumn();
                            break;
                        case "UnFreezePanes":
                            xlObj.XLFreeze.unfreezePanes();
                            break;
                        default:
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_Home_Alignment_Merge":
                    if (ej.isNullOrUndefined(args.ID)) {
                        xlObj.mergeCenter = true;
                        xlObj.mergeCells();
                    }
                    switch (args.ID) {
                        case "MergeCells":
                            xlObj.mergeCells();
                            break;
                        case "MergeAcross":
                            xlObj.mergeAcrossCells();
                            break;
                        case "MergeAndCenter":
                            xlObj.mergeCenter = true;
                            xlObj.mergeCells();
                            break;
                        case "UnmergeCells":
                            xlObj.unmergeCells(sheet.selectedRange);
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_Home_Editing_AutoSum":
                    cellRange = sheet.selectedRange;
                    if (args.type === "click")
                        xlObj.XLRibbon.autoSum("SUM", xlObj._getAlphaRange(sheetIdx, cellRange[0], cellRange[1], cellRange[2], cellRange[3]));
                    else
                        xlObj.XLRibbon.autoSum(args.ID.toUpperCase(), xlObj._getAlphaRange(sheetIdx, cellRange[0], cellRange[1], cellRange[2], cellRange[3]));
                    break;
                case xlObj._id + "_Ribbon_ChartDesign_ChartLayouts_AddChartElement":
                    xlObj.XLChart.updateChartElement(null, args.ID);
                    break;
                case xlObj._id + "_Ribbon_ChartDesign_Size_ChartWidth":
                    xlObj.XLRibbon._changeChartSize("height", args.value);
                    break;
                case xlObj._id + "_Ribbon_ChartDesign_Size_ChartHeight":
                    xlObj.XLRibbon._changeChartSize("width", args.value);
                    break;
                case xlObj._id + "_Ribbon_ChartDesign_Data_SwitchRowColumn":
                    xlObj.XLChart.switchRowColumn();
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Line":
                case xlObj._id + "_Ribbon_SparklineDesign_Column":
                case xlObj._id + "_Ribbon_SparklineDesign_Pie":
                case xlObj._id + "_Ribbon_SparklineDesign_Area":
                case xlObj._id + "_Ribbon_SparklineDesign_Winloss":
                    var sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                    this.sparklineDesignType = this._id.split("_")[3];
                    xlObj.XLSparkline.changeType(sId[0], this.sparklineDesignType);
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Sparkline_EditData":
                    xlObj._showDialog(this._id);
                    switch (args.ID) {
                        case "EditGroupLocation":
                            xlObj.XLRibbon._isEditGroupLocationClick = true;
                            if (xlObj.XLRibbon._isEditGroupLocationClick)
                                xlObj.XLSparkline._sparklineDlgBox();
                            break;
                        case "EditSingleSparklineData":
                            xlObj._showDialog(this._id);
                            xlObj.XLSparkline._sparklinDesignDlg();
                            xlObj.XLRibbon._isEditSingleSparklineClick = true;
                            break;
                    }
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Show_HighPoint":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                    xlObj.XLSparkline.changePointColor(sId[0], { highPointColor: "red" }, sheetIdx, args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Show_NegativePoints":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                    xlObj.XLSparkline.changePointColor(sId[0], { negativePointColor: "orange" }, sheetIdx, args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Show_LowPoint":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                    xlObj.XLSparkline.changePointColor(sId[0], { lowPointColor: "orange" }, sheetIdx, args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Show_FirstPoint":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                    xlObj.XLSparkline.changePointColor(sId[0], { startPointColor: "green" }, sheetIdx, args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Show_LastPoint":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                    xlObj.XLSparkline.changePointColor(sId[0], { endPointColor: "violet" }, sheetIdx, args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_SparklineDesign_Show_Markers":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                    xlObj.XLSparkline.changePointColor(sId[0], { markerSettings: { visible: true } }, sheetIdx, args.isChecked);
                    break;
                case xlObj._id + "_Ribbon_SparklineColor":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline"), color;
                    color = args.value;
                    xlObj.XLSparkline.changePointColor(sId[0], { fill: color }, sheetIdx, args.isInteraction);
                    break;
                case xlObj._id + "_Ribbon_MarkerNegativePoint":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline"), color;
                    color = args.value;
                    xlObj.XLSparkline.changePointColor(sId[0], { negativePointColor: color }, sheetIdx, args.isInteraction);
                    break;
                case xlObj._id + "_Ribbon_MarkerHighPoint":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline"), color;
                    color = args.value;
                    xlObj.XLSparkline.changePointColor(sId[0], { highPointColor: color }, sheetIdx, args.isInteraction);
                    break;
                case xlObj._id + "_Ribbon_MarkerLowPoint":
                    sId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline"), color;
                    color = args.value;
                    xlObj.XLSparkline.changePointColor(sId[0], { lowPointColor: color }, sheetIdx, args.isInteraction);
                    break;
                case xlObj._id + "_Ribbon_PictureColor":
                case xlObj._id + "_Ribbon_Format_Border_PictureBorder":
                    if (["weight", "dashes", xlObj._id + "picturecolor", ""].indexOf(args.ID) === -1) {
                        elem = xlObj.getSheetElement(sheetIdx).find(".e-ss-activeimg");
                        var regx = new RegExp("\\b" + "e-shapebdr" + ".*?\\b", "g"), width;
                        if (elem[0].className.match(regx))
                            style = xlObj.XLShape._getImgStyleFromHashCode(elem[0].className.match(regx)[0]);
                        else
                            style = { "border-color": "transparent", "border-width": "1px", "border-style": "solid" };
                        color = style["border-color"], width = style["border-width"], style = style["border-style"];
                        if (elem[0]) {
                            switch (true) {
                                case this._id.indexOf("PictureColor") > -1:
                                    color = args.value;
                                    break;
                                case args.ID.indexOf("px") > -1:
                                    width = args.ID;
                                    break;
                                case args.ID === "nooutline":
                                    color = "transparent";
                                    break;
                                default:
                                    style = args.ID;
                                    break;
                            }
                            xlObj.XLShape.changePictureBorder(elem[0].id, width, style, color);
                        }
                    }
                    break;
                case xlObj._id + "_Ribbon_Format_Adjust_ResetPicture":
                    xlObj.XLShape.resetPicture(null, args.ID);
                    break;
                case xlObj._id + "_Ribbon_Format_Adjust_ChangePicture":
                    xlObj._uploadImage = true;
                    xlObj.XLShape._changePicture = true;
                    xlObj.element.find("#" + xlObj._id + "_file .e-uploadinput").click();
                    xlObj.XLRibbon._toggleFormatTab();
                    break;
                case xlObj._id + "_Ribbon_ChartDesign_Data_SelectData":
                    xlObj._showDialog(this._id);
                    cid = document.getElementById(xlObj._id + "_chart").value, dataVal = xlObj.XLChart._getShapeObj(cid, "chart");
                    if (!dataVal.isChartSeries) {
                        $("#" + xlObj._id + "_crxaxis").val(dataVal.xRange ? xlObj._getAlphaRange(sheetIdx, dataVal.xRange[0], dataVal.xRange[1], dataVal.xRange[2], dataVal.xRange[3]) : "");
                        $("#" + xlObj._id + "_cryaxis").val(dataVal.yRange ? xlObj._getAlphaRange(sheetIdx, dataVal.yRange[0], dataVal.yRange[1], dataVal.yRange[2], dataVal.yRange[3]) : "");
                        $("#" + xlObj._id + "_crlaxis").val(dataVal.lRange ? xlObj._getAlphaRange(sheetIdx, dataVal.lRange[0], dataVal.lRange[1], dataVal.lRange[2], dataVal.lRange[3]) : "");
                        xlObj._selectDataval = { xRange: $("#" + xlObj._id + "_crxaxis").val(), yRange: $("#" + xlObj._id + "_cryaxis").val(), lRange: $("#" + xlObj._id + "_crlaxis").val() }
                        $("#" + xlObj._id + "_chartrangedlg").ejDialog("open");
                        $("#" + xlObj._id + "_crxaxis").focus().setInputPos(0);
                    }
                    break;
                case xlObj._id + "_Ribbon_ChartDesign_ChartThemes_ChartThemes":
                    xlObj.XLChart.changeTheme(xlObj.element.find("#" + xlObj._id + "_chart").val(), this._selectedValue);
                    break;
                case xlObj._id + "_Ribbon_Review_Changes_LockCell":
                    xlObj.lockCells(null, args.model.toggleState);
                    break;
                case xlObj._id + "_Ribbon_Review_Changes_ProtectSheet":
                    xlObj.protectSheet(args.model.toggleState);
                    break;
                case xlObj._id + "_Ribbon_Review_Changes_ProtectWorkbook":
                    xlObj._showDialog(this._id);
                    var wrkDlgOption = $("#" + xlObj._id + "_PasswordDialog").data("ejDialog");
                    if (!xlObj.model.exportSettings.password) {
                        wrkDlgOption.option("title", xlObj._getLocStr("ProtectWorkbook"));
                        $("#" + xlObj._id + "_confirm").show();
                    }
                    wrkDlgOption.open();
                    break;
            }
            if ((this._id.indexOf("Comment") < 0 && this._id.indexOf("FindSelect") < 0) || xlObj.XLSearch._isApplied) {
                xlObj._setSheetFocus();
                xlObj.XLSearch._isApplied = false;
            }
            xlObj._isRibbonClick = false;
        },

        _applyTextIndent: function (cellIdx, cellStyle, size, btnObj) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), temp = {}, sstyles = ej.Spreadsheet.SupportedStyles,
                textWidth, indentWidth, indent, colWidth, value2, value, cHght, cell = xlObj.getCell(cellIdx.rowIndex, cellIdx.colIndex), sheet = xlObj.getSheet(sheetIdx);
            value2 = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "value2");
            value = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "value");
            if (btnObj._id.indexOf("DecreaseIndent") < 0 && xlObj._hasClass(cell[0], "e-sswraptext") && Math.round((4 / 3) * size) + xlObj._detailsFromGlobalSpan(cellIdx.rowIndex, cellIdx.colIndex, "width", "W") > sheet.columnsWidthCollection[cellIdx.colIndex]) //pt to px onversion and text indent level twice for restrict overflow, while wrap.
                return;
            if (xlObj.isFormula(value))
                value = value2;
            if ((!cellStyle[sstyles.TextIndent] && btnObj._id === xlObj._id + "_Ribbon_Home_Alignment_DecreaseIndent") || (size < 0))
                return false;
            cellStyle[sstyles.TextIndent] = size + "pt";
            if (cellStyle[sstyles.TextAlign] === "center" || (xlObj.isNumber(value) && !cellStyle[sstyles.TextAlign]))
                cellStyle[sstyles.TextAlign] = "left";
            temp["style"] = cellStyle;
            xlObj.XLFormat.format(temp, [cellIdx.rowIndex, cellIdx.colIndex, cellIdx.rowIndex, cellIdx.colIndex]);
            if (cellStyle[sstyles.TextIndent] && !xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "merge") && !xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "mergeIdx")) {
                cHght = cell.outerHeight();
                if (cHght >= xlObj.model.rowHeight) {
                    cell.parent().outerHeight(cHght);
                    sheet.rowsHeightCollection[cellIdx.rowIndex] = cHght;
                    xlObj._updateFormatColl(sheetIdx, cellIdx.rowIndex, cellIdx.colIndex, cHght);
                    xlObj._setRowHdrHeight(sheetIdx, cellIdx.rowIndex);
                }
                textWidth = xlObj._detailsFromGlobalSpan(cellIdx.rowIndex, cellIdx.colIndex, "width", value2, null, true);
                indent = (4 / 3) * size;     //pt to px convertion
                indentWidth = Math.round(indent + textWidth);
                colWidth = sheet.columnsWidthCollection[cellIdx.colIndex];
                if (xlObj.XLResize && xlObj.isNumber(value) && btnObj._id === xlObj._id + "_Ribbon_Home_Alignment_IncreaseIndent" && indentWidth >= colWidth)
                    xlObj.XLResize.setColWidth(cellIdx.colIndex, 8 + colWidth); // 8 - pt to pix conversion ((4 / 3) * 6)
            }
        },

        _changeChartSize: function (status, value) {
            if (this._ctrlCreated)
                return;
            var xlObj = this.XLObj, formulaBar, cid = document.getElementById(xlObj._id + "_chart").value, cObj = $("#" + cid).ejChart("instance"), chartEle = $("#" + cid), cProp = xlObj.XLChart._getShapeObj(cid, "chart"), details = { sheetIndex: xlObj.getActiveSheetIndex(), reqType: "shape", shapeType: "chart", action: status, cid: cid, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex, prev: { width: cObj.model.size.width, height: cObj.model.size.height } };
            if (xlObj.model.allowFormulaBar)
                formulaBar = xlObj.element.find('.e-formulabar')[0];
            formulaBar && (formulaBar.style.display = "none");
            if (status === "height") {
                cObj.option("size", { width: value.toString() });
                cProp['width'] = value;
                chartEle[0].style.width = value + "px";
                details.cur = { width: value.toString(), height: cObj.model.size.height };
            }
            else {
                cObj.option("size", { height: value.toString() });
                cProp['height'] = value;
                chartEle[0].style.height = value + "px";
                details.cur = { width: cObj.model.size.width, height: value.toString() };
            }
            formulaBar && (formulaBar.style.display = "block");
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
            xlObj.XLShape._shapeType = "chart";
            xlObj.XLShape._updateShapeObj(chartEle[0]);
            xlObj.XLShape._shapeType = "img";
        },

        _updateBordeStyle: function (args) {
            var xlObj = this.XLObj;
            xlObj._borderStyle = args.ID && args.ID.length > 0 && args.ID;
        },

        _colorPickerHandler: function (name, args) {
            var xlFormat, xlObj = this.XLObj;
            if (args.type === "open") {
                $("#" + xlObj._id + "_" + name + "_popup").find(".e-buttons, .e-button").hide();
                $("#" + xlObj._id + "_" + name + "_popup").focus();
            }
            else if (args.type === "change") { //color change  
                xlFormat = xlObj.XLFormat;
                var cpObj = $("#" + xlObj._id + "_" + name).data("ejColorPicker");
                if (name === "Ribbon_Home_Font_FontColor") {
                    xlFormat.format({ "style": { "color": args.value } });
                    $("#" + xlObj._id + "_Ribbon_home_Font_Color").find(".e-selected-color").css("background-color", args.value);
                }
                else {
                    xlFormat.format({ "style": { "background-color": args.value } });
                    $("#" + xlObj._id + "_Ribbon_home_Font_Background").find(".e-selected-color").css("background-color", args.value);
                }
                cpObj.hide();
                xlObj._dupDetails = true;
                cpObj.setValue(args.value);
                xlObj._dupDetails = false;
            }
        },

        updateRibbonIcons: function () {
            this._updateRibbonIcons();
        },

        _updateRibbonIcons: function () { //scrip error
            var i, len, format, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), actSheet = xlObj.getSheet(sheetIdx);
            if (!this.XLObj.model.showRibbon || (actSheet._isImported && !actSheet._isLoaded))
                return;
            var isLocked, lockbtObj, merge, isWrap, type, style, activeCell, cfObj = $("#" + xlObj._id + "_Ribbon_Home_Number_NumberFormat").data("ejDropDownList"), tgleBtnElem;
            var fsObj = $("#" + xlObj._id + "_Ribbon_Home_Font_FontSize").data("ejDropDownList"), isVertical = false;
            $("#" + xlObj._id + "_Ribbon_Home_Font_FontSize").css("width", "auto");
            var ffObj = $("#" + xlObj._id + "_Ribbon_Home_Font_FontFamily").data("ejDropDownList"), index = -1, rObj = $("#" + xlObj._id + "_Ribbon").data("ejRibbon"), tabName = rObj.getTabText(rObj.model.selectedItemIndex);
            switch (tabName) {
                case xlObj._getLocStr("HOME"):
                    activeCell = actSheet._activeCell, isWrap = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "wrap"), merge = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "merge");
                    format = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "format"), type = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "type");
                    if (!ej.isNullOrUndefined(xlObj.XLFormat))
                        style = xlObj.XLFormat.getFormatFromHashCode(format);
                    if (xlObj.isUndefined(isWrap))
                        (isWrap = false);
                    $("#" + xlObj._id + "_Ribbon_Home_Alignment_WrapText").ejToggleButton("option", { toggleState: isWrap });
                    if (!xlObj.isUndefined(merge)) {
                        $("#" + xlObj._id + "_Ribbon_Home_Alignment_Merge").addClass("e-ss-active");
                        $("#" + xlObj._id + "_Ribbon_Home_Alignment_Mergedrpbtn").addClass("e-ss-active");
                    }
                    else {
                        $("#" + xlObj._id + "_Ribbon_Home_Alignment_Merge").removeClass("e-ss-active");
                        $("#" + xlObj._id + "_Ribbon_Home_Alignment_Mergedrpbtn").removeClass("e-ss-active");
                    }
                    if (["date"].indexOf(type) > -1)
                        type = "custom";
                    if (type) {
                        index = -1;
                        for (i = 0, len = this._numberFormat.length; i < len; i++) {
                            if (type === this._numberFormat[i].value.toLowerCase()) {
                                index = i;
                                break;
                            }
                        }
                    }
                    if (!ej.isNullOrUndefined(cfObj)) {
                        cfObj._initValue = true;
                        index > -1 ? cfObj.option({ selectedItemIndex: index }) : (!ej.isNullOrUndefined(cfObj.selectedIndexValue) && cfObj.selectedIndexValue != 0 && cfObj.option({ selectedItemIndex: 0 }));
                        cfObj._initValue = false;
                    }
                    if (style) {
                        index = -1;
                        if (!ej.isNullOrUndefined(style["font-size"])) {
                            for (i = 0, len = this._fontSize.length; i < len; i++) {
                                if (style["font-size"] === this._fontSize[i].value) {
                                    index = i;
                                    break;
                                }
                            }
                        }
                        if (!ej.isNullOrUndefined(fsObj)) {
                            fsObj._initValue = true;
                            index > -1 ? (fsObj.option({ selectedItemIndex: index }) || (index = -1)) : (!ej.isNullOrUndefined(fsObj.selectedIndexValue) && fsObj.selectedIndexValue != 3 && fsObj.option({ selectedItemIndex: 3 }));
                            fsObj._initValue = false;
                            index = -1
                            if (!ej.isNullOrUndefined(style["font-family"])) {
                                for (i = 0, len = this._fontFamily.length; i < len; i++) {
                                    if (style["font-family"] === this._fontFamily[i].text.toLowerCase()) {
                                        index = i;
                                        break;
                                    }
                                }
                            }

                        }
                        if (!ej.isNullOrUndefined(ffObj)) {
                            ffObj._initValue = true;
                            index > -1 ? ffObj.option({ selectedItemIndex: index }) : (!ej.isNullOrUndefined(ffObj.selectedIndexValue) && ffObj.selectedIndexValue != 6 && ffObj.option({ selectedItemIndex: 6 }));
                            ffObj._initValue = false;
                        }
                        if ($("#" + xlObj._id + "_Ribbon_Home_Font_Bold").length)
                            style["font-weight"] == "bold" ? $("#" + xlObj._id + "_Ribbon_Home_Font_Bold").data("ejToggleButton").option("toggleState", true) : $("#" + xlObj._id + "_Ribbon_Home_Font_Bold").data("ejToggleButton").option("toggleState", false);
                        if ($("#" + xlObj._id + "_Ribbon_Home_Font_Italic").length)
                            style["font-style"] == "italic" ? $("#" + xlObj._id + "_Ribbon_Home_Font_Italic").data("ejToggleButton").option("toggleState", true) : $("#" + xlObj._id + "_Ribbon_Home_Font_Italic").data("ejToggleButton").option("toggleState", false);
                        style["text-decoration"] = style["text-decoration"] || "";
                        if ($("#" + xlObj._id + "_Ribbon_Home_Font_Underline").length)
                            $("#" + xlObj._id + "_Ribbon_Home_Font_Underline").data("ejToggleButton").option("toggleState", style["text-decoration"].indexOf("underline") !== -1);
                        if ($("#" + xlObj._id + "_Ribbon_Home_Font_StrikeThrough").length)
                            $("#" + xlObj._id + "_Ribbon_Home_Font_StrikeThrough").data("ejToggleButton").option("toggleState", style["text-decoration"].indexOf("line-through") !== -1);
                        this._tglAlignBtn($(xlObj.element).find(".e-text-align"), style, "text-align");
                        isVertical = this._tglAlignBtn($(xlObj.element).find(".e-vertical-align"), style, "vertical-align").isVertical;
                        if (!isVertical) {
                            tgleBtnElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Home_Alignment_BottomAlign");
                            if (tgleBtnElem.length) {
                                tgleBtnElem.data("ejToggleButton").option("toggleState", true)
                                tgleBtnElem.addClass("e-vertical-align");
                            }
                        }
                        if (xlObj.getSheetElement(sheetIdx).find(".e-ss-activeimg").length > 0) {
                            tgleBtnElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Home_Alignment_Merge");
                            tgleBtnElem.length && tgleBtnElem.data('ejSplitButton').option("enabled", false);
                        }
                    }
                    break;
                case xlObj._getLocStr("REVIEW"):
                    var lockElem = $("#" + xlObj._id + "_Ribbon_Review_Changes_LockCell");
                    if (xlObj.model.allowLockCell && !(xlObj.XLComment && xlObj.XLComment._isCommentEdit) && !xlObj.XLEdit._isEdit && !xlObj._isSheetRename && lockElem.length) {
                        lockbtObj = lockElem.data("ejToggleButton");
                        isLocked = xlObj.XLEdit.getPropertyValue(actSheet._activeCell.rowIndex, actSheet._activeCell.colIndex, "isLocked");
                        xlObj.isUndefined(isLocked) && (isLocked = false)
                        lockbtObj.option("toggleState", isLocked);
                        $("#" + xlObj._id + "_Ribbon_Review_Changes_ProtectSheet").length && $("#" + xlObj._id + "_Ribbon_Review_Changes_ProtectSheet").data("ejToggleButton").option("toggleState", actSheet.isSheetProtected);
                        if (!actSheet.isSheetProtected)
                            lockbtObj.enable();
                        else
                            lockbtObj.disable();
                    }
                    if (!actSheet.isSheetProtected || !xlObj.model.allowLockCell) {
                        if ((xlObj.model.allowComments && !xlObj.XLComment._isCommentEdit) && !xlObj.XLEdit._isEdit && !xlObj._isSheetRename)
                            xlObj.XLComment._updateCmntRibIcons(xlObj.getActiveCell());
                    }
                    break;
            }
            if (xlObj.model.allowLockCell && !actSheet.isSheetProtected && xlObj.model.allowComments && !xlObj.XLComment._isCommentEdit && !xlObj._isSheetRename)
                this._refreshRibbonIcons(tabName);
            if (xlObj.model.isReadOnly)
                xlObj._readOnly();
        },

        _tglAlignBtn: function (element, style, elemId) {
            var isVertical = false, tgleBtnElem, xlObj = this.XLObj;
            if (!ej.isNullOrUndefined(element[0])) {
                tgleBtnElem = xlObj.element.find("#" + element[0].id);
                tgleBtnElem.length && tgleBtnElem.data("ejToggleButton").option("toggleState", false);
                element.removeClass("e-" + elemId);
            }
            if (!ej.isNullOrUndefined(style[elemId])) {
                if (elemId === "vertical-align")
                    tgleBtnElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Home_Alignment_" + style[elemId].charAt(0).toUpperCase() + style[elemId].slice(1) + "Align");
                else
                    tgleBtnElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Home_Alignment_Align" + style[elemId].charAt(0).toUpperCase() + style[elemId].slice(1));
                if (tgleBtnElem.length) {
                    tgleBtnElem.data("ejToggleButton").option("toggleState", true);
                    tgleBtnElem.addClass("e-" + elemId);
                }
                if (elemId === "vertical-align")
                    isVertical = true;
            }
            return { isVertical: isVertical };
        },

        _disableButtons: function (idCollection, type) {
            var i, index = -1, len, elem, xlObj = this.XLObj;
            for (i = 0, len = idCollection.length; i < len; i++) {
                if (xlObj.model.allowLockCell)
                    if (!xlObj.XLEdit._isEdit && !xlObj._isSheetRename && xlObj.getSheet(xlObj.getActiveSheetIndex()).isSheetProtected)
                        index = this._protectStateBtnIds.indexOf(idCollection[i]);
                if (index === -1) {
                    elem = xlObj.element.find("#" + xlObj._id + "_Ribbon_" + idCollection[i]);
                    elem.length && !ej.isNullOrUndefined(elem.data(type)) && elem.data(type).disable();
                }
            }
        },

        _enableButtons: function (idCollection, type) {
            var i, index = 0, len, elem, xlObj = this.XLObj;
            for (i = 0, len = idCollection.length; i < len; i++) {
                if (xlObj.model.allowLockCell && !xlObj._isSheetRename && xlObj.getSheet(xlObj.getActiveSheetIndex()).isSheetProtected)
                    index = this._protectStateBtnIds.indexOf(idCollection[i]);
                if (index > -1) {
                    elem = xlObj.element.find("#" + xlObj._id + "_Ribbon_" + idCollection[i]);
                    elem.length && !ej.isNullOrUndefined(elem.data(type)) && elem.data(type).enable();
                }
            }
        },

        _disableInputs: function (idColl, disable) {
            for (var i = 0, len = idColl.length; i < len; i++)
                $("#" + this.XLObj._id + "_" + idColl[i]).attr("disabled", disable);
        },

        _enableRibbonIcons: function (rbnActTabIndex) {
            if (!this.XLObj.model.showRibbon)
                return;
            var index, xlObj = this.XLObj, rObj = $("#" + xlObj._id + "_Ribbon").data("ejRibbon"), sheetIdx = xlObj.getActiveSheetIndex(), filterColl = xlObj.getSheet(sheetIdx)._filterColl, filterKeyCol, i, j, len, fKeylen;
            index = rbnActTabIndex ? rbnActTabIndex : rObj.model.selectedItemIndex;
            switch (rObj.getTabText(index)) {
                case xlObj._getLocStr("HOME"):
                    this._enableButtons(this._homeBtnIds, "ejButton");
                    this._enableButtons(this._homeSptBtnIds, "ejSplitButton");
                    this._enableButtons(this._homeToggleBtnIds, "ejToggleButton");
                    this._enableButtons(this._homeDdIds, "ejDropDownList");
                    this._enableButtons(this._homeCpIds, "ejColorPicker");
                    xlObj._removeClass(rObj.element.find("#" + rObj._id + "_Number_e-groupexpander")[0], "e-disable");
                    break;
                case xlObj._getLocStr("INSERT"):
                    this._enableButtons(this._insertBtnIds, "ejButton");
                    this._enableButtons(this._insertSptBtnIds, "ejSplitButton");
                    break;
                case xlObj._getLocStr("DATATAB"):
                    this._enableButtons(this._dataBtnIds, "ejButton");
                    this._enableButtons(this._dataSptBtnIds, "ejSplitButton");
                    break;
                case xlObj._getLocStr("PAGELAYOUT"):
                    this._enableButtons(this._pageLayBtnIds, "ejButton");
                    this._enableButtons(this._pageLaySptBtnIds, "ejSplitButton");
                    this._enableButtons(this._pageLayChckBxIds, "ejCheckBox");
                    $("#" + rObj._id + "_pagesetup_viewhdrlbl").eq(0).removeClass("e-disable");
                    $("#" + rObj._id + "_pagesetup_viewgrdlnlbl").eq(0).removeClass("e-disable");
                    break;
                case xlObj._getLocStr("REVIEW"):
                    xlObj.model.allowComments && !xlObj.XLComment._isCommentEdit && xlObj.XLComment._updateCmntRibIcons();
                    this._enableButtons(this._reviewTglBtnIds, "ejToggleButton");
                    break;
                case xlObj._getLocStr("OTHERS"):
                    this._enableButtons(this._othersBtnIds, "ejButton");
                    this._enableButtons(this._othersSptBtnIds, "ejSplitButton");
                    break;
                case xlObj._getLocStr("Design"):
                    this._enableButtons(this._contextualBtnIds, "ejButton");
                    this._enableButtons(this._contextualCheckBoxIds, "ejCheckBox");
                    this._disableInputs(this._contextualInputIds, false);
                    break;
            }
            if (!xlObj.XLClipboard._copyBackup.cells && !xlObj.XLClipboard._copyBackup.elem)
                (xlObj.XLRibbon._disableButtons(["Home_Clipboard_Paste"], "ejButton") || xlObj.XLRibbon._disableButtons(["Home_Clipboard_PasteOptions"], "ejSplitButton"));
            if ($.isEmptyObject(filterColl))
                this._disableButtons(["Data_SortFilter_ClearFilter"], "ejButton");
            fKeylen = xlObj.getObjectKeys(filterColl);
            for (i = 0, len = fKeylen.length; i < len; i++) {
                filterKeyCol = xlObj.getObjectKeys(filterColl[fKeylen[i]]);
                for (j = 0, len = filterKeyCol.length; j < len; j++) {
                    if (filterColl[fKeylen[i]][filterKeyCol[j]].status.indexOf("e-ssfiltered") < 0)
                        this._disableButtons(["Data_SortFilter_ClearFilter"], "ejButton");
                }
            }
            xlObj._updateUndoRedoIcons();
        },

        _disableRibbonIcons: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.showRibbon)
                return;
            var rObj = $("#" + xlObj._id + "_Ribbon").data("ejRibbon");
            switch (rObj.getTabText(rObj.model.selectedItemIndex)) {
                case xlObj._getLocStr("HOME"):
                    this._disableButtons(this._homeBtnIds, "ejButton");
                    this._disableButtons(this._homeSptBtnIds, "ejSplitButton");
                    this._disableButtons(this._homeToggleBtnIds, "ejToggleButton");
                    this._disableButtons(this._homeDdIds, "ejDropDownList");
                    this._disableButtons(this._homeCpIds, "ejColorPicker");
                    xlObj.addClass(rObj.element.find("#" + rObj._id + "_Number_e-groupexpander"), "e-disable");
                    break;
                case xlObj._getLocStr("INSERT"):
                    this._disableButtons(this._insertBtnIds, "ejButton");
                    this._disableButtons(this._insertSptBtnIds, "ejSplitButton");
                    break;
                case xlObj._getLocStr("DATATAB"):
                    this._disableButtons(this._dataBtnIds, "ejButton");
                    this._disableButtons(this._dataSptBtnIds, "ejSplitButton");
                    break;
                case xlObj._getLocStr("PAGELAYOUT"):
                    this._disableButtons(this._pageLayBtnIds, "ejButton");
                    this._disableButtons(this._pageLaySptBtnIds, "ejSplitButton");
                    this._disableButtons(this._pageLayChckBxIds, "ejCheckBox");
                    $("#" + rObj._id + "_pagesetup_viewhdrlbl:eq(0)").addClass("e-disable");
                    $("#" + rObj._id + "_pagesetup_viewgrdlnlbl:eq(0)").addClass("e-disable");
                    break;
                case xlObj._getLocStr("REVIEW"):
                    this._disableButtons(this._cmntBtnIds, "ejButton");
                    this._disableButtons(this._cmntTglBtnIds, "ejToggleButton");
                    this._disableButtons(this._reviewTglBtnIds, "ejToggleButton");
                    break;
                case xlObj._getLocStr("OTHERS"):
                    this._disableButtons(this._othersBtnIds, "ejButton");
                    this._disableButtons(this._othersSptBtnIds, "ejSplitButton");
                    break;
                case this.XLObj._getLocStr("Design"):
                    this._disableButtons(this._contextualBtnIds, "ejButton");
                    this._disableButtons(this._contextualCheckBoxIds, "ejCheckBox");
                    this._disableInputs(this._contextualInputIds, true);
                    break;
            }
        },

        _capitalize: function (s) {
            return s[0].toUpperCase() + s.slice(1);
        },

        _generateToggleBtn: function (id, text, contentType, prefixIcon, title, width, height, content, isSeparator, cssClass, imagePosition, actText, actImg, togggleState, shortCuts) {
            var conText = content instanceof Array ? this.XLObj._getLocStr(content[0]) + "<br /><br />" + this.XLObj._getLocStr(content[1]) : this.XLObj._getLocStr(content);
            return {
                id: id,
                toolTip: this.XLObj._getLocStr(text),
                type: ej.Ribbon.type.toggleButton,
                enableSeparator: isSeparator,
                toggleButtonSettings: {
                    width: width,
                    height: height,
                    contentType: contentType,
                    cssClass: cssClass,
                    toggleState: togggleState,
                    defaultPrefixIcon: prefixIcon,
                    activePrefixIcon: actImg ? actImg : prefixIcon,
                    defaultText: this.XLObj._getLocStr(text),
                    activeText: actText ? this.XLObj._getLocStr(actText) : this.XLObj._getLocStr(text),
                    imagePosition: imagePosition == "imagetop" ? ej.ImagePosition.ImageTop : ej.ImagePosition.ImageLeft,
                    click: this._ribbonClickHandler
                },
                customToolTip:
                {
                    title: shortCuts ? this.XLObj._getLocStr(title) + shortCuts : this.XLObj._getLocStr(title),
                    content: "<h6>" + conText + "</h6>"
                }
            };
        },

        _generateBtn: function (id, text, contentType, prefixIcon, width, height, title, content, isSeparator, imagePosition, cssClass, shortCuts) {
            var conText = content instanceof Array ? this.XLObj._getLocStr(content[0]) + "<br /><br />" + this.XLObj._getLocStr(content[1]) : this.XLObj._getLocStr(content);
            return {
                id: id,
                text: this.XLObj._getLocStr(text),
                toolTip: this.XLObj._getLocStr(text),
                cssClass: cssClass,
                enableSeparator: isSeparator,
                buttonSettings: {
                    type: ej.Ribbon.type.button,
                    contentType: contentType,
                    width: width,
                    height: height,
                    imagePosition: imagePosition == "imagetop" ? ej.ImagePosition.ImageTop : ej.ImagePosition.ImageLeft,
                    prefixIcon: prefixIcon,
                    click: this._ribbonClickHandler
                },
                customToolTip:
                {
                    title: shortCuts ? this.XLObj._getLocStr(title) + shortCuts : this.XLObj._getLocStr(title),
                    content: "<h6>" + conText + "</h6>",
                }
            };
        },

        _generateDD: function (id, text, data, value, width, height, title, content) {
            return {
                id: id,
                text: this.XLObj._getLocStr(text),
                toolTip: this.XLObj._getLocStr(text),
                type: ej.Ribbon.type.dropDownList,
                dropdownSettings: {
                    dataSource: data,
                    value: value,
                    change: this._ribbonClickHandler,
                    width: width,
                    height: height - 1,
                    cssClass: "e-" + this.XLObj._id + "-ddl"
                },
                customToolTip:
                {
                    title: this.XLObj._getLocStr(title),
                    content: "<h6>" + this.XLObj._getLocStr(content) + "</h6>"
                }
            };
        },

        _generateCustomControl: function (contentId, toolTip, title, content) {
            return {
                type: ej.Ribbon.type.custom,
                contentID: contentId,
                toolTip: this.XLObj._getLocStr(toolTip),
                click: this._ribbonClickHandler,
                change: this._ribbonClickHandler,
                customToolTip:
                {
                    title: this.XLObj._getLocStr(title),
                    content: "<h6>" + this.XLObj._getLocStr(content) + "</h6>"
                }
            };
        },

        _generateSplitBtn: function (id, text, contentType, targetId, fields, prefixIcon, isSeparator, width, height, arrowPos, imagePosition, btnMode, cssClass, title, content, shortCuts) {
            var conText = content instanceof Array ? this.XLObj._getLocStr(content[0]) + "<br /><br />" + this.XLObj._getLocStr(content[1]) : this.XLObj._getLocStr(content);
            return {
                id: id,
                toolTip: this.XLObj._getLocStr(text),
                text: this.XLObj._getLocStr(text),
                type: ej.Ribbon.type.splitButton,
                cssClass: cssClass + " e-" + this.XLObj._id + "-spltbtn",
                enableSeparator: isSeparator,
                splitButtonSettings: {
                    contentType: contentType,
                    targetID: targetId,
                    arrowPosition: arrowPos == "bottom" ? ej.ArrowPosition.Bottom : ej.ArrowPosition.Right,
                    imagePosition: imagePosition == "imagetop" ? ej.ImagePosition.ImageTop : ej.ImagePosition.ImageLeft,
                    buttonMode: btnMode == "dropdown" ? ej.ButtonMode.Dropdown : ej.ButtonMode.Split,
                    fields: fields,
                    prefixIcon: prefixIcon,
                    click: this._ribbonClickHandler,
                    itemSelected: this._ribbonClickHandler,
                    height: height,
                    width: width,
                    beforeOpen: $.proxy(this._splitBeforeOpen, this, id),
                    itemMouseOver: $.proxy(this._splitItemMouseOver, this),
                    close: (id === "Home_Font_Border" || "Others_Cells_InsertCellOptions" || id === "Others_Cells_DeleteCellOptions" || id === "Data_DataTools_DataValidationOptions" || id === "Home_Clipboard_PasteOptions") ? $.proxy(this._splitbtnClose, this, id) : null,
                },
                customToolTip:
                {
                    title: shortCuts ? this.XLObj._getLocStr(title) + shortCuts : this.XLObj._getLocStr(title),
                    content: "<h6>" + conText + "</h6>"
                }
            };
        },

        _splitItemMouseOver: function (args) {
            var xlObj = this.XLObj, mainDiv, htmlStr = "", dbColors = ['b', 'g', 'r', 'o', 'lb', 'p'], $elem = $(args.element), colors, colorsTitles;
            var title = ["Blue", "Green", "Red", "Orange", "Light blue", "Purple"];
            var argsElem = args.element.childNodes[1];
            if (args.ID.indexOf("_DataBars") > -1 && !$elem.find('.e-ss-databars-div').length) {
                argsElem.childNodes.length && (argsElem.removeChild(argsElem.childNodes[0]));
                $elem.children().find('.e-ss-databars-div').remove();
                var mainDiv = ej.buildTag('div#' + xlObj._id + '_databars_1.e-ss-databars-div');
                var firstDiv = ej.buildTag('div#' + xlObj._id + '_databars_2');
                var secondDiv = ej.buildTag('div#' + xlObj._id + '_databars_3');
                for (var i = 0; i < dbColors.length; i++) {
                    htmlStr += String.format('<span id="{0}" class="e-ss-{0} e-ss-databar-span" title= "{1}"></span>', dbColors[i] + 'databar', title[i] + " Data Bar");
                    if (i == (dbColors.length / 2) - 1) {
                        $(firstDiv).append(htmlStr);
                        htmlStr = "";
                    }
                    if (i == dbColors.length - 1) {
                        $(secondDiv).append(htmlStr);
                        htmlStr = "";
                    }
                }
                $(mainDiv).append(firstDiv).append(secondDiv);
                $elem.children('ul').append($(mainDiv));
                if (!$._data($('#' + xlObj._id + '_databars_1')[0], 'events'))
                    xlObj._on($('#' + xlObj._id + '_databars_1'), "click", xlObj._databarItemClick);
            } else if (args.ID.indexOf("_ColorScales") > -1 && !$elem.find('.e-ss-colorscales-div').length) {
                colors = ["gyr", "ryg", "gwr", "rwg", "bwr", "rwb", "wr", "rw", "gw", "wg", "gy", "yg"];
                colorsTitles = ["Green - Yellow -Red", "Red - Yellow - Green", "Green - White - Red", "Red - White - Green", "Blue - White - Red",
                    "Red - White - Blue", "White - Red", "Red - White", "Green - White", "White - Green", "Green - Yellow", "Yellow - Green"];
                argsElem.childNodes.length && (argsElem.removeChild(argsElem.childNodes[0]));
                $elem.children().find('.e-ss-colorscales-div').remove();
                var mainCDiv = ej.buildTag('div#' + xlObj._id + '_colorscales_1.e-ss-colorscales-div');
                var firstCDiv = ej.buildTag('div#' + xlObj._id + '_colorscales_2');
                var secondCDiv = ej.buildTag('div#' + xlObj._id + '_colorscales_3');
                var thirdCDiv = ej.buildTag('div#' + xlObj._id + '_colorscales_4');
                for (var i = 0; i < colors.length; i++) {
                    htmlStr += String.format('<span id="{0}" class="e-ss-{0} e-ss-colorscale-span" title= "{1}"></span>', colors[i] + 'colorscale', colorsTitles[i] + " Color Scale");
                    if (i == (colors.length / 3) - 1) {
                        $(firstCDiv).append(htmlStr);
                        htmlStr = "";
                    }
                    if (i == (colors.length / 2) + 1) {
                        $(secondCDiv).append(htmlStr);
                        htmlStr = "";
                    }
                    if (i == colors.length - 1) {
                        $(thirdCDiv).append(htmlStr);
                        htmlStr = "";
                    }
                }
                $(mainCDiv).append(firstCDiv).append(secondCDiv).append(thirdCDiv);
                $elem.children('ul').append($(mainCDiv));
                if (!$._data($('#' + xlObj._id + '_colorscales_1')[0], 'events'))
                    xlObj._on($('#' + xlObj._id + '_colorscales_1'), "click", xlObj._databarItemClick);
            } else if (args.ID.indexOf("_IconSets") > -1 && !$elem.find('.e-ss-iconsets-div').length) {
                var htmlStr = "";
                argsElem.childNodes.length && (argsElem.removeChild(argsElem.childNodes[0]));
                $elem.children().find('.e-ss-iconsets-div').remove();
                var mainIDiv = ej.buildTag('div#' + xlObj._id + '_iconsets_1.e-ss-iconsets-div');
                var directionalDiv = ej.buildTag('div#' + xlObj._id + '_iconsets_2');
                var shapesDiv = ej.buildTag('div#' + xlObj._id + '_iconsets_3');
                var indicatorsDiv = ej.buildTag('div#' + xlObj._id + '_iconsets_4');
                var ratingsDiv = ej.buildTag('div#' + xlObj._id + '_iconsets_5');
                
                var directionaltile = '<div class="e-ss-iconset-title"> <span>' + xlObj._getLocStr("Directional") + '</span></div>';
                directionalDiv.append('<div id="threecolorarrows" class= "e-ss-iconsets-wrapper" title= "3 Arrows (Colored)"><span class="e-ss-greenarrow e-ss-iconset-span"></span><span class="e-ss-yellowarrow e-ss-iconset-span"></span><span class="e-ss-redarrow e-ss-iconset-span"></span></div>');
                directionalDiv.append('<div id="threegreyarrows" class= "e-ss-iconsets-wrapper" title= "3 Arrows (Gray)"><span class="e-ss-uparrow e-ss-iconset-span"></span><span class="e-ss-midarrow e-ss-iconset-span"></span><span class="e-ss-downarrow e-ss-iconset-span"></span></div>');
                directionalDiv.append('<div id="threetriangles" class= "e-ss-iconsets-wrapper" title= "3 Triangles"><span class="e-ss-uptriangle e-ss-iconset-span"></span><span class="e-ss-midtriangle e-ss-iconset-span"></span><span class="e-ss-downtriangle e-ss-iconset-span"></span></div>');
                
                var shapestile = '<div class="e-ss-iconset-title"> <span>' + xlObj._getLocStr("Shapes") + '</span></div>';
                shapesDiv.append('<div id="threetrafficlights" title= "3 Traffic Lights (Unrimmed)" class= "e-ss-iconsets-wrapper"><span class="e-ss-greencircle e-ss-iconset-span"></span><span class="e-ss-yellowcircle e-ss-iconset-span"></span><span class="e-ss-redcircle e-ss-iconset-span"></span></div>');
                shapesDiv.append('<div id="threetrafficlightsrimmed" title= "3 Traffic Lights (Rimmed)" class= "e-ss-iconsets-wrapper"><span class="e-ss-rimgreencircle e-ss-iconset-span"></span><span class="e-ss-rimyellowcircle e-ss-iconset-span"></span><span class="e-ss-rimredcircle e-ss-iconset-span"></span></div>');
                shapesDiv.append('<div id="threesigns" title= "3 Signs" class= "e-ss-iconsets-wrapper"><span class="e-ss-greencircle e-ss-iconset-span"></span><span class="e-ss-yellowtri e-ss-iconset-span"></span><span class="e-ss-redsquare e-ss-iconset-span"></span></div>');
                
                var indicatorstile = '<div class="e-ss-iconset-title"> <span>' + xlObj._getLocStr("Indicators") + '</span></div>';
                indicatorsDiv.append('<div id="threesymbolescircled" title= "3 Symbols (Circled)" class= "e-ss-iconsets-wrapper"><span class="e-ss-greencircleindi e-ss-iconset-span"></span><span class="e-ss-yellowcircleindi e-ss-iconset-span"></span><span class="e-ss-redcircleindi e-ss-iconset-span"></span></div>');
                indicatorsDiv.append('<div id="threesymbols" title= "3 Symbols (Uncircled)" class= "e-ss-iconsets-wrapper"><span class="e-ss-tick e-ss-iconset-span"></span><span class="e-ss-exclam e-ss-iconset-span"></span><span class="e-ss-cross e-ss-iconset-span"></span></div>');
                indicatorsDiv.append('<div id="threeflags" title= "3 Flags" class= "e-ss-iconsets-wrapper"><span class="e-ss-greenflag e-ss-iconset-span"></span><span class="e-ss-yellowflag e-ss-iconset-span"></span><span class="e-ss-redflag e-ss-iconset-span"></span></div>');
                
                var ratingstile = '<div class="e-ss-iconset-title"> <span>' + xlObj._getLocStr("Ratings") + '</span></div>';
                ratingsDiv.append('<div id="threestars" title= "3 Stars" class= "e-ss-iconsets-wrapper"><span class="e-ss-fullstar e-ss-iconset-span"></span><span class="e-ss-halfstar e-ss-iconset-span"></span><span class="e-ss-drystar e-ss-iconset-span"></span></div>');
               
                mainIDiv.append(directionaltile).append(directionalDiv).append(shapestile).append(shapesDiv).append(indicatorstile).append(indicatorsDiv).append(ratingstile).append(ratingsDiv);
                $elem.children('ul').append($(mainIDiv));
                if (!$._data($('#' + xlObj._id + '_iconsets_2')[0], 'events') && !$._data($('#' + xlObj._id + '_iconsets_3')[0], 'events') && !$._data($('#' + xlObj._id + '_iconsets_4')[0], 'events') && !$._data($('#' + xlObj._id + '_iconsets_5')[0], 'events')) {
                    xlObj._on($('#' + xlObj._id + '_iconsets_2'), "click", xlObj._databarItemClick);
                    xlObj._on($('#' + xlObj._id + '_iconsets_3'), "click", xlObj._databarItemClick);
                    xlObj._on($('#' + xlObj._id + '_iconsets_4'), "click", xlObj._databarItemClick);
                    xlObj._on($('#' + xlObj._id + '_iconsets_5'), "click", xlObj._databarItemClick);
                }
            }
        },

        _splitBeforeOpen: function (id, args) {
            var xlObj = this.XLObj;
            if (id === "Home_Editing_SortFilter")
                this._sfbeforeOpen(args);
            else if (id === "Others_Cells_InsertCellOptions" || id === "Others_Cells_DeleteCellOptions")
                this._insdelbeforOpen(args);
            else if (id === "Others_Window_FreezePanes")
                this._fpbeforeOpen(args);
            else if (id === "ChartDesign_ChartLayouts_AddChartElement")
                this._celementpbeforeOpen(args);
            else if (id === "Data_DataTools_DataValidationOptions" || id === "Home_Clipboard_PasteOptions")
                this._validpasteOpen(args);
            else if (id === "Home_Editing_Clear")
                this._clearbeforeOpen(args);
            else if (id === "Home_Styles_FormatAsTable") {
                var frmtTab = document.getElementById(xlObj._id + "_formatastable");
                if (!frmtTab || frmtTab && !frmtTab.children.length)
                    this._renderFormatAsTable();
                xlObj.XLFormat._resizeFormatTableMenu();
            }
            else if (id === "Home_Styles_CellStyles")
                xlObj.XLFormat._resizeStyleMenu();
            else if (id === "Home_Font_Border") {
                xlObj.XLFormat._resizeBorderMenu(args);
                this._renderBorderCP(args);
                var i, winHght = window.innerHeight, brdrElement = $("#" + this.XLObj._id + "_Ribbon_Home_Font_Border")[0].getBoundingClientRect(), brdrLiElement = $("#" + this.XLObj._id + "_Ribbon_Border"),
                    menuObj = brdrLiElement.data("ejMenu"), customUp = brdrLiElement.find("#" + this.XLObj._id + "_customup")[0], customDown = brdrLiElement.find("#" + this.XLObj._id + "_customdown")[0],
                    licollection = brdrLiElement.children(), len = licollection.length, numItem = Math.round((winHght - (brdrElement.top + brdrElement.height)) / 26);// 26 li element height
                if (len * 26 > winHght - (brdrElement.top + brdrElement.height)) {
                    if (ej.isNullOrUndefined(customUp) && ej.isNullOrUndefined(customDown)) {
                        menuObj.insert([{ id: this.XLObj._id + "_customdown", parentId: null, text: " ", spriteCssClass: 'e-icon e-chevron-down' }], "#" + this.XLObj._id + "_Ribbon_Border");
                        menuObj.insertBefore([{ id: this.XLObj._id + "_customup", parentId: null, text: " ", spriteCssClass: 'e-icon e-chevron-up' }], "#" + this.XLObj._id + "_Ribbon_Border");
                        customUp = brdrLiElement.find("#" + this.XLObj._id + "_customup")[0], customDown = brdrLiElement.find("#" + this.XLObj._id + "_customdown")[0];
                        if (xlObj._browserDetails.name === "msie" && xlObj._browserDetails.version === "8.0") {
                            customUp.attachEvent("onclick", this._menuclick, true);
                            customDown.attachEvent("onclick", this._menuclick, true);
                        }
                        else {
                            customUp.addEventListener("click", this._menuclick, true);
                            customDown.addEventListener("click", this._menuclick, true);
                        }
                        xlObj.addClass(customUp.querySelector("span"), "e-customup");
                        xlObj.addClass(customDown.querySelector("span"), "e-customup")
                    }
                    for (i = 1; i < len - 1; i++)
                        xlObj.addClass(licollection[i], "e-hide");
                    for (i = 0; i < numItem - 2; i++)
                        xlObj._removeClass(licollection[i], "e-hide");
                    menuObj.disableItemByID(customUp.id);
                    menuObj.enableItemByID(customDown.id);
                }
                else if (!ej.isNullOrUndefined(customUp) && !ej.isNullOrUndefined(customDown)) {
                    xlObj.addClass(customUp, "e-hide");
                    xlObj.addClass(customDown, "e-hide");
                }
            }
            else if (id === "Home_Styles_ConditionalFormatting") {
                $("#" + xlObj._id + "_CFormat").width(200);
                xlObj._phoneMode ? $("#" + xlObj._id + "_CFormat").find("ul").addClass("e-adaptive") : $("#" + xlObj._id + "_CFormat").find("ul").removeClass("e-adaptive");
            }
            else if (id == "Others_CalCulation_CalculationOptions") {
                if (xlObj._calcEngine.getCalculatingSuspended()) {
                    $("#" + xlObj._id + "_CalcManual").find("span").addClass("e-ss-calcauto");
                    $("#" + xlObj._id + "_CalcAuto").find("span").removeClass("e-ss-calcauto");
                }
                else {
                    $("#" + xlObj._id + "_CalcAuto").find("span").addClass("e-ss-calcauto");
                    $("#" + xlObj._id + "_CalcManual").find("span").removeClass("e-ss-calcauto");
                }
            }
        },

        _menuclick: function (event) {
            event.stopImmediatePropagation();
            if (event.target) {
                var i, element = event.currentTarget, parentElem = $("#" + element.parentElement.id), liCollection = parentElem.children(), menuObj = parentElem.data("ejMenu"), customUp = parentElem.children()[0], customDown = parentElem.children()[18],
                    visibleItems = $("#" + element.parentElement.id).find("li:visible"), lastChild = visibleItems[visibleItems.length - 2], lastChildIdx = $(lastChild).index(), firstChild = visibleItems[1], firstChildIdx = $(firstChild).index();
                if (event.currentTarget.id.indexOf("customup") > 0) {
                    if (firstChild.id != "bottom") {
                        for (i = 1; i < 3; i++) {
                            visibleItems.eq(visibleItems.length - (i + 1)).addClass("e-hide");
                            liCollection.eq(firstChildIdx - i).removeClass("e-hide");
                        }
                        if ($(customDown).hasClass("e-disable-item"))
                            menuObj.enableItemByID(customDown.id);
                    }
                    else if (firstChild.id == "bottom")
                        menuObj.disableItemByID(customUp.id);
                }
                else {
                    if (lastChild.id.indexOf("borderstyle") == -1) {
                        for (i = 1; i < 3; i++) {
                            visibleItems.eq(i).addClass("e-hide");
                            liCollection.eq(lastChildIdx + i).removeClass("e-hide");
                        }
                        if ($(customUp).hasClass("e-disable-item"))
                            menuObj.enableItemByID(customUp.id);
                    }
                    else if (lastChild.id.indexOf("borderstyle") > -1)
                        menuObj.disableItemByID(customDown.id);
                }
            }
        },

        _renderBorderCP: function () {
            var xlId = this.XLObj._id, fontStr = xlId + "_Ribbon_Home_Font_", borderCP = $("#" + fontStr + "BorderColor").data("ejColorPicker");
            if (!borderCP) {
                $("#" + fontStr + "BorderColor").ejColorPicker({ modelType: "palette", presetType: "basic", cssClass: "e-ss-colorpicker e-ss-menuclrpkr", change: this._ribbonClickHandler });
                $("#" + fontStr + "BorderColor").data("ejColorPicker").show();
                $("#" + fontStr + "BorderColorWrapper").hide();
                $("#" + xlId + "_bordercolor ul li").find("a").remove();
                $("#" + xlId + "_bordercolor ul li").append($("#" + fontStr + "BorderColor_popup"));
                $("#" + fontStr + "BorderColor_popup").css({ "display": "block" });
            }
        },

        _splitbtnClose: function (id) {
            if (id == "Home_Font_Border") {
                var liElem = $("#" + this.XLObj._id + "_Ribbon_Border"), menuObj = liElem.data("ejMenu"), lielem = liElem.children(), len = liElem.children().length;
                lielem.removeClass("e-hide");
                if ($(lielem[0]).hasClass("e-disable-item"))
                    menuObj.enableItemByID(lielem[0].id);
                if ($(lielem[len - 1]).hasClass("e-disable-item"))
                    menuObj.enableItemByID(lielem[len - 1].id);
            }
            else
                this.XLObj.element.find("#" + this.XLObj._id + "_Ribbon_" + id).parents("div.e-controlpadding").siblings().children("button").removeClass("e-active");
        },

        _fpbeforeOpen: function () {
            var xlObj = this.XLObj, fpaneMenu = $("#" + xlObj._id + "_Ribbon_FPane").data("ejMenu"), dataSource = fpaneMenu.model.fields.dataSource.slice(0);
            if (xlObj.getSheet()._isFreezed) {
                dataSource[0].id = "UnFreezePanes";
                dataSource[0].text = xlObj._getLocStr("UnFreezePanes");
            }
            else {
                dataSource[0].id = "freezePanes";
                dataSource[0].text = xlObj._getLocStr("FreezePanes");
            }
            fpaneMenu.option("fields", { id: "id", dataSource: dataSource, parentId: "parentId" });
        },

        _sfbeforeOpen: function () {
            var xlObj = this.XLObj, menuObj = $("#" + xlObj._id + "_Ribbon_SortFilter").data("ejMenu");
            (!xlObj.model.allowFiltering) && menuObj.disableItemByID("Ribbon_Filter");
            if (!xlObj.model.allowSorting) {
                menuObj.disableItemByID("Ribbon_SortAtoZ");
                menuObj.disableItemByID("Ribbon_SortZtoA");
            }
            this._refreshRibbonIcons();
            this._isFilterSelect.isFiltered ? menuObj.enableItemByID("Ribbon_ClearFilter") : menuObj.disableItemByID("Ribbon_ClearFilter");
            this._isDirtySelect && menuObj.disableItemByID("Ribbon_Filter");
        },

        _validpasteOpen: function (args) {
            var xlObj = this.XLObj, pasteMenuInst;
            if (args.model.targetID === xlObj._id + "_Ribbon_Validation")
                xlObj.element.find("#" + xlObj._id + "_Ribbon_Data_DataTools_DataValidation").addClass("e-active");
            else {
                pasteMenuInst = $("#" + xlObj._id + "_Ribbon_Paste").data("ejMenu");
                xlObj.element.find("#" + xlObj._id + "_Ribbon_Home_Clipboard_Paste").addClass("e-active");
                (xlObj.isPasteValuesOnly) ? pasteMenuInst.disableItemByID("PasteSpecial") : pasteMenuInst.enableItemByID("PasteSpecial");
            }
        },

        _insdelbeforOpen: function (args) {
            var xlObj = this.XLObj, insMenuObj = $("#" + xlObj._id + "_Ribbon_Ins").data("ejMenu"), delMenuObj = $("#" + xlObj._id + "_Ribbon_Del").data("ejMenu"),
                delids = ["DeleteCells", "DeleteSheetRows", "DeleteSheetColumns"], insids = ["InsertCells", "InsertSheetRows", "InsertSheetColumns"], insDelRows, insDelCols, insDelSheet;
            if (args.model.targetID === xlObj._id + "_Ribbon_Ins")
                xlObj.element.find("#" + xlObj._id + "_Ribbon_Others_Cells_InsertCell").addClass("e-active");
            else
                xlObj.element.find("#" + xlObj._id + "_Ribbon_Others_Cells_DeleteCell").addClass("e-active");
            insDelRows = xlObj.element.find(".e-colselected").length ? "disableItemByID" : "enableItemByID";
            insMenuObj && insMenuObj[insDelRows]("InsertSheetRows");
            delMenuObj && delMenuObj[insDelRows]("DeleteSheetRows");
            insDelCols = xlObj.element.find(".e-rowselected").length ? "disableItemByID" : "enableItemByID";
            insMenuObj && insMenuObj[insDelCols]("InsertSheetColumns");
            delMenuObj && delMenuObj[insDelCols]("DeleteSheetColumns");
            insDelSheet = xlObj.model.exportSettings.password ? "disableItemByID" : "enableItemByID";
            insMenuObj && insMenuObj[insDelSheet]("InsertSheet");
            delMenuObj && delMenuObj[insDelSheet]("DeleteSheet");
            if (xlObj.getSheet(xlObj.getActiveSheetIndex()).isSheetProtected) {
                for (var i = 0; i < 3; i++) {
                    delMenuObj && delMenuObj.disableItemByID(delids[i]);
                    insMenuObj && insMenuObj.disableItemByID(insids[i]);
                }
            }
            else {
                delMenuObj && delMenuObj.enableItemByID("DeleteCells");
                insMenuObj && insMenuObj.enableItemByID("InsertCells");
            }
        },

        _celementpbeforeOpen: function () {
            var xlObj = this.XLObj, chartEle = $("#" + xlObj._id + "_chart").val(), chType = xlObj.XLChart._getShapeObj(chartEle, "chart").type,
                cEleMenuObj = $("#" + xlObj._id + "_Ribbon_CElement").data("ejMenu"), pieChart = ["Axes", "AxisTitle", "Gridline"],
                radarChart = ["AxisTitle", "PMinorH", "PMinorV"], menuEle = ["Axes", "AxisTitle", "Gridline", "PMinorH", "PMinorV"], i, len = 0;
            if (cEleMenuObj)
                return false;
            for (i = 0, len = menuEle.length; i < len; i++)
                cEleMenuObj.enableItemByID(menuEle[i]);
            if (chType === "pie" || chType === "doughnut") {
                for (i = 0, len = pieChart.length; i < len; i++)
                    cEleMenuObj.disableItemByID(pieChart[i]);
            }
            else if (chType === "radar") {
                for (i = 0, len = radarChart.length; i < len; i++)
                    cEleMenuObj.disableItemByID(radarChart[i]);
            }
        },

        _clearbeforeOpen: function () {
            var xlObj = this.XLObj, i = 0, clearMenuObj = $("#" + xlObj._id + "_Ribbon_Clear").data("ejMenu"), eleId = ["Clear_Hyperlinks", "Clear_Comments"];
            if (xlObj.model.allowLockCell) {
                if (xlObj.getSheet(xlObj.getActiveSheetIndex()).isSheetProtected) {
                    while (i < eleId.length) {
                        clearMenuObj.disableItemByID(eleId[i]);
                        i++;
                    }
                }
                else {
                    while (i < eleId.length) {
                        clearMenuObj.enableItemByID(eleId[i]);
                        i++;
                    }
                }
            }

        },

        _changeClrFltrStatus: function (obj, control) {
            var xlObj = this.XLObj;
            if (xlObj.isUndefined(obj))
                return;

            if (this._isFilterSelect.isFiltered) {
                if (control === "menu")
                    (obj._id.indexOf("Ribbon") > -1) ? obj.enableItemByID("Ribbon_ClearFilter") : obj.enableItemByID("ClearFilter"); else
                    obj.enable();
            }
            else {
                if (control === "menu")
                    (obj._id.indexOf("Ribbon") > -1) ? obj.disableItemByID("Ribbon_ClearFilter") : obj.disableItemByID("ClearFilter");
                else
                    obj.disable();
            }
        },

        _onControlCreated: function () {
            this._ctrlCreated = true;
            if (!this.XLObj.model.ribbonSettings.enableOnDemand) {
                this._homeTabControls();
                this._othersTabControls();
                this._pageTabControls();
                this._appTabControls();
            }
            this._hideTabs();
            //Css update
            this._ctrlCreated = false;
        },

        _appTabControls: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, bsBtnOpt = { height: 158, width: 163, text: xlObj._getLocStr("BlankWorkbook"), contentType: "textandimage", imagePosition: "imagetop", prefixIcon: "e-ss-blank", click: $.proxy(this._onBackStageItemClick, this) };
            $("#" + xlId + "_bstab_new_blank").ejButton(bsBtnOpt);
            delete bsBtnOpt.text;
            bsBtnOpt.height = bsBtnOpt.width = 72;
            bsBtnOpt.prefixIcon = "e-icon e-ss-exportxl";
            $("#" + xlId + "_bstab_saveas_excel").ejButton(bsBtnOpt);
            bsBtnOpt.prefixIcon = "e-icon e-ss-exportcsv";
            $("#" + xlId + "_bstab_saveas_csv").ejButton(bsBtnOpt);
            bsBtnOpt.prefixIcon = "e-icon e-ss-exportpdf";
            $("#" + xlId + "_bstab_saveas_pdf").ejButton(bsBtnOpt);
            bsBtnOpt.prefixIcon = "e-icon e-ss-print";
            $("#" + xlId + "_bstab_print_sheet").ejButton(bsBtnOpt);
            bsBtnOpt.prefixIcon = "e-icon e-ss-printselected";
            $("#" + xlId + "_bstab_print_selected").ejButton(bsBtnOpt);
        },
        _othersTabControls: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowInsert && xlObj.model.scrollSettings.allowScrolling) {
                this._disableButtons(["Others_Cells_InsertCellOptions"], "ejSplitButton");
                this._disableButtons(["Others_Cells_InsertCell"], "ejButton");
            }
            if (!xlObj.model.allowDelete && xlObj.model.scrollSettings.allowScrolling) {
                this._disableButtons(["Others_Cells_DeleteCellOptions"], "ejSplitButton");
                this._disableButtons(["Others_Cells_DeleteCell"], "ejButton");
            }
        },

        _pageTabControls: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, rbnId = xlId + "_Ribbon_pagesetup", pageStr = xlId + "_Ribbon_PageLayout_Show_";
            $("#" + rbnId + "left").show();
            $("#" + pageStr + "Headings").ejCheckBox({ change: this._ribbonClickHandler, checked: true });
            $("#" + pageStr + "Gridlines").ejCheckBox({ change: this._ribbonClickHandler, checked: true });
            $("#" + rbnId + "_viewhdrlbl").text(xlObj._getLocStr("Heading"));
            $("#" + rbnId + "_viewgrdlnlbl").text(xlObj._getLocStr("Gridlines"));
        },

        _homeTabControls: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, rbnId = xlId + "_Ribbon_", fontStr = rbnId + "Home_Font_";
            $("#" + fontStr + "FillColor").ejColorPicker({ value: "#FFFF00", locale: xlObj.model.locale, modelType: "palette", showSwitcher: false, cssClass: "e-ss-colorpicker", toolIcon: "e-ss-backgroundcolor e-icon", open: $.proxy(this._colorPickerHandler, this, "Ribbon_Home_Font_FillColor"), change: $.proxy(this._colorPickerHandler, this, "Ribbon_Home_Font_FillColor"), select: $.proxy(this._cpClickHandler, this, "Ribbon_Home_Font_FillColor") });
            $("#" + fontStr + "FontColor").ejColorPicker({ value: "#FF0000", locale: xlObj.model.locale, modelType: "palette", showSwitcher: false, cssClass: "e-ss-colorpicker", toolIcon: "e-ss-fontcolor e-icon", open: $.proxy(this._colorPickerHandler, this, "Ribbon_Home_Font_FontColor"), change: $.proxy(this._colorPickerHandler, this, "Ribbon_Home_Font_FontColor"), select: $.proxy(this._cpClickHandler, this, "Ribbon_Home_Font_FontColor") });
            $("#" + rbnId + "BorderCP").ejColorPicker({ value: "#278787", displayInline: true, modelType: "picker" });
            $("#" + rbnId + "BorderCP_Presets").hide();
            $("#" + rbnId + "Border").addClass("e-spreadsheet e-border");
            $("#" + fontStr + "FontColor_Presets").css({ top: "40px" });
            $("#" + fontStr + "FillColor_Presets").css({ top: "40px" });
            this._disableButtons(["Home_Clipboard_Paste"], "ejButton");
            this._disableButtons(["Home_Clipboard_PasteOptions", "Others_Formulas_UseInFormula"], "ejSplitButton");
            $("#" + fontStr + "FillColor_popup").find(".e-buttons, .e-button").hide();
            $("#" + fontStr + "FontColor_popup").find(".e-buttons, .e-button").hide();
        },

        _hideRibbonElem: function (tabName) {
            var xlObj = this.XLObj, xlId = xlObj._id, rObj = $("#" + xlObj._id + "_Ribbon").data("ejRibbon"), model = xlObj.model, rObjElem = rObj.element;
            var rbnId = xlId + "_Ribbon", ClpStr = rbnId + "_home_Clipboard_Home_Clipboard_", algnStr = rbnId + "_home_Alignment_Home_Alignment_", sptrStr = rbnId + "_separator_Home_Alignment_", homeStyStr = rbnId + "_home_Styles_Home_Styles_";
            var fontStr = rbnId + "_home_Font_Home_Font_", numberStr = rbnId + "_home_Number_Home_Number_", editStr = rbnId + "_home_Editing_Home_Editing_", insStr = rbnId + "_insert_", dataStr = rbnId + "_data_", layoutStr = rbnId + "_pagelayout_PageLayout";
            var reviewStr = rbnId + "_review_Changes_Review_Changes_", othrStr = rbnId + "_others_";
            if (!model.allowFormulaBar)
                xlObj.hideFormulaBar();
            if (xlObj.model.ribbonSettings.applicationTab.type === "menu")
                var menuObj = $('#' + xlId + '_Menu').data("ejMenu");
            switch (tabName) {
                case xlObj._getLocStr("HOME"):
                    if (!model.allowAutoSum && !model.allowFiltering && !model.allowUndoRedo && !model.allowSorting && !model.allowClipboard && !model.allowFormatPainter && !model.allowCellFormatting && !model.allowMerging && !model.allowWrap && !model.allowConditionalFormats && !model.allowFormatAsTable)
                        rObj.hideTab(xlObj._getLocStr("HOME"));
                    if (!model.allowFormatPainter)
                        rObjElem.find("#" + ClpStr + "FormatPainter").hide();
                    if (!model.allowClipboard) {
                        rObjElem.find("#" + rbnId + "_home_Clipboard_1").hide();
                        rObjElem.find("#" + ClpStr + "Cut").hide();
                        rObjElem.find("#" + ClpStr + "Copy").hide();
                    }
                    if (!model.allowClipboard && !model.allowFormatPainter)
                        rObjElem.find("#" + rbnId + "_home_Clipboard").hide();
                    if (!model.allowCellFormatting) {
                        rObjElem.find("#" + rbnId + "_home_Font").hide();
                        rObjElem.find("#" + rbnId + "_home_Number").hide();
                        rObjElem.find("#" + algnStr + "TopAlign").hide();
                        rObjElem.find("#" + algnStr + "MiddleAlign").hide();
                        rObjElem.find("#" + algnStr + "BottomAlign").hide();
                        rObjElem.find("#" + sptrStr + "BottomAlign").hide();
                        rObjElem.find("#" + algnStr + "AlignLeft").hide();
                        rObjElem.find("#" + algnStr + "AlignCenter").hide();
                        rObjElem.find("#" + algnStr + "AlignRight").hide();
                        rObjElem.find("#" + sptrStr + "AlignRight").hide();
                        rObjElem.find("#" + algnStr + "DecreaseIndent").hide();
                        rObjElem.find("#" + algnStr + "IncreaseIndent").hide();
                        rObjElem.find("#" + sptrStr + "IncreaseIndent").hide();
                        rObjElem.find("#" + homeStyStr + "CellStyles").hide();
                        if (!model.allowConditionalFormats && !model.allowFormatAsTable)
                            rObjElem.find("#" + rbnId + "_home_Styles").hide();
                    }
                    if (model.allowCellFormatting) {
                        if (!model.formatSettings.allowFontFamily)
                            rObjElem.find("#" + fontStr + "FontFamily").hide();
                        if (!model.formatSettings.allowDecimalPlaces) {
                            rObjElem.find("#" + numberStr + "IncreaseDecimal").hide();
                            rObjElem.find("#" + numberStr + "DecreaseDecimal").hide();
                            rObjElem.find("#" + rbnId + "_separator_Home_Number_CommaStyle").hide();
                        }
                        if (!model.formatSettings.allowCellBorder)
                            rObjElem.find("#" + fontStr + "Border").hide();
                    }
                    if (!model.allowMerging)
                        rObjElem.find("#" + algnStr + "Merge").hide();
                    if (!model.allowWrap)
                        rObjElem.find("#" + algnStr + "WrapText").hide();
                    if (!model.allowUndoRedo)
                        rObjElem.find("#" + rbnId + "_home_Actions").hide();
                    if (!model.allowFormatAsTable)
                        rObjElem.find("#" + homeStyStr + "FormatAsTable").hide();
                    if (!model.allowConditionalFormats && !model.allowFormatAsTable && !model.allowCellFormatting)
                        rObjElem.find("#" + rbnId + "_home_Styles").hide();
                    if (!model.allowConditionalFormats)
                        rObjElem.find("#" + homeStyStr + "ConditionalFormatting").hide();
                    if (model.allowEditing) {
                        if (!model.allowAutoSum)
                            rObjElem.find("#" + editStr + "AutoSum").hide();
                        if (!model.allowSorting && !model.allowFiltering)
                            rObjElem.find("#" + xlObj._id + "_Ribbon_home_Editing_1").hide();
                    }
                    if (!model.allowAutoSum)
                        rObjElem.find("#" + editStr + "AutoSum").hide();
                    if (!model.allowClear)
                        rObjElem.find("#" + editStr + "Clear").hide();
                    break;
                case xlObj._getLocStr("INSERT"):
                    if (!model.allowFormatAsTable && !model.allowPictures && !model.allowHyperlink && !model.allowCharts && !model.allowSparkline)
                        rObj.hideTab(xlObj._getLocStr("INSERT"));
                    if (!model.enablePivotTable && !model.allowFormatAsTable) {
                        rObjElem.find("#" + insStr + "Tables").hide();
                        rObjElem.find("#" + homeStyStr + "FormatAsTable").hide();
                        rObjElem.find("#" + insStr + "Tables_Insert_Tables_PivotTable").hide();
                    }
                    else if (!model.enablePivotTable)
                        rObjElem.find("#" + insStr + "Tables_Insert_Tables_PivotTable").hide();
                    else if (!model.allowFormatAsTable)
                        rObjElem.find("#" + insStr + "Tables_Insert_Tables_Table").hide();
                    if (!model.pictureSettings.allowPictures)
                        rObjElem.find("#" + insStr + "Illustrations").hide();
                    if (!model.allowHyperlink)
                        rObjElem.find("#" + insStr + "Links").hide();
                    if (!model.allowCharts)
                        rObjElem.find("#" + insStr + "Charts").hide();
                    if (!model.allowSparkline)
                        rObjElem.find("#" + insStr + "SparklineCharts").hide();
                    if (!model.allowFormatAsTable && !model.enablePivotTable)
                        rObjElem.find("#" + insStr + "Tables").hide();
                    break;
                case xlObj._getLocStr("DATATAB"):
                    if (!model.allowDataValidation && !model.allowFiltering && !model.allowSorting)
                        rObj.hideTab(xlObj._getLocStr("DATATAB"));
                    if (!model.allowFiltering)
                        rObjElem.find("#" + dataStr + "SortFilter_2").hide();
                    if (!model.allowSorting)
                        rObjElem.find("#" + dataStr + "SortFilter_1").hide();
                    if (!model.allowDataValidation)
                        rObjElem.find("#" + dataStr + "DataTools").hide();
                    if (!model.allowFiltering && !model.allowSorting)
                        rObjElem.find("#" + dataStr + "Sort").hide();
                    break;
                case xlObj._getLocStr("PAGELAYOUT"):
                    if (!model.printSettings.allowPrinting)
                        rObj.hideTab(xlObj._getLocStr("PAGELAYOUT"));
                    if (!model.printSettings.allowPrinting)
                        rObjElem.find("#" + layoutStr + "Print_Print").hide();
                    if (!model.printSettings.allowPageSize)
                        rObjElem.find("#" + layoutStr).hide();

                    if (!model.allowComments && !model.allowLockCell)
                        rObj.hideTab(xlObj._getLocStr("REVIEW"));
                    if (!model.allowLockCell) {
                        rObjElem.find("#" + reviewStr + "ProtectSheet").hide();
                        rObjElem.find("#" + reviewStr + "LockCell").hide();
                    }
                    if (!model.allowComments)
                        rObjElem.find("#" + rbnId + "_review_Comments").hide();
                    break;
                case xlObj._getLocStr("OTHERS"):
                    if (!model.allowFreezing && !model.allowInsert && !model.allowDelete && !model.allowSearching)
                        rObj.hideTab(xlObj._getLocStr("OTHERS"));
                    if (!model.allowInsert && !model.allowDelete)
                        rObjElem.find("#" + othrStr + "Cells").hide();
                    if (!model.allowInsert)
                        rObjElem.find("#" + othrStr + "Cells_1").hide();
                    if (!model.allowDelete)
                        rObjElem.find("#" + othrStr + "Cells_2").hide();
                    if (!model.allowFreezing)
                        xlObj._phoneMode ? rObjElem.find("#" + othrStr + "Window_1").hide() : rObjElem.find("#" + othrStr + "Window").hide();
                    if (!model.allowSearching)
                        rObjElem.find("#" + othrStr + "Editing").hide();
                    break;
            }
            if (!model.allowImport || !model.importSettings.importMapper) {
                rObjElem.find("#open_backStageTab").hide();
                if (menuObj)
                    menuObj.disableItemByID("Open");
            }
            if (model.serverEvents) {
                var serverEvents = model.serverEvents;
                if (serverEvents.indexOf("excelExporting") < 0 && !model.exportSettings.excelUrl) {
                    rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(0)').hide();
                    if (menuObj)
                        menuObj.disableItemByID("ExportXL");
                }
                if (serverEvents.indexOf("csvExporting") < 0 && !model.exportSettings.csvUrl) {
                    rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(1)').hide();
                    if (menuObj)
                        menuObj.disableItemByID("ExportCsv");
                }
                if (serverEvents.indexOf("pdfExporting") < 0 && !model.exportSettings.pdfUrl) {
                    rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(2)').hide();
                    if (menuObj)
                        menuObj.disableItemByID("ExportPdf");
                }
                if (!serverEvents.length && !model.exportSettings.excelUrl && !model.exportSettings.csvUrl && !model.exportSettings.pdfUrl) {
                    rObjElem.find("#saveas_backStageTab").hide();
                    if (menuObj)
                        menuObj.disableItemByID("Save");
                }
            }
            else {
                if (!model.exportSettings.excelUrl) {
                    rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(0)').hide();
                    if (menuObj)
                        menuObj.disableItemByID("ExportXL");
                }
                if (!model.exportSettings.csvUrl) {
                    rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(1)').hide();
                    if (menuObj)
                        menuObj.disableItemByID("ExportCsv");
                }
                if (!model.exportSettings.pdfUrl) {
                    rObjElem.find('#' + xlId + '_backstagetabsaveas .e-ssr-bssaveasopt:eq(2)').hide();
                    if (menuObj)
                        menuObj.disableItemByID("ExportPdf");
                }
                if (!model.exportSettings.allowExporting || (!model.exportSettings.excelUrl) && !(model.exportSettings.csvUrl) && !(model.exportSettings.pdfUrl)) {
                    rObjElem.find("#saveas_backStageTab").hide();
                    if (menuObj)
                        menuObj.disableItemByID("Save");
                }
            }
            if (!model.printSettings.allowPrinting)
                rObjElem.find("#print_backStageTab").hide();
        },

        _pictureSizeChange: function (name, args) {
            var xlObj = this.XLObj, newVal, sheetIndex = xlObj.getActiveSheetIndex(), elem = xlObj.getSheetElement(sheetIndex).find(".e-ss-activeimg"), details = { sheetIndex: sheetIndex, reqType: "shape", shapeType: "picture", action: "picturesize", name: name, id: $(elem).attr("id"), prev: {}, cur: {} };
            if (xlObj._shapeChange || this._isSetModel)
                return;
            details.prev = { width: elem.width(), height: elem.height() };
            if (name === "PictureHeight") {
                newVal = parseInt((elem.height() * args.value) / elem.width());
                elem.css({ width: args.value, height: newVal });
                details.cur = { width: args.value, height: newVal };
            }
            else {
                newVal = parseInt((elem.width() * args.value) / elem.height());
                elem.css({ height: args.value, width: newVal });
                details.cur = { height: args.value, width: newVal };
            }
            this._isSetModel = true;
            $("#" + xlObj._id + "_Ribbon_Format_Size_" + name).ejNumericTextbox("option", { value: newVal });
            this._isSetModel = false;
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
            xlObj.XLShape._updateShapeObj(elem[0]);
        },

        _chartTypeOk: function () {
            var xlObj = this.XLObj, id = xlObj.element.find("#" + xlObj._id + "_chart").val(), chartObj = $("#" + id).data('ejChart'), details, chartType, className, allChart, markerChart, option;
            className = $("#" + xlObj._id + "_allchart").find(".e-chartselect:eq(0)").attr("class").split(" ")[1], chartType = className.split("e-dlg")[1].split("chart");
            allChart = ["e-dlgcolumnchart4", "e-dlgcolumnchart5", "e-dlgcolumnchart6", "e-dlgbarchart4", "e-dlgbarchart5", "e-dlgbarchart6", "e-dlgpiechart2"];
            markerChart = ["e-dlgstockchart2", "e-dlglinechart2", "dlgradarchart2"], option = { type: chartType[0], enable3D: false, marker: { visible: false } };
            if (chartType[0] === "column" || chartType[0] === "bar" || chartType[0] === "area") {
                if (chartType[1] === "1" || chartType[1] === "4")
                    option["type"] = chartType[0];
                else if (chartType[1] === "2" || chartType[1] === "5")
                    option["type"] = "stacking" + chartType[0];
                else if (chartType[1] === "3" || chartType[1] === "6")
                    option["type"] = "stacking" + chartType[0] + "100";
            }
            allChart.indexOf(className) > -1 && (option["enable3D"] = true);
            markerChart.indexOf(className) > -1 && (option["marker"] = { visible: true });
            className === "e-dlgpiechart3" && (option["type"] = "doughnut");
            details = { sheetIndex: xlObj.getActiveSheetIndex(), reqType: "shape", shapeType: "chart", action: "chartType", chartId: id };
            details.prev = { chartType: chartObj.model.series[0].type, enable3D: chartObj.model.enable3D, marker: chartObj.model.series[0].marker.visible };
            option["series"] = chartObj.model.series;
            xlObj.XLChart.refreshChart(id, option);
            details.cur = { chartType: chartObj.model.series[0].type, enable3D: chartObj.model.enable3D, marker: chartObj.model.series[0].marker.visible };
            $("#" + xlObj._id + "_charttypedlg").ejDialog("close");
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);

        },
        _chartTypeCancel: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_charttypedlg").ejDialog("close");
            xlObj._setSheetFocus();
        },

        _chartType: function (chart, len, cnt, typecnt, type, title) {
            var cell, childs, child, elem = "<div class='e-chartcontent'>", i, parent, typ, hdr = "<div class='e-chartheader'><span>",
                chartIcon = chart.toLowerCase(), obj = { visible: false }, xlObj = this.XLObj, text = xlObj._getLocStr(chart), dim = "2-D";
            for (i = 0; i < len; i++) {
                cell = "<div class='e-ss-" + xlObj._id + " e-chartcell e-" + chartIcon + (i + 1) + "' title=" + title[i] + "></div>";
                elem += cell;
                if (i === cnt)
                    elem += "</div>" + hdr + "3-D " + text + "</span></div><div class='e-chartcontent'>";
            }
            elem += "</div>";
            if (chart === "ScatterChart" || chart === "StockChart" || chart === "PieChart")
                dim = "";
            parent = $("<div id=" + xlObj._id + "_Ribbon_" + chart + " class='e-ss-dialog e-ss-chart e-ss-" + xlObj._id + "' style='height:auto;'>" + hdr + dim + text + "</span></div>" + elem + "</div>");
            childs = parent.find(".e-chartcell");
            for (i = 0; i < len; i++) {
                child = $(childs[i]);
                typ = type[i];
                child.data({ type: typ, enable3D: false, marker: obj });
                if (i > typecnt)
                    child.data({ type: typ, enable3D: true, marker: obj });
            }
            elem = $(parent).find(".e-" + chartIcon + "2");
            if (chart === "StockChart" || chart === "LineChart")
                elem.data({ marker: { visible: true } });
            if (chart === "PieChart")
                elem.data({ enable3D: true });
            xlObj.element[0].appendChild(parent[0]);
        },

        autoSum: function (type, range) {
            if (!this.XLObj.model.allowAutoSum)
                return;
            var xlObj = this.XLObj, xlEdit = xlObj.XLEdit, cellIdx, sCell = false, value,
                sheetIdx = xlObj.getActiveSheetIndex(), args = { sheetIndex: sheetIdx, range: range, calcType: type, reqType: "auto-sum", type: "actionBegin" };
            if (xlObj._trigActionBegin(args))
                return;
            range = args.range;
            type = args.calcType;
            cellIdx = xlObj.getActiveCell(sheetIdx);
            if (ej.isNullOrUndefined(cellIdx))
                return;
            var i, colLen, actCell = xlObj.getActiveCell(sheetIdx);
            var alphRange, rangeIdx = xlObj._getRangeArgs(range, "object"), selectCell = xlObj._getSelectedCells(sheetIdx, rangeIdx).selCells, cellCnt = selectCell.length - 1;
            var rowCnt = selectCell[cellCnt].rowIndex - selectCell[0].rowIndex, colCnt = selectCell[cellCnt].colIndex - selectCell[0].colIndex, details = { sheetIndex: sheetIdx, range: range, reqType: "auto-sum", oprType: type, updCell: [] };
            var rowIdx, colIdx, cell, textLength = xlObj.getRangeData({ range: [selectCell[0].rowIndex, selectCell[0].colIndex, selectCell[cellCnt].rowIndex, selectCell[cellCnt].colIndex], valueOnly: true }).length, container = xlObj._dataContainer.sheets[sheetIdx];
            if (cellCnt === 0 || !textLength) {
                rowIdx = cellIdx.rowIndex; colIdx = cellIdx.colIndex;
                details.updCell.push({ rowIndex: rowIdx, colIndex: colIdx, pObj: {}, pValue: ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2")) ? "" : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2") });
                (ej.isNullOrUndefined(container[rowIdx])) && (container[rowIdx] = {});
                (ej.isNullOrUndefined(container[rowIdx][colIdx])) && (container[rowIdx][colIdx] = {});
                $.extend(true, details.updCell[0].pObj, container[rowIdx][colIdx]);
                if (!xlObj._isRowViewable(sheetIdx, actCell.rowIndex))
                    xlObj.XLScroll._scrollSelectedPosition(sheetIdx, actCell);
                xlEdit.editCell(actCell.rowIndex, actCell.colIndex, true);
                if (xlObj.model.allowFormulaBar)
                    xlObj._getInputBox().val("=" + type + "()");
                if (xlObj._isRowViewable(sheetIdx, rowIdx)) {
                    xlObj.XLEdit._editElem.text("=" + type + "()");
                    xlObj.XLEdit._editElem.focusEnd();
                }
                sCell = true;
            }
            else if (rowCnt === 0 && colCnt > 0) {
                alphRange = xlObj._getAlphaRange(sheetIdx, selectCell[0].rowIndex, selectCell[0].colIndex, selectCell[cellCnt].rowIndex, selectCell[cellCnt].colIndex);
                rowIdx = selectCell[cellCnt].rowIndex; colIdx = selectCell[cellCnt].colIndex + 1;
                value = this.XLObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2");
                while (!ej.isNullOrUndefined(value) && value != "") {
                    colIdx++
                    value = this.XLObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2");
                }
                if (colIdx === xlObj.getSheet(sheetIdx).colCount)
                    xlObj.XLScroll._createNewColumn(sheetIdx, { rowIndex: -1, colIndex: -1 }, { rowIndex: -1, colIndex: -1 }, "insert");
                !xlObj._isUndoRedo && details.updCell.push({ rowIndex: rowIdx, colIndex: colIdx, pObj: {}, pValue: ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2")) ? "" : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2") });
                (ej.isNullOrUndefined(container[rowIdx])) && (container[rowIdx] = {});
                (ej.isNullOrUndefined(container[rowIdx][colIdx])) && (container[rowIdx][colIdx] = {});
                !xlObj._isUndoRedo && $.extend(true, details.updCell[0].pObj, container[rowIdx][colIdx]);
                if (xlObj._isRowViewable(sheetIdx, rowIdx)) {
                    cell = xlObj.getCell(rowIdx, colIdx, sheetIdx);
                    cell.addClass("e-ralign");
                }
                xlEdit._updateCellValue({ rowIndex: rowIdx, colIndex: colIdx }, "=" + type + "(" + alphRange + ")");
                if ('COUNT'.indexOf(type) < 0)
                    xlObj._autosumFormatUpdate(xlObj.getRangeData({ range: [selectCell[0].rowIndex, selectCell[0].colIndex, selectCell[0].rowIndex, selectCell[0].colIndex] })[0], [rowIdx, colIdx, rowIdx, colIdx], false, false);
            }
            else {
                colLen = selectCell[cellCnt].colIndex - selectCell[0].colIndex;
                rowIdx = selectCell[cellCnt].rowIndex + 1;
                for (i = 0; i <= colLen; i++) {
                    colIdx = selectCell[i].colIndex;
                    value = this.XLObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2");
                    var maxRowIdx = rowIdx;
                    while (!ej.isNullOrUndefined(value) && value != "") {
                        rowIdx++;
                        maxRowIdx = rowIdx;
                        value = this.XLObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2");
                    }
                }
                for (i = 0; i <= colLen; i++) {
                    colIdx = selectCell[i].colIndex;
                    rowIdx = maxRowIdx;
                    if (xlObj.XLEdit.getPropertyValue(selectCell[cellCnt].rowIndex + 1, colIdx, "tableName"))
                        rowIdx = rowIdx - 1;
                    alphRange = xlObj._getAlphaRange(sheetIdx, selectCell[0].rowIndex, colIdx, selectCell[cellCnt].rowIndex, colIdx);
                    if (selectCell[cellCnt].rowIndex === xlObj.getSheet(sheetIdx).rowCount - 1)
                        xlObj.XLScroll._createNewRow(sheetIdx, -1, -1, "insert");
                    !xlObj._isUndoRedo && details.updCell.push({ rowIndex: rowIdx, colIndex: colIdx, pObj: {}, pValue: ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2")) ? "" : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2") });
                    (ej.isNullOrUndefined(container[rowIdx])) && (container[rowIdx] = {});
                    (ej.isNullOrUndefined(container[rowIdx][colIdx])) && (container[rowIdx][colIdx] = {});
                    !xlObj._isUndoRedo && $.extend(true, details.updCell[i].pObj, container[rowIdx][colIdx]);
                    if (xlObj._isRowViewable(sheetIdx, rowIdx)) {
                        cell = xlObj.getCell(rowIdx, colIdx, sheetIdx);
                        cell.addClass("e-ralign");
                    }
                    xlEdit._updateCellValue({ rowIndex: rowIdx, colIndex: colIdx }, "=" + type + "(" + alphRange + ")");
                    if ('COUNT'.indexOf(type) < 0)
                        xlObj._autosumFormatUpdate(xlObj.getRangeData({ range: [selectCell[0].rowIndex, selectCell[i].colIndex, selectCell[0].rowIndex, selectCell[i].colIndex] })[0], [rowIdx, colIdx, rowIdx, colIdx], false, false);
                }
            }
            xlObj.performSelection({ rowIndex: rangeIdx[0], colIndex: rangeIdx[1] }, { rowIndex: rowIdx, colIndex: colIdx });
            if (!xlObj._isUndoRedo && !sCell) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _openNameManagerDlg: function () {
            var xlObj = this.XLObj, grid;
            xlObj._showDialog(xlObj._id + "_Ribbon_Others_NameManager");
            grid = $("#" + xlObj._id + "_nmgrid").data("ejGrid");
            grid.getContentTable().find('td').addClass("e-ss-emptyrecord")
            if (grid.model.dataSource.length < 1)
                grid.getContentTable().find('td').addClass("e-ss-emptyrecord");
            else
                grid.getContentTable().find('.e-ss-emptyrecord').removeClass("e-ss-emptyrecord");
            this._refreshNMDlg();
            if (xlObj._browserDetails.name == "msie")
                grid.refreshContent();
            $("#" + xlObj._id + "_nmgrid").focus();
        },

        _openFATDlg: function () {
            var xlObj = this.XLObj;
            $('#' + xlObj._id + '_fatnamedlg').ejDialog('open');
            $("#" + xlObj._id + "_fatheader").ejCheckBox("option", "checked", false);
            $("#" + xlObj._id + "_fatname").val('Table' + xlObj._tableCnt).focus().setInputPos($("#" + xlObj._id + "_fatname").val().length);
        },

        _dirtySelect: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), selCells, tabRange = xlObj.getSheet(sheetIdx).filterSettings.tableRange, isDirtyCell = false, isFilterCell = false, isTop = false, isBottom = false, isLeft = false, isRight = false, isRowDirty = false, isColDirty = false, isColInside = false, isRowInside = false, tableIdx = -2,
                isTopToBottom = false, isLeftToRight = false;
            if (xlObj.model.allowLockCell && xlObj.getSheet(sheetIdx).isSheetProtected)
                return;
            selCells = xlObj.getSheet(sheetIdx)._selectedCells;
            if (selCells.length > 0) {
                for (var i = 0, len = tabRange.length; i < len; i++) {
                    isRowInside = isRowDirty = isTop = isBottom = isTopToBottom = false;
                    isColInside = isColDirty = isLeft = isRight = isLeftToRight = false;
                    // Selection is inside the Row Range
                    if ((tabRange[i].startRow - 1 <= selCells[0].rowIndex) && (tabRange[i].endRow >= selCells[selCells.length - 1].rowIndex))
                        isRowInside = true;
                    //Out To In
                    else if ((tabRange[i].startRow - 1 > selCells[0].rowIndex) && (selCells[selCells.length - 1].rowIndex >= tabRange[i].startRow - 1) && (tabRange[i].endRow >= selCells[selCells.length - 1].rowIndex))
                        isRowDirty = true;
                    //In To Out
                    else if ((tabRange[i].startRow - 1 <= selCells[0].rowIndex) && (selCells[0].rowIndex <= tabRange[i].endRow) && (tabRange[i].endRow < selCells[selCells.length - 1].rowIndex))
                        isRowDirty = true;
                    //In Top
                    else if (tabRange[i].startRow - 1 > selCells[selCells.length - 1].rowIndex)
                        isTop = true;
                    //In Bottom
                    else if (tabRange[i].endRow < selCells[0].rowIndex)
                        isBottom = true;
                    //Top to Bottom
                    else if ((tabRange[i].endRow < selCells[selCells.length - 1].rowIndex) && tabRange[i].startRow > selCells[0].rowIndex)
                        isTopToBottom = true;
                    //Out To Out
                    else
                        isRowInside = false;

                    // Selection is inside the Column Range
                    if ((tabRange[i].multifilterIdx[0] <= selCells[0].colIndex) && (tabRange[i].multifilterIdx[tabRange[i].multifilterIdx.length - 1] >= selCells[selCells.length - 1].colIndex))
                        isColInside = true;
                    //Out To In
                    else if ((tabRange[i].multifilterIdx[0] > selCells[0].colIndex) && (selCells[selCells.length - 1].colIndex >= tabRange[i].multifilterIdx[0]) && (tabRange[i].multifilterIdx[tabRange[i].multifilterIdx.length - 1] >= selCells[selCells.length - 1].colIndex))
                        isColDirty = true;
                    //In To Out
                    else if ((tabRange[i].multifilterIdx[0] <= selCells[0].colIndex) && (selCells[0].colIndex <= tabRange[i].multifilterIdx[tabRange[i].multifilterIdx.length - 1]) && (tabRange[i].multifilterIdx[tabRange[i].multifilterIdx.length - 1] < selCells[selCells.length - 1].colIndex))
                        isColDirty = true;
                    //In Left
                    else if (tabRange[i].multifilterIdx[0] > selCells[selCells.length - 1].colIndex)
                        isLeft = true;
                    //In Right
                    else if (tabRange[i].multifilterIdx[tabRange[i].multifilterIdx.length - 1] < selCells[0].colIndex)
                        isRight = true;
                    //Left To Right
                    else if ((tabRange[i].multifilterIdx[0] > selCells[0].colIndex) && (tabRange[i].multifilterIdx[tabRange[i].multifilterIdx.length - 1] < selCells[selCells.length - 1].colIndex))
                        isLeftToRight = true;
                    //Out To Out
                    else
                        isColInside = false;
                    if ((isRowDirty && isColDirty) || (isRowDirty && isColInside) || (isRowInside && isColDirty) || (isRowDirty && !isRight && !isLeft) || (isColDirty && !isTop && !isBottom) || (isTopToBottom && isLeftToRight) || (isRowInside && isLeftToRight) || (isColInside && isTopToBottom)) {
                        isDirtyCell = true;
                        if (xlObj.XLSelection._isRowSelected && isRowInside)
                            isDirtyCell = false;
                        if (xlObj.XLSelection._isColSelected && isColInside)
                            isDirtyCell = false;
                        if (isDirtyCell)
                            break;
                    }
                    if (!isDirtyCell) {
                        tableIdx = i;
                        if (isTop || isBottom || isLeft) {
                            isDirtyCell = false;
                        }
                        if ((isRowInside && isColInside)) //Need to add Condition for outside the selection
                            isFilterCell = true;
                    }
                }
            }
            this._isDirtySelect = xlObj._isCFDirty ? true : isDirtyCell;
            this._isMergeSelect = (isFilterCell || isDirtyCell);
            this._isFilterSelect = { status: isFilterCell, tableIdx: tableIdx, isFiltered: false };
        },

        _refreshRibbonIcons: function () {
            var filterVal, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), menuObj = $("#" + xlObj._id + "_contextMenuCell").data("ejMenu"), splitBtnIds = ["Home_Editing_SortFilter", "Home_Editing_Clear", "Home_Styles_FormatAsTable"],
                btnIds = ["Insert_Tables_Table", "Data_SortFilter_Filter", "Data_SortFilter_ClearFilter"], mergeBtn = $("#" + xlObj._id + "_Ribbon_Home_Alignment_Merge").data("ejSplitButton");
            (!xlObj.XLEdit._isEdit && xlObj.getSheetElement(sheetIdx).find(".e-ss-activeimg").length < 1) && mergeBtn && mergeBtn.option("enabled", !this._isMergeSelect);
            if (xlObj._checkTableRange(xlObj._getRangeArgs()).status != "full")
                btnIds.push("Design_Tools_ConvertToRange");
            if (this._isDirtySelect) {
                this._disableButtons(splitBtnIds, "ejSplitButton");
                this._disableButtons(btnIds, "ejButton");
                menuObj && menuObj.disableItemByID("Sort");
            }
            else if (!xlObj.XLEdit._isEdit) {
                this._enableButtons(splitBtnIds, "ejSplitButton");
                this._enableButtons(btnIds, "ejButton");
                if (!xlObj.model.isReadOnly && menuObj && xlObj.model.allowSorting)
                    menuObj.enableItemByID("Sort");
            }
            var tabRange = xlObj.getSheet(sheetIdx).filterSettings.tableRange[this._isFilterSelect.tableIdx];
            if (this._isFilterSelect.status && tabRange) {
                var filterIdx = tabRange.multifilterIdx;
                for (var i = 0, len = filterIdx.length; i < len; i++) {
                    filterVal = xlObj.XLEdit.getPropertyValue(tabRange.startRow - 1, filterIdx[i], "filterState");
                    if (filterVal && filterVal.indexOf("filtered") > -1) {
                        this._isFilterSelect.isFiltered = true;
                        break;
                    }
                }
            }
            if (this._isFilterSelect.isFiltered)
                this._isDataTabCreate && this._enableButtons(["Data_SortFilter_ClearFilter"], "ejButton");
            else
                this._isDataTabCreate && this._disableButtons(["Data_SortFilter_ClearFilter"], "ejButton");
        },

        _onGroupExpander: function (args) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly || xlObj.XLEdit._isEdit || xlObj.XLComment._isCommentEdit)
                return;
            switch (args.target.id) {
                case xlObj._id + '_Ribbon_Number_e-groupexpander':
                    xlObj._showDialog(xlObj._id + "_FormatCells");
                    break;
            }
        },

        disableRibbonItems: function (idCollection) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var type, tabName, i, len, Id;
            for (i = 0, len = idCollection.length; i < len; i++) {
                tabName = idCollection[i].split("_")[2].toUpperCase();
                Id = idCollection[i].split("_Ribbon_")[1];
                do {
                    switch (tabName) {
                        case "HOME":
                            if (this._homeBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._homeBtnIds.splice(this._homeBtnIds.indexOf(Id), 1);
                            }
                            else if (this._homeSptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._homeSptBtnIds.splice(this._homeSptBtnIds.indexOf(Id), 1);
                            }
                            else if (this._homeToggleBtnIds.indexOf(Id) > -1) {
                                type = "ejToggleButton";
                                this._homeToggleBtnIds.splice(this._homeToggleBtnIds.indexOf(Id), 1);
                            }
                            else if (this._homeDdIds.indexOf(Id) > -1) {
                                type = "ejDropDownList";
                                this._homeDdIds.splice(this._homeDdIds.indexOf(Id), 1);
                            }
                            else if (this._homeCpIds.indexOf(Id) > -1) {
                                type = "ejColorPicker";
                                this._homeCpIds.splice(this._homeCpIds.indexOf(Id), 1);
                            }
                            break;
                        case "INSERT":
                            if (this._insertBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._insertBtnIds.splice(this._insertBtnIds.indexOf(Id), 1);
                            }
                            else if (this._insertSptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._insertSptBtnIds.splice(this._insertSptBtnIds.indexOf(Id), 1);
                            }
                            break;
                        case "DATA":
                            if (this._dataBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._dataBtnIds.splice(this._dataBtnIds.indexOf(Id), 1);
                            }
                            else if (this._dataSptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._dataSptBtnIds.splice(this._dataSptBtnIds.indexOf(Id), 1);
                            }
                            break;
                        case "PAGELAYOUT":
                            if (this._pageLayBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._pageLayBtnIds.splice(this._pageLayBtnIds.indexOf(Id), 1);
                            }
                            else if (this._pageLaySptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._pageLaySptBtnIds.splice(this._pageLaySptBtnIds.indexOf(Id), 1);
                            }
                            else if (this._pageLayChckBxIds.indexOf(Id) > -1) {
                                type = "ejCheckBox";
                                this._pageLayChckBxIds.splice(this._pageLayChckBxIds.indexOf(Id), 1);
                            }
                            break;
                        case "REVIEW":
                            if (this._cmntBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._cmntBtnIds.splice(this._cmntBtnIds.indexOf(Id), 1);
                            }
                            else if (this._cmntTglBtnIds.indexOf(Id) > -1) {
                                type = "ejToggleButton";
                                this._cmntTglBtnIds.splice(this._cmntTglBtnIds.indexOf(Id), 1);
                            }
                            else if (this._reviewTglBtnIds.indexOf(Id) > -1) {
                                type = "ejToggleButton";
                                this._reviewTglBtnIds.splice(this._reviewTglBtnIds.indexOf(Id), 1);
                            }
                            break;
                        case "OTHERS":
                            if (this._othersBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._othersBtnIds.splice(this._othersBtnIds.indexOf(Id), 1);
                            }
                            else if (this._othersSptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._othersSptBtnIds.splice(this._othersSptBtnIds.indexOf(Id), 1);
                            }
                            break;
                        case "FORMAT":
                            if (this._formatBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._formatBtnIds.splice(this._formatBtnIds.indexOf(Id), 1);
                            }
                            else if (this._formatSptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._formatSptBtnIds.splice(this._formatSptBtnIds.indexOf(Id), 1);
                            }
                            break;
                        case "DESIGN":
                            if (this._contextualBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._contextualBtnIds.splice(this._contextualBtnIds.indexOf(Id), 1);
                            }
                            else if (this._contextualCheckBoxIds.indexOf(Id) > -1) {
                                type = "ejCheckBox";
                                this._contextualCheckBoxIds.splice(this._contextualCheckBoxIds.indexOf(Id), 1);
                            }
                            else if (this._contextualInputIds.indexOf(Id) > -1)
                                type = true;
                            break;
                        case "CHARTDESIGN":
                            if (this._chartDesignBtnIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._chartDesignBtnIds.splice(this._chartDesignBtnIds.indexOf(Id), 1);
                            }
                            else if (this._chartDesignSptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._chartDesignSptBtnIds.splice(this._chartDesignSptBtnIds.indexOf(Id), 1);
                            }
                            else if (this._chartDesignDdIds.indexOf(Id) > -1) {
                                type = "ejDropDownList";
                                this._chartDesignDdIds.splice(this._chartDesignDdIds.indexOf(Id), 1);
                            }
                            break;
                        case "SPARKLINEDESIGN":
                            if (this._sparklineDesignSptBtnIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._sparklineDesignSptBtnIds.splice(this._sparklineDesignSptBtnIds.indexOf(Id), 1);
                            }
                    }
                    if (type)
                        this._disableButtons([Id], type);
                    else {
                        var ctrlList = ["ejSplitButton", "ejButton", "ejDropDownList", "ejCheckBox", "ejToggleButton", "ejColorPicker"], cntrlObj = $("#" + xlObj._id + "_Ribbon_" + Id);
                        for (var l = 0, Llen = ctrlList.length; l < Llen; l++) {
                            if (cntrlObj.data(ctrlList[l])) {
                                cntrlObj.data(ctrlList[l]).disable();
                                break;
                            }
                        }
                    }
                }
                while ((Id === "PageLayout_PageLayout_PageSize" || Id === "Home_Clipboard_Paste" || Id === "Others_Cells_InsertCell" || Id === "Others_Cells_DeleteCell" || Id === "Data_DataTools_DataValidation") && (Id = Id + "Options"));
            }
        },

        enableRibbonItems: function (idCollection) {
            var xlObj = this.XLObj;
            var type, tabName, i, len, Id;
            for (i = 0, len = idCollection.length; i < len; i++) {
                tabName = idCollection[i].split("_")[2].toUpperCase();
                Id = idCollection[i].split("_Ribbon_")[1];
                do {
                    switch (tabName) {
                        case "HOME":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._homeBtnIds.push(Id);
                            }
                            else if (this.allSplitButtonIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._homeSptBtnIds.push(Id);
                            }
                            else if (this.allToggleButtonIds.indexOf(Id) > -1) {
                                type = "ejToggleButton";
                                this._homeToggleBtnIds.push(Id);
                            }
                            else if (this.allDropDownIds.indexOf(Id) > -1) {
                                type = "ejDropDownList";
                                this._homeDdIds.push(Id);
                            }
                            else if (this.colorPickerIds.indexOf(Id) > -1) {
                                type = "ejColorPicker";
                                this._homeCpIds.push(Id);
                            }
                            break;
                        case "INSERT":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._insertBtnIds.push(Id);
                            }
                            else if (this.allSplitButtonIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._insertSptBtnIds.push(Id);
                            }
                            break;
                        case "DATA":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._dataBtnIds.push(Id);
                            }
                            else if (this.allSplitButtonIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._dataSptBtnIds.push(Id);
                            }
                            break;
                        case "PAGELAYOUT":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._pageLayBtnIds.push(Id);
                            }
                            else if (this.allSplitButtonIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._pageLaySptBtnIds.push(Id);
                            }
                            else if (this.checkBoxIds.indexOf(Id) > -1) {
                                type = "ejCheckBox";
                                this._pageLayChckBxIds.push(Id);
                            }
                            break;
                        case "REVIEW":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._cmntBtnIds.push(Id);
                            }
                            else if (this.allToggleButtonIds.indexOf(Id) > -1 && idCollection[i].split("_")[4] === "ShowAllComment") {
                                type = "ejToggleButton";
                                this._cmntTglBtnIds.push(Id);
                            }
                            else if (this.allToggleButtonIds.indexOf(Id) > -1) {
                                type = "ejToggleButton";
                                this._reviewTglBtnIds.push(Id);
                            }
                            break;
                        case "OTHERS":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._othersBtnIds.push(Id);
                            }
                            else if (this.allSplitButtonIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._othersSptBtnIds.push(Id);
                            }
                            break;
                        case "FORMAT":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._formatBtnIds.push(Id);
                            }
                            else if (this.allSplitButtonIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._formatSptBtnIds.push(Id);
                            }
                            break;
                        case "DESIGN":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._contextualBtnIds.push(Id);
                            }
                            else if (this.checkBoxIds.indexOf(Id) > -1) {
                                type = "ejCheckBox";
                                this._contextualCheckBoxIds.push(Id);
                            }
                            else if (this._contextualInputIds.indexOf(Id) > -1)
                                type = true;
                            break;
                        case "CHARTDESIGN":
                            if (this.allButtonIds.indexOf(Id) > -1) {
                                type = "ejButton";
                                this._chartDesignBtnIds.push(Id);
                            }
                            else if (this.allSplitButtonIds.indexOf(Id) > -1) {
                                type = "ejSplitButton";
                                this._chartDesignSptBtnIds.push(Id);
                            }
                            else if (this.allDropDownIds.indexOf(Id) > -1) {
                                type = "ejDropDownList";
                                this._chartDesignDdIds.push(Id);
                            }
                            break;
                    }
                    if (type)
                        this._enableButtons([Id], type);
                    else {
                        var ctrlList = ["ejSplitButton", "ejButton", "ejDropDownList", "ejCheckBox", "ejToggleButton", "ejColorPicker"], cntrlObj = $("#" + xlObj._id + "_Ribbon_" + Id);
                        for (var l = 0, Llen = ctrlList.length; l < Llen; l++) {
                            if (cntrlObj.data(ctrlList[l])) {
                                cntrlObj.data(ctrlList[l]).enable();
                                break;
                            }
                        }
                    }
                }
                while ((Id === "PageLayout_PageLayout_PageSize" || Id === "Home_Clipboard_Paste" || Id === "Others_Cells_InsertCell" || Id === "Others_Cells_DeleteCell" || Id === "Data_DataTools_DataValidation") && (Id = Id + "Options"));
            }
        },

        _refreshFRDlg: function () {
            var xlObj = this.XLObj;
            if (xlObj._dlgWidth < 365) {
                $("#" + xlObj._id + "_Ribbon_lbFind").text(xlObj._getLocStr("Find"));
                $("#" + xlObj._id + "_Ribbon_lbReplace").text(xlObj._getLocStr("Replace"));
            }
            else {
                $("#" + xlObj._id + "_Ribbon_lbFind").text(xlObj._getLocStr("FindLabel"));
                $("#" + xlObj._id + "_Ribbon_lbReplace").text(xlObj._getLocStr("ReplaceLabel"));
            }
        },

        _refreshChartTypeDlg: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_charttypedlg").ejDialog("open");
            $("#" + xlObj._id + "_chartdlg_allcharttab_list").ejListBox('refresh');
        },

        _refreshNMDlg: function () {
            var xlObj = this.XLObj, nmgrid;
            $("#" + xlObj._id + "_nmdlg").ejDialog("open"); // due to grid issue
            nmgrid = $("#" + xlObj._id + "_nmgrid").data("ejGrid");
            nmgrid._refreshScroller({ requestType: "refresh" })
        },

        _menuCustomize: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, settings = xlObj.model.ribbonSettings.applicationTab, settingsOpt = settings.menuSettings;
            if (settings.type === "menu") {
                if (settingsOpt.isAppend)
                    this._fileMenuData = this._fileMenuData.concat(settingsOpt.dataSource);
                else if (settingsOpt.dataSource.length)
                    this._fileMenuData = [{ id: "File", text: xlObj._getLocStr("File"), parentId: null },].concat(settingsOpt.dataSource);
                this._appTabCollection = { type: ej.Ribbon.ApplicationTabType.Menu, menuItemID: xlId + "_Menu", menuSettings: { click: $.proxy(this._onBackStageItemClick, this), openOnClick: false, fields: { dataSource: this._fileMenuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" } } };
            }
            else {
                if (settingsOpt.isAppend) {
                    this._renderAppTab();
                    this._appTabCollection.backstageSettings.pages = this._appTabCollection.backstageSettings.pages.concat(settingsOpt.dataSource);
                }
                else {
                    if (settingsOpt.dataSource.length)
                        this._appTabCollection = { type: ej.Ribbon.applicationTabType.backstage, backstageSettings: { text: xlObj._getLocStr("File"), headerWidth: 124, height: xlObj._responsiveHeight, width: xlObj.model.scrollSettings.width, pages: settingsOpt.dataSource } };
                    else
                        this._renderAppTab();
                }
            }
        },

        _refreshBackstageHeight: function () {
            var xlObj = this.XLObj, ribObj = xlObj.element.find("#" + xlObj._id + "_Ribbon").data("ejRibbon"), respHt = xlObj._isAutoWHMode ? xlObj._responsiveHeight : xlObj._responsiveHeight - 2;
            if (ribObj.model.applicationTab.type === ej.Ribbon.ApplicationTabType.Backstage) {
                ribObj.setModel({ "applicationTab": { "backstageSettings": { "height": respHt, "width": xlObj._isAutoWHMode ? xlObj._responsiveWidth : xlObj._responsiveWidth - 2 } } });
                ribObj.element.find(".e-responsivebackstagecontent .e-resbackstagecontent").css({ "height": respHt - (10 + ribObj.element.find(".e-backstagerestop").outerHeight()) }); //10 for margin
            }
        },

        _refreshBSItems: function (type) {
            var xlObj = this.XLObj;
            if (type === ej.Ribbon.ApplicationTabType.Menu) {
                $("#" + xlObj._id + "_backstagetabnew").remove();
                $("#" + xlObj._id + "_backstagetabsaveas").remove();
                $("#" + xlObj._id + "_backstagetabprint").remove();
            }
        },

        hideMenu: function () {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            if (xlObj.model.ribbonSettings.applicationTab.type === "menu")
                $("#" + xlObj._id + "_Menu").hide();
            else
                xlObj.element.find("#" + xlObj._id + "_Ribbon").find(".e-backstagetab").hide();
        },

        showMenu: function () {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            if (xlObj.model.ribbonSettings.applicationTab.type === "menu")
                $("#" + xlObj._id + "_Menu").show();
            else
                xlObj.element.find("#" + xlObj._id + "_Ribbon").find(".e-backstagetab").show();
        },

        addTab: function (tabText, ribbonGroups, index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly)
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("addTab", tabText, ribbonGroups, index);
        },

        addTabGroup: function (tabIndex, tabGroup, groupIndex) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly)
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("addTabGroup", tabIndex, tabGroup, groupIndex);
        },

        addContextualTabs: function (contextualTabSet, index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly)
                xlObj.element.find("#" + this.XLObj._id + "_Ribbon").ejRibbon("addContextualTabs", contextualTabSet, index);
        },

        removeTab: function (index, isRemoveMenu) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            if (ej.isNullOrUndefined(index) && isRemoveMenu) {
                var tabUl = xlObj.element.find("#" + xlObj._id + "_Ribbon .e-apptab");
                if (tabUl.length) {
                    tabUl.find("a").empty();
                    tabUl.find(".e-menu-wrap").remove();
                    tabUl.hide();
                    xlObj.element.find("#" + xlObj._id + "_Ribbon_BackStage").remove();
                }
            }
            else
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("removeTab", index);
        },

        removeTabGroup: function (tabIndex, groupText) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly)
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("removeTabGroup", tabIndex, groupText);

        },

        addBackStageItem: function (pageItem, index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly && this._appTabCollection.type == "backstage")
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("addBackStageItem", pageItem, index);
        },

        removeBackStageItem: function (index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly && this._appTabCollection.type == "backstage")
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("removeBackStageItem", index);
        },

        updateBackStageItem: function (pageItem, index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly && this._appTabCollection.type == "backstage")
                xlObj.element.find("#" + xlObj._id + "_Ribbon").ejRibbon("updateBackStageItem", index, pageItem);
        },

        removeMenuItem: function (index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly && this._appTabCollection.type == "menu") {
                var menuElem = $("#" + xlObj._id + "_Menu"), menuObj = menuElem.data("ejMenu");
                menuObj.remove(["#" + menuElem.find("li").eq(index).attr("id")]);
            }
        },

        updateMenuItem: function (item, index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly && this._appTabCollection.type == "menu") {
                var menuElem = $("#" + xlObj._id + "_Menu"), menuObj = menuElem.data("ejMenu");
                menuObj.insertBefore(item, "#" + menuElem.find("li").eq(index).attr("id"));
                menuObj.remove(["#" + menuElem.find("li").eq(index + 1).attr("id")]);
            }
        },

        addMenuItem: function (item, index) {
            var xlObj = this.XLObj;
            if (!xlObj.model.isReadOnly && this._appTabCollection.type == "menu") {
                var menuElem = $("#" + xlObj._id + "_Menu"), menuObj = menuElem.data("ejMenu");
                menuObj.insertAfter(item, "#" + menuElem.find("li").eq(index).attr("id"));
            }
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.freezepane = function (obj) {
        this.XLObj = obj;
        this._hfreeze = null;
        this._vfreeze = null;
    };

    ej.spreadsheetFeatures.freezepane.prototype = {
        _setHFreeze: function (elem) {
            this._hfreeze = elem;
        },

        _getHFreeze: function () {
            return this._hfreeze;
        },

        _setVFreeze: function (elem) {
            this._vfreeze = elem;
        },

        _getVFreeze: function () {
            return this._vfreeze;
        },

        _initFreeze: function () {
            var hfreeze, vfreeze, div = "div", hide = "e-hide", xlObj = this.XLObj,
                sslist = xlObj.getMainPanel().find(".e-spreadsheet-list")[0];
            hfreeze = document.createElement(div);
            hfreeze.id = xlObj._id + "_hfreeze";
            hfreeze.className = "e-frow " + hide;
            sslist.appendChild(hfreeze);
            this._setHFreeze($(hfreeze));
            vfreeze = document.createElement(div);
            vfreeze.id = xlObj._id + "_vfreeze";
            vfreeze.className = "e-fcol " + hide;
            sslist.appendChild(vfreeze);
            this._setVFreeze($(vfreeze));
        },

        _refreshFreeze: function () {
            var px = "px", hide = "e-hide", xlObj = this.XLObj, sheet = xlObj.getSheet(), freeze = this._getHFreeze()[0];
            if (!freeze)
                this._initFreeze();
            if (xlObj._isFrozen(xlObj.getFrozenRows())) {
                xlObj._removeClass(freeze, hide);
                freeze.style.top = sheet._fDivTop;
                if (xlObj.model._isActPanelVisible)
                    freeze.style.width = (xlObj._getJSSheetContent(xlObj.getActiveSheetIndex()).width() - (sheet.showHeadings ? xlObj._rowHeaderWidth : 0) + 10) + px;
                else
                    freeze.style.width = sheet._vPortWth + (sheet.showHeadings ? xlObj._rowHeaderWidth : 0) - 4 + px;
            }
            else
                xlObj.addClass(freeze, hide);
            freeze = this._getVFreeze()[0];
            if (xlObj._isFrozen(xlObj.getFrozenColumns())) {
                xlObj._removeClass(freeze, hide);
                freeze.style.left = sheet._fDivLeft;
                freeze.style.height = (sheet._vPortHgt + (sheet.showHeadings ? xlObj._colHeaderHeight : 0)) - 4 + px;
            }
            else
                xlObj.addClass(freeze, hide);
        },

        freezeTopRow: function () {
            var xlObj = this.XLObj, sheet = xlObj.getSheet();
            if (xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns)) {
                xlObj._intrnlReq = true;
                this.unfreezePanes();
                xlObj._intrnlReq = false;
            }
            this._freeze(sheet._topRow.idx + 1);
        },

        freezeLeftColumn: function () {
            var xlObj = this.XLObj, sheet = xlObj.getSheet();
            if (xlObj._isFrozen(sheet.frozenColumns)) {
                xlObj._intrnlReq = true;
                this.unfreezePanes();
                xlObj._intrnlReq = false;
            }
            this._freeze(null, sheet._leftCol.idx + 1);
        },

        freezeRows: function (rowIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet();
            if (xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns)) {
                xlObj._intrnlReq = true;
                this.unfreezePanes();
                xlObj._intrnlReq = false;
            }
            this._freeze(rowIdx);
        },

        freezeColumns: function (colIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet();
            if (xlObj._isFrozen(sheet.frozenColumns)) {
                xlObj._intrnlReq = true;
                this.unfreezePanes();
                xlObj._intrnlReq = false;
            }
            this._freeze(null, colIdx);
        },

        freezePanes: function (rowIdx, colIdx) {
            var range, xlObj = this.XLObj;
            if (!xlObj.isNumber(rowIdx)) {
                range = xlObj._toIntrnlRange(rowIdx);
                rowIdx = range[0], colIdx = range[1];
            }
            this._freeze(rowIdx, colIdx);
        },

        unfreezePanes: function () {
            this._freeze();
            this._refreshSelection();
        },

        _freeze: function (rowIdx, colIdx) {
            var px, idx, hide, sheet, offset, freeze, rrefresh, crefresh, xlObj = this.XLObj, ftopRowIdx, fleftColIdx,
                args = { sheetIndex: xlObj.getActiveSheetIndex() }, hasRow = ej.isNullOrUndefined(rowIdx), hasCol = ej.isNullOrUndefined(colIdx);
            if (hasRow && hasCol)
                args["reqType"] = "unfreezePanes";
            else if (hasCol)
                args["reqType"] = "freezeRow";
            else if (hasRow)
                args["reqType"] = "freezeColumn";
            else
                args["reqType"] = "freezePanes";
            rrefresh = crefresh = true;
            if (!xlObj.model.allowFreezing)
                return;
            px = "px", hide = "e-hide", sheet = xlObj.getSheet(), freeze = this._getHFreeze()[0];
            if (!ej.isNullOrUndefined(rowIdx)) {
                if (rowIdx === 0 || rowIdx < sheet._topRow.idx || rowIdx > sheet._bottomRow.idx)
                    rowIdx = xlObj._getMidCell().rowIdx;
                offset = xlObj._getIdxWithOffset(rowIdx).yOffset;
                if (sheet._topRow.idx === rowIdx && sheet._scrollTop !== offset)
                    xlObj.XLScroll._vScroller().scroll(offset);
                xlObj._removeClass(freeze, hide);
                sheet._isFreezed = true;
                freeze.style.top = sheet._fDivTop = (offset - sheet._scrollTop + (sheet.showHeadings ? (xlObj._colHeaderHeight - 2) : 0)) + px;
                freeze.style.width = sheet._vPortWth + (sheet.showHeadings ? xlObj._rowHeaderWidth : 0) - 4 + px;
                sheet._contScrollTop = sheet._scrollTop;
            }
            else {
                idx = xlObj.getFrozenRows();
                if (xlObj._isFrozen(idx)) {
                    rowIdx = 0;
                    ftopRowIdx = sheet._ftopRowIdx - 1;
                    this._showFreezeRow(idx, ftopRowIdx);
                    if (xlObj.model.scrollSettings.allowVirtualScrolling)
                        xlObj.refreshContent();
                    while (ftopRowIdx >= idx) {
                        if (sheet._fHMergeRows.indexOf(idx) > -1) {
                            sheet._fHMergeRows.splice(sheet._fHMergeRows.indexOf(idx), 1);
                            xlObj._refreshSHMergeCells(null, [idx], 1, "row", "show");
                        }
                        idx++;
                    }
                    xlObj.addClass(freeze, hide);
                    sheet._isFreezed = false;
                }
                else
                    rrefresh = false;
            }
            if (rrefresh) {
                sheet._ftopRowIdx = rowIdx;
                sheet._frozenHeight = xlObj._getRowOffsetTop(sheet, rowIdx);
                sheet.paneTopLeftCell = xlObj.getAlphaRange(rowIdx, sheet._fleftColIdx);
                xlObj.setFrozenRows(rowIdx);
                sheet._frozenRows = rowIdx + 1;
            }
            freeze = this._getVFreeze()[0];
            if (!ej.isNullOrUndefined(colIdx)) {
                if (colIdx === 0 || colIdx < sheet._leftCol.idx || colIdx > sheet._rightCol.idx)
                    colIdx = xlObj._getMidCell().colIdx;
                offset = xlObj._getIdxWithOffset(null, colIdx).xOffset;
                if (sheet._leftCol.idx === colIdx && sheet._scrollLeft !== offset)
                    xlObj.XLScroll._hScroller().scroll(offset);
                offset = (offset + (sheet.showHeadings ? xlObj._rowHeaderWidth : 0)) - 1;
                xlObj._removeClass(freeze, hide);
                sheet._isFreezed = true;
                freeze.style.left = sheet._fDivLeft = (offset - sheet._scrollLeft) + px;
                freeze.style.height = (sheet._vPortHgt + (sheet.showHeadings ? xlObj._colHeaderHeight : 0)) - 4 + px;
                sheet._contScrollLeft = sheet._scrollLeft;
            }
            else {
                idx = xlObj.getFrozenColumns();
                if (xlObj._isFrozen(idx)) {
                    colIdx = 0;
                    fleftColIdx = sheet._fleftColIdx - 1;
                    this._showFreezeCol(idx, fleftColIdx);
                    while (fleftColIdx >= idx) {
                        if (sheet._fHMergeCols.indexOf(idx.toString()) > -1) {
                            sheet._fHMergeCols.splice(sheet._fHMergeCols.indexOf(idx.toString()), 1);
                            xlObj._refreshSHMergeCells(null, [idx], 1, "column", "show");
                        }
                        idx++;
                    }
                    xlObj.addClass(freeze, hide);
                    sheet._isFreezed = false;
                }
                else
                    crefresh = false;
            }
            if (crefresh) {
                sheet._fleftColIdx = colIdx;
                sheet._frozenWidth = xlObj._getColOffsetLeft(sheet, colIdx);
                sheet.paneTopLeftCell = xlObj.getAlphaRange(sheet._ftopRowIdx, colIdx);
                xlObj.setFrozenColumns(colIdx);
                sheet._frozenColumns = colIdx + 1;
            }
            if (rrefresh || crefresh) {
                xlObj.XLScroll._refreshScroller(null, null, rrefresh && crefresh ? "all" : (rrefresh ? "vertical" : "horizontal"));
                if (rrefresh)
                    xlObj.model.scrollSettings.allowScrolling && xlObj.XLScroll._vScroller().scroll(xlObj._isFrozen(xlObj.getFrozenRows()) ? 0 : sheet._contScrollTop);
                if (crefresh)
                    xlObj.model.scrollSettings.allowScrolling && xlObj.XLScroll._hScroller().scroll(xlObj._isFrozen(xlObj.getFrozenColumns()) ? 0 : sheet._contScrollLeft);
            }
            if (rrefresh)
                args["rowIndex"] = rowIdx;
            if (crefresh)
                args["colIndex"] = colIdx;
            if (!xlObj._intrnlReq)
                xlObj._trigActionComplete(args);
        },

        _frozenScrollHandler: function (args) {
            var count, retVal, i = 0, xlObj = this.XLObj, xlScroll = xlObj.XLScroll, sheet = xlObj.getSheet(),
                sheetIdx = xlObj.getActiveSheetIndex(), vScroll = xlScroll._vScroller(sheetIdx), hScroll = xlScroll._hScroller(sheetIdx), clientRect;
            if (args.model.orientation === ej.ScrollBar.Orientation.Vertical) {
                clientRect = vScroll.element.find(".e-vhandle")[0].getBoundingClientRect();
                args["reachedEnd"] = (clientRect.top + clientRect.height) >= vScroll.element.find(".e-vhandlespace").height() - 2;
                if (args.scrollData.up || args.reachedEnd && xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite) {
                    count = ((args.scrollTop - sheet._scrollTop) / sheet.rowHeight);
                    if (sheet._bottomRow.idx + count >= sheet.rowCount - 1) {
                        if (!xlObj.model.scrollSettings.allowVirtualScrolling)
                            xlObj.XLScroll._scrollBottom(sheetIdx);
                        else {
                            while (count >= sheet.rowCount) {
                                i = 0;
                                sheet._virtualBlockCnt++;
                                sheet.rowCount += sheet._virtualBlockRowCnt;
                                while (i < sheet._virtualBlockRowCnt) {
                                    sheet.rowsHeightCollection.push(sheet.rowHeight);
                                    i++;
                                }
                            }
                        }
                        xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical");
                    }
                }
                if (xlScroll._isIntrnlScroll) {
                    this._scrollFreeze(xlScroll._scrollIdx);
                    xlScroll._scrollIdx = 0;
                    sheet._scrollTop = args.scrollTop;
                }
                else {
                    if (args.scrollTop != sheet._scrollTop && (!args.reachedEnd || xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite)) {
                        retVal = this._ensureFreezeScrollPos(args);
                        if (!xlObj.isUndefined(retVal.resetTo)) {
                            xlScroll._isIntrnlScroll = true;
                            xlScroll._scrollIdx = retVal.rowIdx;
                            xlScroll._vScroller().scroll(retVal.resetTo);
                            xlScroll._isIntrnlScroll = false;
                        }
                        else {
                            this._scrollFreeze(retVal.rowIdx);
                            sheet._scrollTop = args.scrollTop;
                        }
                    }
                }
            }
            else {
                args["reachedEnd"] = Math.ceil(parseFloat(hScroll.element.find(".e-hhandle").css('left'))) + Math.ceil(parseFloat(hScroll.element.find(".e-hhandle").width())) >= xlObj.element.find(".e-hhandlespace").width() - 2;
                count = ((args.scrollLeft - sheet._scrollLeft) / sheet.columnWidth);
                if (args.reachedEnd || (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite && sheet._rightCol.idx + count >= sheet.colCount - 1)) {
                    xlObj.XLScroll._scrollRight(sheetIdx);
                    xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "horizontal");
                }
                if (xlScroll._isIntrnlScroll) {
                    this._scrollFreeze(null, xlScroll._scrollIdx);
                    xlScroll._scrollIdx = 0;
                    sheet._scrollLeft = args.scrollLeft;
                }
                else {
                    if (args.scrollLeft != sheet._scrollLeft && (!args.reachedEnd || xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite)) {
                        retVal = this._ensureFreezeScrollPos(args);
                        if (!xlObj.isUndefined(retVal.resetTo)) {
                            xlScroll._isIntrnlScroll = true;
                            xlScroll._scrollIdx = retVal.colIdx;
                            xlScroll._hScroller().scroll(retVal.resetTo);
                            xlScroll._isIntrnlScroll = false;
                        }
                        else {
                            this._scrollFreeze(null, retVal.colIdx);
                            sheet._scrollLeft = args.scrollLeft;
                        }
                    }
                }
            }
            if (xlObj.model.allowComments)
                xlObj.XLComment._updateCmntArrowPos();
        },

        _ensureFreezeScrollPos: function (args) {
            var pos, retVal, obj = {}, hideTypes = [ej.Spreadsheet.HideTypes.Freeze], xlObj = this.XLObj, sheet = xlObj.getSheet();
            if (args.model.orientation === ej.ScrollBar.Orientation.Vertical) {
                pos = args.scrollTop + sheet._frozenHeight;
                retVal = xlObj._getIdxWithOffset(pos, null, true, hideTypes);
                obj.rowIdx = retVal.rowIdx;
                if (pos !== retVal.yOffset)
                    obj.resetTo = retVal.yOffset - sheet._frozenHeight;
            }
            else {
                pos = args.scrollLeft + sheet._frozenWidth;
                retVal = xlObj._getIdxWithOffset(null, pos, true, hideTypes);
                obj.colIdx = retVal.colIdx;
                if (pos !== retVal.xOffset)
                    obj.resetTo = retVal.xOffset - sheet._frozenWidth;
            }
            return obj;
        },

        _scrollFreeze: function (rowIdx, colIdx) {
            var idx, xlObj = this.XLObj, sheet = xlObj.getSheet(), sheetIdx = xlObj.getActiveSheetIndex(), shapeMngr = sheet.shapeMngr;
            if (rowIdx && sheet._ftopRowIdx !== rowIdx) {
                if (sheet._ftopRowIdx < rowIdx) {
                    idx = rowIdx - sheet._ftopRowIdx === 1 ? sheet._ftopRowIdx : rowIdx - 1;
                    this._hideFreezeRow(sheet._ftopRowIdx, idx);
                    if (this.XLObj.getObjectLength(shapeMngr.chart) || this.XLObj.getObjectLength(shapeMngr.picture))
                        this._refreshShape(sheet._ftopRowIdx, idx, true);
                }
                else {
                    idx = sheet._ftopRowIdx - rowIdx === 1 ? rowIdx : sheet._ftopRowIdx - 1;
                    this._showFreezeRow(rowIdx, idx);
                    if (this.XLObj.getObjectLength(shapeMngr.chart) || this.XLObj.getObjectLength(shapeMngr.picture))
                        this._refreshShape(rowIdx, idx, true);
                }
                if (xlObj.model.scrollSettings.allowVirtualScrolling) {
                    xlObj._refreshContent(sheetIdx, true);
                }
                while (idx >= rowIdx) {
                    if (sheet._fHMergeRows.indexOf(idx) > -1) {
                        sheet._fHMergeRows.splice(sheet._fHMergeRows.length - 1, 1);
                        xlObj._refreshSHMergeCells(null, [idx], 1, "row", "show")
                    }
                    idx--;
                }
                sheet._ftopRowIdx = rowIdx;
                sheet.paneTopLeftCell = xlObj.getAlphaRange(rowIdx, sheet._fleftColIdx);
                if (xlObj.model.scrollSettings.allowScrolling) {
                    xlObj.XLScroll._getRowHeights(sheetIdx, 1, null, true);
                    xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical");
                    xlObj.XLScroll._getFirstRow(sheetIdx);
                }
            }
            else if (colIdx && sheet._fleftColIdx !== colIdx) {
                if (sheet._fleftColIdx < colIdx) {
                    idx = colIdx - sheet._fleftColIdx === 1 ? sheet._fleftColIdx : colIdx - 1;
                    this._hideFreezeCol(sheet._fleftColIdx, idx);
                    if (this.XLObj.getObjectLength(shapeMngr.chart) || this.XLObj.getObjectLength(shapeMngr.picture))
                        this._refreshShape(sheet._fleftColIdx, idx);
                }
                else {
                    idx = sheet._fleftColIdx - colIdx === 1 ? colIdx : sheet._fleftColIdx - 1;
                    this._showFreezeCol(colIdx, idx);
                    if (this.XLObj.getObjectLength(shapeMngr.chart) || this.XLObj.getObjectLength(shapeMngr.picture))
                        this._refreshShape(colIdx, idx);
                }
                while (idx >= colIdx) {
                    if (sheet._fHMergeCols.indexOf(idx.toString()) > -1) {
                        sheet._fHMergeCols.splice(sheet._fHMergeCols.length - 1, 1);
                        xlObj._refreshSHMergeCells(null, [idx], 1, "column", "show");
                    }
                    idx--;
                }
                sheet._fleftColIdx = colIdx;
                sheet.paneTopLeftCell = xlObj.getAlphaRange(sheet._ftopRowIdx, colIdx);
            }
            this._refreshSelection();
        },

        _refreshShape: function (sIdx, eIdx, isRow) {
            var i, shapeData, chartId, shapeId, picId, pivotId, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), shape = sheet.shapeMngr, pvtMngr = sheet.pivotMngr,
                range = isRow ? [sIdx, 0, eIdx, sheet.colCount] : [0, sIdx, sheet.rowCount, eIdx], chartLen = xlObj.getObjectLength(shape.chart), isShapeRange = false, k, pictureLen = xlObj.getObjectLength(shape.picture);
            if (chartLen) {
                var chartKeys = xlObj.getObjectKeys(shape.chart);
                for (k = 0; k < chartLen; k++) {
                    if (xlObj.inRange(range, shape.chart[chartKeys[k]].rowIndex, shape.chart[chartKeys[k]].colIndex)) {
                        isShapeRange = true;
                        break;
                    }
                }
            }
            if (pictureLen) {
                var pictureKeys = xlObj.getObjectKeys(shape.picture);
                for (k = 0; k < pictureLen; k++) {
                    if (xlObj.inRange(range, shape.picture[pictureKeys[k]].rowIndex, shape.picture[pictureKeys[k]].colIndex)) {
                        isShapeRange = true;
                        break;
                    }
                }
            }
            if (isShapeRange) {
                shapeData = xlObj.getRangeData({ range: range, property: ["picture", "chart"] });
                for (i = 0; i < shapeData.length; i++) {
                    if (shapeData[i].picture) {
                        picId = shapeData[i].picture[xlObj.getObjectLength(shapeData[i].picture)];
                        shapeId = isRow ? shape.picture[picId].rowIndex : shape.picture[picId].colIndex;
                        this._freezeShape($("#" + picId)[0], isRow ? sheet._hiddenFreezeRows.indexOf(shapeId) > -1 : sheet._hiddenFreezeCols.indexOf(shapeId) > -1);
                    }
                    if (shapeData[i].chart) {
                        chartId = shapeData[i].chart[xlObj.getObjectLength(shapeData[i].chart)];
                        shapeId = isRow ? shape.chart[chartId].rowIndex : shape.chart[chartId].colIndex;
                        this._freezeShape($("#" + chartId)[0], isRow ? sheet._hiddenFreezeRows.indexOf(shapeId) > -1 : sheet._hiddenFreezeCols.indexOf(shapeId) > -1);
                    }
                    if (shapeData[i].pivot) {
                        pivotId = shapeData[i].pivot[xlObj.getObjectLength(shapeData[i].pivot)];
                        shapeId = isRow ? pvtMngr.pivot[pivotId].rowIndex : pvtMngr.pivot[pivotId].colIndex;
                        this._freezeShape($("#" + pivotId)[0], isRow ? sheet._hiddenFreezeRows.indexOf(shapeId) > -1 : sheet._hiddenFreezeCols.indexOf(shapeId) > -1);
                    }
                }
                this._updateShapePos(isRow);
            }
        },

        _updateShapePos: function (isRow) {
            var topVal, leftVal, lastRow, lastCol, totRowDiff = 0, totColDiff = 0, key, elemId, prop, shapeColl, mngrKey, xlObj = this.XLObj, sheet = xlObj.getSheet(),
                shapeMngr = sheet.shapeMngr, fRHiddenColls = sheet._hiddenFreezeRows, fCHiddenColls = sheet._hiddenFreezeCols;

            if (isRow)
                totRowDiff = this._getFreezeHidenDim(true);
            else
                totColDiff = this._getFreezeHidenDim();

            for (mngrKey in shapeMngr) {
                if (["chart", "picture"].indexOf(mngrKey) > -1) {
                    shapeColl = shapeMngr[mngrKey];
                    for (key in shapeColl) {
                        prop = shapeColl[key], elemId = prop.id, topVal = prop.top, leftVal = prop.left, lastRow = fRHiddenColls[fRHiddenColls.length - 1] || 0, lastCol = fCHiddenColls[fCHiddenColls.length - 1] || 0;
                        if (isRow) {
                            if (lastRow <= prop.rowIndex) {
                                topVal -= totRowDiff;
                                xlObj.getSheetElement().find("#" + elemId).css({ top: topVal });
                            }
                        }
                        else {
                            if (lastCol <= prop.colIndex) {
                                leftVal -= totColDiff;
                                xlObj.getSheetElement().find("#" + elemId).css({ left: leftVal });
                            }
                        }
                    }
                }
            }
        },

        _getFreezeHidenDim: function (isHeight) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(), hiddenColls, dimenColls, totalVal = 0, i = 0;

            if (isHeight) {
                hiddenColls = sheet._hiddenFreezeRows;
                dimenColls = sheet.rowsHeightCollection;
            }
            else {
                hiddenColls = sheet._hiddenFreezeCols;
                dimenColls = sheet.columnsWidthCollection;
            }

            for (i = 0; i < hiddenColls.length; i++) {
                totalVal += dimenColls[hiddenColls[i]];
            }

            return totalVal;
        },

        _freezeShape: function (shapeElem, isHidden) {
            var xlObj = this.XLObj;
            if (isHidden)
                xlObj.addClass(shapeElem, "e-hide");
            else
                xlObj._removeClass(shapeElem, "e-hide");
        },

        _hideFreezeRow: function (srowIdx, eRowIdx) {
            var i, xlObj = this.XLObj, scrollSettings = xlObj.model.scrollSettings, isVirtualScroll = scrollSettings.allowScrolling && scrollSettings.allowVirtualScrolling, sheetIdx = xlObj.getActiveSheetIndex(),
                rowColl = xlObj.getRows(sheetIdx), hdrRows = rowColl[0], rows = rowColl[1], sheet = xlObj.getSheet(sheetIdx), usedRange = sheet.usedRange, j, isMerge = false, mergeLen = sheet.mergedCells.length;
            while (srowIdx <= eRowIdx) {
                i = 0;
                if (sheet._hiddenFreezeRows.indexOf(srowIdx) === -1)
                    sheet._hiddenFreezeRows.push(srowIdx);
                if (!isVirtualScroll && xlObj._isRowViewable(sheetIdx, srowIdx)) {
                    xlObj.addClass(rows[srowIdx], "e-r-hide");
                    xlObj.addClass(hdrRows[srowIdx], "e-r-hide");
                }
                while (i < usedRange.colIndex) {
                    for (j = 0; j < mergeLen; j++)
                        isMerge = xlObj.inRange(xlObj._getRangeArgs(sheet.mergedCells[j].range), srowIdx, i);
                    if (isMerge && xlObj.XLCellNav._isMergedCell({ rowIndex: srowIdx, colIndex: i })) {
                        sheet._fHMergeRows.push(srowIdx);
                        xlObj._refreshSHMergeCells(sheetIdx, [srowIdx], 1, "row", "hide");
                        break;
                    }
                    i++;
                }
                srowIdx++;
            }
        },

        _showFreezeRow: function (srowIdx, eRowIdx) {
            var idx, isFHide = false, xlObj = this.XLObj, scrollSettings = xlObj.model.scrollSettings, isVirtualScroll = scrollSettings.allowScrolling && scrollSettings.allowVirtualScrolling,
                sheetIdx = xlObj.getActiveSheetIndex(), rowColl = xlObj.getRows(sheetIdx), hdrRows = rowColl[0], rows = rowColl[1], sheet = xlObj.getSheet();
            while (srowIdx <= eRowIdx) {
                idx = sheet._hiddenFreezeRows.indexOf(srowIdx);
                if (xlObj.model.allowFiltering && xlObj.getObjectLength(sheet._filterColl))
                    isFHide = this._refreshFiltering(srowIdx);
                if (idx > -1) {
                    sheet._hiddenFreezeRows.splice(idx, 1);
                    if (!isVirtualScroll && xlObj._isRowViewable(sheetIdx, srowIdx) && !isFHide) {
                        xlObj._removeClass(rows[srowIdx], "e-r-hide");
                        xlObj._removeClass(hdrRows[srowIdx], "e-r-hide");
                    }
                }
                srowIdx++;
            }
        },
        _refreshFiltering: function (rowIdx) {
            var isFHide = false, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet();
            if (!ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, 0, "isFilterHide", sheetIdx))) {
                if (sheet._filterHRowsColl.indexOf(rowIdx) === -1)
                    sheet._filterHRowsColl.push(rowIdx);
                isFHide = true;
                return isFHide;
            }
            return isFHide;
        },
        _hideFreezeCol: function (scolIdx, ecolIdx) {
            var diff, cells, j, hide = "e-fcol-hide", i = scolIdx, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(),
                usedRange = sheet.usedRange, idxColl = xlObj.model.scrollSettings.allowVirtualScrolling ? sheet._virtualRowIdx : sheet._rowIdxColl,
                hdr = xlObj._getJSSheetHeader(sheetIdx), cont = xlObj._getContent(sheetIdx), th = hdr.find("th"),
                hdrColGrp = hdr.find("col"), contColGrp = cont.find("col"), hdrTable = hdr.find("table");
            diff = xlObj._getWidth(scolIdx, ecolIdx);
            while (i <= ecolIdx) {
                j = 0;
                if (sheet._hiddenFreezeCols.indexOf(i) === -1)
                    sheet._hiddenFreezeCols.push(i);
                xlObj.addClass(th[i], hide);
                xlObj.addClass(hdrColGrp[i], hide);
                xlObj.addClass(contColGrp[i], hide);
                while (j < usedRange.rowIndex) {
                    if (xlObj.XLCellNav._isMergedCell({ rowIndex: j, colIndex: i })) {
                        sheet._fHMergeCols.push(i.toString());
                        xlObj._refreshSHMergeCells(sheetIdx, [i], 1, "column", "hide");
                        break;
                    }
                    j++;
                }
                i++;
            }
            cells = xlObj.getRange([idxColl[0], scolIdx, idxColl[idxColl.length - 1], ecolIdx]);
            i = cells.length;
            if (i) {
                while (i--)
                    xlObj.addClass(cells[i], hide);
            }
            diff = hdrTable.width() - diff;
            hdrTable.width(diff);
            cont.find(".e-table").width(diff);
        },

        _getWidth: function (scolIdx, ecolIdx) {
            var wth = 0, sheet = this.XLObj.getSheet();
            for (; scolIdx <= ecolIdx; scolIdx++)
                wth += sheet.columnsWidthCollection[scolIdx];
            return wth;
        },

        _showFreezeCol: function (scolIdx, ecolIdx) {
            var idx, diff, cells, hide = "e-fcol-hide", i = scolIdx, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(), hdr = xlObj._getJSSheetHeader(sheetIdx), cont = xlObj._getContent(sheetIdx), th = hdr.find("th"),
                idxColl = xlObj.model.scrollSettings.allowVirtualScrolling ? sheet._virtualRowIdx : sheet._rowIdxColl,
                hdrColGrp = hdr.find("col"), contColGrp = cont.find("col"), hdrTable = hdr.find("table");
            diff = xlObj._getWidth(0, sheet.colCount - 1) - (sheet._frozenColumns - 1 < scolIdx ? xlObj._getWidth(sheet._frozenColumns - 1, scolIdx) : 0);
            while (i <= ecolIdx) {
                idx = sheet._hiddenFreezeCols.indexOf(i);
                if (idx > -1) {
                    sheet._hiddenFreezeCols.splice(idx, 1);
                    xlObj._removeClass(th[i], hide);
                    xlObj._removeClass(hdrColGrp[i], hide);
                    xlObj._removeClass(contColGrp[i], hide);
                }
                i++;
            }
            cells = xlObj.getRange([idxColl[0], scolIdx, idxColl[idxColl.length - 1], ecolIdx]);
            i = cells.length;
            if (i) {
                while (i--)
                    xlObj._removeClass(cells[i], hide);
            }
            hdrTable[0].style.width = diff + "px";
            cont.find("table")[0].width = diff + "px";
        },

        _refreshSelection: function () {
            var sRIdx, eRIdx, sCIdx, eCIdx, isTrue = false, xlObj = this.XLObj, sheet = xlObj.getSheet(),
                sRange = sheet.selectedRange, rIdx = sRange[2], cIdx = sRange[3], startRow = sRange[0], startCol = sRange[1];
            if (sheet._endCell.rowIndex + 1 >= sheet._frozenRows && sheet._endCell.rowIndex < sheet._ftopRowIdx && sheet._startCell.rowIndex < sheet._frozenRows - 1) {
                rIdx = sheet._frozenRows - 2;
                isTrue = true;
            }
            else {
                sRIdx = sRange[0], eRIdx = sRange[2];
                if (sheet._frozenRows - 1 <= sRIdx)
                    while (sRIdx <= eRIdx) {
                        if (sRIdx < sheet._ftopRowIdx)
                            sRIdx++;
                        else {
                            startRow = sRIdx;
                            break;
                        }
                    }
            }
            if (sRange[3] + 1 >= sheet._frozenColumns && sRange[3] < sheet._fleftColIdx && sRange[1] < sheet._frozenColumns - 1) {
                cIdx = sheet._frozenColumns - 2;
                isTrue = true;
            }
            else {
                sCIdx = sRange[1], eCIdx = sRange[3];
                if (sheet._frozenColumns - 1 <= sCIdx)
                    while (sCIdx <= eCIdx) {
                        if (sCIdx < sheet._fleftColIdx)
                            sCIdx++;
                        else {
                            startCol = sCIdx;
                            break;
                        }
                    }
            }
            if (sRIdx == eRIdx + 1 || sCIdx == eCIdx + 1)
                xlObj.XLSelection._hideShowSelElem("hide");
            else {
                xlObj.model.allowSelection && xlObj.XLSelection._refreshBorder([startRow, startCol, rIdx, cIdx]);
                if (isTrue)
                    xlObj.addClass(xlObj.getAutoFillElem()[0], "e-hide")
                else
                    xlObj.model.allowAutoFill && xlObj.XLDragFill.positionAutoFillElement();
            }
        },

        _selectionScroll: function () {
            var i, diff, trgt, hiddenWth, hiddenHgt = hiddenWth = 0, xlObj = this.XLObj, sheet = xlObj.getSheet(), sheetIdx = xlObj.getActiveSheetIndex();
            if (xlObj._isFrozen(sheet.frozenRows)) {
                // To Scroll vertically from top to bottom
                if (sheet._startCell.rowIndex + 1 < sheet._frozenRows && sheet._endCell.rowIndex + 1 > sheet._frozenRows && sheet.selectedRange[2] < sheet._ftopRowIdx) {
                    if (sheet._ftopRowIdx + 1 - sheet._frozenRows > 0) {
                        diff = sheet._endCell.rowIndex - sheet._ftopRowIdx;
                        sheet._endCell.rowIndex = sheet._frozenRows - 1 + diff;
                        for (i = sheet._frozenRows - 1; i < sheet._ftopRowIdx; i++)
                            hiddenHgt += sheet.rowsHeightCollection[i];
                        xlObj._scrollContent({ y: -hiddenHgt });
                    }
                }
                // To Scroll vertically from bottom to top
                else if (sheet.selectedRange[2] - sheet._endCell.rowIndex > 0 && sheet._ftopRowIdx > sheet._frozenRows - 1 && !sheet._isColSelected
                    && sheet._endCell.rowIndex < sheet._frozenRows - 1 && sheet.selectedRange[2] - sheet.selectedRange[0] > 0 && sheet.selectedRange[2] >= sheet._ftopRowIdx - 1) {
                    sheet._endCell.rowIndex = sheet._ftopRowIdx - 1;
                    trgt = xlObj.getCell(sheet._frozenRows - 2, sheet._endCell.colIndex)[0];
                    xlObj.XLSelection._scrollCalculation(sheetIdx, trgt, { position: "vertical", action: "Decrement" });
                }
            }
            if (xlObj._isFrozen(sheet.frozenColumns)) {
                // To Scroll Horizontally from left to right
                if (sheet._startCell.colIndex + 1 < sheet._frozenColumns && sheet._endCell.colIndex + 1 > sheet._frozenColumns && sheet.selectedRange[3] < sheet._fleftColIdx) {
                    if (sheet._fleftColIdx + 1 - sheet._frozenColumns > 0) {
                        diff = sheet._endCell.colIndex - sheet._fleftColIdx;
                        sheet._endCell.colIndex = sheet._frozenColumns - 1 + diff;
                        for (i = sheet._frozenColumns - 1; i < sheet._fleftColIdx; i++)
                            hiddenWth += sheet.columnsWidthCollection[i];
                        xlObj._scrollContent({ x: -hiddenWth });
                    }
                }
                // To Scroll Horizontally from right to left
                else if (sheet.selectedRange[3] - sheet._endCell.colIndex > 0 && sheet._fleftColIdx > sheet._frozenColumns - 1 && !sheet._isRowSelected
                    && sheet._endCell.colIndex < sheet._frozenColumns - 1 && sheet.selectedRange[3] - sheet.selectedRange[1] > 0 && sheet.selectedRange[3] >= sheet._fleftColIdx - 1) {
                    sheet._endCell.colIndex = sheet._fleftColIdx - 1;
                    trgt = xlObj.getCell(sheet._frozenColumns - 2, sheet._endCell.colIndex)[0];
                    xlObj.XLSelection._scrollCalculation(sheetIdx, trgt, { position: "horizontal", action: "Decrement" });
                }
            }
        },
        _refreshFColResize: function (colIdx) {
            var diff, px = "px", xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(), fCol = xlObj.getFrozenColumns() + 1, vfreeze = this._getVFreeze()[0], width = sheet._frozenWidth, left = parseInt(this._getVFreeze()[0].style.left);
            xlObj.XLScroll._getColWidths(sheetIdx, colIdx);
            sheet._frozenWidth = xlObj._getColOffsetLeft(sheet, fCol - 1);
            diff = (width > sheet._frozenWidth) ? width - sheet._frozenWidth : sheet._frozenWidth - width;
            if (colIdx < fCol - 1)
                vfreeze.style.left = sheet._fDivLeft = (width >= sheet._frozenWidth) ? (left - diff) + px : (left + diff) + px;
        },
        _refreshFRowResize: function (rowIdx) {
            var diff, px = "px", xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(), fRow = xlObj.getFrozenRows() + 1, hfreeze = this._getHFreeze()[0], height = sheet._frozenHeight, top = parseInt(this._getHFreeze()[0].style.top);
            xlObj.XLScroll._getRowHeights(sheetIdx, rowIdx);
            sheet._frozenHeight = xlObj._getRowOffsetTop(sheet, fRow - 1);
            diff = (height > sheet._frozenHeight) ? height - sheet._frozenHeight : sheet._frozenHeight - height;
            if (rowIdx < fRow - 1)
                hfreeze.style.top = sheet._fDivTop = (height >= sheet._frozenHeight) ? (top - diff) + px : (top + diff) + px;
        },

        _refreshFreezeRowDiv: function () {
            var xlObj = this.XLObj, sheet = xlObj.getSheet();
            sheet._fDivTop = xlObj._getIdxWithOffset(sheet._frozenRows - 1).yOffset - sheet._contScrollTop + (sheet.showHeadings ? (xlObj._colHeaderHeight - 2) : 0) + "px";
            sheet._frozenHeight = xlObj._getRowOffsetTop(sheet, sheet._frozenRows - 1);
            this._refreshFreeze();
        },

        _refreshFreezeColDiv: function () {
            var xlObj = this.XLObj, sheet = xlObj.getSheet();
            sheet._fDivLeft = xlObj._getColOffsetLeft(sheet, sheet._frozenColumns - 1) - sheet._contScrollLeft + (sheet.showHeadings ? xlObj._rowHeaderWidth : 0) - 1 + "px";
            sheet._frozenWidth = xlObj._getColOffsetLeft(sheet, sheet._frozenColumns - 1);
            this._refreshFreeze();
        }
    };
})(jQuery, Syncfusion);
;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};
    ej.spreadsheetFeatures.math = {
        toFraction: function (val) {
            if (this.isNumber(val)) {
                var input = val.toString(), integerval = input.split(".")[0], decimalval = input.split(".")[1];
                if (!decimalval)
                    return { integer: val };
                var wholeval = (+decimalval).toString(), placeval = this.getPlaceValue(decimalval, wholeval), gcd = this.getGcd(wholeval, placeval);
                return { integer: integerval, numerator: Number(wholeval) / gcd, denominator: Number(placeval) / gcd };
            }
            return null;
        },

        toExponential: function (val, decimalplaces) {
            if (this.isNumber(val)) {
                var expVal, input = Number(val), splt;
                decimalplaces = decimalplaces || 2;
                if (decimalplaces > 20)
                    decimalplaces = 20;
                expVal = input.toExponential(decimalplaces);
                if (expVal.indexOf("e+") > -1) {
                    splt = expVal.split("e+");
                    return splt[0] + "E+" + this.padZeros(splt[1]);
                }
                else {
                    splt = expVal.split("e-");
                    return splt[0] + "E-" + this.padZeros(splt[1]);
                }

            }
            return null;
        },

        toAccounting: function (formatstr, value, locale) {
            if (this.isNumber(value) && formatstr) {
                var prefix, suffix, val = ej.widgetBase.formatting(formatstr, value, locale), symbol = this._currencySymbol,
                    trunval = $.trim(val.replace(symbol, "")), idx = val.indexOf(symbol);
                if (!idx || (value < 0 && idx === 1)) {
                    prefix = symbol;
                    suffix = !Number(value) ? "-" : trunval;
                }
                else {
                    prefix = !Number(value) ? "-" : trunval;
                    suffix = symbol;
                }
                value = prefix + "   " + suffix;
            }
            return value;
        },

        intToDate: function (num) {
            return new Date(((Number(num) - 2) * (1000 * 3600 * 24)) + new Date("01/01/1900").getTime());
        },

        getGcd: function (a, b) {  //make generic gcd of multiple no
            a = Number(a);
            b = Number(b);
            if (!b)
                return a;
            return this.getGcd(b, a % b);
        },

        isNumber: function (val) {
            return val - parseFloat(val) >= 0;
        },

        isTime: function (val) {
            return !val ? false : val.toString().indexOf(":") !== -1;
        },

        isFormula: function (formula) {
            var obrackets, cbrackets;
            if (formula) {
                if (!formula.toString().indexOf("=") && formula.length > 1) {
                    obrackets = formula.split("(").length - 1;
                    cbrackets = formula.split(")").length - 1;
                    return obrackets === cbrackets;
                }
            }
            return false;
        },

        getPlaceValue: function (val, digit) {
            var index = val.indexOf(digit) + digit.length;
            return "1" + Array(index + 1).join("0");
        },

        padZeros: function (val, digits, position) {
            if (this.isNumber(val)) {
                digits = this.isNumber(digits) ? digits : 2;
                position = ej.isNullOrUndefined(ej.Spreadsheet.autoFillDirection[position]) ? ej.Spreadsheet.autoFillDirection.Left : ej.Spreadsheet.autoFillDirection[position];
                if (position === ej.Spreadsheet.autoFillDirection.Left)
                    return val <= this.maxValue(digits) ? Array(digits - this.getDigits(val) + 1).join("0") + val.toString() : val.toString();
                else
                    return val < this.minValue(digits) ? val.toString() + Array(digits - this.getDigits(val) + 1).join("0") : val.toString();
            }
            return null;
        },

        maxValue: function (digits) {
            if (this.isNumber(digits))
                return Number(Array(digits + 1).join("9"));
            return null;
        },

        minValue: function (digits) {
            if (this.isNumber(digits))
                return Number("1" + Array(digits).join("0"));
            return null;
        },

        getDigits: function (val) {
            if (this.isNumber(val))
                return val.toString().length;
            return null;
        },

        _round: function round(val, digits) {
            return Number(Math.round(val + 'e' + digits) + 'e-' + digits);
        },

        _parseTime: function (val) {   // will return object as input of new date
            var len, sval, i = 0, j = 3, obj = {}, cval;
            if (this.isTime(val)) {
                val = val.toString();
                sval = val.split(" ");
                len = sval.length;
                while (i < len) {
                    if (this.isTime(sval[i])) {
                        cval = sval[i].split(":");
                        while (j < 6) {
                            obj[this._datePattern[j]] = cval[j - 3] || "0";
                            j++;
                        }
                    }
                    i++;
                }
            }
            return obj;
        },

        _dateToInt: function (date, isTime) {
            var date1 = new Date("01/01/1900"), date2 = this._isDateTime(date) ? date : new Date(date),
                timeDiff = (date2.getTime() - date1.getTime()),
                diffDays = (timeDiff / (1000 * 3600 * 24)) + 2;
            return isTime ? diffDays % 1 : diffDays;
        },

        _defTimeFormat: function (d) {
            var dformat = [d.getHours(),
            d.getMinutes(),
            d.getSeconds()].join(":");
            return dformat;
        },

        _isDate: function (text) {
            var regx = /^((0?[1-9]|1[012])[-.](0?[1-9]|[12][0-9]|3[01])[-.](19|20)?[0-9]{2})*$/, value = {};
            if (!ej.isNullOrUndefined(ej.parseDate(text.toString())))
                text = this._dateToInt(text.toString());
            if (regx.test(text.toString())) {
                text = text.toString().replace("-", "/", "g");
                text = this._dateToInt(text.toString());
                value.text = text;
                value.isDate = true;
            }
            else {
                value.text = text;
                value.isDate = false;
            }
            return value;
        },

        _defDateFormat: function (d) {
            var dformat = [(d.getMonth() + 1),
            d.getDate(),
            d.getFullYear()].join("/");
            return dformat;
        },

        _isCellReference: function (text) {
            return /^[a-z]{1,3}\d{1,7}$/gi.test(text) ? "relative" : (/^\$[a-z]{1,3}\$\d{1,7}$/gi.test(text) ? "absolute" : (/^((\$[a-z]{1,3})\d{1,7}|[a-z]{1,3}(\$\d{1,7}))$/gi.test(text) ? "mixed" : false));
        },

        _isDateTime: function (date) {
            return Object.prototype.toString.call(date) === "[object Date]" && !isNaN(date.valueOf());
        },

        _decimalCnt: function (val) {
            var strVal, fixVal;
            if (this.isNumber(val)) {
                val = Number(val);
                strVal = val.toString();
                if (strVal.indexOf(this._decimalSeparator) > -1) {
                    fixVal = val.toFixed();
                    return (strVal.length - fixVal.length) - 1;
                }
            }
            return 0;
        },

        _getPosDiff: function (x, y) {
            return x > y ? x - y : y - x;
        }
    };
})(jQuery, Syncfusion);
;
(function ($, ej, undefined) {
    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.resizing = function (obj) {
        this.XLObj = obj;
        this._$visualElem = $();
        this._currentHCell = -1;
        this._colMinWidth = 15;
        this._rowMinHeight = 20;
        this._allowStart = false;
        this._resizeStart = false;
        this._resizeType = "";
        this._tableY = null;
        this._oldWidth = null;
        this._orgX = null;
        this._orgY = null;
        this._extra = null;
        this._initialTableWidth = null;
        this._resizeElt = null;
        this._tableX = null;
        this._oldHeight = null;
        this._initialTableHeight = null;
        this._resizerowId = 0;
        this._sparklineResize = false;
    };

    ej.spreadsheetFeatures.resizing.prototype = {
        //Resizing

        getColWidth: function (colIdx) {
            return this.XLObj.getSheet(this.XLObj.getActiveSheetIndex()).columnsWidthCollection[colIdx];
        },

        getRowHeight: function (rowIdx) {
            return this.XLObj.getSheet(this.XLObj.getActiveSheetIndex()).rowsHeightCollection[rowIdx];
        },

        setColWidth: function (colIdx, size) {
            if (!this.XLObj.model.allowResizing)
                return;
            var sheetIdx = this.XLObj.getActiveSheetIndex();
            this._currentHCell = colIdx;
            this._resizeColumnUsingDiff(size, this.XLObj.getSheet(sheetIdx).columnsWidthCollection[colIdx], [colIdx]);
            this.XLObj.XLScroll._getColWidths(sheetIdx, colIdx);
            this.XLObj.XLSelection.refreshSelection();
        },

        setRowHeight: function (rowIdx, size) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowResizing)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex()
            this._currentHCell = rowIdx;
            this._resizeRowUsingDiff(size, xlObj.getSheet(sheetIdx).rowsHeightCollection[rowIdx], [rowIdx]);
        },

        _headerMouseDown: function (e) {
            e.preventDefault();
            this._colMouseDown(e);
        },

        _colMouseDown: function (e) {
            var xy, xlObj = this.XLObj, args = {};
            xy = xlObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1);
            this._orgX = xy[0] + document.documentElement.scrollLeft;
            this._orgY = xy[1];
            if (xlObj._isTouchEvt)
                this._mouseHover(e);
            if (this._allowStart && (($(e.target).css("cursor") === "col-resize") || xlObj._isTouchEvt)) {
                args.event = e;
                args.target = e.target;
                args.colIndex = this._currentHCell;
                args.oldWidth = e.target.getBoundingClientRect().width;
                args.reqType = "column-resize";
                if (xlObj._trigger("resizeStart", args)) {
                    return;
                }
                if (e.button !== 2)
                    this._start(this._orgX, this._orgY);
                this._resizeType = "Col";
                e.preventDefault();
            }
        },

        _mouseHover: function (e) {
            var nlx, xlObj = this.XLObj, trgt = e.target, sheetIdx = xlObj.getActiveSheetIndex(), header = xlObj._getJSSheetHeader(sheetIdx);
            if (this._$visualElem.is(":visible"))
                return;
            if (xlObj._hasClass(trgt, "e-headercelldiv"))
                trgt = trgt.parentNode;
            if (xlObj._hasClass(trgt, "e-headercell")) {
                var resCell = trgt, location = resCell.getBoundingClientRect(), xy = xlObj._setXY(e), x = xy[0], y = xy[1];
                nlx = $(header.find(".e-table")[0]).width() + $(header.find(".e-columnheader")[0]).offset().left;
                if (((x >= (location.left + document.documentElement.scrollLeft + resCell.offsetWidth - (xlObj._isTouchEvt ? 15 : 7))) || ((x < (location.left + (xlObj._isTouchEvt ? 13 : 0))))) && (x < nlx) && (x >= location.left) && (y <= location.top + document.documentElement.scrollTop + trgt.offsetHeight)) {
                    this._currentHCell = header.find(".e-headercell").index(resCell);
                    if (this._currentHCell < 1 && x < (location.left + resCell.offsetWidth - (xlObj._isTouchEvt ? 15 : 5)) || (this._preventColResize(this._currentHCell, false)))
                        return;
                    xlObj.addClass(trgt, "e-ss-colresize");
                    this._allowStart = true;
                }
                else {
                    xlObj._removeClass($(".e-ss-colresize")[0], "e-ss-colresize");
                    this._allowStart = false;
                    this._currentHCell = -1;
                }
            }
        },
        _preventColResize: function (colIdx, isCMenu) {
            this._currentHCell = colIdx;
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), pvtMngr = xlObj.getSheet(sheetIdx).pivotMngr.pivot,
                pivotIdCol = xlObj.getObjectKeys(pvtMngr), pvtColIdx, colCount, pvtObj, count, i,
                pivotCount = pivotIdCol.length;
            if (pivotIdCol.length) {
                for (i = 0; i < pivotCount; i++) {
                    pvtColIdx = pvtMngr[pivotIdCol[i]].colIndex;
                    pvtObj = xlObj.element.find('#' + pivotIdCol[i]).data("ejPivotGrid");
                    count = (pvtObj.calculateCellWidths().columnWidths).length;
                    if (!count)
                        count = 3;
                    colCount = pvtColIdx + count;
                    if (isCMenu)
                        return this._currentHCell >= pvtColIdx && this._currentHCell < colCount;
                    else
                        return this._currentHCell >= pvtColIdx && this._currentHCell <= colCount;
                }
            }
        },

        _start: function (x) {
            var xlObj = this.XLObj, height, sheetIdx = xlObj.getActiveSheetIndex(), header = xlObj._getJSSheetHeader(sheetIdx), row = header.find(".e-columnheader"), cells = row.find(".e-headercell"), cell, rect;
            if (this._currentHCell > -1 && this._currentHCell < cells.length)
                cell = cells[this._currentHCell];
            if (ej.isNullOrUndefined(cell))
                return;
            rect = cell.getBoundingClientRect();
            this._tableY = rect.top + parseInt(navigator.userAgent.indexOf("WebKit") > -1 ? document.body.scrollTop : document.documentElement.scrollTop);
            if (this._allowStart) {
                this._$visualElem = $(document.createElement("div"));
                height = xlObj._getJSSheetContent(sheetIdx).height() + header.height();
                this._$visualElem.addClass("e-reSizeColbg").appendTo(xlObj.element).css({ height: height + "px" }).addClass("e-ss-colresize");
                this._$visualElem.css({ left: x - 1, top: this._tableY });
                this._oldWidth = cell.offsetWidth;
                this._extra = x - this._orgX;
                this._resizeStart = true;
            }
            else {
                this._currentHCell = -1;
            }
        },

        _cMouseMove: function (e) {
            if (this._resizeStart) {
                var x = this.XLObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1)[0];
                x += document.documentElement.scrollLeft;
                e.preventDefault();
                this._moveVisual(x);
                this.XLObj.addClass(e.target, "e-ss-colresize");
            }
            else
                this._mouseHover(e);
        },

        _reSize: function (x) {
            // Function used for Resizing the column                     
            var oldWidth, xlObj = this.XLObj, groupedColumn, sheetIdx = xlObj.getActiveSheetIndex(), i, header = xlObj._getJSSheetHeader(sheetIdx), colSelected = header.find(".e-colselected"), colLen = colSelected.length, currentCHCellIdx, currentCHCells = [], dimension;
            this._initialTableWidth = xlObj._getJSSheetHeader(sheetIdx).find(".e-headercontent").width();
            this._getResizableCell();
            if (this._currentHCell > -1 && this._resizeStart) {
                oldWidth = xlObj.getSheet(sheetIdx).columnsWidthCollection[this._currentHCell];
                (colLen > 0) && (currentCHCellIdx = colSelected[0].cellIndex);
                for (i = 0; i < colLen; i++) {
                    (this._currentHCell === currentCHCellIdx) && (groupedColumn = true);
                    currentCHCells.push(currentCHCellIdx);
                    currentCHCellIdx++;
                }
                (!groupedColumn) && (currentCHCells = [this._currentHCell]);
                this._resizeColumnUsingDiff(x - this._orgX + oldWidth, oldWidth, currentCHCells);
                if (xlObj._isAutoWHMode) {
                    xlObj._autoSSWidthHeight();
                    dimension = xlObj._getElementDimension();
                    xlObj.element.css({ height: dimension.height, width: dimension.width });
                }
                if (xlObj.model.allowAutoFill) {
                    xlObj.XLDragFill.positionAutoFillElement();
                    xlObj.XLDragFill.hideAutoFillOptions();
                }
                if ($("#" + xlObj._id + "ddlspan").length)
                    xlObj._ddlPosition();
            }
            xlObj.XLScroll._getRowHeights(sheetIdx, this._currentHCell);
            if (xlObj.model.allowFreezing)
                xlObj.XLFreeze._refreshFColResize(this._currentHCell);
            xlObj.model.allowSelection && xlObj.XLSelection._refreshBorder();
            this._removeVisualElem();
        },

        _resizeColumnUsingDiff: function (newWidth, oldWidth, currentCHCells) {
            var cellInfo, leng, sparklineId, sparkline, span, cellObj, txtVal, txtWidth, columnCells, overflowCells, $headerCol, $ContentCol, xlObj = this.XLObj, details = {}, sheetIdx = xlObj.getActiveSheetIndex(), header = xlObj._getJSSheetHeader(sheetIdx), rowIndex, sheet = xlObj.getSheet(sheetIdx);
            if (newWidth > 0) {
                newWidth = newWidth > this._colMinWidth ? newWidth : this._colMinWidth;
                for (var i = 0, len = currentCHCells.length; i < len; i++) {
                    if (xlObj.XLEdit.getPropertyValue(0, currentCHCells[i], "wrapCol") && xlObj.XLEdit.getPropertyValue(0, currentCHCells[i], "wrapWidth") > newWidth) {
                        xlObj._dupDetails = true;
                        continue;
                    }
                    $headerCol = header.find("col:eq(" + currentCHCells[i] + ")");
                    $ContentCol = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer").find("col:eq(" + currentCHCells[i] + ")");
                    $headerCol.outerWidth(newWidth);
                    $ContentCol.width(newWidth);
                    xlObj.XLShape && xlObj.XLShape._refreshShapePosOnResize(currentCHCells[i], newWidth, true, sheetIdx);
                    sheet.columnsWidthCollection[currentCHCells[i]] = newWidth;
                    if (newWidth < oldWidth) {
                        columnCells = xlObj._getContent(sheetIdx).find(".e-rowcell:nth-child(" + (currentCHCells[i] + 1) + ")");
                        for (var j = 0, length = columnCells.length; j < length; j++) {
                            cellObj = xlObj._getCellIdx(columnCells[j]);
                            txtVal = xlObj.XLEdit.getPropertyValue(cellObj.rowIndex, cellObj.colIndex, "value2");
                            sparkline = xlObj.XLEdit.getPropertyValue(cellObj.rowIndex, cellObj.colIndex, "sparkline", sheetIdx);
                            if (sparkline)
                                xlObj.XLSparkline._sparklineResize(sparkline[0], { width: newWidth }, sheetIdx);
                            if (txtVal) {
                                xlObj._refreshGlobalSpan();
                                span = $('#' + xlObj._id + '_emptySpan');
                                xlObj.addClass(span[0], 'e-rowcell');
                                span.text(txtVal);
                                txtWidth = span.outerWidth();
                                xlObj._refreshGlobalSpan();
                                if (newWidth < txtWidth) {
                                    xlObj._textClip(cellObj.rowIndex, cellObj.colIndex, "delete");
                                    xlObj._textClip(cellObj.rowIndex, cellObj.colIndex, "add", txtWidth);
                                }
                            }
                        }
                    }
                    else {
                        overflowCells = xlObj._getContent(sheetIdx).find(".e-rowcell.e-ofbrdr:nth-child(" + (currentCHCells[i] + 1) + ")");
                        rowIndex = sheet.usedRange.rowIndex;
                        if (xlObj.model.allowSparkline && xlObj.getObjectLength(sheet.shapeMngr.sparkline) > 0) {
                            for (var k = 0; k <= rowIndex; k++) {
                                sparkline = xlObj.XLEdit.getPropertyValue(k, currentCHCells[i], "sparkline", sheetIdx);
                                if (sparkline) {
                                    xlObj.XLScroll._getColWidths(sheetIdx, currentCHCells[0]);
                                    cellInfo = xlObj._getCellInfo({ rowIndex: k, colIndex: currentCHCells[i] }, sheetIdx);
                                    xlObj._getContent(sheetIdx).find("#" + sparkline[0]).css({ top: cellInfo.top, left: cellInfo.left });
                                    sparklineId = xlObj._dataContainer.sheets[sheetIdx][k][currentCHCells[i]].sparkline[0].split("_")[4];
                                    if (sparklineId == currentCHCells[i])
                                        xlObj.XLSparkline._sparklineResize(sparkline[0], { width: newWidth }, sheetIdx);
                                }
                            }
                       }
                        for (j = 0, leng = overflowCells.length; j < leng; j++) {
                            cellObj = xlObj._getCellIdx(overflowCells[j]);
                            xlObj._textClip(cellObj.rowIndex, cellObj.colIndex, "delete", "", true);
                            xlObj._textClip(cellObj.rowIndex, cellObj.colIndex, "add", "", true);
                        }
                    }
                }
                header.find(".e-columnheader").css("cursor", "default");
                if (!xlObj._dupDetails) {
                    details = { sheetIndex: sheetIdx, cols: currentCHCells, newWidth: newWidth, oldWidth: oldWidth, reqType: "resize-column" };
                    if (oldWidth !== newWidth) {
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                }
                xlObj._dupDetails && (xlObj._dupDetails = false);
                xlObj.XLScroll._getColWidths(sheetIdx, currentCHCells[0]);
                if (xlObj.model.scrollSettings.allowScrolling) {
                    xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "all");
                    xlObj.XLScroll._getFirstColumn(sheetIdx);
                }
                if (xlObj.XLSparkline)
                    xlObj.XLSparkline._refreshSparklinePos({ rowIndex: 0, colIndex: currentCHCells[0] }, sheetIdx);
            }
        },

        _calculateWidth: function () {
            var xlObj = this.XLObj, colgroup = xlObj._getJSSheetHeader(xlObj.getActiveSheetIndex()).find("col"), width = 0;
            for (var i = 0; i < colgroup.length; i++)
                width += colgroup.eq(i).width();
            return width;

        },

        _cMouseUp: function (e) {
            if (this._resizeStart) {
                var x, xlObj = this.XLObj, currentHCell = this._currentHCell, cWidthColl = xlObj.getSheet(xlObj.getActiveSheetIndex()).columnsWidthCollection, args = {};
                x = xlObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1)[0];
                x += document.documentElement.scrollLeft;
                args.event = e;
                args.target = e.target;
                args.oldWidth = cWidthColl[currentHCell];
                args.colIndex = this._currentHCell;
                this._reSize(x);
                args.newWidth = cWidthColl[currentHCell];
                args.reqType = "column-resize";
                if (this.XLObj._trigger("resizeEnd", args)) {
                    return;
                }
                xlObj.element.find("#" + xlObj._id + "ddl").ejDropDownList("hidePopup");
            }
        },

        _getResizableCell: function (e) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), row = xlObj._getJSSheetHeader(sheetIdx).find(".e-columnheader"), cell;
            var scrollLeft = navigator.userAgent.indexOf("WebKit") > -1 ? document.body.scrollLeft : document.documentElement.scrollLeft, xlimit, point;
            cell = this._resizeStart ? row.find(".e-headercell") : row.find(".e-headercell").not(".e-hide");
            for (var i = 0, len = cell.length; i < len; i++) {
                point = cell[i].getBoundingClientRect();
                xlimit = point.left + scrollLeft + 5;
                if (xlimit > this._orgX) {
                    if (xlObj.isUndefined(e))
                        this._currentHCell = this._getVisibleCell(cell, i - 1);
                    else
                        e.target = xlObj._getJSSheetHeader(sheetIdx).find('th:eq(' + (i - 1) + ')')[0];
                    return;
                }
            }
        },

        _getVisibleCell: function (cells, idx) {
            if ($(cells[idx]).is(":visible"))
                return idx;
            else
                return this._getVisibleCell(cells, idx - 1);
        },

        _moveVisual: function (x) {
            /// Used to move the visual element in mouse move
            var xlObj = this.XLObj, bounds = xlObj._getJSSheetHeader(xlObj.getActiveSheetIndex()).find(".e-headercontent")[0].getBoundingClientRect();
            if ((bounds.left + document.documentElement.scrollLeft + bounds.width < x) || (x < bounds.left + document.documentElement.scrollLeft))
                this._$visualElem.remove();
            else if (this._currentHCell > -1)
                this._$visualElem.css({ left: x - 1, top: this._tableY });
        },

        _rowMouseDown: function (e) {
            var x, y, xy, args = {}, xlObj = this.XLObj;
            if (xlObj._isTouchEvt)
                this._rowMouseHover(e);
            if (this._allowStart && ($(e.target).css("cursor") === "row-resize")) {
                xy = xlObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1);
                x = xy[0];
                y = xy[1];
                y += document.documentElement.scrollTop;
                args.event = e;
                args.target = e.target;
                args.rowIndex = this._currentHCell;
                args.oldHeight = e.target.getBoundingClientRect().height;
                args.reqType = "row-resize";
                if (this.XLObj._trigger("resizeStart", args)) {
                    return;
                }
                if (e.button !== 2)
                    this._rowStart(x, y);
                this._resizeType = "Row";
                e.preventDefault();
            }
            return false;
        },

        _rowMouseHover: function (e) {
            if (this._$visualElem.is(":visible"))
                return;
            var $trgt = $(e.target);
            if ($trgt.hasClass("e-rowheader")) {
                var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), rHContent = xlObj._getJSSheetRowHeaderContent(sheetIdx);
                var resCell = $trgt.get(0), location = resCell.getBoundingClientRect(), xy = xlObj._setXY(e), x = xy[0], y = xy[1];
                var nly = xlObj._getJSSheetRowHeader(sheetIdx).find(".e-table").height() + rHContent.find("tbody").offset().top;
                if (((y >= (location.top + document.documentElement.scrollTop + resCell.offsetHeight - (xlObj._isTouchEvt ? 8 : 7))) || ((y < (location.top + (xlObj._isTouchEvt ? 8 : 0))))) && (y < nly) && (y >= location.top) && (x <= location.left + document.documentElement.scrollLeft + e.target.offsetWidth)) {
                    this._resizeElt = $trgt.parent();
                    this._currentHCell = xlObj.model.scrollSettings.allowVirtualScrolling ? parseInt(this._resizeElt.attr('data-idx')) : this._resizeElt[0].rowIndex;
                    if (this._currentHCell < 1 && y < (location.top + resCell.offsetHeight - (xlObj._isTouchEvt ? 8 : 5)) || (this._preventRowResize(this._currentHCell, false)))
                        return;
                    $trgt.addClass("e-ss-rowresize");
                    this._allowStart = true;
                }
                else {
                    $(".e-ss-rowresize").removeClass("e-ss-rowresize");
                    this._allowStart = false;
                    this._currentHCell = -1;
                }
                this._resizerowId = e.target.parentNode.getAttribute('data-idx');
            }
        },

        _preventRowResize: function (rowIdx, isCMenu) {
            this._currentHCell = rowIdx;
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), pvtMngr = xlObj.getSheet(sheetIdx).pivotMngr.pivot,
                pivotIdCol = xlObj.getObjectKeys(pvtMngr), pvtRowIdx, rowCount, pvtObj, count, i,
                pivotCount = pivotIdCol.length;
            if (pivotIdCol.length) {
                for (i = 0; i < pivotCount; i++) {
                    pvtRowIdx = pvtMngr[pivotIdCol[i]].rowIndex;
                    pvtObj = xlObj.element.find('#' + pivotIdCol[i]).data("ejPivotGrid");
                    count = pvtObj._rowCount;
                    if (!count)
                        count = 4;
                    rowCount = pvtRowIdx + count;
                    if (isCMenu)
                        return this._currentHCell >= pvtRowIdx && this._currentHCell < rowCount;
                    else
                        return this._currentHCell >= (pvtRowIdx - 1) && this._currentHCell <= rowCount;
                }
            }
        },
        _rowStart: function (x, y) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), currHCell = this._resizeElt[0].rowIndex, cells = xlObj._getJSSheetRowHeader(sheetIdx).find(".e-rowheader"), cell, rect, width;
            if (this._currentHCell > -1 && currHCell < cells.length)
                cell = cells[currHCell];
            if (!cell)
                return;
            rect = cell.getBoundingClientRect();
            this._tableX = rect.left + parseInt(navigator.userAgent.indexOf("WebKit") > -1 ? document.body.scrollLeft : document.documentElement.scrollLeft);
            if (this._allowStart) {
                this._$visualElem = $(document.createElement("div"));
                width = xlObj._getJSSheetContent(sheetIdx).width();
                this._$visualElem.addClass("e-reSizeRowbg").appendTo(xlObj.element).css({ width: width + "px" }).addClass("e-ss-rowresize");
                this._$visualElem.css({ top: y - 3, left: this._tableX });
                this._oldHeight = cell.offsetHeight;
                this._orgX = x;
                this._orgY = y;
                this._extra = y - this._orgY;
                this._resizeStart = true;
            }
            else {
                this._currentHCell = -1;
            }
        },

        _rMouseMove: function (e) {
            if (this._resizeStart) {
                var y = this.XLObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1)[1];
                y += document.documentElement.scrollTop;
                e.preventDefault();
                $(e.target).addClass("e-ss-rowresize");
                this._moveRowVisual(y);
            }
            else
                this._rowMouseHover(e);
        },

        _rowResize: function (x, y) {
            // Function used for Resizing the row                      
            var oldHeight, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), rows = xlObj.getRows(sheetIdx)[1], isWrap = false, i, rHContent = xlObj._getJSSheetRowHeaderContent(sheetIdx), selRHCells = rHContent.find(".e-rowselected"), rowLen = selRHCells.length, currentRHCellIdx, groupedRow, currentRHCells = [], hdnRowCnt = 0, k;
            this._initialTableHeight = xlObj._getJSSheetRowHeader(sheetIdx).find(".e-rowheadercontent").height();
            this._getResizableRowCell();
            isWrap = $(rows[this._currentHCell]).find(".e-sswraptext").length > 0;
            if (this._currentHCell > -1 && this._resizeStart) {
                for (k = 0; k <= this._resizerowId; k++)
                    (xlObj.XLEdit.getPropertyValue(k, 0, "isRHide")) && hdnRowCnt++;
                oldHeight = xlObj.getSheet(sheetIdx).rowsHeightCollection[this._currentHCell + hdnRowCnt];
                if (!isWrap || (isWrap && (y - this._orgY + oldHeight) > oldHeight)) {
                    (rowLen > 0) && (currentRHCellIdx = selRHCells[0].parentNode.rowIndex);
                    for (i = 0; i < rowLen; i++) {
                        (this._currentHCell === currentRHCellIdx) && (groupedRow = true);
                        currentRHCells.push(currentRHCellIdx);
                        currentRHCellIdx++;
                    }
                    (!groupedRow) && (currentRHCells = [this._currentHCell]);
                    this._resizeRowUsingDiff(y - this._orgY + oldHeight, oldHeight, currentRHCells);
                }
                if (xlObj.model.allowAutoFill) {
                    xlObj.XLDragFill.positionAutoFillElement();
                    xlObj.XLDragFill.hideAutoFillOptions();
                }
                if (xlObj._isAutoWHMode && xlObj.model.showRibbon)
                    xlObj._autoSSWidthHeight(sheetIdx, true);
            }
            if (xlObj.model.allowSelection)
                xlObj.XLSelection._refreshBorder();
            this._removeVisualElem();
        },

        _resizeRowUsingDiff: function (newHeight, oldHeight, currentRHCells) {
            var i, cellInfo, sparklineId, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), details = {}, rHContent = xlObj._getJSSheetRowHeaderContent(sheetIdx), len, $headerCol, $ContentCol, rowIdx, virtRowIdx, isHtOk, sparkline, colIndex;
            if (newHeight > 0) {
                newHeight = newHeight > this._rowMinHeight ? newHeight : this._rowMinHeight;
                for (i = 0, len = currentRHCells.length; i < len; i++) {
                    rowIdx = currentRHCells[i];
                    virtRowIdx = xlObj.model.scrollSettings.allowVirtualScrolling ? xlObj.getSheet(sheetIdx)._virtualRowIdx.indexOf(rowIdx) : rowIdx;
                    isHtOk = this._getContentHeight(rowIdx, sheetIdx) <= newHeight;
                    if (xlObj._isRowViewable(sheetIdx, rowIdx) && (xlObj._isUndoRedo || isHtOk)) {
                        $headerCol = rHContent.find("tr:eq(" + virtRowIdx + ")");
                        $ContentCol = xlObj._getJSSheetContent(sheetIdx).find(".e-content").find("tr:eq(" + virtRowIdx + ")");
                        $headerCol.outerHeight(newHeight);
                        $ContentCol.height(newHeight);
                        colIndex = xlObj.getSheet(sheetIdx).usedRange.colIndex;
                        for (var l = 0; l <= colIndex; l++) {
                            sparkline = xlObj.XLEdit.getPropertyValue(currentRHCells[i], l, "sparkline", sheetIdx);
                            if (sparkline) {
                                xlObj.XLScroll._getRowHeights(sheetIdx, currentRHCells[0]);
                                cellInfo = xlObj._getCellInfo({ rowIndex: currentRHCells[i], colIndex: colIndex }, 1);
                                $("#" + sparkline[0]).css({ top: cellInfo.top });
                                sparklineId = xlObj._dataContainer.sheets[sheetIdx][currentRHCells[i]][l].sparkline[0].split("_")[3];
                                if (sparklineId == currentRHCells[i])
                                    xlObj.XLSparkline._sparklineResize(sparkline[0], { height: newHeight }, sheetIdx);
                            }
                        }
                    }
                    xlObj.XLShape && xlObj.XLShape._refreshShapePosOnResize(currentRHCells[i], newHeight, false, sheetIdx);
                    if (xlObj._isUndoRedo || isHtOk)
                        xlObj.getSheet(sheetIdx).rowsHeightCollection[rowIdx] = newHeight;
                }
                xlObj.XLScroll._getRowHeights(sheetIdx, currentRHCells[0]);
                rHContent.find("tbody").css("cursor", "default");
                rHContent.find("tbody").children().css("cursor", "default");
                if (!xlObj._dupDetails) {
                    details = { sheetIndex: sheetIdx, rows: currentRHCells, newHeight: newHeight, oldHeight: oldHeight, reqType: "resize-row" };
                    if (oldHeight !== newHeight && !xlObj._dupDetails) {
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                }
                if (xlObj.model.allowFreezing)
                    xlObj.XLFreeze._refreshFRowResize(rowIdx);
                if (xlObj.model.scrollSettings.allowScrolling) {
                    xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "all");
                    xlObj.XLScroll._getFirstRow(sheetIdx);
                }
                if (xlObj.XLSparkline)
                    xlObj.XLSparkline._refreshSparklinePos({ rowIndex: currentRHCells[0], colIndex: 0 }, sheetIdx);
            }
        },

        _findRowsHeight: function (rows) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), actSheet = xlObj.getSheet(sheetIdx), trColl = xlObj._getJSSheetContent(sheetIdx).find("tbody").children(), index;
            for (var i = 0, len = rows.length; i < len; i++) {
                index = rows[i];
                if (xlObj._sheets[sheetIdx]._Rows[0])
                    actSheet.rowsHeightCollection[index] = trColl.eq(index).height();
            }
        },

        _calculateHeight: function () {
            var xlObj = this.XLObj, rows = xlObj.getRows(xlObj.getActiveSheetIndex())[0], height = 0;
            for (var i = 0, len = rows.length; i < len; i++)
                height += rows.eq(i).height();
            return height;
        },

        _rMouseUp: function (e) {
            if (this._resizeStart) {
                var xlObj = this.XLObj, currentHCell = this._currentHCell, rHeightColl = xlObj.getSheet(xlObj.getActiveSheetIndex()).rowsHeightCollection, args = {}, x, y, xy = xlObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1);
                x = xy[0];
                y = xy[1];
                y += document.documentElement.scrollTop;
                args.event = e;
                args.target = e.target;
                args.oldHeight = rHeightColl[currentHCell];
                args.rowIndex = this._currentHCell;
                this._rowResize(x, y);
                args.newHeight = rHeightColl[currentHCell];
                args.reqType = "row-resize";
                if (this.XLObj._trigger("resizeEnd", args)) {
                    return;
                }
                if ($("#" + this.XLObj._id + "ddlspan").length)
                    this.XLObj._ddlPosition();
            }
        },

        _getResizableRowCell: function (e) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), cell = xlObj._getJSSheetContent(sheetIdx).find(".e-rowheader"), scrollTop = navigator.userAgent.indexOf("WebKit") > -1 ? document.body.scrollTop : document.documentElement.scrollTop, ylimit, point, count = 1, idx;
            for (var i = 0, len = cell.length; i < len; i++) {
                point = cell[i].getBoundingClientRect();
                if (point.top === 0) count++;
                ylimit = point.top + scrollTop + 5;
                if (ylimit > this._orgY) {
                    if (xlObj.isUndefined(e)) {
                        idx = $(cell[i - 1]).is(":visible") ? i - 1 : i - count;
                        this._currentHCell = xlObj._getCellIdx(cell[idx]).rowIndex;
                    }
                    else
                        e.target = xlObj._getJSSheetRowHeader(sheetIdx).find('tr:eq(' + i + ') td')[0];
                    return;
                }
            }
        },

        _moveRowVisual: function (y) {
            /// Used to move the visual element in mouse move
            var xlObj = this.XLObj, bounds = xlObj._getJSSheetContent(xlObj.getActiveSheetIndex()).find(".e-rowheadercontent")[0].getBoundingClientRect();
            if ((bounds.top + document.documentElement.scrollTop + bounds.height < y) || (y < bounds.top + document.documentElement.scrollTop))
                this._$visualElem.remove();
            else if (this._currentHCell > -1)
                this._$visualElem.css({ top: y - 3, left: this._tableX });
        },

        //Activation panel resizing
        _apMouseDown: function (e) {
            var x, xlObj = this.XLObj;
            if (xlObj._isTouchEvt)
                this._apMouseHover(e);
            if (this._allowStart && ($(e.target).closest("div").css("cursor") === "col-resize")) {
                x = xlObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1)[0];
                x += document.documentElement.scrollLeft;
                if (e.button !== 2)
                    this._apStart(x);
                this._resizeType = "AP";
                e.preventDefault();
            }
            return false;
        },

        _apMouseHover: function (e) {
            var xlObj = this.XLObj;
            if (this._$visualElem.is(":visible"))
                return;
            var $trgt = $(e.target), location = xlObj.getActivationPanel()[0].getBoundingClientRect(), x = xlObj._setXY(e)[0];
            if ((x <= (location.left + (xlObj._isTouchEvt ? 20 : 4))) && (x >= location.left)) {
                $trgt.parent().addClass("e-ss-apresize");
                this._allowStart = true;
            }
            else {
                xlObj.element.find(".e-ss-apresize").removeClass("e-ss-apresize");
                this._allowStart = false;
            }
        },

        _apStart: function (x) {
            var xlObj = this.XLObj, cell = xlObj.getActivationPanel()[0], rect = cell.getBoundingClientRect(), sheetIdx = xlObj.getActiveSheetIndex(), height;
            this._tableY = rect.top + parseInt(navigator.userAgent.indexOf("WebKit") > -1 ? document.body.scrollTop : document.documentElement.scrollTop);
            if (this._allowStart) {
                this._$visualElem = $(document.createElement("div"));
                height = xlObj._getJSSheetContent(sheetIdx).height() + xlObj._getJSSheetHeader(sheetIdx).height();
                this._$visualElem.addClass("e-reSizeAPbg").appendTo(xlObj.element).css({ height: height + "px" }).addClass("e-ss-apresize");
                this._$visualElem.css({ left: x, top: this._tableY });
                this._resizeStart = true;
            }
        },

        _apMouseMove: function (e) {
            if (this._resizeStart) {
                var xlObj = this.XLObj, x = xlObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1)[0];
                x += document.documentElement.scrollLeft;
                e.preventDefault();
                this._apMoveVisual(x);
            }
            else
                this._apMouseHover(e);
        },

        _apMouseUp: function (e) {
            if (this._resizeStart) {
                var xlObj = this.XLObj, x = xlObj._setXY(e, navigator.userAgent.indexOf("WebKit") > -1)[0];
                x += document.documentElement.scrollLeft;
                this._apReSize(x);
            }
        },

        _apMoveVisual: function (x) {
            this._$visualElem.css({ left: x - 5, top: this._tableY });
        },

        _apReSize: function (x) {
            var xlObj = this.XLObj, prevWidth = xlObj.model.activationPanelWidth, isScrollWidth = 0, settings = $.extend(true, {}, xlObj.model.scrollSettings), actPanel = xlObj.getActivationPanel(), desObj;
            settings.width = xlObj._responsiveWidth;
            settings.height = xlObj._responsiveHeight;
            xlObj.model.activationPanelWidth = Math.abs(settings.width - (x - xlObj.element.offset().left));
            if (xlObj.model.enablePivotTable) {
                var scrObj = xlObj.getActivationPanel().data("ejScroller");
                isScrollWidth = xlObj.getActivationPanel().find(".e-vscrollbar").length ? 20 : 2;
                actPanel.find(".e-ss-pivotfield").width(xlObj.model.activationPanelWidth - isScrollWidth);
                actPanel.find("#" + xlObj._id + "_PivotField").width(xlObj.model.activationPanelWidth - isScrollWidth);
                if (prevWidth > xlObj.model.activationPanelWidth) {
                    scrObj.option({ width: xlObj.model.activationPanelWidth - 1 });
                    xlObj._setSheetWidthHeight(xlObj.getActiveSheetIndex(), { width: settings.width, height: settings.height }, null, "resize");
                }
                else {
                    xlObj._setSheetWidthHeight(xlObj.getActiveSheetIndex(), { width: settings.width, height: settings.height }, null, "resize");
                    scrObj.option({ width: xlObj.model.activationPanelWidth - 1 });
                }
                desObj = xlObj.getActivationPanel().find("#" + xlObj._id + "_PivotTableSchema_" + xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot")[0].id).data("ejPivotSchemaDesigner");
                desObj._reSizeHandler();
                scrObj.refresh();
            }
            this._removeVisualElem();
        },

        _removeVisualElem: function () {
            var xlObj = this.XLObj;
            this._$visualElem.remove();
            xlObj.element.find(".e-reSizeRowbg").remove();
            this._resizeStart = false;
            this._currentHCell = -1;
            this._resizeType = "";
            this._allowStart = false;
            if (xlObj.model.allowComments)
                xlObj.XLComment._updateCmntArrowPos();
        },

        //Resize To Fit Width
        fitWidth: function (colIdxes) {
            //colIdxes is the array of column indexes to be resized
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex();
            if (!xlObj.model.allowResizing)
                return;
            for (var i = 0, len = colIdxes.length; i < len; i++)
                this._fitWidth(colIdxes[i], 0, xlObj.getSheet(sheetIdx).usedRange.rowIndex);
            if (xlObj.model.scrollSettings.allowScrolling) {
                xlObj.XLScroll._getColWidths(sheetIdx, colIdxes[0] + 1);
                xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "horizontal");
            }
            xlObj.model.allowSelection && xlObj.XLSelection._refreshBorder();
            if (xlObj.model.allowComments)
                xlObj.XLComment._updateCmntArrowPos(null, sheetIdx, { colIndex: colIdxes[i] });
        },

        _resizeToFitWidth: function (e) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), endRowIdx = xlObj.getSheet(sheetIdx).usedRange.rowIndex, colIndex = e.target.cellIndex;
            this._getResizableCell(e);
            this._fitWidth(colIndex, 0, endRowIdx);
            if (xlObj.model.scrollSettings.allowScrolling) {
                xlObj.XLScroll._getColWidths(xlObj.getActiveSheetIndex(), e.target.cellIndex + 1);
                xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "horizontal");
            }
            xlObj.model.allowSelection && xlObj.XLSelection._refreshBorder();
            if (xlObj.model.allowAutoFill)
                xlObj.XLDragFill.positionAutoFillElement();
            if (xlObj.model.allowComments)
                xlObj.XLComment._updateCmntArrowPos(null, sheetIdx, { colIndex: e.target.cellIndex });
        },

        _fitWidth: function (colIdx, stRowIdx, endRowIdx) {
            var sparkline, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), trgt = xlObj._getJSSheetHeader(sheetIdx).find(".e-headercell")[colIdx], $cellDiv = $(trgt).children(".e-headercelldiv"),
                finalWidth = 0, headerWidth = 0, contentWidth = 0, sheet = xlObj.getSheet(sheetIdx);
            endRowIdx = endRowIdx ? endRowIdx : sheet.usedRange.rowIndex;
            contentWidth = Math.round(this._getContentWidth(colIdx, sheetIdx, stRowIdx, endRowIdx));
            headerWidth = this._getHeaderContentWidth($cellDiv, sheetIdx);
            if (contentWidth > 1) {
                finalWidth = headerWidth > contentWidth ? headerWidth : contentWidth;
                var details = { target: trgt, sheetIndex: sheetIdx, colIndex: colIdx, newWidth: finalWidth, oldWidth: trgt.offsetWidth, reqType: "resize-fit-width" };
                if (finalWidth > 0) {
                    if (finalWidth < 20)
                        finalWidth = 30;
                    for (var i = stRowIdx; i <= endRowIdx + 1; i++) {
                        sparkline = xlObj.XLEdit.getPropertyValue(stRowIdx, colIdx, "sparkline", sheetIdx);
                        if (sparkline)
                            xlObj.XLSparkline._sparklineResize(sparkline[0], { width: finalWidth }, sheetIdx);
                        stRowIdx++;
                    }
                    xlObj.XLShape && xlObj.XLShape._refreshShapePosOnResize(colIdx, finalWidth, true, sheetIdx);
                    this._applyWidth(trgt, sheetIdx, colIdx, finalWidth);
                    if (xlObj.model.allowFreezing)
                        xlObj.XLFreeze._refreshFColResize(colIdx);
                    xlObj.model.allowAutoFill && xlObj.XLDragFill.positionAutoFillElement();
                    if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo && !xlObj._dupDetails && !xlObj._isExport) {
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                }
            }
            xlObj.XLEdit._updateDataContainer({ rowIndex: 0, colIndex: colIdx }, { dataObj: { isFitWidth: true } });
        },

        _applyWidth: function (trgt, activeIdx, cellIndex, finalWidth) {
            var xlObj = this.XLObj;
            xlObj._getJSSheetHeader(activeIdx).find("col:eq(" + cellIndex + ")").width(finalWidth);
            xlObj._getJSSheetContent(activeIdx).find("col:eq(" + (cellIndex + 1) + ")").width(finalWidth);
            xlObj.getSheet(activeIdx).columnsWidthCollection[cellIndex] = finalWidth;
            xlObj.getSheet(activeIdx).columns[cellIndex].width = finalWidth;
        },

        _getContentWidth: function (colIdx, sheetIdx, stRowIdx, endRowIdx) {
            var j, contentWidth = 0, cellObj, cellWidth, xlObj = this.XLObj, sheetData = xlObj._dataContainer.sheets[sheetIdx], tdWidth, sheet = xlObj.getSheet(sheetIdx), cells = xlObj._getSelectedCells(sheetIdx, [stRowIdx, colIdx, endRowIdx, colIdx]).selCells;
            if (cells.length) {
                delete sheet._wrapValColl["cols"][colIdx];
                xlObj._wrapTextLenCln(cells, sheet, "isFitWidth", sheetIdx);
            }
            for (j = stRowIdx; j <= endRowIdx; j++) {
                if (!ej.isNullOrUndefined(sheetData[j]))
                    cellObj = sheetData[j][colIdx];
                if (!ej.isNullOrUndefined(cellObj))
                    cellWidth = this._getCalculatedCellWidth(sheetIdx, cellObj);
                else {
                    cellObj = {};
                    cellWidth = { spanWidth: 0, paddingWidth: 0 };
                }
                if (sheet._wrapValColl["cols"][colIdx] && sheet._wrapValColl["cols"][colIdx][j])
                    tdWidth = xlObj._detailsFromGlobalSpan(j, colIdx, "width", xlObj.XLEdit.getPropertyValue(j, colIdx, "value2"), undefined, true);
                else
                    tdWidth = 0;
                tdWidth = tdWidth + cellWidth.spanWidth + cellWidth.paddingWidth + 4; // for some spacing
                if (tdWidth > contentWidth)
                    contentWidth = tdWidth;
            }
            return contentWidth;
        },

        _getCalculatedCellWidth: function (sheetIdx, object) {
            var spanWidth = 0, paddingWidth = 0;
            if ("isFilterHeader" in object) {
                if ("isFilterVisible" in object)
                    spanWidth += 17; //15 for filter span width, 2 for right and left border               
            }
            else {
                spanWidth += 0;
                // add spanWidth for Pivot Table spans
            }
            paddingWidth = 3; // 1 for padding right, 2 for padding left
            return { spanWidth: spanWidth, paddingWidth: paddingWidth };
        },

        _getHeaderContentWidth: function ($cellDiv) {
            var headerWidth = 0, $span = ej.buildTag("span", {}, {}), content = $cellDiv.html();
            $span.html(content);
            $cellDiv.html($span);
            headerWidth = $cellDiv.find("span:first").width();
            headerWidth = headerWidth + 10; // for some space
            $cellDiv.html(content);
            return headerWidth;
        },

        //Resize To Fit Height
        fitHeight: function (rowIdxes) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowResizing)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(); // rowIdxes is the array of rows to be resized
            for (var i = 0, len = rowIdxes.length; i < len; i++) {
                this._fitHeight(rowIdxes[i], rowIdxes[i]);
                xlObj._setRowHdrHeight(sheetIdx, rowIdxes[i]);
            }
            if (xlObj.model.scrollSettings.allowScrolling) {
                xlObj.XLScroll._getRowHeights(sheetIdx, rowIdxes[0]);
                xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical");
            }
            if (xlObj.model.allowSelection)
                xlObj.XLSelection._refreshBorder();
            if (xlObj.model.allowComments)
                xlObj.XLComment._updateCmntArrowPos(null, sheetIdx, { rowIndex: rowIdxes[0] });
        },

        _resizeToFitHeight: function (e) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), rowIndex = e.target.parentNode.rowIndex, orgRowIdx;
            orgRowIdx = xlObj.model.scrollSettings.allowVirtualScrolling ? xlObj.getSheet(sheetIdx)._virtualRowIdx[rowIndex] : rowIndex;
            this._getResizableRowCell(e);
            this._fitHeight(rowIndex, orgRowIdx);
            xlObj._setRowHdrHeight(sheetIdx, orgRowIdx);
            if (xlObj.model.scrollSettings.allowScrolling) {
                xlObj.XLScroll._getRowHeights(xlObj.getActiveSheetIndex(), orgRowIdx);
                xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical");
            }
            if (xlObj.model.allowSelection)
                xlObj.XLSelection._refreshBorder();
            if (xlObj.model.allowAutoFill)
                xlObj.XLDragFill.positionAutoFillElement();
            if (xlObj.model.allowComments)
                xlObj.XLComment._updateCmntArrowPos(null, sheetIdx, { rowIndex: rowIndex });
        },

        _fitHeight: function (rowIndex, orgRowIdx) {
            var colIndex, sparkline, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), trgt = xlObj._getJSSheetRowHeader(sheetIdx).find(".e-rowheader")[rowIndex],
                finalHeight = 0, contentHeight = 0, headerHeight, $span = ej.buildTag("span", {}, { height: 20, width: 30 });
            contentHeight = this._getContentHeight(orgRowIdx, sheetIdx, xlObj.XLEdit.getPropertyValue(orgRowIdx, 0, "wrapRow"));
            $span.html(orgRowIdx + 1);
            xlObj.element.append($span);
            headerHeight = xlObj.element.find("span:last").outerHeight(true);
            xlObj.element.find("span:last").remove();
            headerHeight = headerHeight + 4; // some Spacing.
            finalHeight = (contentHeight < headerHeight) ? headerHeight : contentHeight;
            var details = { target: trgt, sheetIndex: sheetIdx, rowIndex: orgRowIdx, newHeight: finalHeight, oldHeight: sheet.rowsHeightCollection[rowIndex], reqType: "resize-fit-height" };
            xlObj.XLShape && xlObj.XLShape._refreshShapePosOnResize(rowIndex, finalHeight, false, sheetIdx);
            if (xlObj._isRowViewable(sheetIdx, orgRowIdx)) {
                $(trgt.parentElement).height(finalHeight);
                $(xlObj._getContent(sheetIdx).find("tr")[rowIndex]).height(finalHeight);
            }
            xlObj.getSheet(sheetIdx).rowsHeightCollection[orgRowIdx] = finalHeight;
            colIndex = xlObj.getSheet(sheetIdx).usedRange.colIndex;
            for (var k = 0; k <= colIndex; k++) {
                sparkline = xlObj.XLEdit.getPropertyValue(rowIndex, colIndex, "sparkline", sheetIdx);
                if (sparkline)
                    xlObj.XLSparkline._sparklineResize(sparkline[0], { height: finalHeight }, sheetIdx);
            }
            if (xlObj.model.allowFreezing)
                xlObj.XLFreeze._refreshFRowResize(rowIndex);
            if (xlObj.model.scrollSettings.allowScrolling)
                xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "all");
            if ((!sheet._isImported || sheet._isLoaded) && !xlObj._dupDetails && !xlObj._isExport) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
            if (xlObj.model.allowAutoFill)
                xlObj.XLDragFill.positionAutoFillElement();
            xlObj.XLEdit._updateDataContainer({ rowIndex: orgRowIdx, colIndex: 0 }, { dataObj: { "isFitHeight": true } });
        },

        _getContentHeight: function (rowIdx, sheetIdx, isWrapRow) {
            var xlObj = this.XLObj, contentHeight = 0, tdHeight, sheet = xlObj.getSheet(sheetIdx),
                cKeys = xlObj.getObjectKeys(xlObj._dataContainer.sheets[sheetIdx][rowIdx]), rHtColl = sheet.rowsHeightCollection, cWtColl = sheet.columnsWidthCollection, data;
            for (var i = 0, len = cKeys.length; i < len; i++) {
                data = xlObj.getRangeData({ range: [rowIdx, cKeys[i], rowIdx, cKeys[i]], property: ["value2", "merge"] })[0];
                if (data) {
                    tdHeight = data.merge ? rHtColl[rowIdx] : xlObj._detailsFromGlobalSpan(rowIdx, cKeys[i], "height", data.value2, isWrapRow ? cWtColl[i] : undefined, true);
                    if (tdHeight > contentHeight)
                        contentHeight = tdHeight;
                }
            }
            return contentHeight;
        },

        _setRowHdrHeightResize: function (sheetIdx, colIdx) {
            var tdHeight, xlObj = this.XLObj, shtRows = xlObj.getRows(sheetIdx), rowHdrs = shtRows[0], endRowIdx = xlObj.getSheet(sheetIdx).usedRange.rowIndex;
            for (var i = 0; i <= endRowIdx; i++) {
                if (!ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(i, colIdx, "mergeIdx")) || !ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(i, colIdx, "merge")))
                    continue;
                if (xlObj._isRowViewable(sheetIdx, i)) {
                    tdHeight = xlObj._detailsFromGlobalSpan(i, colIdx, "height", xlObj.XLEdit.getPropertyValue(i, colIdx, "value2"));
                    $(rowHdrs[i]).height(tdHeight);
                }
            }
        },
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.editing = function (obj) {
        this.XLObj = obj;
        this._EditCellDetails = {
            value: null,
            rowIndex: -1,
            columnIndex: -1,
            fieldName: null,
            cell: null
        };
        this._isEdit = false;
        this._isFEdit = false;
        this._isFormulaEdit = false;
        this._isFBarFocused = false;
        this._skipHTML = false;
        this._editElem = null;
        this._filterIcon = null;
        this._isCellEdit = true;
        this._validOperators = ["+", "-", "*", "/", ","];
        this._invalidOperators = ["%"];
        this._validCharacters = ["+", "-", "*", "/", ",", "(", "=", "&"];
        this._textDecoration = false;
        this._editCell = null;
        this._acPosition = { left: 0, top: 0 };
        this._isValidation = false;
        this._cursorPosn = -1;
        this._formulaArrayRange = "";
        this._formatCellVal = null;
        this._sheetNameSpclchar = false;
        this._singleQuote = false;
        this._isSplChar = false;
    };

    ej.spreadsheetFeatures.editing.prototype = {
        //Editing 
        getCurrentEditCellData: function () {
            var elem, value, xlObj = this.XLObj, cellIdx;
            if (this._isEdit) {
                elem = xlObj.element.find("#" + xlObj._id + "_Edit");
                value = elem.text();
                cellIdx = xlObj._getCellIdx(this._editCell[0]);
                if (this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "type") != "text" && ((xlObj.model.locale == "en-US") && xlObj.isNumber(value)))
                    value = parseFloat(value);
                return value;
            }
            return null;
        },

        getColumnIndexByField: function (field) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), column, len;
            for (column = 0, len = sheet.columns.length; column < len; column++) {
                if (sheet.columns[column]["field"] === field)
                    break;
            }
            return column;
        },

        _processEditing: function () {
            if (this._editElem)
                return;
            this._editElem = ej.buildTag("div.e-field e-ss-input", "", {}, { id: this.XLObj._id + "_Edit", contenteditable: true });
            this._editElem.data("parentID", this.XLObj._id);
        },

        editCell: function (rowIdx, colIdx, oldData) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowEditing || !xlObj.model.allowSelection)
	            return;
            var actCell, mergeWrap, column, sheetIdx, sheet, input, args, prevValue, trgtTd, selObj, colDiff, rowDiff, retVal, editElem, valElem = xlObj.element.find("#" + xlObj._id + "_ValElem"),
                value2, temp, culNumFmt, regExp, hasMerge = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "merge"), cellValue, value;
            if (!xlObj._intrnlReq && xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "mergeIdx"))
                return false;
            selObj = { rowIndex: rowIdx, colIndex: colIdx };
            sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), actCell = xlObj.getActiveCell(sheetIdx);
            if (xlObj._isRowViewable(sheetIdx, rowIdx))
                this._textDecoration = xlObj.getCell(rowIdx, colIdx).find("a").css("text-decoration") === "none";
            trgtTd = xlObj.getCell(rowIdx, colIdx), column = sheet.columns[colIdx];
            this._editCell = trgtTd;
            args = {
                columnName: column.field,
                value: xlObj.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], valueOnly: true, sheetIdx: sheetIdx, skipDateTime: true })[0],
                columnObject: column,
                cell: trgtTd,
                rowIndex: rowIdx,
                colIndex: colIdx
            };
            if (!xlObj.isFormula(args.value) && ["longdate", "shortdate", "date", "time"].indexOf(this.getPropertyValue(rowIdx, colIdx, "type", sheetIdx)) > -1 && !xlObj.isNumber(this.getPropertyValue(rowIdx, colIdx, "value", sheetIdx)))
                args.value = xlObj._getEditValOfDateTime(rowIdx, colIdx);
            if (xlObj.model.locale != "en-US" && xlObj.isNumber(args.value)) {
                value2 = this.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx), temp = args.value + "", culNumFmt = ej.preferredCulture(xlObj.model.locale).numberFormat, regExp = new RegExp("\\" + culNumFmt[","] + "\\d{3}");
                if (culNumFmt[","] == "." && (regExp.test(temp) || args.value != value2))
                    args.value = xlObj._getlocaleNumVal(temp, true);
            }
            if (xlObj._trigger("cellEdit", args))
                return false;
			if (xlObj._isCellProtected(rowIdx, colIdx, true) || xlObj.model.isReadOnly)
                return;
            xlObj._cureditedCell = args.value;
            if (this._isValidation) {
                valElem.rules("remove");
                this._isValidation = false;
            }
            if ((actCell.rowIndex !== rowIdx || actCell.colIndex !== colIdx) && !hasMerge) {
                sheet._activeCell = selObj;
                if (sheet._startCell.rowIndex <= rowIdx && sheet._startCell.colIndex <= colIdx && sheet._endCell.rowIndex >= rowIdx && sheet._endCell.colIndex >= colIdx)
                    xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                else
                    xlObj.XLSelection.selectRange(selObj, selObj);
                if (xlObj.model.allowAutoFill)
                    xlObj.XLDragFill.positionAutoFillElement();
            }
            if (!xlObj._intrnlReq && hasMerge) {
                xlObj.XLSelection.selectRange(hasMerge.mRange);
                if (xlObj.model.allowAutoFill)
                    xlObj.XLDragFill.positionAutoFillElement();
            }
            this._EditCellDetails = {
                rowIndex: rowIdx,
                value: args.value,
                columnIndex: colIdx,
                fieldName: column.field,
                cell: trgtTd
            };
            if (!oldData)
                args.value = "";
            value = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value");
            cellValue = xlObj.isFormula(value) ? value : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2");
            prevValue = oldData ? ej.isNullOrUndefined(cellValue) ? args.value : (cellValue.toString().indexOf("%") > -1) ? cellValue : args.value : args.value;
            this._renderBulkEditObject(args, trgtTd, prevValue);
            if (this.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "rule", sheetIdx) && xlObj.model.allowDataValidation)
                xlObj.XLValidate._setValidation();
            input = $("#" + xlObj._id + "_Edit");
            if (this.getPropertyValue(rowIdx, colIdx, "hyperlink", sheetIdx))
                input.addClass("e-hyperlinks");
            if (this._textDecoration)
                input.css("text-decoration", "none");
            if (xlObj.model.allowComments && trgtTd.hasClass("e-commentcell"))
                xlObj.XLComment._visibleCmntCnt(trgtTd);
            args.cell.addClass(xlObj._browserDetails.name === "msie" ? "e-editedcell e-msie-edit" : "e-editedcell");
            if (xlObj.isFormula(args.value))
                this._processFormulaEditRange(args.value);
            if (xlObj.model.allowKeyboardNavigation)
                xlObj.XLCellNav._isNavigate = false;
            if (xlObj.model.enableContextMenu)
                $("#" + xlObj._id + "_contextMenuCell").data("ejMenu")._contextMenuEvents("_off"); //for enable default contextmenu - clipboard actions
            if (hasMerge) {
                mergeWrap = xlObj.getCell(rowIdx, colIdx).find('#' + xlObj._id + '_Merge')[0];
                mergeWrap && (mergeWrap.innerHTML = "")
            }
            colDiff = xlObj.getFrozenColumns() ? sheet._leftCol.idx : 0;
            if ((sheet._rightCol.idx + colDiff) === actCell.colIndex) {
                if (actCell.colIndex != sheet.colCount - 1 && this._isEdit) {
                    retVal = xlObj._getIdxWithOffset(null, sheet._scrollLeft, true);
                    if (xlObj.getFrozenColumns()) {
                        editElem = parseInt(xlObj.element.find("#" + xlObj._id + "_Edit")[0].style.left);
                        xlObj.element.find("#" + xlObj._id + "_Edit")[0].style.left = editElem - sheet.columnsWidthCollection[retVal.colIdx] + "px";
                    }
                }
            }
            rowDiff = xlObj.getFrozenRows() ? sheet._topRow.idx : 0;
            if ((sheet._bottomRow.idx + rowDiff) === actCell.rowIndex) {
                if (actCell.rowIndex != sheet.rowCount - 1 && this._isEdit) {
                    retVal = xlObj._getIdxWithOffset(sheet._scrollTop, null, true);
                    if (xlObj.getFrozenRows()) {
                        editElem = parseInt(xlObj.element.find("#" + xlObj._id + "_Edit")[0].style.left);
                        xlObj.element.find("#" + xlObj._id + "_Edit")[0].style.left = editElem - sheet.columnsWidthCollection[retVal.colIdx] + "px";
                    }
                }
            }
        },

        _renderBulkEditObject: function (cellArgs, td, prevValue) {
            var currHeight, filterIcon, cellData = {}, xlObj = this.XLObj, prevHeight = td.height(), sheetIdx = xlObj.getActiveSheetIndex(),
                tdSpan = td.find(".e-filterspan"), content = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"), format = xlObj.XLFormat.getFormatClass(td[0].className), obj;
            cellData[cellArgs.columnObject.field] = cellArgs.value;
            if (tdSpan.length) {
                filterIcon = { filterIcon: tdSpan, rowIndex: tdSpan.parentsUntil("table").eq(1).index(), colIndex: tdSpan.parent().index() };
                this._filterIcon = filterIcon;
            }
            currHeight = td.height();
            this._refreshTextNode(td[0]);
            if (td.hasClass('e-sswraptext') && prevHeight !== currHeight)
                td.height(prevHeight);
            var $elem = this._editElem;
            $elem.text("");
            if (!ej.isNullOrUndefined(prevValue))
                $elem.text(prevValue);
            content.append($elem);
            if (xlObj._isClassHasProperty(format, 'text-align', 'right'))
                obj = {
                    right: content.width() - td[0].offsetLeft - td[0].offsetWidth + 2,
                    left: '',
                    maxWidth: td[0].offsetLeft + td[0].offsetWidth + 2   //+2px for left padding like excel
                }
            else
                obj = {
                    left: td[0].offsetLeft + 2,   //+2px for left padding like excel
                    right: '',
                    maxWidth: content.width() - (td.offset().left - (xlObj.element.offset().left + $(xlObj.getRows(sheetIdx)[0][0]).width())) - 2
                }
            $elem.css({ left: obj.left, right: obj.right, top: td[0].offsetTop + 1, '-webkit-user-select': 'text', cursor: "text", "min-height": currHeight - 1, height: "auto", lineHeight: "normal", wordWrap: "break-word", position: "absolute", minWidth: td.width(), whiteSpace: "pre-wrap" });   //+1px for top padding like excel
            if (this._editCell.hasClass("e-sswraptext")) {
                $elem.css({ width: td.width(), maxWidth: "" });
                $(xlObj.getRows(sheetIdx)[1][td.parent().attr("data-idx")]).height(xlObj.model.sheets[sheetIdx].rowsHeightCollection[td.parent().attr("idx")]);
                xlObj.XLScroll._getRowHeights(sheetIdx, td.parent().index());
            }
            else
                $elem.css({ width: "", maxWidth: obj.maxWidth });
            $elem.show();
            this._refreshEditForm(td, $elem, cellArgs.value, prevValue, currHeight);
            this._isEdit = true;
            (xlObj.model.showRibbon) && xlObj.XLRibbon._disableRibbonIcons();
        },

        _refreshEditForm: function (cell, elem, cellvalue, prevValue) {
            var clsNm, cellType, xlObj = this.XLObj;
            elem[0].className = "";
            cellType = this.getPropertyValueByElem(cell, "type") || "";
            if (cellType == "percentage" && !xlObj.isFormula(cellvalue)) {
                if (!(prevValue.indexOf("%") > -1))
                    elem.prepend("%");
            }
            if (xlObj.isNumber(prevValue) && !(cellType.indexOf("text") > -1))
                elem.addClass("e-ralign");
            if (cellType.indexOf("date") > -1 || cellType.indexOf("time") > -1)
                elem.addClass("e-ralign");
            elem.css({ "border": "none", "outline": "none" });
            if (this.XLObj.model.allowCellFormatting)
                clsNm = xlObj.XLFormat.getFormatClass(cell[0].className);
            elem.addClass(clsNm);
            if (xlObj.model.allowCellFormatting) {
                elem.css({ "color": cell.css('color') });
                elem.css({ "background-color": cell.css('background-color') });
            }
            elem.on("keyup", { xlObj: xlObj }, function (e) {
                var sObj = e.data.xlObj;
                sObj.XLEdit._isFormulaEdit = !$(e.target).text().indexOf("=");
                if (sObj.XLEdit._isFormulaEdit)
                    sObj.XLEdit._processFormulaEditRange($(e.target).text());
                if (sObj.model.allowFormulaBar)
                    sObj._getInputBox().val($(e.target).text());
                sObj.XLEdit._isCellEdit = true;
            });
            elem.on("focus", { xlObj: xlObj }, function (e) {
                var sObj = e.data.xlObj;
                sObj.XLEdit._isCellEdit = true;
            });
            xlObj._setFormulaSuggElem($("#" + xlObj._id + "_AutoComplete_suggestion"));
            cellType == "percentage" ? elem.focus() : elem.focusEnd();
        },

        _renderAutoComplete: function (elem, value, height, flag) {
            var xlObj = this.XLObj, tmpClass = flag ? " e-cell-ac e-ss-editinput" : "";
            elem.ejAutocomplete({
                dataSource: xlObj._formulaCollection,
                value: value,
                cssClass: "e-ss-autocomplete" + tmpClass,
                width: "100%",
                height: height,
                htmlattributes: flag ? { display: "none" } : "",
                delaySuggestionTimeout: 10,
                minCharacter: 2,
                popupWidth: "170px",
                popupHeight: "150px",
                showEmptyResultText: false,
                autoFocus: true,
                template: "<span class='e-icon e-ss-function'> </span>" + "<div> ${display} </div>",
                select: $.proxy(this._formulaSelect, xlObj),
                open: $.proxy(this._formulaSuggestionStatus, xlObj),
                close: $.proxy(this._formulaSuggestionStatus, xlObj)
            });
            elem.data("ejAutocomplete")._bubbleEvent(true);
        },

        _refreshAutoComplete: function (tableFormula) {
            var xlObj = this.XLObj, acElem, inptBoxElem, wgt = "ejAutocomplete", dataSrc = "dataSource";
            inptBoxElem = $("#" + xlObj._id + "_inputbox").data(wgt);
            acElem = $("#" + xlObj._id + "_AutoComplete").data(wgt);
            if (xlObj.model.allowFormulaBar)
                inptBoxElem && inptBoxElem.option(dataSrc, tableFormula ? xlObj._tableFormulaCollection[tableFormula] : xlObj._formulaCollection);
            acElem && acElem.option(dataSrc, tableFormula ? xlObj._tableFormulaCollection[tableFormula] : xlObj._formulaCollection);
        },

        _captureEditing: function (isTableFormula) {
            var xlObj = this.XLObj, acElem, editCell, editElem, location, actElem = document.activeElement,
                actCell = xlObj.getActiveCell(), suggElem = $("#" + xlObj._id + "_AutoComplete_suggestion"), funElem;
            if (actElem && actElem.tagName === "DIV" && xlObj._isRowViewable(null, actCell.rowIndex)) {
                acElem = xlObj.element.find("#" + xlObj._id + "_AutoComplete");
                if (isTableFormula)
                    acElem.val("[");
                else
                    acElem.val($(actElem).text());
                acElem.data("ejAutocomplete").search();
                funElem = suggElem.find("li span.e-ss-function");
                if (isTableFormula)
                    funElem.removeClass("e-ss-function");
                else
                    funElem && funElem.addClass("e-ss-function");
                editCell = xlObj.getActiveCellElem();
                editElem = xlObj.element.find("#" + xlObj._id + "_Edit")[0];
                location = editCell[0].getBoundingClientRect();
                this._acPosition.left = location.left + window.pageXOffset;
                this._acPosition.top = location.top + window.pageYOffset + $(editElem).height();
                suggElem.css({ left: this._acPosition.left, top: this._acPosition.top });
            }
        },

        saveCell: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowEditing || xlObj.model.isReadOnly)
                return;
            this._cursorPosn = -1;
            var i, j, actCell, form, autoEle, temp, formulaStr, prevFrmtObj, flen, column, cFormatStr, trgtTd, elem, obj, rHgt,
                cFormatRule, len, rowIdx, colIdx, args, prevValue, details, sheetIdx, sheet, fRange, fObj,
                isFormatChanged = false, skipFormulaColl = ["ABS", "LEFT", "RIGHT", "TRIM", "UPPER", "VALUE", "YEAR"], index;
            if (this._isEdit) {
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), form = $("#" + xlObj._id + "EditForm");
                trgtTd = this._editCell, column = sheet.columns[this._EditCellDetails.columnIndex];
                elem = xlObj.element.find("#" + xlObj._id + "_ValElem");
                var editElem = xlObj.element.find("#" + xlObj._id + "_Edit")[0], htmlVal = $(editElem).html();
                obj = xlObj._getCellIdx(trgtTd[0]);
                rowIdx = obj.rowIndex, colIdx = obj.colIndex;
                args = {
                    columnName: column.field,
                    value: this.getCurrentEditCellData(),
                    prevValue: this._EditCellDetails.value,
                    columnObject: column,
                    rowIndex: rowIdx,
                    colIndex: colIdx,
                    cell: trgtTd,
                    isRefCells: false,
                    sheetIdx: sheetIdx
                };
                if (this.getPropertyValue(rowIdx, colIdx, "hasMultipleFormulaArray")) {
                    xlObj.XLCellNav && (xlObj.XLCellNav._isNavigate = true);
                    xlObj._showAlertDlg("Alert", "ArrayaFormula", "multipleArrayFormula", 430);
                    xlObj.XLSelection._clearBorder(xlObj._arrayAsString(xlObj._ctrlFormulaBorder.concat(xlObj._formulaBorder)));
                    return;
                }
                if (xlObj.model.allowDataValidation && this._isValidation) {
                    elem.val(args.value);
                    form.css("display", "block");
                    if (!form.validate().element(elem[0])) {
                        form.css("display", "none");
                        return false;
                    }
                    form.css("display", "none");
                    args.hasValidation = true;
                }
                if ((args.value !== args.prevValue) && xlObj._trigger("cellSave", args))
                    return;
                prevFrmtObj = xlObj.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], property: ["type", "formatStr", "decimalPlaces"] })[0];
                if (xlObj.isFormula(args.value)) {
                    if (!this._formulaValidate(args.value))
                        return;
                    else {
                        var name = args.value.indexOf("(worksheet)") > -1 && args.value.split(" (worksheet)")[0].replace("=", "");
                        args["value"] = sheet._scopeRanges[name] ? "=" + sheet._scopeRanges[name].name : args["value"];
                    }
                }
                prevValue = this._EditCellDetails.value || "";
                details = { sheetIndex: sheetIdx, rowIndex: rowIdx, colIndex: colIdx, cValue: args.value, reqType: "edit", iconName: "", pValue: prevValue };
                details.prevHeight = sheet.rowsHeightCollection[rowIdx];
                xlObj._dupDetails = true;
                xlObj.isFormula(args.value) && (xlObj._saveTriggered = true);
                this._updateCellValue({ rowIndex: rowIdx, colIndex: colIdx }, args.value);
                xlObj.isFormula(args.value) && (xlObj._saveTriggered = false);
                xlObj._dupDetails = false;
                if (this.getPropertyValue(rowIdx, colIdx, "wrap", sheetIdx)) {
                    if (prevValue.length !== args.value.length)
                        xlObj._wrapTextLenCln([{ rowIndex: rowIdx, colIndex: colIdx }], sheet, "savcell", sheetIdx);
                    rHgt = xlObj._getWrapCellHeight(sheetIdx, rowIdx, colIdx);
                    xlObj._wrapCollection(rowIdx, colIdx, rHgt.cellHt, sheetIdx);
                    if (xlObj._getRowHeight(rowIdx, sheetIdx) < rHgt.rowHt) {
                        xlObj.setHeightToRows([{ rowIndex: rowIdx, height: rHgt.rowHt }]);
                        xlObj.model.allowAutoFill && xlObj.XLDragFill.positionAutoFillElement();
                    }
                    this._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: {} });
                }
                if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isFilterHeader"))
                    xlObj._removeClass(args.cell[0], xlObj._rAlign);
                if (this._textDecoration)
                    args.cell.find("a").css("text-decoration", "none");
                if (args.hasValidation)
                    details["hasValidation"] = true;
                if (xlObj.isFormula(args.value) && (!xlObj.getObjectLength(prevFrmtObj) || prevFrmtObj.type === "general")) {
                    details.operation = "formula";
                    formulaStr = args.value;
                    formulaStr = xlObj.XLDragFill._parseFormula(formulaStr);
                    if (skipFormulaColl.indexOf(formulaStr[0]) === -1) {
                        for (j = 0, flen = formulaStr.length; j < flen; j++) {
                            temp = formulaStr[j];
                            if (temp.indexOf("!") > -1) {
                                index = xlObj._getSheetIndexByName(temp.split("!")[0]);
                                sheetIdx = index ? index : sheetIdx;
                            }
                            else if (temp != "(" && formulaStr[j + 1] != "(")
                                break;
                        }
                        if (temp.indexOf(":") > -1)
                            temp = temp.split(":")[0];
                        if (xlObj._isCellReference(temp)) {
                            temp = temp.replace(/\$/g, "");
                            fRange = xlObj.getRangeIndices(temp);
                            fObj = xlObj.getRangeData({ range: fRange, property: ["type", "formatStr", "decimalPlaces"], sheetIdx: sheetIdx })[0];
                            if (xlObj.getObjectLength(fObj) && fObj.type != prevFrmtObj.type && fObj.type !== "general" && fObj.type !== "shortdate") {
                                xlObj._dupDetails = true;
                                isFormatChanged = true;
                                xlObj.XLFormat.format(fObj, xlObj._getAlphaRange(xlObj.getActiveSheetIndex(), rowIdx, colIdx, rowIdx, colIdx));
                                xlObj._dupDetails = false;
                                details.prevFrmtObj = xlObj.getObjectLength(prevFrmtObj) ? prevFrmtObj : { type: "general" };
                                details.curFrmtObj = fObj;
                            }
                        }
                    }
                }
                xlObj._setRowHdrHeight(sheetIdx, rowIdx);
                if (xlObj.model.scrollSettings.allowScrolling)
                    xlObj.XLScroll._getRowHeights(sheetIdx, rowIdx);
                this._isEdit = this._isFormulaEdit = false;
                xlObj.model.allowFormulaBar && xlObj.updateFormulaBar();
                args.cell.removeClass("e-editedcell e-msie-edit");
                if (xlObj.model.allowKeyboardNavigation)
                    xlObj.XLCellNav._isNavigate = true;
                if (xlObj.model.showRibbon) {
                    xlObj.XLRibbon._enableRibbonIcons();
                    xlObj.XLRibbon._updateRibbonIcons();
                }
                xlObj._updateUndoRedoIcons();
                if (!xlObj.model.allowInsert) {
                    xlObj.XLRibbon._disableButtons(["Others_Cells_InsertCellOptions"], "ejSplitButton");
                    xlObj.XLRibbon._disableButtons(["Others_Cells_InsertCell"], "ejButton");
                }
                if (!xlObj.model.allowDelete) {
                    xlObj.XLRibbon._disableButtons(["Others_Cells_DeleteCellOptions"], "ejSplitButton");
                    xlObj.XLRibbon._disableButtons(["Others_Cells_DeleteCell"], "ejButton");
                }
                details.cFormatRule = cFormatRule = this.getPropertyValue(rowIdx, colIdx, "cFormatRule", sheetIdx);
                xlObj._dupDetails = true;
                if (xlObj.model.allowConditionalFormats && cFormatRule) {
                    for (i = 0, len = cFormatRule.length; i < len; i++) {
                        cFormatStr = cFormatRule[i].split("_");
                        if (cFormatStr[0] !== "formularule" && cFormatStr[0] !== "colorscale" && cFormatStr[0] !== "databar" && cFormatStr[0] !== "iconset")
                            xlObj.XLCFormat._cFormat(cFormatStr[0], cFormatStr[2], cFormatStr[3], cFormatStr[4], cFormatStr[5], xlObj._generateHeaderText(colIdx + 1) + (rowIdx + 1));
                    }
                    if(args.value != args.prevValue || xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "merge"))
                        xlObj.XLCFormat.refreshCFormat(xlObj._getAlphaRange(sheetIdx, rowIdx, colIdx, rowIdx, colIdx));
                }
                xlObj._dupDetails = false;
                details["endCell"] = sheet._endCell;
                details["startCell"] = sheet._startCell;
                actCell = xlObj.getActiveCellElem();
                if (actCell) {
                    if (xlObj.model.allowComments && actCell.hasClass("e-commentcell"))
                        xlObj.XLComment._visibleCmntCnt(actCell, true);
                    if (actCell.hasClass("e-hlcell"))
                        xlObj.XLValidate.highlightInvalidData();
                }
                this._shiftKeyEnabled = this._isFBarFocused = false;
                xlObj._ctrlKeyCount = 0;
                if (!this._isFormulaEdit && xlObj.model.allowSelection)
                    xlObj.XLSelection._clearBorder(xlObj._formulaBorder.join(" ").replace(/,/g, " ") + " " + xlObj._ctrlFormulaBorder.join(" ").replace(/,/g, " "));
                if (xlObj.model.allowFormulaBar) {
                    autoEle = $("#" + xlObj._id + "_inputbox").data("ejAutocomplete");
                    if (autoEle)
                        autoEle.hide();
                }
                this._editElem.hide();
                xlObj._setSheetFocus();
                if (xlObj._browserDetails.name === "mozilla")  //ff issue - https://bugzilla.mozilla.org/show_bug.cgi?id=744408
                    htmlVal = htmlVal.slice(0, -4);
                if (htmlVal.indexOf('\n') > -1) {
                    details.altwrap = true;
                    this._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { altTxt: true } });
                }
                if (this.getPropertyValue(rowIdx, colIdx, "altTxt", sheetIdx)) {
                    if (!this.getPropertyValue(rowIdx, colIdx, "wrap", sheetIdx))
                        xlObj.wrapText([rowIdx, colIdx, rowIdx, colIdx]);
                    if (!htmlVal.match(/\n/g))
                        this._clearDataContainer({ cellIdx: { rowIndex: rowIdx, colIndex: colIdx }, property: ["altTxt"] });
                }
                var sparklineId = this.getPropertyValue(rowIdx, colIdx, "sparkline", sheetIdx);
                if (xlObj.model.allowSparkline && sparklineId) {
                    var sparkElem = xlObj.getCell(rowIdx, colIdx, sheetIdx).find(".e-sparkline");
                    if (sparkElem.length < 1) {
                        var sparklineProp = sheet.shapeMngr.sparkline[sparklineId[0]];
                        xlObj.XLSparkline._createSparkline(sparklineProp, null, sheetIdx);
                    }
                }
                details.newHeight = sheet.rowsHeightCollection[rowIdx]
                xlObj.XLScroll._getRowHeights(sheetIdx, rowIdx);
                if (xlObj.model.enableContextMenu)
                    $("#" + xlObj._id + "_contextMenuCell").data("ejMenu")._contextMenuEvents("_on"); //for disable default contextmenu - clipboard actions
                if (args.value !== args.prevValue || isFormatChanged) {
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
                return true;
            }
        },

        _getCellPosition: function (rowCount, colCount) {
            var xlObj = this.XLObj, range = this._formulaArrayRange || xlObj.getSheet(xlObj.getActiveSheetIndex()).selectedRange, pos = 0, posCln = {};
            var rRowCnt = range[2] - range[0], rColCnt = range[3] - range[1], isTrue = false, i, j;
            if (1 < colCount)
                isTrue = true;
            for (i = 0; i <= rColCnt; i++) {
                for (j = 0; j <= rRowCnt; j++) {
                    if (xlObj.isUndefined(posCln[range[0] + j]))
                        posCln[range[0] + j] = {};
                    if (rowCount <= j || (isTrue && colCount <= i))
                        posCln[range[0] + j][range[1] + i] = -1;
                    else {
                        posCln[range[0] + j][range[1] + i] = pos;
                        if (!isTrue)
                            pos++;
                    }
                }
                isTrue ? pos++ : pos = 0;
            }
            return posCln;
        },

        _formulaValidate: function (value) {
            var i, fValue, lPrnthsLen, rPrnthsLen, formulaLen, formulaCln, leftPos, rightPos, formulaValue = value, xlObj = this.XLObj,
                customFormulas = xlObj.model.customFormulas, argsFormula = ["RAND", "TODAY", "NOW", "TRUE", "FALSE", "ROW", "COLUMN", "SHEET", "SHEETS"], str = value.split("[")[0], isIndirect = false;
            for (i = 0; i < customFormulas.length; i++)
                argsFormula.push(customFormulas[i]["formulaName"].toUpperCase());
            if (xlObj._tableRangesFormula[str.slice(1)]) {
                lPrnthsLen = formulaValue.split("[").length;
                rPrnthsLen = formulaValue.split("]").length;
                if (lPrnthsLen !== rPrnthsLen) {
                    xlObj._showAlertDlg("Alert", "MissingParenthesisAlert", "FormulaAlert", 440); // To check the parenthesis
                    return;
                }
            }
            else if (!this._isNamedRange(value)) {
                value = value.startsWith("=") && value.replace("=", "");
                if (xlObj.getCalcEngine().getNameRangeValues().contains(value.toUpperCase()))
                    return true;
                formulaLen = formulaValue.length;
                lPrnthsLen = formulaValue.split("(").length;
                rPrnthsLen = formulaValue.split(")").length;
                formulaCln = xlObj.getCalcEngine().getLibraryFunctions();
                if (formulaValue.startsWith("=") && formulaLen > 1) {
                    fValue = formulaValue = formulaValue.substring(1);
                    if (lPrnthsLen !== rPrnthsLen) {
                        xlObj._showAlertDlg("Alert", "MissingParenthesisAlert", "FormulaAlert", 440); // To check the parenthesis
                        return;
                    }
                    if (lPrnthsLen === 1 && rPrnthsLen === 1 && xlObj.isUndefined(formulaCln.getItem(fValue.toUpperCase())) && !this._isValidCell(formulaValue) && !(fValue.substring(0, leftPos) == "TRUE" || fValue.substring(0, leftPos) == "FALSE")) {
                        xlObj._showAlertDlg("Alert", "CorrectFormula", "FormulaAlert", 372);// To enter the correct formula
                        return;
                    }
                    do {
                        leftPos = fValue.indexOf("(");
                        rightPos = fValue.indexOf(")");
                        if (argsFormula.indexOf(fValue.substring(0, leftPos).toUpperCase()) < 0) {
                            if (leftPos + 1 === rightPos) {
                                xlObj._showAlertDlg("Alert", "CorrectArgument", "FormulaAlert", 372); // To pass correct argument
                                return;
                            }
                        }
						if(fValue.indexOf("INDIRECT") > -1)
							isIndirect = true;
                        fValue = fValue.substring(leftPos + 1);
                        if (fValue.indexOf(",") > -1)
                            fValue = fValue.substring(fValue.indexOf(",") + 1);
						if( isIndirect && fValue.indexOf("&") > -1)
							fValue = fValue.substring(fValue.indexOf("&") + 1).trim();
                    }
                    while (fValue.indexOf("(") > -1);
                }
            }
            return true;
        },

        _isValidCell: function (cellRange) {
            var xlObj = this.XLObj, splt, rangeSplt, rangeLen, isSheet = true, isVisible = true, i, j, len, operandCln = ["<=", ">=", "<", ">", "=", "+", "-", "/", "*", "^", "&"];
            for (i = 0, len = operandCln.length; i < len; i++) {
                if (cellRange.indexOf(operandCln[i]) > -1) {
                    rangeSplt = cellRange.split(operandCln[i]);
                    for (j = 0, rangeLen = rangeSplt.length; j < rangeLen; j++) {
                        if (!rangeSplt[j].length && (!ej.isNullOrUndefined(rangeSplt[j + 1]) && !rangeSplt[j + 1].length))
                            return false;
                        else if (rangeLen == j + 1 && rangeSplt[j].length)
                            return true;
                    }
                }
                if (cellRange.indexOf("%") > -1 && cellRange.split("%").length == 2)
                    return true;
            }
            cellRange = cellRange.trim();
            cellRange = cellRange.startsWith("=") ? cellRange.substring(1) : cellRange;
            if (cellRange.indexOf("!") > -1) {
                splt = cellRange.split("!");
                cellRange = splt[1];
                if (xlObj._getSheetIndexByName(splt[0]) < 1)
                    isSheet = false;
            }
            if (!this._isNamedRange("=" + cellRange))
                isVisible = cellRange.indexOf(":") > -1 ? xlObj._isvalidRange(cellRange) : xlObj._isvalidRange(cellRange + ":" + cellRange);
            return isVisible && isSheet;
        },

        updateValue: function (aRange, val, formatclass, sheetIdx) {
            var xlObj = this.XLObj, range, cellIdx;
            if (xlObj.model.isReadOnly)
                return;
            range = xlObj.getRangeIndices(aRange);
            cellIdx = { rowIndex: range[0], colIndex: range[1] };
            xlObj._isPublic = true;
            if (xlObj.model.allowCellFormatting && xlObj.XLFormat._hasFormat(formatclass)) {
                xlObj.XLFormat._createFormatClass(xlObj.XLFormat.getFormatFromHashCode(formatclass), formatclass);
                xlObj.XLFormat._updateFormatClass(cellIdx, formatclass);
            }
            this._updateCellValue(cellIdx, val, formatclass, sheetIdx);
            xlObj._isPublic = false;
        },

        updateCellValue: function (cellIdx, val, formatclass, sheetIdx) {
            var xlObj = this.XLObj;
            xlObj._isPublic = true;
            if (xlObj.model.allowCellFormatting && xlObj.XLFormat._hasFormat(formatclass)) {
                xlObj.XLFormat._createFormatClass(xlObj.XLFormat.getFormatFromHashCode(formatclass), formatclass);
                xlObj.XLFormat._updateFormatClass(cellIdx, formatclass);
            }
            this._updateCellValue(cellIdx, val, formatclass, sheetIdx);
            xlObj._isPublic = false;
        },

        _updateCellValue: function (cellIdx, val, formatclass, sheetIdx, isCellType) {
            var xlObj = this.XLObj;
            sheetIdx = xlObj._getSheetIndex(sheetIdx);
            if (!cellIdx || xlObj.model.isReadOnly)
                return;
            var colIdx = cellIdx.colIndex, rowIdx = cellIdx.rowIndex, actCell = xlObj.getActiveCell(), sheetInfo = xlObj._getSheetNames(), i;
            if (xlObj.isFormula(val) && this.getPropertyValue(rowIdx, colIdx, "type", sheetIdx) !== "text") {
                for (i = 0; i < xlObj.model.sheetCount; i++) {
                    if (val.indexOf(sheetInfo[i].text) > 0 && (!isNaN(sheetInfo[i].text) || !(/^[a-zA-Z0-9- ]*$/.test(sheetInfo[i].text)) || sheetInfo[i].text.match("\\s+"))) {
                        this._sheetNameSpclchar = true;
                        val = this._parseSheetRef(val);
                    }
                }
                this._sheetNameSpclchar = false;
                this._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { value: val, hasFormulaArray: xlObj._hasFormulaArray, hasMultipleFormulaArray: xlObj._hasMultipleFormulaArray }, sheetIdx: sheetIdx });
                this._refreshCalcEngine(rowIdx, colIdx, true, val, sheetIdx);
                xlObj._isFormulaSuggestion = false;
            }
            else if (val && val[0] == "'")
                this._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { value: val, value2: val.substr(1) }, sheetIdx: sheetIdx });
            else {
                this._updateCell({ rowIndex: rowIdx, colIndex: colIdx }, val, sheetIdx, isCellType);
                this._refreshCalcEngine(rowIdx, colIdx, false, null, sheetIdx);
            }
            if (xlObj._isPublic) {
                if (xlObj.model.allowDataValidation && this.getPropertyValue(rowIdx, colIdx, "isHighlight", sheetIdx))
                    xlObj.XLValidate.highlightInvalidData();
                if (xlObj.model.allowConditionalFormats)
                    xlObj.XLCFormat.refreshCFormat([rowIdx, colIdx, rowIdx, colIdx]);
                if (xlObj.model.allowComments)
                    xlObj.XLComment._updateCmntArrowPos();
                if (actCell.rowIndex === rowIdx && actCell.colIndex === colIdx) {
                    xlObj.model.showRibbon && xlObj.XLRibbon._updateRibbonIcons();
                    xlObj.model.allowFormulaBar && xlObj.updateFormulaBar();
                }
                if (this.getPropertyValue(rowIdx, colIdx, "wrap", sheetIdx))
                    xlObj._updateWrapCol("updatecellvalue", [cellIdx], xlObj.getSheet(sheetIdx), sheetIdx, rowIdx);
                if (!ej.isNullOrUndefined(formatclass))
                    xlObj.XLFormat._updateRowHeight([rowIdx, colIdx, rowIdx, colIdx], sheetIdx);
            }
        },

        updateCell: function (cell, val, sheetIdx) {
            var xlObj = this.XLObj;
            xlObj._isPublic = true;
            this._updateCell(cell, val, sheetIdx);
            xlObj._isPublic = false;
        },

        _updateCell: function (cell, val, sheetIdx, isCellType) {
            var xlObj = this.XLObj;
            if (!cell || xlObj.model.isReadOnly)
                return;
            sheetIdx = xlObj._getSheetIndex(sheetIdx);
            var isTable, cHght, isUpdtDtcnr = true, sheet = xlObj.getSheet(sheetIdx), rIdx = cell.rowIndex, cIdx = cell.colIndex, ctype = ej.Spreadsheet.CellType, details, pValue = this.getPropertyValue(rIdx, cIdx, 'value2') || "", height = sheet.rowsHeightCollection[rIdx], cellElem = xlObj.getCell(rIdx, cIdx),
                // parse value
                valObj = this._parseValue(val, cell), pType = valObj.type,
                cellInfo = xlObj.getRangeData({ range: [rIdx, cIdx, rIdx, cIdx], property: ["formatStr", "type", "thousandSeparator", "decimalPlaces", "cellType", "customFormat"], sheetIdx: sheetIdx })[0], container = xlObj._dataContainer, isPositiveNum = false;
            if (xlObj.model.isReadOnly)
                return;
            // cell type
            if (cellInfo.type && cellInfo.type != ctype.General) {
                valObj.type = cellInfo.type;
                if (valObj.type == ctype.Text) {
                    valObj.align = ej.Spreadsheet.Align.Left;
                    valObj.value = valObj.value2 = val;
                }
                delete valObj.formatStr;
            }
            // cell format
            if (cellInfo.formatStr || cellInfo.type === ctype.Scientific || cellInfo.type === ctype.Fraction) {
                if (valObj.value2.indexOf("%") > -1)
                    valObj.value = xlObj.isNumber(valObj.value) ? valObj.value / 100 : valObj.value;
                valObj.value2 = xlObj.XLFormat._format(valObj.value, { formatStr: cellInfo.formatStr, type: cellInfo.type, thousandSeparator: cellInfo.thousandSeparator, decimalPlaces: cellInfo.decimalPlaces, isTime: pType === ej.Spreadsheet.CellType.Time }, cell);
                this._formatCellVal && (valObj["value"] = this._formatCellVal);
            }
            else if (valObj.formatStr && valObj.type == "percentage" && valObj.value2.indexOf("%") > -1) {
                valObj.value = xlObj.isNumber(valObj.value) ? valObj.value / 100 : valObj.value;
                valObj.value2 = xlObj.XLFormat._format(valObj.value, { formatStr: valObj.formatStr, type: valObj.type, thousandSeparator: valObj.thousandSeparator, decimalPlaces: valObj.decimalPlaces }, cell);
            }
            this._formatCellVal = null;
            if (xlObj.model.allowCellType && !xlObj.isUndefined(cellInfo.cellType))
                isUpdtDtcnr = xlObj.XLCellType._rfrshCtrlText(cellInfo, valObj.value);
            if (isUpdtDtcnr) {// data updation
                if (!xlObj._isInitLoad && !(xlObj.isImport || xlObj.model.isImport)) {
                    isTable = this.getPropertyValue(rIdx, cIdx, "tableName", sheetIdx);
                    if (!xlObj.XLFormat._isFAT && isTable) {
                        var prevVal = this.getPropertyValue(rIdx, cIdx, "value2", sheetIdx);
                        valObj.value2 = xlObj.XLFormat._updateTableColName(rIdx, cIdx, prevVal, valObj.value2, sheetIdx, isTable);
                        (valObj.type === "general") && (valObj.value = valObj.value2);
                    }
                }
                if (cellInfo.customFormat == "(#,##0);#,##0" && valObj.value2.indexOf("-") > -1)
                    isPositiveNum = true;
                if (cellInfo.customFormat)
                    valObj.value2 = (cellInfo.type == "currency") ? (cellInfo.customFormat.indexOf(")") > -1) ? valObj.value2 : valObj.value2.split(/[(\)]/)[1] : (cellInfo.customFormat.indexOf(")") > -1 && !isPositiveNum) ? "(" + (valObj.value2.indexOf("-") > -1 ? valObj.value2.split("-")[1] : valObj.value2) + ")" : valObj.value2.split("-")[1];
                this._updateDataContainer(cell, { dataObj: valObj, sheetIdx: sheetIdx });
            }
            else {
                if (!xlObj.isUndefined(cellInfo.cellType) && ej.isNullOrUndefined(isCellType)) {
                    $("#" + container.sheetCellType[cellInfo.cellType]["id"]).data("ej" + container.sheetCellType[cellInfo.cellType]["type"]).destroy()
                    cellElem && (cellElem[0].innerHTML = "");
                    xlObj._removeClass(cellElem[0], "e-cellreadonly");
                    delete container.sheets[sheetIdx][rIdx][cIdx]["cellType"];
                }
                this._updateDataContainer(cell, { dataObj: valObj, sheetIdx: sheetIdx });
            }
            if (xlObj._isPublic && !xlObj._isScrolling) {
                if (this.getPropertyValue(rIdx, cIdx, "wrap")) {
                    cHght = xlObj._getWrapCellHeight(sheetIdx, rIdx, cIdx);
                    if (cHght.cellHt > sheet.rowsHeightCollection[rIdx]) {
                        if (xlObj._isRowViewable(sheetIdx, rIdx))
                            xlObj.setHeightToRows([{ rowIndex: rIdx, height: cHght.rowHt }]);
                        else {
                            sheet.rowsHeightCollection[rIdx] = cHght.rowHt;
                            xlObj.XLScroll._getRowHeights(sheetIdx, rIdx);
                        }
                        xlObj._wrapCollection(rIdx, cIdx, cHght.cellHt, sheetIdx);
                    }
                }
            }
            if (this.getPropertyValue(rIdx, cIdx, "wrap", sheetIdx))
                xlObj._updateWrapCol("updatecellvalue", [cell], xlObj.getSheet(sheetIdx), sheetIdx, rIdx);
            details = { sheetIndex: sheetIdx ? sheetIdx : xlObj.getActiveSheetIndex(), rowIndex: rIdx, colIndex: cIdx, reqType: 'edit', cValue: val, pValue: pValue ? pValue : "", prevHeight: height, newHeight: sheet.rowsHeightCollection[rIdx], isHighlightData: false };
            if (!xlObj._dupDetails) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
            if (details.isHighlightData) {
                xlObj._pushHighlightData([rIdx, cIdx, rIdx, cIdx]);
                if (xlObj.XLClipboard._highLightRange.length && details.operation != "hl-data") {
                    for (var i = 0, len = xlObj.XLClipboard._highLightRange.length; i < len; i++)
                        xlObj.XLValidate.highlightInvalidData(xlObj.XLClipboard._highLightRange[i]);
                    xlObj.XLClipboard._highLightRange = [];
                }
            }
        },

        _parseValue: function (value, cell) {
            var localeNum, decimalplcs, isThouSep, cellType, prefCul, tSep, regExp, dSep, locale = this.XLObj.model.locale, tempValue = value, floatVal, tempVal, isValueNull = ej.isNullOrUndefined(value), index, spltStr, i, len;
            if (cell) {
                decimalplcs = this.getPropertyValue(cell.rowIndex, cell.colIndex, "decimalPlaces");
                isThouSep = this.getPropertyValue(cell.rowIndex, cell.colIndex, "thousandSeparator");
                cellType = this.getPropertyValue(cell.rowIndex, cell.colIndex, "type");
            }
            prefCul = ej.preferredCulture(locale);
            tSep = prefCul.numberFormat[","] || ",";
            dSep = prefCul.numberFormat["."] || ".";
            regExp = new RegExp("^\\d+(\\" + tSep + "\\d{3,})+$|^\\d+(\\" + tSep + "\\d{3,})+\\" + dSep + "\\d+$|^\\d+(\\" + dSep + "\\d+)+$");
            floatVal = !isValueNull && ej.parseFloat(value.toString(), 10, locale);
            if (floatVal)
                tempValue = floatVal;
            if (!cell || (cellType != "text")) {
                if (!isValueNull)
                    localeNum = this.XLObj._getlocaleNumVal(tempValue);
                value = ej.isNullOrUndefined(value) ? "" : ((typeof value === "object" && !this.XLObj._isDateTime(value)) ? JSON.stringify(value) : value);
            }
            var prop, temp, patrns, isRExp, formatStr, decPlaces, xlObj = this.XLObj, ctype = ej.Spreadsheet.CellType, rAlign = ej.Spreadsheet.Align.Right,
                value2 = (typeof value === "object" && !this.XLObj._isDateTime(value)) ? JSON.stringify(value) : value + "", type = ctype.General, idx = value2.indexOf(xlObj._currencySymbol);
            if (localeNum)
                value = localeNum;
            if (idx === 0 || (idx > -1 && idx === value2.length - 1)) {
                temp = ej.parseFloat(value2, 10, locale);
                if (temp) {
                    decPlaces = value2.indexOf(xlObj._decimalSeparator) > -1 ? xlObj._decimalCnt(temp) : 0;
                    decPlaces = decimalplcs > -1 ? decimalplcs : decPlaces;
                    return { type: ctype.Currency, value: temp, value2: value2, formatStr: xlObj._getFormatString(ctype.Currency, decPlaces), decimalPlaces: decPlaces, align: rAlign };
                }
            }
            if (value2.indexOf(xlObj._percentSymbol) > -1) {
                temp = $.trim(value2).replace(xlObj._percentSymbol, "");
                tempVal = ej.parseFloat(temp, 10, locale);
                if (xlObj.isNumber(tempVal)) {
                    decPlaces = value2.indexOf(xlObj._decimalSeparator) > -1 ? xlObj._decimalCnt(temp) : 0;
                    decPlaces = decimalplcs > -1 ? decimalplcs : decPlaces;
                    return { type: ctype.Percentage, value: tempVal, value2: value2, formatStr: xlObj._getFormatString(ctype.Percentage, decPlaces), decimalPlaces: decPlaces, align: rAlign };
                }
            }
            if (value2.indexOf(xlObj._decimalSeparator) > -1 && cellType && cellType != "general") {
                temp = ej.parseFloat(value2, 10, locale);
                if (temp) {
                    var str = temp.toString();
                    decPlaces = str.substr(value2.indexOf(xlObj._decimalSeparator) + 1).length;
                    if (decPlaces > 2)
                        decPlaces = 2;
                    value2 = ej.format(temp, "N" + decPlaces, locale);
                    decPlaces = decimalplcs > -1 ? decimalplcs : decPlaces;
                    return { type: ctype.Number, value: temp, value2: value2, formatStr: xlObj._getFormatString(ctype.Number, decPlaces), decimalPlaces: decPlaces, thousandSeparator: this.XLObj.isUndefined(isThouSep) ? true : isThouSep };
                }
            }
            if (value2.indexOf(tSep) > -1 && (cellType != "shortdate" && cellType != "date" && cellType != "time" && cellType != "longdate")) {
                if (regExp.test(value2)) {
                    temp = ej.parseInt(value2, 10, locale);
                    if (temp) {
                        decPlaces = 0;
                        value2 = ej.format(temp, "N" + decPlaces, locale);
                        decPlaces = decimalplcs > -1 ? decimalplcs : decPlaces;
                        return { type: ctype.Number, value: temp, value2: value2, formatStr: xlObj._getFormatString(ctype.Number, decPlaces), decimalPlaces: decPlaces, thousandSeparator: this.XLObj.isUndefined(isThouSep) ? true : isThouSep };
                    }
                }
            }
            patrns = prefCul.calendar.patterns
            isRExp = true, regExp = prefCul.calendar._parseRegExp;
            for (prop in patrns) {
                if (regExp && patrns[prop] in regExp)
                    temp = new RegExp(regExp[patrns[prop]].regExp).exec(value2);
                else {
                    isRExp = false;
                    temp = ej.parseDate(value2, patrns[prop], locale);
                }
                if (temp) {
                    if (!isRExp)
                        isRExp = true;
                    if (prop == "d") {
                        spltStr = patrns["d"].split(prefCul.calendar["/"]);
                        for (i = 0, len = spltStr.length; i < len; i++) {
                            if (spltStr[i].toLowerCase() === "m") {
                                index = i + 1;
                                break;
                            }
                        }
                        if (parseInt(temp[index]) > 12) {
                            temp = null;
                            continue;
                        }
                    }
                    break;
                }
            }
			// For 24hr Format
			if (!temp) {
				var tfFormat = "^(\\d\\d?):(\\d\\d?):(\\d\\d?)";
				temp = new RegExp(tfFormat).exec(value2);
				if (temp) {
					temp = ej.parseDate(value2, "H:mm:ss", locale);
					prop = 'rT';
					patrns[prop] = "H:mm:ss";
				}
			}
            if (temp) {
                if (isRExp)
                    temp = ej.parseDate(value2, patrns[prop], locale);
                if (temp) {
                    if (prop === "T" || prop === "t" || prop === "rT"|| xlObj.XLFormat._customFormatSpecifierType[prop] === ctype.Time) {
                        temp.setYear(1990);
                        temp.setMonth(0);
                        temp.setDate(1);
                        type = ctype.Time;
                    }
                    else if (prop === "d")
                        type = ctype.ShortDate;
                    else if (prop === "D")
                        type = ctype.LongDate;
                    else
                        type = ctype.Date;
                    formatStr = "{0:" + patrns[prop] + "}";
                    value2 = xlObj.XLFormat._format(temp, { type: type, formatStr: formatStr });
                    return { type: type, value: temp, value2: value2, formatStr: formatStr, align: rAlign };
                }
            }
            if (value2.toLowerCase() === "true" || value2.toLowerCase() === "false")
                value = value2 = value2.toUpperCase();
            return { type: type, value: value, value2: value2 };
        },

        updateCellWithContainer: function (data, range, sheetIdx, skipHiddenRow) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            sheetIdx = xlObj._getSheetIndex(sheetIdx);
            var actCell, colIdx, rowIdx, cellData, cellIdx, cells, len, i = 0, j = 0;
            range = range ? range : xlObj.getSheet(sheetIdx).selectedRange;
            cells = xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
            len = cells.length;
            while (i < len) {
                cellIdx = cells[i];
                rowIdx = cellIdx.rowIndex;
                if (!skipHiddenRow || !xlObj._isHiddenRow(rowIdx)) {
                    colIdx = cellIdx.colIndex;
                    cellData = data[j];
                    actCell = xlObj.getCell(rowIdx, colIdx, sheetIdx);
                    this._updateDataContainer(cellIdx, { dataObj: cellData });
                    this._refreshCalcEngine(rowIdx, colIdx, xlObj.isFormula(cellData.value), cellData.value);
                    if (actCell && cellData.format)
                        xlObj.addClass(actCell[0], cellData.format);
                    if (actCell && cellData.hyperlink)
                        actCell.html(ej.buildTag('a.e-hyperlinks', cellData.value2, '', "cellAdr" in cellData.hyperlink ? { href: '#' } : { href: cellData.hyperlink.webAdr, target: '_blank' }));
                    if (cellData.comment)
                        xlObj.XLComment.setComment([rowIdx, colIdx, rowIdx, colIdx], null, false);
                    if (cellData.border)
                        xlObj.XLFormat.applyBorder(xlObj.XLFormat.getBorderFromHashCode(cellData.border), xlObj._getAlphaRange(sheetIdx, rowIdx, colIdx, rowIdx, colIdx));
                    if (actCell) {
                        if (cellData.rule && cellData.rule.isApply)
                            xlObj.addClass(actCell[0], 'e-hlcell');
                        else
                            xlObj._removeClass(actCell[0], 'e-hlcell');
                    }
                    j++;
                }
                i++;
            }
            if (xlObj.model.allowConditionalFormats)
                xlObj.XLCFormat.refreshCFormat(range);
        },

        _refreshCellAlignment: function (options) {
            options = options || {};
            var prop, skipCell, align = ej.Spreadsheet.Align, xlObj = this.XLObj, rowIdx = options.cellIdx.rowIndex, colIdx = options.cellIdx.colIndex, isMergeCell = this.getPropertyValue(rowIdx, colIdx, "merge"), value = this.XLObj._getlocaleNumVal(options.value), type = ["currency", "accounting", "number", "scientific", "fraction"];
            if (!(align in options)) {
                options.value = ej.isNullOrUndefined(options.value) ? this.getPropertyValue(rowIdx, colIdx, "value") : options.value;
                options.type = options.type ? options.type : this.getPropertyValue(rowIdx, colIdx, "type");
                if (xlObj.model.locale !== "en-US") {
                    if (!isNaN(value) && type.indexOf(options.type) > -1)
                        options.value = value;
                }
                if (xlObj.isFormula(options.value))
                    options.value = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "calcValue");
                if ((xlObj.isNumber(options.value) || typeof options.value === "object" || ((options.type === "shortdate" || options.type === "longdate" || options.type === "time") && xlObj._isDateTime(new Date(options.value && options.value.toString())))) && options.type !== ej.Spreadsheet.CellType.Text && !(isMergeCell && isMergeCell.isCenterAlign))
                    options.align = align.Right;
                else if (xlObj._isBool(options.value) || (isMergeCell && isMergeCell.isCenterAlign))
                    options.align = align.Center;
                else
                    options.align = align.Left;
            }
            prop = this.getPropertyValue(rowIdx, colIdx, "align");
            if (xlObj._isInitLoad && !(xlObj.isImport || xlObj.model.isImport))
                skipCell = true;
            if (!options.align || (prop && prop != options.align))
                xlObj.clearRangeData([rowIdx, colIdx, rowIdx, colIdx], ["align"], "", "", "", skipCell);
            if (options.align)
                this._updateDataContainer(options.cellIdx, { dataObj: { align: options.align }, skipCell: skipCell, sheetIdx: options.sheetIdx });
        },

        _editingHandler: function (e) {
            if ($(e.target).parents(".e-backstagecontent").length)
                return;
            var text, isRowVisible, xlObj = this.XLObj, sheetIdx, sheet, $trgt, sheetDt, cellObj, rIdx, cIdx, selRowIdx, rowIdx, colIdx,
                i, j, len, m, rLen, cFormatStr, aRange, cFormatRule, selected, details, cell, mergeWrap, cellobjval, hasMergeIdx, formulaRange, rng;
            if (e.keyCode === 53 && e.shiftKey) {
                text = this._editElem.text();
                if (text.split("%").length == 2) {
                    if (this._cursorPosn - text.indexOf("%") === -1) {
                        this._editElem.setCursorPosition((xlObj._browserDetails.version === "8.0") ? document.selection.anchorOffset + 1 : window.getSelection().anchorOffset + 1);
                        e.preventDefault();
                        this._cursorPosn = -1;
                        return;
                    }
                }
            }
            if ((e.keyCode === 61 || (!e.shiftKey && e.keyCode === 32) || (e.keyCode >= 48 && e.keyCode <= 59) || (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 96 && e.keyCode <= 111) || (e.keyCode === 173) || (e.keyCode >= 186 && e.keyCode <= 192) || (e.keyCode >= 219 && e.keyCode <= 222)) && !e.ctrlKey && !e.altKey) {
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), $trgt = xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex);
                if (!this._isEdit && (!xlObj._hasClass($trgt, "e-readonly") && !xlObj._hasClass($trgt, "e-cellreadonly"))) {
                    xlObj.element.find(".e-cdata").length && xlObj.element.find(".e-cutright, .e-cutbottom").removeClass("e-cutright e-cutbottom");
                    xlObj.model.allowKeyboardNavigation && xlObj.XLCellNav._navToCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex);
                    hasMergeIdx = xlObj.XLEdit.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "mergeIdx");
                    xlObj._intrnlReq = true;
                    this.editCell(hasMergeIdx ? hasMergeIdx.rowIndex : sheet._activeCell.rowIndex, hasMergeIdx ? hasMergeIdx.colIndex : sheet._activeCell.colIndex, false);
                    xlObj._intrnlReq = false;
                }
                this._cursorPosn++;
            }
            else if (e.keyCode === 113 && !e.shiftKey && !e.ctrlKey) { //F2            
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), $trgt = xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex), this._isFEdit = true;
                if (!this._isEdit && (!xlObj._hasClass($trgt, "e-readonly") && !xlObj._hasClass($trgt, "e-cellreadonly"))) {
                    xlObj.element.find(".e-cdata").length && xlObj.element.find(".e-cutright, .e-cutbottom").removeClass("e-cutright e-cutbottom");
                    xlObj.model.allowKeyboardNavigation && xlObj.XLCellNav._navToCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex);
                    hasMergeIdx = xlObj.XLEdit.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "mergeIdx");
                    xlObj._intrnlReq = true;
                    this.editCell(hasMergeIdx ? hasMergeIdx.rowIndex : sheet._activeCell.rowIndex, hasMergeIdx ? hasMergeIdx.colIndex : sheet._activeCell.colIndex, true);
                    xlObj._intrnlReq = false;
                }
                this._cursorPosn++;
            }
            else if (e.keyCode === 27 && this._isEdit && xlObj.model.allowKeyboardNavigation) { //escape 
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), rIdx = sheet._activeCell.rowIndex, cIdx = sheet._activeCell.colIndex, $trgt = xlObj.getCell(rIdx, cIdx), sheetDt = xlObj._dataContainer.sheets[sheetIdx];
                if (xlObj.XLEdit.getPropertyValue(rIdx, cIdx, 'wrap') && xlObj.XLEdit.getPropertyValue(rIdx, cIdx, 'merge')) {
                    cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                    mergeWrap = cell.find('#' + xlObj._id + '_Merge')[0];
                }
                cellObj = rIdx in sheetDt && cIdx in sheetDt[rIdx] ? sheetDt[rIdx][cIdx] : cellObj;
                cellobjval = cellObj ? (typeof cellObj["value2"] === "string") ? cellObj["value2"] : xlObj._dataContainer.sharedData[cellObj["value"]] : "";
                xlObj.isFormula(cellobjval) && (cellobjval = this.getPropertyValue(rIdx, cIdx, "value2"));
                xlObj.element.find("#" + xlObj._id + "_Edit").hide();
                isRowVisible = xlObj._isRowViewable(sheetIdx, rIdx);
                if (isRowVisible) {
                    mergeWrap ? (mergeWrap.innerHTML = cellobjval) : this._refreshTextNode($trgt[0], cellobjval);
                    xlObj._setSheetFocus();
                    xlObj._setRowHdrHeight(sheetIdx, sheet._selectedCells[0].rowIndex);
                }
                if (xlObj.model.allowFormulaBar)
                    xlObj.updateFormulaBar();
                if (this._isFormulaEdit)
                    $("#" + xlObj._id + "_AutoComplete").data("ejAutocomplete").suggestionList.hide();
                this._isEdit = this._isFormulaEdit = this._isFBarFocused = false;
                xlObj._getContent(sheetIdx).find("td[class *='border']").removeClass(xlObj._formulaBorder.join(" ").replace(/,/g, " ") + " " + xlObj._ctrlFormulaBorder.join(" ").replace(/,/g, " "));
                if (isRowVisible) {
                    if (xlObj.model.allowComments && $trgt.hasClass("e-commentcell"))
                        xlObj.XLComment._visibleCmntCnt($trgt, true);
                    if (xlObj.model.allowAutoFill)
                        xlObj.XLDragFill.positionAutoFillElement();
                    $trgt.removeClass("e-editedcell e-msie-edit");
                }
                xlObj.model.showRibbon && xlObj.XLRibbon._enableRibbonIcons();
                xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-error").remove();
                if (!ej.isNullOrUndefined(xlObj.XLCellNav)) xlObj.XLCellNav._isNavigate = true;
            }
            else if (e.keyCode === 46 && xlObj.model.allowKeyboardNavigation) { //delete  
                if (!this._isEdit) {
                    if (xlObj._preventctrlkey) {
                        xlObj._showAlertDlg("Alert", "CtrlKeyErrorAlert", "CtrlKeyErrorAction", 450);
                        return;
                    }
                    sheetIdx = xlObj.getActiveSheetIndex(); sheet = xlObj.getSheet(sheetIdx);
                    var bRange = xlObj._getRangeArgs(sheet.selectedRange, "string"), args = { range: bRange, sheetIndex: sheetIdx, reqType: "clear-content", type: "actionBegin", action: "clearContent" };
                    if (xlObj._trigActionBegin(args))
                        return;
                    if (bRange != args.range)
                        xlObj.XLSelection.selectRange(args.range);
                    $trgt = xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex);
                    selected = sheet._selectedCells, text = xlObj.getRangeData({ range: [selected[0].rowIndex, selected[0].colIndex, selected[selected.length - 1].rowIndex, selected[selected.length - 1].colIndex] });
                    if (xlObj.model.allowLockCell && sheet.isSheetProtected) {
                        if (xlObj._isPropExists([sheet.selectedRange], "isLocked", sheetIdx))
                            return;
                    }
                    if (xlObj._isPropExists([sheet.selectedRange], "isReadOnly", sheetIdx))
                        return;
                    formulaRange = this.getPropertyValue(selected[0].rowIndex, selected[0].colIndex, "formulaRange");
                    if (formulaRange) {
                        rng = xlObj.getRangeIndices(formulaRange);
                        if (rng && !((rng[2] == selected[selected.length - 1].rowIndex && rng[0] == selected[0].rowIndex) && (rng[3] == selected[selected.length - 1].colIndex && rng[1] == selected[0].colIndex))) {
                            xlObj._showAlertDlg("Alert", "ArrayaFormula", 430);
                            return;
                        }
                    }
                    if (!this._isEdit) {
                        xlObj.element.find(".e-cdata").length && xlObj.element.find(".e-cutright, .e-cutbottom").removeClass("e-cutright e-cutbottom");
                        var tblMgr = xlObj.model.sheets[sheetIdx].tableManager, tblRange, objKeys = xlObj.getObjectKeys(tblMgr);
                        for (m = 0, rLen = xlObj.getObjectLength(tblMgr); m < rLen; m++) {
                            tblRange = tblMgr[objKeys[m]].range;
                            if (xlObj.XLClipboard._compareRange([selected[0].rowIndex, selected[0].colIndex, selected[selected.length - 1].rowIndex, selected[selected.length - 1].colIndex], tblRange)) {
                                aRange = xlObj._getAlphaRange(sheetIdx, tblRange[0], tblRange[1], tblRange[2], tblRange[3]);
                                xlObj.clearAll(aRange);
                                return;
                            }
                        }
                        if (!xlObj._hasClass($trgt, "e-readonly")) { // need to remove e-readonly
                            xlObj._isTrigCellSave = true;
                            xlObj.clearRangeData(null, ["value", "value2", "hyperlink", "hasFormulaArray", "hasMultipleFormulaArray"]);
                            xlObj._isTrigCellSave = false;
                        }
                        selRowIdx = selected[0].rowIndex;
                        for (i = 0, len = selected.length; i < len; i++) {
                            rowIdx = selected[i].rowIndex;
                            colIdx = selected[i].colIndex;
                            xlObj._textClip(rowIdx, colIdx, "delete");
                            if (!this.getPropertyValue(rowIdx, colIdx, "isReadOnly")) {
                                if (xlObj.model.allowFormulaBar)
                                    xlObj._getInputBox().val('');
                                cFormatRule = this.getPropertyValue(rowIdx, colIdx, "cFormatRule");
                                if (xlObj.model.allowConditionalFormats && cFormatRule && cFormatRule.length) {
                                    for (j = 0, rLen = cFormatRule.length; j < rLen; j++) {
                                        cFormatStr = cFormatRule[j].split("_");
                                        xlObj.XLCFormat._cFormat(cFormatStr[0], cFormatStr[2], cFormatStr[3], cFormatStr[4], cFormatStr[5], cFormatStr[6]);
                                    }
                                    xlObj.XLCFormat.refreshCFormat(xlObj._getAlphaRange(sheetIdx, rowIdx, colIdx, rowIdx, colIdx));
                                }
                                if (selRowIdx !== rowIdx) {
                                    xlObj._setRowHdrHeight(sheetIdx, rowIdx);
                                    selRowIdx++;
                                }
                            }
                        }
                        xlObj.XLSelection._refreshBorder();
                    }
                    details = { sheetIndex: sheetIdx, range: [selected[0].rowIndex, selected[0].colIndex, selected[selected.length - 1].rowIndex, selected[selected.length - 1].colIndex], bData: text, reqType: "clear-content" };
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
                else {
                    if (xlObj._ctrlKeyCount > 0) {
                        xlObj._ctrlKeyCount = 0;
                        xlObj._formulaRange = [];
                        xlObj.XLSelection._clearBorder(xlObj._formulaBorder.join(" ").replace(/,/g, " ") + " " + xlObj._ctrlFormulaBorder.join(" ").replace(/,/g, " "));
                    }
                }
            }
            else if (!e.ctrlKey && !e.shiftKey && e.keyCode === 8) { //backspace
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), $trgt = xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex);
                if (!this._isEdit && (!xlObj._hasClass($trgt, "e-readonly") && !xlObj._hasClass($trgt, "e-cellreadonly"))) {
                    xlObj.element.find(".e-cdata").length && xlObj.element.find(".e-cutright, .e-cutbottom").removeClass("e-cutright e-cutbottom");
                    $trgt = xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex);
                    hasMergeIdx = xlObj.XLEdit.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "mergeIdx");
                    xlObj._intrnlReq = true;
                    this.editCell(hasMergeIdx ? hasMergeIdx.rowIndex : sheet._activeCell.rowIndex, hasMergeIdx ? hasMergeIdx.colIndex : sheet._activeCell.colIndex, false);
                    xlObj._intrnlReq = false;
                    xlObj._setRowHdrHeight(sheetIdx, sheet._activeCell.rowIndex);
                    if (xlObj.model.allowFormulaBar)
                        xlObj._getInputBox().val("");
                }
            }
            else if ((((e.keyCode === 13 && !e.altKey) || e.keyCode === 9)) && this._isEdit && xlObj.model.allowKeyboardNavigation && !xlObj.XLCellNav._isNavigate && !this._isFormulaEdit) { //enter  
                e.preventDefault();
                if (!ej.isNullOrUndefined(xlObj.XLCellNav)) xlObj.XLCellNav._isNavigate = true;
            }
            else if ((e.keyCode === 13 && e.altKey) && this._isEdit) { //alt + enter  
                e.preventDefault();
                var editElem = xlObj.element.find("#" + xlObj._id + "_Edit");
                editElem.focus();
                editElem.altEnter();
            }
        },

        _focusElements: function (cell) {
            $(cell).not(":hidden").focus().setInputPos($(cell).text().length);
        },

        _updateUsedRange: function (rowIdx, colIdx, sheetIdx) {
            var xlObj = this.XLObj, usedRange = xlObj.getSheet(sheetIdx ? sheetIdx : xlObj.getActiveSheetIndex()).usedRange;
            if (usedRange.rowIndex < rowIdx)
                usedRange.rowIndex = rowIdx;
            if (usedRange.colIndex < colIdx)
                usedRange.colIndex = colIdx;
        },

        _updateDataContainer: function (cellIdx, options) {
            var i, j, k, $cell, cell, mergeWrap, mergeWrapval, newText, ctype, atype, colObj, index, data, arr, cellData, colIdx, rowIdx, isDate, isBool, cellObj, id,
                innerTag, container, sheetData, rowData, prefix, regx, prevVal, textNode, bool, hcode, child, format = "e-format", cellInfo,
                canRefresh = false, border = "e-border", dataObj = options.dataObj, xlObj = this.XLObj, sheetIdx = xlObj._getSheetIndex(options.sheetIdx), sheet = xlObj.getSheet(sheetIdx), sparklineId, sparklineProp, mDiv;
            if (!options.skipCell && xlObj._isRowViewable(sheetIdx, cellIdx.rowIndex)) {
                $cell = xlObj.getCell(cellIdx.rowIndex, cellIdx.colIndex, sheetIdx);
                cell = $cell[0];
            }
            if (dataObj) {
                ctype = ej.Spreadsheet.CellType, atype = ej.Spreadsheet.Align, container = xlObj._dataContainer,
                    colIdx = cellIdx.colIndex, rowIdx = cellIdx.rowIndex, arr = xlObj._cellProp, sheetData = container.sheets[sheetIdx];
                if (rowIdx in sheetData) {
                    rowData = sheetData[rowIdx];
                    if (colIdx in rowData)
                        colObj = rowData[colIdx];
                    else
                        rowData[colIdx] = colObj = {};
                }
                else {
                    rowData = sheetData[rowIdx] = {};
                    rowData[colIdx] = colObj = {};
                }
                if (cell) {
                    if (this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, 'merge', sheetIdx)) {
                        mergeWrap = $cell.find('#' + xlObj._id + '_Merge')[0];
                        if (mergeWrap) {
                            textNode = mergeWrap.lastChild;
                            if (textNode) {
                                if (textNode.nodeType === 1) {
                                    xlObj._hasClass(textNode, 'e-hyperlinks') && (textNode.textContent = '');
                                    xlObj._hasClass(textNode, 'e-comment') && (textNode.lastChild.textContent = '');
                                }
                                else
                                    textNode.textContent = '';
                            }
                            else
                                mergeWrap.textContent = '';
                            mergeWrapval = mergeWrap.innerHTML;
                            $(mergeWrap).remove();
                        }
                    }
                }
                for (i in dataObj) {
                    data = dataObj[i];
                    (typeof (data) === "string" && $.trim(data).length === 0) && (data = "");
                    switch (i) {
                        case arr[0]:
                        case arr[4]:
                        case arr[5]:
                        case arr[11]:
                            index = container.sharedData.indexOf(data);
                            if (index === -1) {
                                index = container.sharedData.push(data);
                                index--;
                            }
                            colObj[i] = index;
                            if (sheet._isLoaded && i === arr[0] && !xlObj._intrnlUpdate)
                                canRefresh = true;
                            break;
                        case arr[1]:
                            prevVal = this.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx);
                            if (dataObj.type && dataObj.type != ctype.General && dataObj.type != ctype.Text)
                                colObj[i] = dataObj.value2;
                            else {
                                index = container.sharedData.indexOf(dataObj.value2);
                                if (index === -1) {
                                    index = container.sharedData.push(dataObj.value2);
                                    index--;
                                }
                                colObj[i] = index;
                            }
                            if (cell && !('cellType' in dataObj)) {
                                innerTag = cell.getElementsByTagName("a");
                                if (innerTag.length)
                                    this._refreshTextNode(cell, dataObj.value2);
                                else if (colObj[arr[24]] > -1) {
                                    cellObj = container.sheetCellType[colObj[arr[24]]], id = cellObj.id;
                                    if ($('#' + id).length === 0)
                                        return;
                                    if (dataObj.value2) {
                                        switch (cellObj.type) {
                                            case 'Button':
                                                $('#' + id).ejButton('instance').option('text', dataObj.value2);
                                                break;
                                        }
                                    }
                                }
                                else {
                                    if (dataObj.value2) {
                                        isDate = (dataObj.value2.toString().length > 7) && !isNaN(new Date(dataObj.value2).valueOf()),
                                            isBool = ['true', 'yes', 'false', 'no'].indexOf(dataObj.value2.toString().toLowerCase()) > -1;
                                    }
                                    if (xlObj.model.allowCellType && xlObj.model.allowAutoCellType && (isDate || isBool)) {
                                        if (isDate) {
                                            xlObj.XLCellType._rangeCellTypes([{ 'settings': { 'type': 'DatePicker' }, 'range': xlObj._getAlphaRange(sheetIdx, rowIdx, colIdx, rowIdx, colIdx) }], sheetIdx, true);
                                            $("#" + xlObj._dataContainer.sheetCellType[colObj[arr[24]]].id).ejDatePicker('instance').option('value', dataObj.value2);
                                        }
                                        else if (isBool) {
                                            xlObj.XLCellType._rangeCellTypes([{ 'settings': { 'type': 'CheckBox' }, 'range': xlObj._getAlphaRange(sheetIdx, rowIdx, colIdx, rowIdx, colIdx) }], sheetIdx, true);
                                            $("#" + xlObj._dataContainer.sheetCellType[colObj[arr[24]]].id).ejCheckBox('instance').option('checked', (['true', 'yes'].indexOf(dataObj.value2.toString().toLowerCase()) > -1) ? true : false);
                                        }
                                    }
                                    else
                                        this._skipHTML ? cell.innerHTML.concat(dataObj.value2) : this._refreshTextNode(cell, dataObj.value2);
                                }
                            }
                            this._refreshCellAlignment({ cellIdx: cellIdx, value: dataObj.value, type: dataObj.type, sheetIdx: sheetIdx });
                            if (!xlObj._isSort)
                                if (xlObj.model.allowOverflow && xlObj._canOverflow) {
                                    if (prevVal || dataObj.value2) {
                                        if (ej.isNullOrUndefined(prevVal))
                                            bool = true;
                                        else {
                                            if (prevVal.length <= dataObj.value2.length)
                                                bool = true;
                                            else
                                                bool = false;
                                        }
                                        xlObj._textClip(rowIdx, colIdx, bool ? 'add' : 'delete');
                                        if (!bool && dataObj.value2.length > 0)
                                            xlObj._textClip(rowIdx, colIdx, 'add');
                                    }
                                }
                                else if (xlObj._canOverflow)
                                    xlObj.refreshOverflow([rowIdx, colIdx, rowIdx, colIdx], sheetIdx);
                            colObj["isDirty"] = true;
                            break;
                        case arr[2]:
                            colObj[i] = container.cellType.indexOf(dataObj.type);
                            break;
                        case arr[3]:
                            j = 0, k = data.length;
                            while (j < k) {
                                index = container.cFormatData.indexOf(data[j]);
                                if (index === -1) {
                                    index = container.cFormatData.push(data[j]);
                                    index--;
                                }
                                if (colObj[i]) {
                                    if (colObj[i].indexOf(index) === -1)
                                        colObj[i].push(index);
                                }
                                else
                                    colObj[i] = [index];
                                j++;
                            }
                            break;
                        case arr[6]:
                            index = container.valData.indexOf(data.customVal);
                            if (index === -1) {
                                index = container.valData.push(data.customVal);
                                index--;
                            }
                            colObj[i] = JSON.parse(JSON.stringify(data));
                            colObj[i].customVal = index;
                            break;
                        case arr[7]:
                        case arr[8]:
                            if (cell) {
                                prefix = i === arr[8] ? border : format, regx = new RegExp('\\b' + prefix + '.*?\\b', 'g');
                                cell.className = cell.className.replace(regx, "");
                                xlObj.addClass(cell, data);
                            }
                            index = container.hashCode.indexOf(data);
                            if (index === -1) {
                                index = container.hashCode.push(data);
                                index--;
                            }
                            colObj[i] = index;
                            break;
                        case arr[9]:
                        case arr[10]:
                        case arr[26]:
                        case arr[27]:
                            if (colObj[i]) {
                                if (colObj[i].indexOf(data) === -1)
                                    colObj[i].push(data);
                            }
                            else
                                colObj[i] = [data];
                            break;
                        case arr[12]:
                            colObj[i] = data;
                            if (cell) {
                                if (data === atype.Center)
                                    xlObj.addClass(cell, xlObj._cAlign);
                                else if (data === atype.Right)
                                    xlObj.addClass(cell, xlObj._rAlign);
                                else
                                    $(cell).removeClass(xlObj._rAlign + " " + xlObj._cAlign);
                            }
                            break;
                        case arr[14]:
                        case arr[16]:
                            hcode = xlObj.XLFormat.getFormatHashCode(data);
                            index = container.hashCode.indexOf(hcode);
                            if (index === -1) {
                                xlObj.XLFormat._createFormatClass(data, hcode);
                                index = container.hashCode.push(hcode);
                                index--;
                            }
                            colObj[i] = index;
                            break;
                        case arr[15]:
                        case arr[17]:
                            data = xlObj.XLFormat._getBorderHashCode(data, true);
                            index = container.hashCode.indexOf(data);
                            if (index === -1) {
                                index = container.hashCode.push(data);
                                index--;
                            }
                            colObj[i] = index;
                            break;
                        default:
                            colObj[i] = data;
                    }
                }
                this._updateUsedRange(cellIdx.rowIndex, cellIdx.colIndex, sheetIdx);
                if (canRefresh) {
                    if (xlObj.model.allowCharts)
                        xlObj.XLChart._refreshChartElements(rowIdx, colIdx, sheetIdx);
                    if (xlObj.model.allowSparkline)
                        xlObj.XLSparkline.refreshSparkline(rowIdx, colIdx, sheetIdx);
                    if (xlObj.model.allowConditionalFormats)
                        xlObj.XLCFormat._refreshCFormatFormula(rowIdx, colIdx, sheetIdx);
                    xlObj._updateBatchDetails(rowIdx, colIdx, sheetIdx);
                    canRefresh = false;
                }
                if (cell && this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, 'merge', sheetIdx)) {
                    var cellMerge = this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, 'merge', sheetIdx), cellHeight = (sheet._rowHeightCollection[cellIdx.rowIndex + cellMerge.mSpan.rowSpan] - sheet._rowHeightCollection[cellIdx.rowIndex]) || Math.floor($cell.height());
                    if (xlObj._isRowViewable(sheetIdx, cellIdx.rowIndex)) {
                        newText = this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, 'value2', sheetIdx);
                        newText = newText || "";
                        mergeWrap = $cell.find('#' + xlObj._id + '_Merge')[0];
                        !mergeWrap && this._refreshTextNode(cell);
                        mergeWrapval = (mergeWrapval) ? mergeWrapval.concat(dataObj.value2 || newText) : (dataObj.value2 || newText);
                        if (!mergeWrap) {
                            sparklineId = this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, 'sparkline', sheetIdx);
                            if (!xlObj._isCopyPaste && xlObj.model.allowSparkline && sparklineId) {
                                sparklineId = sparklineId[0];
                                sparklineProp = xlObj.getSheet(sheetIdx).shapeMngr["sparkline"][sparklineId];
                                if ($cell.find(".e-ss-sparkline").length) {
                                    $("#" + sparklineId).ejSparkline("destroy");
                                    xlObj.XLSparkline._wireSparklineEvents("_off");
                                    cell.innerHTML = "<div id =" + xlObj._id + "_Merge style = 'border :0px;overflow: hidden;max-height:" + (cellHeight - 1) + "px'>" + cell.innerHTML.concat(ej.isNullOrUndefined(mergeWrapval) ? "" : mergeWrapval) + "</div>"; //-1 to set the height less than cell height to avoid misalignment
                                    $("#" + sparklineId).ejSparkline(sparklineProp);
                                    xlObj.XLSparkline._wireSparklineEvents("_on");
                                }
                                else {
                                    cell.innerHTML = "<div id =" + xlObj._id + "_Merge style = 'border :0px;overflow: hidden;max-height:" + (cellHeight - 1) + "px'>" + cell.innerHTML.concat(ej.isNullOrUndefined(mergeWrapval) ? "" : mergeWrapval) + "</div>"; //-1 to set the height less than cell height to avoid misalignment
                                    if ($(cell).find('svg[id *= "sparkline_svg"]').length) {
                                        $(cell).find('svg[id *= "sparkline_svg"]').remove();
                                        $("#" + sparklineId).ejSparkline(sparklineProp);
                                        xlObj.XLSparkline._wireSparklineEvents("_on");
                                    }
                                    else {
                                        cellInfo = xlObj._getCellInfo(cellIdx, sheetIdx);
                                        xlObj.XLSparkline._createSparkline(sparklineProp, cellInfo, sheetIdx);
                                    }
                                }
                            }
                            else {
                                cell.innerHTML = "<div id =" + xlObj._id + "_Merge style = 'border :0px;overflow: hidden;max-height:" + (cellHeight - 1) + "px'>" + cell.innerHTML.concat(ej.isNullOrUndefined(mergeWrapval) ? "" : mergeWrapval) + "</div>"; //-1 to set the height less than cell height to avoid misalignment
                                if (xlObj._hasClass(cell, 'e-rightalign')) {
                                    xlObj._removeClass(cell, 'e-rightalign');
                                    mDiv = $cell.find('#' + this.XLObj._id + '_Merge');
                                    mDiv[0].classList.add('e-rightalign');
                                }
                            }
                            mergeWrap = $cell.find('#' + xlObj._id + '_Merge')[0];
                        }
                        child = mergeWrap.children;
                        if (child.length) {
                            for (i = 0; i < child.length; i++) {
                                if (xlObj._hasClass(mergeWrap.children[i], 'e-comment'))
                                    mergeWrap.children[i].lastChild.textContent = this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, 'comment', sheetIdx).value;
                                if (xlObj._hasClass(mergeWrap.children[i], 'e-hyperlinks')) {
                                    mergeWrap.lastChild.textContent = '';
                                    mergeWrap.children[i].textContent = this.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, 'value2', sheetIdx);
                                }
                            }
                        }
                    }
                }
                if ((Object.keys ? Object.keys(colObj).length : xlObj.getObjectLength(colObj)) === 3) {
                    cellData = xlObj.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], property: arr.slice(0, 3) })[0];
                    if (cellData.value === "" && cellData.value2 === "" && cellData.type === ej.Spreadsheet.CellType.General)
                        xlObj.clearRangeData([rowIdx, colIdx, rowIdx, colIdx], arr.slice(0, 3));
                }
                if (sheet._isLoaded && !xlObj.isDirty && !xlObj._intrnlReq && !(xlObj.isImport || xlObj.model.isImport))
                    xlObj.isDirty = true;
            }
            else if (cell)
                this._refreshTextNode(cell);
        },

        _clearDataContainer: function (options) {
            var i, cell, aTag, prop, mergeWrap, prevVal, colData, hl, canRefresh, value, canClip = false, xlObj = this.XLObj, sheetIdx = xlObj._getSheetIndex(options.sheetIdx), arr = xlObj._cellProp,
                rowIdx = options.cellIdx.rowIndex, colIdx = options.cellIdx.colIndex, props = options.property || [], isClear = false, dataObj,
                container = xlObj._dataContainer, sheetData = container.sheets[sheetIdx];
            if (props.length && rowIdx in sheetData && colIdx in sheetData[rowIdx]) {
                colData = sheetData[rowIdx][colIdx], i = props.length;
                if (!options.skipCell && xlObj._isRowViewable(sheetIdx, rowIdx))
                    cell = xlObj.getCell(rowIdx, colIdx, sheetIdx);
                while (i--) {
                    value = null, canRefresh = false;
                    prop = props[i];
                    switch (prop) {
                        case arr[0]:
                            value = this.getPropertyValue(rowIdx, colIdx, prop, sheetIdx);
                            canRefresh = true;
                            break;
                        case arr[1]:
                            prevVal = this.getPropertyValue(rowIdx, colIdx, 'value2');
                            if (cell) {
                                this._refreshTextNode(cell[0]);
                                mergeWrap = cell.find('#' + xlObj._id + '_Merge');
                                mergeWrap.length && (mergeWrap[0].innerHTML = "");
                            }
                            if (prevVal)
                                canClip = true;
                            break;
                        case arr[3]:
                            value = this.getPropertyValue(rowIdx, colIdx, prop, sheetIdx);
                            if (value && cell && cell.length > 0) {
                                $(cell).removeClass("e-redft e-yellowft e-greenft e-redf e-redt");
                                cell[0].style.color = "";
                                cell[0].style.backgroundColor = "";
                                cell.removeClass("e-cformat");
                                var dataBarVal = cell.children().find('.e-databar-value');
                                var cellvalue = dataBarVal[0] && dataBarVal[0].textContent;
                                if (cell.children().hasClass('e-cf-databar')) {
                                    cell.find('.e-cf-databar').remove();
                                    this._refreshTextNode(cell[0], cellvalue);
                                }
                                if (cell.hasClass('e-iconset') || cell.children().find('.e-iconsetspan').length > 0) {
                                    cell.removeClass('.e-iconset');
                                    cell.find('.e-iconsetspan').remove();
                                }
                            }
                            break;
                        case arr[7]:
                        case arr[8]:
                            value = this.getPropertyValue(rowIdx, colIdx, prop, sheetIdx);
                            if (value && cell)
                                xlObj._removeClass(cell[0], value);
                            break;
                        case arr[14]:
                            value = this.getPropertyValue(rowIdx, colIdx, prop, sheetIdx);
                            if (value && value['text-align'] && value['text-align'] === 'right' && cell)
                                xlObj._removeClass(cell[0], 'e-rightalign');
                            break;
                        case arr[12]:
                            value = colData[prop];
                            if (value && cell)
                                xlObj._removeClass(cell[0], value === ej.Spreadsheet.Align.Center ? xlObj._cAlign : xlObj._rAlign);
                            break;
                        case arr[13]:
                            value = colData[prop];
                            if (value && cell) {
                                hl = cell[0].lastChild.textContent;
                                if (options.status === "clear-content") {
                                    cell[0].lastChild.textContent = "";
                                    break;
                                }
                                else if (options.status === "clear-format") {
                                    aTag = cell.find("a");
                                    if (xlObj._hasClass(aTag[0], "e-hyperlinks"))
                                        aTag.css({ "color": "#444445", "text-decoration": "none" }).removeClass("e-hyperlinks");
                                    break;
                                }
                                cell.find("a").remove();
                                if (ej.isNullOrUndefined(cell[0].lastChild))
                                    cell[0].textContent = hl;
                                else
                                    cell[0].lastChild.textContent = hl;
                            }
                            break;
                        case arr[18]:
                            value = colData[prop];
                            if (value && cell) {
                                cell.removeClass("e-filterhdr");
                                cell.find(".e-filterspan").remove();
                            }
                            break;
                        case arr[21]:
                            xlObj.XLComment && xlObj.XLComment.deleteComment([rowIdx, colIdx, rowIdx, colIdx]);
                            break;
                        case arr[5]:
                        case arr[22]:
                        case arr[23]:
                            if (!isClear) {
                                value = this.getPropertyValue(rowIdx, colIdx);
                                xlObj.isUndefined(value) && (value = "");
                                dataObj = { decimalPlaces: 0, thousandSeparator: false, formatStr: "", type: "general", value: value };
                                dataObj.value2 = xlObj.XLFormat._getFormattedValue(rowIdx, colIdx, dataObj, value);
                                xlObj.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: dataObj });
                                isClear = true;
                            }
                            break;
                        case arr[25]:
                            delete sheetData[rowIdx][colIdx][prop];
                            break;
                    }
                    if (options.status === "clear-content" && prop === "hyperlink") {
                        if (this.getPropertyValue(rowIdx, colIdx, prop, sheetIdx)) {
                            delete sheetData[rowIdx][colIdx][prop]["webAddr"];
                            delete sheetData[rowIdx][colIdx][prop]["cellAddr"];
                        }
                    }
                    else
                        delete sheetData[rowIdx][colIdx][prop];
                    if (canRefresh) {
                        this._refreshCalcEngine(rowIdx, colIdx, false, value);
                        xlObj._updateBatchDetails(rowIdx, colIdx, sheetIdx);
                        xlObj.model.allowCharts && xlObj.XLChart._refreshChartElements(rowIdx, colIdx, sheetIdx);
                        if (xlObj.model.allowSparkline)
                            xlObj.XLSparkline.refreshSparkline(rowIdx, colIdx, sheetIdx);
                    }
                }
                if (canClip)
                    xlObj._textClip(rowIdx, colIdx, 'delete');
                if (!xlObj._overFlowRowIdx && !xlObj.getObjectLength(sheetData[rowIdx]))
                    delete sheetData[rowIdx];
                if (sheetData[rowIdx] && !xlObj.getObjectLength(sheetData[rowIdx][colIdx]))
                    delete sheetData[rowIdx][colIdx];
            }
        },

        getPropertyValue: function (rowIdx, colIdx, prop, sheetIdx) {
            var value, coldata, val, i, j, ctype, xlObj = this.XLObj, container = xlObj._dataContainer,
                sheets = container.sheets, cellProp = xlObj._cellProp;
            sheetIdx = xlObj._getSheetIndex(sheetIdx);
            if (!xlObj._intrnlUpdate)
                this._refreshContainer(rowIdx, sheetIdx);
            if (sheets[sheetIdx] && sheets[sheetIdx][rowIdx] && sheets[sheetIdx][rowIdx][colIdx]) {
                coldata = sheets[sheetIdx][rowIdx][colIdx];
                if (coldata) {
                    prop = prop || "value";
                    val = coldata[prop];
                    switch (prop) {
                        case "value":
                        case "range":
                        case "thousandSeparator":
                        case "calcValue":
                            value = container.sharedData[val];
                            break;
                        case "format":
                        case "border":
                            value = container.hashCode[val];
                            break;
                        case "value2":
                            ctype = ej.Spreadsheet.CellType;
                            value = (!xlObj.isUndefined(coldata.type) && [ctype.General, ctype.Text].indexOf(container.cellType[coldata.type]) === -1) ? coldata.value2 : container.sharedData[coldata.value2];
                            break;
                        case "type":
                            value = container.cellType[coldata.type];
                            break;
                        case "cFormatRule":
                            i = j = 0;
                            value = [];
                            if (!xlObj.isUndefined(val))
                                j = val.length;
                            while (i < j) {
                                if (coldata[prop][i] in container.cFormatData)
                                    value.push(container.cFormatData[coldata[prop][i]]);
                                i++;
                            }
                            break;
                        case "rule":
                            if (!xlObj.isUndefined(val)) {
                                value = {};
                                $.extend(true, value, val);
                                value.customVal = container.valData[value.customVal];
                            }
                            break;
                        case cellProp[14]:
                        case cellProp[15]:
                        case cellProp[16]:
                        case cellProp[17]:
                            if (!xlObj.isUndefined(val)) {
                                value = container.hashCode[val];
                                value = value.indexOf("e-format") === -1 ? xlObj.XLFormat.getBorderFromHashCode(value, true) : xlObj.XLFormat.getFormatFromHashCode(value);
                            }
                            break;
                        case "cTypeDetail":
                            var cType = xlObj._dataContainer.sheetCellType[coldata["cellType"]];
                            if (cType && cType.type == "DropDownList" && cType.selectedIndex > -1 && cType.dataSource) {
                                cType.text = cType.dataSource[cType.selectedIndex].text;
                                cType.value = cType.dataSource[cType.selectedIndex].value;
                            }
                            value = cType;
                            break;
                        case "isLocked":
                            value = val;
                            if (xlObj._isDefaultLocked)
                                value = !value;
                            break;
                        default:
                            value = val;
                    }
                }
            }
            else if (xlObj._isDefaultLocked && prop === "isLocked")
                value = !value;
            return value;
        },

        _refreshContainer: function (rowIdx, sheetIdx) {
            var blkInfo, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx);
            if (!sheet._isImported && sheet._hasDataSrc) { // data source => data container
                xlObj._intrnlUpdate = true;
                if (xlObj.model.scrollSettings.allowVirtualScrolling) {
                    blkInfo = xlObj._getBlockInfo(rowIdx, sheetIdx, true);
                    if (sheet._virtualDataMngrLoadedBlks.indexOf(blkInfo.orgIdx) === -1) {
                        sheet._virtualDataMngrLoadedBlks.push(blkInfo.orgIdx);
                        this._ensureDataMngr(blkInfo.orgRange, sheetIdx);
                    }
                    if (sheet._virtualDataLoadedBlks.indexOf(blkInfo.orgIdx) === -1) {
                        sheet._virtualDataLoadedBlks.push(blkInfo.orgIdx);
                        xlObj._canOverflow = false;
						xlObj._saveTriggered = true;
                        xlObj._refreshDataSrc(blkInfo.orgRange, sheetIdx);
						xlObj._refreshCellData(blkInfo.orgRange, sheetIdx);
						xlObj._canOverflow = true;
						xlObj._saveTriggered = false;
						xlObj._refreshOverflow(blkInfo.orgRange);
                    } else {
						var rangeIdx = sheet._renderedRange.indexOf(blkInfo.orgIdx);
						if (rangeIdx > -1) {
							xlObj._saveTriggered = true;
							xlObj._refreshCellData(blkInfo.orgRange, sheetIdx);
							xlObj._saveTriggered = false;
							xlObj._canOverflow = true;
							xlObj._refreshOverflow(blkInfo.orgRange);
							xlObj._isRangeRendered = false;
							sheet._renderedRange.splice(rangeIdx, 1);
						}
					}
                }
                else if (!sheet._isLoaded && !sheet._isDataMoved) {
                    sheet._isDataMoved = true;
                    xlObj._canOverflow = false;
					xlObj._saveTriggered = true;
                    xlObj._refreshDataSrc(null, sheetIdx);
                    xlObj._refreshCellData(null, sheetIdx);
                    xlObj._canOverflow = true;
					xlObj._saveTriggered = false;
                    xlObj._refreshOverflow();
                }
                xlObj._intrnlUpdate = false;
            }
        },

        _ensureDataMngr: function (range, sheetIdx) {
            var len, k, skip, props, setting, promise, i = 0, xlObj = this.XLObj, settings = xlObj.getDataSettings(sheetIdx), j, queryObj;
            if (settings) {
                j = settings.length;
                while (i < j) {
                    setting = settings[i];
                    if (xlObj._inRow(setting.range, range[0]) && setting._dataManager) {
                        props = this._getQueryPropWithValues(range.slice(0), setting.range);
                        queryObj = ej.pvt.filterQueries(setting.query.queries, "onSkip");
                        skip = props.skip || 0;
                        if (setting._skip)
                            skip += setting._skip;
                        if (skip)
                            if (queryObj.length)
                                queryObj[0]["e"]["nos"] = skip;
                            else
                                setting.query.skip(skip);
                        queryObj = ej.pvt.filterQueries(setting.query.queries, "onTake");
                        if (props.take)
                            if (queryObj.length)
                                queryObj[0]["e"]["nos"] = props.take;
                            else
                                setting.query.take(props.take);
                        setting._dataManager.dataSource.async = false;
                        promise = setting._dataManager.executeQuery(setting.query);
                        promise.done(function (e) {
                            len = e.result.length;
                            if (len) {
                                k = 0;
                                while (k < len) {
                                    setting._jsonData[props.skip + k] = e.result[k];
                                    k++;
                                }
                            }
                        });
                        setting._dataManager.dataSource.async = true;
                    }
                    i++;
                }
            }
        },

        _getQueryPropWithValues: function (crange, arange) {
            var cnt, obj = {}, xlObj = this.XLObj;
            cnt = crange[0] - arange[0];
            obj.skip = cnt;
            if (arange[2] < crange[2])
                crange[2] = arange[2];
            if (xlObj._inRow(arange, crange[2])) {
                cnt = (crange[2] - crange[0]) + 1;
                obj.take = cnt;
            }
            return obj;
        },

        getPropertyValueByElem: function (elem, property, sheetIdx) {
            if (!ej.isNullOrUndefined(elem[0])) {
                var cellIndex;
                if (elem.hasClass("e-hyperlinks"))
                    cellIndex = this.XLObj._getCellIdx(elem.parent()[0]);
                else
                    cellIndex = this.XLObj._getCellIdx(elem[0]);
                return (this.getPropertyValue(cellIndex.rowIndex, cellIndex.colIndex, property, sheetIdx));
            }
        },

        _getPropWithCellIdx: function (range, prop, sheetIdx, formulaOnly) {
            var xlObj = this.XLObj; sheetIdx = xlObj._getSheetIndex(sheetIdx);
            var val, arr = [], minr = range[0], maxr = range[2], minc, maxc = range[3],
                sheet = xlObj._dataContainer.sheets[sheetIdx];
            while (minr <= maxr) {
                if (sheet[minr]) {
                    minc = range[1];
                    while (minc <= maxc) {
                        if (sheet[minr][minc]) {
                            val = this.getPropertyValue(minr, minc, prop, sheetIdx);
                            if (!xlObj.isUndefined(val)) {
                                if (formulaOnly) {
                                    if (xlObj.isFormula(val))
                                        arr.push({ rowIdx: minr, colIdx: minc, value: val });
                                }
                                else
                                    arr.push({ rowIdx: minr, colIdx: minc, value: val });
                            }
                        }
                        minc++;
                    }
                }
                minr++;
            }
            return arr;
        },

        _refreshCalcEngine: function (rowIdx, colIdx, isFormula, val, sheetIdx) {
            var xlObj = this.XLObj; sheetIdx = xlObj._getSheetIndex(sheetIdx);
            var cellArgs, family, cellRef, sheet = xlObj.getSheet(sheetIdx), calcEngine = xlObj._calcEngine;
            if (isFormula) {
                val = this._parseSheetRef(val);
                cellArgs = new ValueChangedArgs(rowIdx + 1, colIdx + 1, val);
                calcEngine.valueChanged(sheet.sheetInfo.value, cellArgs, xlObj._computeFormula ? true : (xlObj._impData ? sheet._isLoaded : true));
                xlObj._applyFormula(sheetIdx, rowIdx, colIdx);
            }
            else {
                family = CalcEngine.getSheetFamilyItem(sheet.sheetInfo.value);
                cellRef = RangeInfo.getAlphaLabel(colIdx + 1) + (rowIdx + 1);
                if (calcEngine.isSheetMember() && !ej.isNullOrUndefined(family.parentObjectToToken))
                    cellRef = family.parentObjectToToken.getItem(sheet.sheetInfo.value) + cellRef;
                if (calcEngine.getFormulaInfoTable().containsKey(cellRef)) {
                    calcEngine.getFormulaInfoTable().remove(cellRef);
                    if (calcEngine.getDependentCells().contains(cellRef))
                        calcEngine.clearFormulaDependentCells(cellRef);
                }
                calcEngine.getComputedValue().clear();
                calcEngine.refresh(cellRef);
                calcEngine.getComputedValue().clear();
                var currCell = calcEngine.getDependentCells(), idx = currCell.keys().indexOf(cellRef), depCell, range, depCellsColl;
                if (idx > -1) {
                    depCellsColl = calcEngine.getDependentCells().values()[idx];
                    for (var i = 0, len = depCellsColl.length; i < len; i++) {
                        depCell = depCellsColl[i].split("!");
                        range = xlObj.getRangeIndices(depCell[2]);
                        if (xlObj.model.allowCharts)
                            xlObj.XLChart._refreshChartElements(range[0], range[1], parseInt(depCell[1]) + 1);
                    }
                }
            }
        },

        _parseSheetRef: function (fValue, isNMValue) {
            var regx, escapeRegx = new RegExp("[!@#$%^&()+=\';,.{}|\":<>~_-]", 'g'), i = 0, xlObj = this.XLObj, sheetCount = xlObj.model.sheetCount, temp = [], sheetNames = [], sheetInfo = xlObj._getSheetNames(), exp = '(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)', singleQuoteExp = /'[^'"]*'(?=(?:[^"]*"[^"]*")*[^"]*$)/g;

            while (i < sheetInfo.length) {
                sheetNames.push(sheetInfo[i].text);
                i++;
            }

            for (i = 0; i < sheetCount; i++) {
                if (sheetInfo[i].value !== sheetInfo[i].text) {
                    regx = new RegExp(sheetInfo[i].text.replace(escapeRegx, "\\$&") + exp, 'gi');
                    if (fValue.match(singleQuoteExp))
                        this._singleQuote = true;
                    if (fValue.match(regx)) {
                        fValue = fValue.replace(regx, i + "/");
                        temp.push(i);
                    }
                    if (sheetNames.indexOf(sheetInfo[i].value) < 0 && fValue.indexOf(sheetInfo[i].value) > -1 && !isNMValue) {
                        regx = new RegExp(sheetInfo[i].value + exp, 'gi');
                        if (fValue.match(regx)) {
                            fValue = fValue.replace(regx, xlObj._newSIndex + "/");
                            temp.push(xlObj._newSIndex);
                        }
                    }
                }
            }

            i = 0;

            while (i < temp.length) {
                regx = new RegExp(temp[i] + "/" + exp, 'gi');
                if (this._sheetNameSpclchar) {
                    if (!isNaN(sheetInfo[temp[i]].text) || !(/^[a-zA-Z0-9- ]*$/.test(sheetInfo[temp[i]].text)) || sheetInfo[i].text.match("\\s+"))
                        return fValue = fValue.replace(regx, temp[i] === xlObj._newSIndex ? xlObj._generateSheetName(xlObj._newSIndex) : this._singleQuote ? sheetInfo[temp[i]].text : "'" + sheetInfo[temp[i]].text + "'");
                }
                else
                    fValue = fValue.replace(regx, temp[i] === xlObj._newSIndex ? xlObj._generateSheetName(xlObj._newSIndex) : sheetInfo[temp[i]].value);
                i++;
                this._singleQuote = false;
            }
            return fValue;
        },

        _refreshTextNode: function (td, value) {
            var xlObj = this.XLObj, cfDatabar = $(td).find(".e-cf-databar");
            value = ej.isNullOrUndefined(value) ? "" : value;
            if (!xlObj.isUndefined(td)) {
                var node = td.lastChild;
                if (node && (node.nodeType === 3 || (node.nodeType === 1 && node.tagName === "A")))
                    (xlObj._browserDetails.name === "msie" && xlObj._browserDetails.version === "8.0") ? (node.nodeValue = value) : (node.textContent = value);
                else if (cfDatabar.length > 0) {
                    cfDatabar.find('.e-databar-value')[0].innerHTML = value
                }
                else
                    td.appendChild(document.createTextNode(value));
            }
        },

        _formulaSelect: function (args) {
            var value, text = value = args.text, editText = this.XLEdit._editElem.text().slice(1);
            if (text.indexOf("(worksheet)") > -1)
                value = value.split(" (worksheet)")[0];
            if (editText.endsWith("[") && this._tableRangesFormula[editText.split("[")[0]]) {
                text = value = "=" + editText + args.text.slice(1);
                this.XLEdit._processFormulaEditRange(text);
            }
            else if (!this.XLEdit._isNamedRange(value) && !(text.slice(1) == "TRUE" || text.slice(1) == "FALSE"))
                text += "(";
            this.XLEdit._editElem.text(text);
            if (this.model.allowFormulaBar)
                this._getInputBox().val(text);
            this.XLEdit._editElem.focusEnd();
            this._isFormulaSuggestion = false;
            this.XLCellNav._canKeyBoardNavigate = false;
        },

        _isNamedRange: function (value) {
            var nameMngr = this.XLObj.model.nameManager, i = nameMngr.length;
            value = value.slice(1);
            if (i) {
                while (i--) {
                    if (nameMngr[i].name.toUpperCase() === value.toUpperCase())
                        return true;
                }
            }
            return false;
        },

        _getTableRange: function (value) {
            var xlObj = this.XLObj, range;
            if (value.startsWith("="))
                value = value.slice(1);
            value = value.split(/[\[\]]+/);
            if (value.length >= 2 && value[1].length)
                range = xlObj._tableRangesFormula[value[0]][value[1]];
            else
                range = xlObj._tableRangesFormula[value[0]]["#Data"];
            return range;
        },

        _formulaBoxInputChange: function (e) {
            var sheetIdx = this.getActiveSheetIndex(), acell = this.getSheet(sheetIdx)._activeCell, hasMergeIdx;
            var ielem = this.element.find("#" + this._id + "_Edit");
            this.XLEdit._isFormulaEdit = !e.target.value.indexOf("=");
            this.XLEdit._isFormulaEdit && this.XLEdit._processFormulaEditRange(e.target.value, true);
            if (!this.XLEdit._isEdit) {
                this.model.allowKeyboardNavigation && this.XLCellNav._navToCell(acell.rowIndex, acell.colIndex);
                hasMergeIdx = this.XLEdit.getPropertyValue(acell.rowIndex, acell.colIndex, "mergeIdx");
                this._intrnlReq = true;
                this.XLEdit.editCell(hasMergeIdx ? hasMergeIdx.rowIndex : acell.rowIndex, hasMergeIdx ? hasMergeIdx.colIndex : acell.colIndex, true);
                this._intrnlReq = false;
                ielem = this.element.find("#" + this._id + "_Edit");
            }
            ielem.text(e.target.value);
            e.target.focus();
            this.XLEdit._isCellEdit = false;
        },

        _formulaSuggestionStatus: function (args) {
            this._isFormulaSuggestion = args.type === "open";
        },

        _updateFormulaCellRange: function (val, ctrlKey) {
            var idx, xlObj = this.XLObj, ielem = xlObj.element.find("#" + xlObj._id + "_Edit").not(":hidden"), otext, lastChar, rtext, sheet;
            if (!ielem.length && this._isFormulaEdit) {
                ielem = xlObj.element.find("#" + xlObj._id + "_Edit");
                val = xlObj.getSheet().sheetInfo.text + "!" + val;
            }
            otext = ielem.text();
            lastChar = otext[otext.length - 1];
            if (ctrlKey && this._validCharacters.indexOf(lastChar) === -1)
                otext = otext + ",";
            else {
                idx = this._getCharPosition(otext);
                if (idx > -1) {
                    otext = otext.substr(0, [idx + 1]);
					if (this._isSplChar) {
						rtext = otext.substr(0, otext.length - 1);
						idx = this._getCharPosition(rtext);
						sheet = rtext.substr(idx + 1, rtext.length - 1);
						if (sheet !== this.XLObj.getSheet().sheetInfo.value) {
							otext = rtext.substr(0, [idx + 1]);
						}
					}
				}
            }
            val = (this._isSplChar && val.split("!")[1]) ? otext + val.split("!")[1] : otext + val;
            this._isSplChar = false;
            ielem.text(val);
            this._editElem.focusEnd();
            if (xlObj.model.allowFormulaBar)
                xlObj._getInputBox().val(val);
        },

        _getCharPosition: function (val) {
            var len = val.length, sheetInfo = this.XLObj.getSheet().sheetInfo;
            while (len--) {
                if (val[len] == "!") {
                    this._isSplChar = true;
                    return len;
                }
                else if (this._validCharacters.indexOf(val[len]) > -1)
                    return len;
            }
            return -1;
        },

        _processFormulaEditRange: function (val, isInputBox) {
            var str, actSheetIdx, formulaSheetIdx, lastChar, i = 0, xlObj = this.XLObj, parsedVal = xlObj.XLDragFill._parseFormula(val), len = parsedVal.length;
            xlObj._ctrlKeyCount = 0;
            xlObj._formulaRange = [];
            xlObj.XLSelection._clearBorder(xlObj._arrayAsString(xlObj._ctrlFormulaBorder.concat(xlObj._formulaBorder)));
			formulaSheetIdx = actSheetIdx = xlObj.getActiveSheetIndex();
            while (i < len) {
                str = parsedVal[i];
                if (this._invalidOperators.indexOf(str) > -1)
                    break;
                if (xlObj._isCellReference(str)) {
                    str = str.replace(/\$/g, "");
                    if (parsedVal[i + 1] === ":") {
                        i++;
                        if (xlObj._isCellReference(parsedVal[i + 1])) {
                            str = str + ":" + parsedVal[i + 1];
                            i++;
                        }
                    }
					if (i > 0) {
						if (parsedVal[i - 1].indexOf('!') === parsedVal[i - 1].length - 1) {
							i++;
							splitStr = parsedVal[i - 1].split("!");
							formulaSheetIdx = xlObj._getSheetIndexByName(splitStr[0]);
						}
					}
					if (actSheetIdx === formulaSheetIdx) {
						this._updateFormulaEditRange(str, xlObj._ctrlKeyCount, sheetIdx);
					}
					formulaSheetIdx = actSheetIdx;
                    xlObj._ctrlKeyCount++;
                }
                else if (xlObj._tableRangesFormula[str.split(/[\[\]]+/)[0]]) {
                    var cellAddr = this._getTableRange(str), splitStr, sheetIdx;
                    if (cellAddr) {
                        splitStr = cellAddr.split("!");
                        sheetIdx = xlObj._getSheetIndexByName(splitStr[0]);
                        cellAddr = splitStr[1].split("$").join("");
                        if (sheetIdx === xlObj.getActiveSheetIndex())
                            this._updateFormulaEditRange(cellAddr, xlObj._ctrlKeyCount);
                    }
                }
                i++;
            }
            lastChar = val.charAt(val.length - 1);
            if (lastChar === "(" && val.split("(").length === 2) {
                xlObj._isFormulaSuggestion = false;
                if (xlObj.model.allowFormulaBar)
                    xlObj._getInputBox().val(val);
                isInputBox ? $("#" + xlObj._id + "_inputbox_suggestion").hide() : xlObj._getFormulaSuggElem().hide();
            }
            else if (lastChar === ")" && xlObj.isFormula(val)) {
                xlObj.XLEdit._isFormulaEdit = false;
                xlObj._formulaRange = [];
                xlObj._ctrlKeyCount = 0;
            }
            if (lastChar === ":") {
                xlObj._shiftKeyEnabled = true;
                xlObj._ctrlKeyCount--;
            }
            else if (this._validOperators.indexOf(lastChar) > -1) {
                xlObj._dStartCell = xlObj.getSheet(xlObj.getActiveSheetIndex())._activeCell;
                xlObj._shiftKeyEnabled = false;
            }
        },

        _updateFormulaEditRange: function (str, i) {
            var xlObj = this.XLObj, indices = xlObj.getRangeIndices(str);
            xlObj._formulaRange[i] = str;
            xlObj._dStartCell = { rowIndex: indices[0], colIndex: indices[1] };
            xlObj._dEndCell = { rowIndex: indices[2], colIndex: indices[3] };
            xlObj.XLSelection._focusBorder(xlObj._dStartCell, xlObj._dEndCell, xlObj._formulaBorder[i % 6]);
        },

        calcOption: function (isAutomatic) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var len, aIdx = xlObj.getActiveSheetIndex(), args = { sheetIndex: aIdx, reqType: "calc-option", type: "actionBegin", action: "calcoption" }, calcObj, range, i;
            if (xlObj._trigActionBegin(args))
                return;
            for (i = 1, len = xlObj._sheets.length; i < len; i++) {
                calcObj = xlObj._calcEngine;
                if (isAutomatic) {
                    calcObj.setCalculatingSuspended(false);
                    range = xlObj.getSheet(i).usedRange;
                    xlObj.setActiveSheetIndex(i);
                    calcObj.grid = xlObj.model.sheets[i].sheetInfo.value;
                    calcObj.refreshRange(RangeInfo.cells(1, 1, range.rowIndex + 1, range.colIndex + 1));
                }
                else
                    calcObj.setCalculatingSuspended(true);
            }
            xlObj.setActiveSheetIndex(aIdx);
        },

        calcNow: function (sheetIdx) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var aIdx = xlObj.getActiveSheetIndex(), args = { sheetIndex: aIdx, reqType: "calc-now", type: "actionBegin", action: "calcnow" }, i = 1, calcObj, range, len = xlObj._sheets.length, details;
            if (xlObj._trigActionBegin(args))
                return;
            if (sheetIdx) {
                i = sheetIdx;
                len = sheetIdx + 1;
            }
            while (i < len) {
                calcObj = xlObj._calcEngine;
                calcObj.setCalculatingSuspended(false);
                range = xlObj.getSheet(i).usedRange;
                xlObj.setActiveSheetIndex(i);
                calcObj.grid = xlObj.model.sheets[i].sheetInfo.value;
                calcObj.refreshRange(RangeInfo.cells(1, 1, range.rowIndex + 1, range.colIndex + 1));
                calcObj.setCalculatingSuspended(true);
                i++;
            }
            xlObj.setActiveSheetIndex(aIdx);
            details = { sheetIndex: aIdx, reqType: "calc-now" };
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        _rangeHasProperty: function (range, property, rDataColl) {
            if (range)
                rDataColl = this.XLObj.getRangeData({ range: range, property: [property] });
            var i = 0, len = rDataColl.length;
            while (i < len) {
                if (!this.XLObj.isUndefined(rDataColl[i][property]))
                    return true;
                i++;
            }
        },

        saveEditingValue: function () {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var i, j, sheet, conSheet, sheetCln, rowIdx, colIdx, len, value, rowCln, sheets = {}, colCln, rLen, cLen, container = xlObj._dataContainer, sheetIdx;
            sheetCln = Object.getOwnPropertyNames(container.sheets);
            sheets["EditedData"] = [];
            for (sheet = 0, len = sheetCln.length; sheet < len; sheet++) {
                conSheet = container.sheets[sheetCln[sheet]];
                rowCln = Object.getOwnPropertyNames(conSheet);
                for (i = 0, rLen = rowCln.length; i < rLen; i++) {
                    rowIdx = parseInt(rowCln[i]);
                    colCln = Object.getOwnPropertyNames(conSheet[rowIdx]);
                    for (j = 0, cLen = colCln.length; j < cLen; j++) {
                        colIdx = parseInt(colCln[j]);
                        if (conSheet[rowIdx][colIdx]["isDirty"]) {
                            sheetIdx = parseInt(sheetCln[sheet]);
                            value = { "SheetIndex": sheetIdx, "Value": this.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx), "CellIndex": { "RowIndex": rowIdx, "ColIndex": colIdx } };
                            delete conSheet[rowIdx][colIdx]["isDirty"];
                            sheets["EditedData"].push(value);
                        }
                    }
                }
            }
            return sheets;
        }

    };

    $.fn.focusEnd = function () {
        $(this).focus();
        var tmp = $('<span />').appendTo($(this)),
            node = tmp.get(0),
            range = null,
            sel = null;
        if (document.selection) {
            range = document.body.createTextRange();
            range.moveToElementText(node);
            range.select();
        } else if (window.getSelection) {
            var ele = this[0];
            range = document.createRange();
            sel = window.getSelection();
            range.setStart(ele, 1);
            range.collapse(true);
            sel.removeAllRanges();
            sel.addRange(range);
            ele.focus();
        }
        tmp.remove();
        return this;
    }

    $.fn.altEnter = function () {
        var sel, node, offset, text, textBefore, textAfter, range;
        sel = window.getSelection();
        node = sel.anchorNode;
        offset = (node.nodeType === 3) ? sel.anchorOffset : node.textContent.length;
        text = node.textContent;
        textBefore = text.slice(0, offset);
        textAfter = text.slice(offset) || ' ';
        node.textContent = textBefore + '\n' + textAfter;
        range = document.createRange();
        if (node.nodeType === 3) {
            range.setStart(node, offset + 1);
            range.setEnd(node, offset + 1);
        }
        else if (node.nodeType === 1) {
            range.setStart(node.firstChild, offset + 1);
            range.setEnd(node.firstChild, offset + 1);
        }
        else
            $(node).setInputPos(offset + 1);
        sel.removeAllRanges();
        sel.addRange(range);
    }

    $.fn.setCursorPosition = function (position) {
        var node = this;
        node.focus();
        var textNode = node[0].firstChild, range = document.createRange(), sel;
        if (textNode) {
            range.setStart(textNode, position);
            range.setEnd(textNode, position);
        }
        sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }


})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.validation = function (obj) {
        this.XLObj = obj;
        this._ruleSymbols = { "Greater": ">", "GreaterOrEqual": ">=", "Less": "<", "LessOrEqual": "<=", "Equal": "==", "NotEqual": "!=", "Between": ">=&&<=&&=", "NotBetween": ">=&&<=&&!" };
        this._isErrorVisible = false;
    };

    ej.spreadsheetFeatures.validation.prototype = {
        //Validation
        _setValidation: function () {
            if (!this.XLObj.model.allowDataValidation || !$.validator)
                return;
            this._initValidator();
            this._setValidationToField();
        },

        _initValidator: function () {
            var elem = $("#" + this.XLObj._id + "EditForm");
            if (ej.isOnWebForms)
                $.data(elem[0], "validator", null);
            elem.validate({
                errorClass: "e-field-validation-error",
                errorElement: "div",
                wrapper: "div",
                errorPlacement: function (error, ele) {
                    var xlObj = $("#" + $(ele).data("id")).data("ejSpreadsheet"), $content = xlObj._getJSSheetContent(xlObj.getActiveSheetIndex()).find(".e-spreadsheetcontentcontainer > .e-content");
                    var $td = xlObj.XLEdit._editCell, $container = $(error).addClass("e-error");
                    $content.append($container);
                    $container.prepend(ej.buildTag("div.e-errortail e-toparrow"));
                    $container.css({ left: $td[0].offsetLeft, top: $td[0].offsetTop + $td[0].offsetHeight });
                    xlObj.XLValidate._isErrorVisible = true;
                }
            });
        },

        _setValidationToField: function () {
            var xlObj = this.XLObj, rules = xlObj.XLEdit.getPropertyValueByElem(xlObj.getActiveCellElem(), "rule");
            delete rules.type;
            delete rules.isApply;
            delete rules.isHighlight;
            xlObj.element.find("#" + xlObj._id + "_ValElem").rules("add", rules);
            var validator = xlObj.element.find("#" + xlObj._id + "EditForm").validate();
            if (!ej.isNullOrUndefined(rules.required)) {
                validator.settings.messages[name] = {};
                validator.settings.messages[name].required = xlObj.XLEdit._EditCellDetails.fieldName + (xlObj.XLEdit._EditCellDetails.rowIndex + 1) + " is required";
            }
            xlObj.XLEdit._isValidation = true;
        },

        applyDVRules: function (range, values, type, required, showErrorAlert) {
            var details, $trgt, len, evtArgs, rule = {}, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), isHLight = false, rng, selected, detailVal, args = { range: range, values: values, numType: type, required: required, showErrorAlert: showErrorAlert, sheetIndex: sheetIdx, reqType: "data-validation", type: "actionBegin", action: "applyvalidation" };
            if (xlObj._trigActionBegin(args))
                return;
            range = args.range;
            values = args.values;
            type = args.numType;
            required = args.required;
            showErrorAlert = args.showErrorAlert;
            switch (type) {
                case "decimal":
                    if (parseFloat(values[1]) > parseFloat(values[2])) {
                        xlObj._showAlertDlg("Alert", "NumberValidationAlert", "", 400);
                        return;
                    }
                    break;
                case "date":
                    if (new Date(values[1]) > new Date(values[2])) {
                        xlObj._showAlertDlg("Alert", "DateValidationAlert", "", 400);
                        return;
                    }
                    break;
                case "time":
                    var time1 = Date.parse("01/01/1990 " + values[1]), time2 = Date.parse("01/01/1990 " + values[2]);
                    if (values[2] && values[2].length && time1 > time2) {
                        xlObj._showAlertDlg("Alert", "TimeValidationAlert", "", 400);
                        return;
                    }
                    break;
                default:
                    if (parseInt(values[1]) > parseInt(values[2])) {
                        xlObj._showAlertDlg("Alert", "NumberValidationAlert", "", 400);
                        return;
                    }
                    break;
            }
            if (xlObj.model.isReadOnly || !xlObj.model.allowDataValidation || (!xlObj.model.allowSelection && ej.isNullOrUndefined(range)))
                return;
            rng = xlObj._getRangeArgs(range, "object");
            selected = xlObj._getSelectedCells(sheetIdx, rng).selCells;
            xlObj._showDialog(xlObj._id + "_Ribbon_Data_DataTools_DataValidation");
            rule.required = !required;
            if ((values[0] != "Between" || values[0] != "NotBetween") && values.length < 3)
                values.push("");
            switch (type) {
                case "number":
                    values.push("parseInt");
                    rule.digits = true;
                    values.push("number");
                    break;
                case "decimal":
                    values.push("parseFloat");
                    rule.number = true;
                    values.push("decimal");
                    break;
                case "date":
                    values.push("parseDate");
                    rule.date = true;
                    values.push("date");
                    break;
                case "time":
                    values.push("parseTime");
                    values.push("time");
                    break;
                case "text":
                    values[1] = "^" + values[1];
                    values[2] = "^" + values[2];
                    values.push("length");
                    values.push("text");
                    break;
                case "list":
                    var dataSrc = values[1];
                    values = [];
                    values.push(dataSrc);
                    values.push("list");
                    break;
            }
            values.push(showErrorAlert);
            values.push(range ? range : xlObj._getSelectedItems(sheetIdx, range)[1]);
            values.push(sheetIdx);
            rule.customVal = values.join("_");
            rule.isApply = false;
            rule.type = type;
            var selCells = [], cell = {}, i;
            for (i = 0, len = selected.length; i < len; i++) {
                cell = { rowIndex: selected[i].rowIndex, colIndex: selected[i].colIndex, prevRule: xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "rule") };
                if (xlObj._isRowViewable(sheetIdx, selected[i].rowIndex)) {
                    $trgt = xlObj.getCell(selected[i].rowIndex, selected[i].colIndex);
                    $trgt.hasClass("e-hlcell") && (isHLight = true);
                    $trgt.removeData("rule");
                    $trgt.removeClass("e-hlcell");
                }
                xlObj.XLEdit._updateDataContainer({ rowIndex: selected[i].rowIndex, colIndex: selected[i].colIndex }, { dataObj: { "rule": rule } });
                if (xlObj.model.actionComplete !== null)
                    cell["newRule"] = xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "rule");
                selCells.push(cell);
            }
            if (isHLight === true)
                this.highlightInvalidData();
            if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo && !xlObj._isExport) {
                detailVal = (values[2] == "") ? ([values[0], values[1]]) : ([values[0], values[1], values[2]])
                details = { showErrorAlert: values[5], values: detailVal, required: !rule.required, rule: rule, sheetIndex: sheetIdx, reqType: "validation", operation: "apply-validation", selectedCell: selCells, range: xlObj._getAlphaRange(sheetIdx, selected[0].rowIndex, selected[0].colIndex, selected[selected.length - 1].rowIndex, selected[selected.length - 1].colIndex) };
                evtArgs = { showErrorAlert: details.showErrorAlert, values: details.values, isRequired: details.required, rule: details.rule, sheetIndex: details.sheetIndex, reqType: details.reqType, operation: details.operation, selectedCell: details.selectedCell, range: details.range };
                xlObj._completeAction(details);
                xlObj._trigActionComplete(evtArgs);
            }
        },

        clearDV: function (range) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowDataValidation || xlObj.model.isReadOnly || !xlObj.model.allowSelection)
                return;
            var $trgt, selectedCells, rng, sheetIdx = xlObj.getActiveSheetIndex(), details = { sheetIndex: sheetIdx, reqType: "validation", operation: "clear-validation", selectedCell: [] };
            rng = xlObj._getRangeArgs(range, "object");
            selectedCells = xlObj._getSelectedCells(sheetIdx, rng).selCells;
            for (var i = 0, len = selectedCells.length; i < len; i++) {
                details.selectedCell.push({ rowIndex: selectedCells[i].rowIndex, colIndex: selectedCells[i].colIndex, rules: xlObj.XLEdit.getPropertyValue(selectedCells[i].rowIndex, selectedCells[i].colIndex, "rule") });
                xlObj.clearRangeData([selectedCells[i].rowIndex, selectedCells[i].colIndex, selectedCells[i].rowIndex, selectedCells[i].colIndex], ["rule"]);
                if (xlObj._isRowViewable(sheetIdx, selectedCells[i].rowIndex)) {
                    $trgt = xlObj.getCell(selectedCells[i].rowIndex, selectedCells[i].colIndex);
                    if (!ej.isNullOrUndefined(xlObj._ddlCell)) {
                        xlObj.element.find("#" + xlObj._id + "ddl").ejDropDownList("hidePopup");
                        xlObj.element.find("#" + xlObj._id + "ddlspan").remove();
                        xlObj._ddlCell = null;
                    }
                    details.hlStatus = $trgt.hasClass("e-hlcell");
                    $trgt.removeClass("e-hlcell");
                }
            }
            details.range = xlObj._getAlphaRange(sheetIdx, selectedCells[0].rowIndex, selectedCells[0].colIndex, selectedCells[selectedCells.length - 1].rowIndex, selectedCells[selectedCells.length - 1].colIndex);
            if (!xlObj._isUndoRedo && !xlObj._dupDetails) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        clearHighlightedValData: function (range) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowDataValidation || xlObj.model.isReadOnly)
                return;
            var selected, rng, trgt, sheetIdx = xlObj.getActiveSheetIndex();
            rng = xlObj._getRangeArgs(range, "object");
            selected = xlObj._getSelectedCells(sheetIdx, rng).selCells;
            for (var i = 0, len = selected.length; i < len; i++) {
                if (xlObj._isRowViewable(sheetIdx, selected[i].rowIndex)) {
                    trgt = xlObj.getCell(selected[i].rowIndex, selected[i].colIndex);
                    trgt.removeClass("e-hlcell");
                }
                if (!ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "rule")))
                    xlObj._dataContainer.sheets[sheetIdx][selected[i].rowIndex][selected[i].colIndex].rule.isApply = false;
            }
            if (!xlObj._isUndoRedo) {
                var details = { sheetIndex: sheetIdx, reqType: "validation", operation: "cl-hl-data", range: (ej.isNullOrUndefined(range)) ? this.XLObj._getAlphaRange(1, selected[0].rowIndex, selected[0].colIndex, selected[selected.length - 1].rowIndex, selected[selected.length - 1].colIndex) : range };
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _checkValidation: function (value, params, isHighlight, sheetIdx) {
            var xlObj = this.XLObj, len, listVal, cellAddr, calcNamedRanges, isNamedRange, locale = xlObj.model.locale, temp = value;
            sheetIdx = xlObj._getSheetIndex(sheetIdx);
            if (!JSON.parse(params[params.length - 3]) && !isHighlight)
                return true;
            if (params[4] === "time") {
                var patterns = ej.preferredCulture(locale).calendar.patterns;
                value = xlObj.formatting("{0:" + patterns["T"] + "}", ej.parseDate(value, patterns["dT"]), locale);
                if (!value.length)
                    value = temp;
            }
            value = this._convertValueByType(value, params[4]);
            params[1] = this._convertValueByType(params[1], params[4]);
            params[2] = this._convertValueByType(params[2], params[4]);
            if (value.length) {
                if (params[params.length - 4] === "list") {
                    var i, isMatch = false;
                    if (params[0].indexOf(",") > -1)
                        listVal = params[0].split(",");
                    else if (params[0].indexOf("=") > -1) {
                        cellAddr = params[0].split("=")[1];
                        calcNamedRanges = xlObj.getCalcEngine().getNamedRanges();
                        isNamedRange = calcNamedRanges.getItem(cellAddr.toUpperCase());
                        if (isNamedRange)
                            cellAddr = isNamedRange;
                        if (cellAddr.indexOf('!') > -1) {
                            sheetIdx = isNamedRange ? xlObj._getSheetIdxFromSheetValue(cellAddr.split('!')[0]) : xlObj._getSheetIndexByName(cellAddr.split('!')[0]);
                            listVal = (cellAddr.split('!')[1].indexOf('$') > -1) ? xlObj.getRangeData({ sheetIdx: sheetIdx, range: xlObj.getRangeIndices(cellAddr.split('!')[1].split('$').join("")), valueOnly: true }) : (cellAddr.indexOf('$') > -1) ? xlObj.getRangeData({ sheetIdx: sheetIdx, range: xlObj.getRangeIndices(cellAddr.split('$').join("")), valueOnly: true }) : xlObj.getRangeData({ sheetIdx: sheetIdx, range: xlObj.getRangeIndices(cellAddr.split('!')[1]), valueOnly: true });
                        }
                        else
                            listVal = xlObj.getRangeData({ sheetIdx: sheetIdx, range: xlObj.getRangeIndices(cellAddr), valueOnly: true });
                    }
                    else
                        listVal = value;
                    for (i = 0, len = listVal.length; i < len; i++) {
                        isMatch = listVal[i].toString() === value;
                        if (isMatch)
                            break;
                    }
                    ej.Spreadsheet.msg = xlObj._getLocStr("ListAlertMsg");
                    return isMatch;
                }
                else {
                    var val, range;
                    params[0] = this._ruleSymbols[params[0]];
                    if (params[1].indexOf("=") > -1) {
                        val = params[1].replace("=", "");
                        range = this.getRangeIndices(val + ":" + val);
                        params[1] = xlObj.XLEdit.getPropertyValue(range[0], range[1], null, sheetIdx).toString();
                    }
                    if (params[2].indexOf("=") > -1) {
                        val = params[2].replace("=", "");
                        range = this.getRangeIndices(val + ":" + val);
                        params[2] = xlObj.XLEdit.getPropertyValue(range[0], range[1], null, sheetIdx).toString();
                    }
                    if (params[0].length <= 2) {
                        ej.Spreadsheet.msg = "The " + params[4] + " should be " + ej.Spreadsheet.ValidationText[params[0]] + " " + params[1].replace("^", "");
                        return xlObj.operators[params[0]](xlObj.parse[params[3]](value), xlObj.parse[params[3]](params[1]));
                    }
                    else {
                        var op = [];
                        op = params[0].split("&&");
                        ej.Spreadsheet.msg = "The " + params[4] + " should" + ej.Spreadsheet.ValidationText[op[2]] + " be between" + " " + params[1].replace("^", "") + " and " + params[2].replace("^", "");
                        return xlObj.operators[op[2]]((xlObj.operators[op[0]](xlObj.parse[params[3]](value), xlObj.parse[params[3]](params[1])) && xlObj.operators[op[1]](xlObj.parse[params[3]](value), xlObj.parse[params[3]](params[2]))));
                    }
                }
            }
            else
                return true;
        },

        _convertValueByType: function (value, type) {
            if (value.length) {
                var xlObj = this.XLObj;
                switch (type) {
                    case "number":
                    case "decimal":
                        if (xlObj._isValidDate(value))
                            value = xlObj._dateToInt(value);
                        break;
                    case "date":
                        if ($.isNumeric(value))
                            value = xlObj.intToDate(value).toString();
                        break;
                }
            }
            return value;
        },

        highlightInvalidData: function (range) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowDataValidation || xlObj.model.isReadOnly)
                return;
            var len, value, selected, cell, isApply, i, rng, sheetIdx = xlObj.getActiveSheetIndex(), rule;
            rng = xlObj._getRangeArgs(range, "object");
            selected = xlObj._getSelectedCells(sheetIdx, rng).selCells;
            range = xlObj._getAlphaRange(sheetIdx, rng[0], rng[1], rng[2], rng[3]);
            for (i = 0, len = selected.length; i < len; i++) {
                rule = xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "rule", sheetIdx);
                if (!rule)
                    continue;
                if (xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, null, sheetIdx) && !ej.isNullOrUndefined(rule)) {
                    value = (xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "type", sheetIdx) === "datetime" || xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "type", sheetIdx) === "time") ? xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, "value2", sheetIdx).toString() : xlObj.XLEdit.getPropertyValue(selected[i].rowIndex, selected[i].colIndex, null, sheetIdx).toString();
                    isApply = rule ? !(this._checkValidation(value, rule.customVal.split("_"), true, sheetIdx)) : false;
                    xlObj._dataContainer.sheets[sheetIdx][selected[i].rowIndex][selected[i].colIndex].rule.isApply = isApply;
                }
                else if (!ej.isNullOrUndefined(rule))
                    isApply = rule.required;
                if (xlObj._isRowViewable(sheetIdx, selected[i].rowIndex)) {
                    cell = xlObj.getCell(selected[i].rowIndex, selected[i].colIndex, sheetIdx);
                    if (isApply)
                        cell.addClass("e-hlcell");
                    else
                        cell.removeClass("e-hlcell");
                }
                xlObj.XLEdit._updateDataContainer({ rowIndex: selected[i].rowIndex, colIndex: selected[i].colIndex }, { dataObj: { isHighlight: true }, sheetIdx: sheetIdx });
            }
            if (!xlObj._isUndoRedo) {
                var details = { sheetIndex: sheetIdx, reqType: "validation", operation: "hl-data", range: range };
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _replaceRule: function (idx, newRule) {
            // replace the rules in shared data
            this.XLObj._dataContainer.cFormatData[idx] = newRule;
        },

        _addDVMethod: function () {
            !ej.isNullOrUndefined($.validator) && $.validator.addMethod("customVal", function (value, elem, params) {
                var xlObj = $("#" + $(elem).data("id")).data("ejSpreadsheet"), $content = xlObj._getJSSheetContent(xlObj.getActiveSheetIndex()).find(".e-spreadsheetcontentcontainer > .e-content");
                $content.find(".e-error").remove();
                if (xlObj.model.showRibbon && $("#" + xlObj._id + "_Ribbon_freetext").length && !$("#" + xlObj._id + "_Ribbon_freetext").data("ejCheckBox").isChecked())
                    return true;
                return xlObj.XLValidate._checkValidation(value, params.split("_"));
            }, ej.Spreadsheet.getMsg);
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.dragFill = function (obj) {
        this.XLObj = obj;
        this._customList = [
            ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        ];
        this._property = ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "hyperlink", "format", "rule"];
        this._fillInfo = null;
        this._verticalFill = false;
        this._uniqueOBracket = String.fromCharCode(129);
        this._uniqueCBracket = String.fromCharCode(130);
        this._uniqueCSeparator = String.fromCharCode(131);
        this._uniqueCOperator = String.fromCharCode(132);
        this._uniquePOperator = String.fromCharCode(133);
        this._uniqueSOperator = String.fromCharCode(134);
        this._uniqueMOperator = String.fromCharCode(135);
        this._uniqueDOperator = String.fromCharCode(136);
        this._uniqueModOperator = String.fromCharCode(137);
        this._uniqueConcateOperator = String.fromCharCode(138);
        this._uniqueEqualOperator = String.fromCharCode(139);
        this._uniqueExpOperator = String.fromCharCode(140);
        this._uniqueGTOperator = String.fromCharCode(141);
        this._uniqueLTOperator = String.fromCharCode(142);
    };

    ej.spreadsheetFeatures.dragFill.prototype = {
        positionAutoFillElement: function (isdragfill) {
            var mergeIdx, rowIdx, colIdx, cellInfo, sheetIdx, sheet, top = 0, left = 0,
                tdiff = 0, ldiff = 0, otdiff = 0, oldiff = 0, xlObj = this.XLObj, hide = "e-hide";
            if (!xlObj.model.allowAutoFill || !xlObj.model.allowSelection)
                return;
            sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx);
            if (sheet._isRowSelected) {
                tdiff = -3;
                ldiff = -1;
                otdiff = 5;
                oldiff = 4;
                rowIdx = sheet.selectedRange[2];
                colIdx = sheet.selectedRange[1];
                left = xlObj._isFrozen(sheet.frozenColumns) ? xlObj._getContent(sheetIdx).find(".e-content").scrollLeft() : sheet._scrollLeft;
            }
            else if (sheet._isColSelected) {
                ldiff = -3;
                oldiff = 5;
                rowIdx = sheet.selectedRange[0];
                colIdx = sheet.selectedRange[3];
                top = xlObj._isFrozen(sheet.frozenRows) ? xlObj._getContent(sheetIdx).find(".e-content").scrollTop() : sheet._scrollTop;
            }
            else if (sheet._isSheetSelected) {
                this.hideAutoFillElement();
                return;
            }
            else {
                tdiff = -3;
                ldiff = -3;
                otdiff = 1;
                oldiff = 3;
                rowIdx = sheet.selectedRange[2];
                colIdx = sheet.selectedRange[3];
            }
            mergeIdx = xlObj._getMergedIdx(rowIdx, colIdx);
            rowIdx = mergeIdx.rowIndex;
            colIdx = mergeIdx.colIndex;
            cellInfo = xlObj._getCellInfo({ rowIndex: rowIdx, colIndex: colIdx });
            if (!sheet._isColSelected)
                top += cellInfo.height;
            if (!sheet._isRowSelected)
                left += cellInfo.width;
            top += cellInfo.top;
            left += cellInfo.left;
            xlObj.getAutoFillElem() && xlObj.getAutoFillElem().removeClass(hide).css({ top: Math.round(top) + tdiff, left: Math.round(left) + ldiff });
            if (xlObj.model.autoFillSettings.showFillOptions && isdragfill && xlObj.model.allowEditing && !xlObj.model.isReadOnly)
                xlObj._getAutoFillOptElem().removeClass(hide).css({ top: top + otdiff, left: left + oldiff });
            sheet._autoFillCell = xlObj._dautoFillCell = { rowIndex: rowIdx, colIndex: colIdx };
        },

        hideAutoFillElement: function () {
            var elem = this.XLObj.getAutoFillElem();
            if (elem)
                elem.addClass("e-hide");
        },

        hideAutoFillOptions: function () {
            var elem = this.XLObj._getAutoFillOptElem();
            if (elem) {
                if (!elem.find("button").data("ejSplitButton"))
                    this.XLObj._initializeSplitButton();
                elem.find("button").data("ejSplitButton")._hidePopup();
                elem.addClass("e-hide");
            }
        },

        autoFill: function (options) {
            var xlObj = this.XLObj;
            options = options || {};
            if (!xlObj.model.allowAutoFill || !options.dataRange || !options.fillRange || !options.direction || !xlObj.model.allowEditing || xlObj.model.isReadOnly)
                return;
            var bHeight, details, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), aOpt = ej.Spreadsheet.AutoFillOptions;
            this._fillInfo = this._getFillInfo(options);
            options.fillType = options.fillType || this._fillInfo.fillType;
            this._verticalFill = (options.direction === "down" || options.direction === "up");
            options.sheetIdx = sheetIdx;
            options.dataRange = xlObj._toIntrnlRange(options.dataRange, sheetIdx);
            options.fillRange = xlObj._toIntrnlRange(options.fillRange, sheetIdx);
            bHeight = $.extend(true, {}, sheet.rowsHeightCollection)
            details = { sheetIndex: options.sheetIdx, bHeight: bHeight, reqType: "auto-fill", direction: options.direction, range: options.fillRange, bRange: options.dataRange, bData: xlObj.getRangeData({ range: options.fillRange }), bFormat: xlObj.model.allowCellFormatting && xlObj.XLFormat.getHashCodeClassAsArray(options.fillRange), isHighlightData: false };
            details.rowSel = sheet._isRowSelected;
            details.colSel = sheet._isColSelected;
            if (xlObj._trigger("autoFillBegin", options))
                return false;
            switch (options.fillType) {
                case aOpt.FillSeries:
                case aOpt.FillWithoutFormatting:
                    this._fillSeries(options);
                    break;
                case aOpt.CopyCells:
                case aOpt.FillFormattingOnly:
                    this._copyCells(options);
                    break;
                case aOpt.FlashFill:
                    details.actionType = "flash-fill";
                    details.bdData = xlObj.getRangeData({ range: options.dataRange });
                    this._flashFill(options);
                    details.adData = xlObj.getRangeData({ range: options.dataRange });
                    break;
            }
            details.aData = xlObj.getRangeData({ range: options.fillRange });
            details.aHeight = $.extend(true, {}, sheet.rowsHeightCollection)
            if (xlObj.model.allowCellFormatting)
                details.aFormat = xlObj.XLFormat.getHashCodeClassAsArray(options.fillRange);
            if (!options.isKeyFill)
                this.positionAutoFillElement(true);
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
            xlObj._trigger("autoFillComplete", options);
            if (details.isHighlightData) {
                xlObj._pushHighlightData(details.range);
                if (xlObj.XLClipboard._highLightRange.length && details.operation != "hl-data") {
                    for (var i = 0; i < xlObj.XLClipboard._highLightRange.length; i++)
                        xlObj.XLValidate.highlightInvalidData(xlObj.XLClipboard._highLightRange[i]);
                    xlObj.XLClipboard._highLightRange = [];
                }
            }
        },

        _updateFillValues: function (isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i) {
            var pStart, pEnd, fStart, fEnd, patrnRange, fillRange;
            if (isVFill) {
                pStart = { rowIndex: dminr, colIndex: dminc + i };
                pEnd = { rowIndex: dmaxr, colIndex: dminc + i };
                fStart = { rowIndex: fminr, colIndex: fminc + i };
                fEnd = { rowIndex: fmaxr, colIndex: fminc + i };
            }
            else {
                pStart = { rowIndex: dminr + i, colIndex: dminc };
                pEnd = { rowIndex: dminr + i, colIndex: dmaxc };
                fStart = { rowIndex: fminr + i, colIndex: fminc };
                fEnd = { rowIndex: fminr + i, colIndex: fmaxc };
            }
            patrnRange = [pStart.rowIndex, pStart.colIndex, pEnd.rowIndex, pEnd.colIndex];
            fillRange = [fStart.rowIndex, fStart.colIndex, fEnd.rowIndex, fEnd.colIndex];
            return { patrnRange: patrnRange, fillRange: fillRange };
        },

        _fillSeries: function (options) {
            var val, plen, patterns, patrn, pRanges, patrnRange, fillRange, data, temp, dlen, j, k, l, tlen, tot, hasRef, format, formats,
                cells, clen, cellIdx, cellProps, i = 0, dataObj = {}, xlObj = this.XLObj, pos = ej.Spreadsheet.autoFillDirection, ctype = ej.Spreadsheet.CellType,
                dminr = options.dataRange[0], dminc = options.dataRange[1], dmaxr = options.dataRange[2], dmaxc = options.dataRange[3],
                fminr = options.fillRange[0], fminc = options.fillRange[1], fmaxr = options.fillRange[2], fmaxc = options.fillRange[3],
                isVFill = [pos.Down, pos.Up].indexOf(options.direction) > -1, isRFill = [pos.Up, pos.Left].indexOf(options.direction) > -1,
                len = isVFill ? dmaxc - dminc : dmaxr - dminr, withFrmt = options.fillType === ej.Spreadsheet.AutoFillOptions.FillSeries;
            while (i <= len) {
                pRanges = this._updateFillValues(isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i);
                patrnRange = pRanges.patrnRange;
                fillRange = pRanges.fillRange;
                patterns = this._getPattern(patrnRange, { isRFill: isRFill, isVFill: isVFill });
                data = xlObj.getRangeData({ range: patrnRange, property: ["hyperlink", "rule", "cFormatRule", "type", "formatStr", "decimalPlaces", "wrap"] });
                dlen = data.length;
                if (!patterns)
                    return;
                plen = patterns.length;
                xlObj.clearRangeData(fillRange, [withFrmt ? "formatStr" : null, "hyperlink", withFrmt ? "cFormatRule" : null, "rule", "format"]);
                if (withFrmt) {
                    if (xlObj.model.allowCellFormatting)
                        xlObj.XLFormat.removeStyle(fillRange);
                    format = xlObj.getRangeData({ range: patrnRange, property: ["format", "formats"] });
                }
                cells = xlObj._getSelectedRange({ rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2], colIndex: fillRange[3] });
                clen = cells.length;
                if (isRFill) {
                    cells = cells.reverse();
                    patterns = patterns.reverse();
                    patterns = this._ensurePattern(patterns);
                    data = data.reverse();
                    if (withFrmt)
                        format = format.reverse();
                }
                j = 0;
                while (j < clen) {
                    dataObj = {};
                    cellIdx = cells[j];
                    patrn = patterns[j % plen];
                    if (xlObj.isNumber(patrn))
                        patrn = patterns[patrn];
                    switch (patrn.type) {
                        case ctype.Number:
                            val = xlObj._round(patrn.regVal.a + (patrn.regVal.b * patrn.i), 5);
                            if (isRFill)
                                patrn.i--;
                            else
                                patrn.i++;
                            break;
                        case ctype.String:
                            val = patrn.val[patrn.i % patrn.val.length];
                            patrn.i++;
                            break;
                        case ctype.Formula:
                            hasRef = false;
                            val = "=";
                            k = 0;
                            tlen = patrn.val.length;
                            while (k < tlen) {
                                temp = patrn.val[k];
                                if (xlObj._isObject(temp)) {
                                    hasRef = true;
                                    tot = xlObj._round(temp.a + (temp.b * patrn.i), 0);
                                    if (tot < 1)
                                        val += "#REF!";
                                    else
                                        val += isVFill ? temp.c + (temp.b ? tot : '$' + tot) : (temp.b ? xlObj._generateHeaderText(tot) : '$' + xlObj._generateHeaderText(tot)) + temp.c;
                                }
                                else
                                    val += temp;
                                k++;
                            }
                            if (hasRef && isRFill)
                                patrn.i--;
                            else
                                patrn.i++;
                            break;
                        case ctype.Custom:
                            val = xlObj._round(patrn.regVal.a + (patrn.regVal.b * patrn.i), 0);
                            if (val < 0)
                                val = (val % patrn.len) + patrn.len;
                            if (val >= patrn.len)
                                val = val % patrn.len;
                            val = patrn.val[val];
                            if (isRFill)
                                patrn.i--;
                            else
                                patrn.i++;
                            break;
                    }
                    l = j % dlen;
                    cellProps = data[l];
                    xlObj._dupDetails = true;
					var args = {cellIndex: cellIdx, value: val, prevValue: xlObj._getCellValue(cellIdx.rowIndex, cellIdx.colIndex).value, sheetIdx: xlObj.getActiveSheetIndex(), reqType: "auto-fill", action:"fill-series" }
					if (xlObj._trigger("cellSave", args ))
                        return;
                    patrn.type == "formula" && (xlObj._saveTriggered = true);
                    xlObj.XLEdit.updateCellValue(args.cellIndex, args.value, withFrmt ? format[l].format : null);
                    patrn.type == "formula" && (xlObj._saveTriggered = false);
                    xlObj._dupDetails = false;
                    if (withFrmt) {
                        if (xlObj.model.allowCellFormatting && (cellProps.type && cellProps.type != "general"))
                            this._updateNFormat(cellProps, args.cellIndex.rowIndex, args.cellIndex.colIndex);
                        if (xlObj.model.allowConditionalFormats && cellProps.cFormatRule)
                            this._updateCFormat(args.cellIndex, cellProps.cFormatRule);
                        formats = format[l].formats;
                        if (formats)
                            dataObj.formats = formats;
                        if (xlObj.model.allowHyperlink && cellProps.hyperlink)
                            this._updateHyperlinkTag(cellProps.hyperlink, args.cellIndex);
                    }
                    if (xlObj.model.allowDataValidation && cellProps.rule)
                        dataObj.rule = cellProps.rule;
                    if (xlObj.getObjectLength(dataObj))
                        xlObj.XLEdit._updateDataContainer(args.cellIndex, { dataObj: dataObj });
                    if (xlObj.model.allowWrap && cellProps.wrap) 
                        xlObj.setWrapText("wrap",[args.cellIndex.rowIndex, args.cellIndex.colIndex, args.cellIndex.rowIndex, args.cellIndex.colIndex]);
                    j++;
                }
                i++;
            }
        },

        _copyCells: function (options) {
            var i = 0, j, k, patrnRange, fillRange, pRanges, data, flen, format, formats, cells, clen, props,
                cellProps, cellIdx, dataObj = {}, xlObj = this.XLObj, pos = ej.Spreadsheet.autoFillDirection,
                dminr = options.dataRange[0], dminc = options.dataRange[1], dmaxr = options.dataRange[2], dmaxc = options.dataRange[3],
                fminr = options.fillRange[0], fminc = options.fillRange[1], fmaxr = options.fillRange[2], fmaxc = options.fillRange[3],
                isVFill = [pos.Down, pos.Up].indexOf(options.direction) > -1, isRFill = [pos.Up, pos.Left].indexOf(options.direction) > -1,
                len = isVFill ? dmaxc - dminc : dmaxr - dminr, formatOnly = options.fillType === ej.Spreadsheet.AutoFillOptions.FillFormattingOnly;
            while (i <= len) {
                pRanges = this._updateFillValues(isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i);
                patrnRange = pRanges.patrnRange;
                fillRange = pRanges.fillRange;
                if (xlObj.model.allowCellFormatting) {
                    if (fillRange[0] == fillRange[2])
                        for (var m = [1]; m <= [3]; m++) {
                            if (!xlObj.XLEdit.getPropertyValue(fillRange[0], m, "tformats") && !xlObj.XLEdit.getPropertyValue(fillRange[0], m, "formats"))
                                xlObj.XLFormat.removeStyle([fillRange[0], m, fillRange[2], m]);
                        }
                    else
                        for (var n = fillRange[0]; n <= fillRange[2]; n++) {
                            if (!xlObj.XLEdit.getPropertyValue(n, fillRange[1], "tformats") && !xlObj.XLEdit.getPropertyValue(fillRange[0], m, "formats"))
                                xlObj.XLFormat.removeStyle([n, fillRange[1], n, fillRange[3]]);
                        }
                }
                if (!formatOnly) {
                    props = ["value", "value2", "type", "formatStr", "format", "decimalPlaces", "thousandSeparator", "hyperlink"];
                    if (xlObj.model.allowConditionalFormats)
                        props.push("cFormatRule");
                    if (xlObj.model.allowDataValidation)
                        props.push("rule");
                    xlObj.clearRangeData(fillRange, props);
                    data = xlObj.getRangeData({ range: patrnRange, property: ["value", "hyperlink", "rule", "cFormatRule", "type", "decimalPlaces", "formatStr"] });
                }
                else {
                    xlObj.clearRangeData(fillRange, ["format"]);
                    data = xlObj.getRangeData({ range: patrnRange, property: ["cFormatRule", "type", "decimalPlaces", "formatStr"] });
                }
                format = xlObj.getRangeData({ range: patrnRange, property: ["format", "formats"] });
                flen = format.length;
                cells = xlObj._getSelectedRange({ rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2], colIndex: fillRange[3] });
                clen = cells.length;
                j = 0;
                if (isRFill) {
                    cells = cells.reverse();
                    format = format.reverse();
                    if (!formatOnly)
                        data = data.reverse();
                }
                if (formatOnly) {
                    while (j < clen) {
                        dataObj = {};
                        k = j % flen;
                        cellIdx = cells[j];
                        cellProps = data[k];
                        if (xlObj.model.allowCellFormatting) {
                            xlObj.XLFormat._updateFormatClass(cellIdx, format[k].format);
                            this._updateNFormat(cellProps, cellIdx.rowIndex, cellIdx.colIndex);
                        }
                        formats = format[k].formats;
                        if (formats)
                            dataObj.formats = formats;
                        if (xlObj.getObjectLength(dataObj))
                            xlObj.XLEdit._updateDataContainer(cellIdx, { dataObj: dataObj });
                        if (xlObj.model.allowConditionalFormats && cellProps.cFormatRule)
                            this._updateCFormat(cellIdx, cellProps.cFormatRule);
                        if (xlObj.model.allowCellType)
                            xlObj.XLCellType._rfrshCtrlText(cellIdx);
                        j++;
                    }
                }
                else {
                    while (j < clen) {
                        dataObj = {};
                        k = j % flen;
                        cellIdx = cells[j];
                        cellProps = data[k];
                        xlObj._dupDetails = true;
						var args = {cellIndex: cellIdx, value: cellProps.value, prevValue: xlObj._getCellValue(cellIdx.rowIndex, cellIdx.colIndex).value, format: format[k].format, sheetIdx: xlObj.getActiveSheetIndex(), reqType: "auto-fill", action:"copy-cells" };
						if (xlObj._trigger("cellSave", args))
							return;
                        xlObj.XLEdit.updateCellValue(args.cellIndex, args.value, args.format);
                        xlObj._dupDetails = false;
                        if (xlObj.model.allowCellFormatting &&(cellProps.type && cellProps.type != "general"))
                            this._updateNFormat(cellProps, args.cellIndex.rowIndex, args.cellIndex.colIndex);
                        if (xlObj.model.allowHyperlink && cellProps.hyperlink)
                            this._updateHyperlinkTag(cellProps.hyperlink, args.cellIndex);
                        formats = format[k].formats;
                        if (formats)
                            dataObj.formats = formats;
                        if (xlObj.model.allowDataValidation && cellProps.rule)
                            dataObj.rule = cellProps.rule;
                        if (xlObj.getObjectLength(dataObj))
                            xlObj.XLEdit._updateDataContainer(args.cellIndex, { dataObj: dataObj });
                        if (xlObj.model.allowConditionalFormats && cellProps.cFormatRule)
                            this._updateCFormat(args.cellIndex, cellProps.cFormatRule);
                        j++;
                    }
                }
                i++;
            }
        },

        _flashFill: function (options) {
            var cells, data, i, xlObj = this.XLObj, dminr = options.dataRange[0], dmaxr = options.dataRange[2], fminr = options.fillRange[0];
            var fminc = options.fillRange[1], fmaxr = options.fillRange[2], fmaxc = options.fillRange[3], patrn = this._getFlashFillPattern(options.dataRange, "left");
            if (patrn) {
                data = xlObj.getRangeData({ range: [fminr, patrn.colIndex, fmaxr, patrn.colIndex], valueOnly: true, skipDateTime: true });
                if (patrn.subStr > -1)
                    data = this._splitString(data, " ", patrn.subStr);
                cells = xlObj._getSelectedRange({ rowIndex: fminr, colIndex: fminc }, { rowIndex: fmaxr, colIndex: fmaxc });
                i = cells.length;
                while (i--) {
					var args = { cellIndex: cells[i], value:  data[i], sheetIdx: xlObj.getActiveSheetIndex(), prevValue: xlObj._getCellValue(cells[i].rowIndex, cells[i].colIndex).value, reqType: "auto-fill", action:"flash-fill" }
					if (xlObj._trigger("cellSave", args ))
						return;
                    xlObj.XLEdit._updateCellValue(args.cellIndex, args.value);
				}
            }
            else {
                if (fminr > dminr)
                    fminr = dminr;
                if (fmaxr < dmaxr)
                    fmaxr = dmaxr;
                xlObj._getAutoFillOptElem().addClass("e-hide");
                xlObj.updateUniqueData({ value: "", value2: "", type: "general" }, [fminr, fminc, fmaxr, fmaxc]);
                xlObj._showAlertDlg("Alert", "FlashFillAlert");
            }
        },

        _getFlashFillPattern: function (range, move) {
            var resp, value, splval, slen, j, val, i = 0, subStr = -1, xlObj = this.XLObj, data = xlObj.getRangeData({ range: range, valueOnly: true, skipDateTime: true }),
                dlen = data.length, minr = range[0], right = ej.Spreadsheet.autoFillDirection.Right, isRight = move === right;
            if (!data.join().replace(/,/g, '').length)
                return;
            val = data[0].toString();
            i = range[1];
            if (i === 0)
                isRight = true;
            isRight ? i++ : i--;
            while (i > -1) {
                value = xlObj.XLEdit.getPropertyValue(minr, i);
                value = xlObj.isUndefined(value) ? "" : value.toString();
                if (!value.length)
                    break;
                else {
                    if (value === val) {
                        if (dlen > 1) {
                            resp = this._matchData(minr, i, data);
                            if (resp)
                                return resp;
                        }
                        else
                            return { colIndex: i, subStr: subStr };
                    }
                    splval = value.split(" ");
                    slen = splval.length;
                    j = 0;
                    while (j < slen) {
                        if (val === splval[j]) {
                            subStr = j;
                            if (dlen > 1) {
                                resp = this._matchData(minr, i, data);
                                if (resp) {
                                    if (subStr > resp.subStr)
                                        resp.subStr = subStr;
                                    return resp;
                                }
                            }
                            else
                                return { colIndex: i, subStr: subStr };
                        }
                        j++;
                    }
                    isRight ? i++ : i--;
                }
            }
            if (!isRight)
                return this._getFlashFillPattern(range, right);
        },

        _matchData: function (rowIdx, colIdx, data) {
            var j, match = false, val, value, splval, slen, i = 1, subStr = -1, dlen = data.length;
            while (i < dlen) {
                match = false;
                val = data[i].toString();
                value = this.XLObj.XLEdit.getPropertyValue(rowIdx + i, colIdx);
                value = ej.isNullOrUndefined(value) ? "" : value.toString();
                if (val === value) {
                    match = true;
                    i++;
                    continue;
                }
                splval = value.split(" ");
                slen = splval.length;
                j = 0;
                while (j < slen) {
                    if (val === splval[j]) {
                        if (subStr < j)
                            subStr = j;
                        match = true;
                        break;
                    }
                    j++;
                }
                i++;
            }
            if (match && i === dlen)
                return { colIndex: colIdx, subStr: subStr };
        },

        _splitString: function (array, splitter, index) {
            var data, val, i = array.length, j;
            while (i--) {
                j = index;
                data = array[i].split(splitter);
                while (j > -1) {
                    val = data[j];
                    if (val)
                        break;
                    j--;
                }
                array[i] = val;
            }
            return array;
        },

        _getPattern: function (range, options) {
            var j, idx, temp, regVal, custColl, lCaseColl, lCaseVal, isLCase, diff, len, i = 0, pattern = [], xlObj = this.XLObj,
                ctype = ej.Spreadsheet.CellType, patrns = this._getDataPattern(range), plen = patrns.length, patrn;
            if (patrns) {
                while (i < plen) {
                    patrn = patrns[i];
                    switch (patrn.type) {
                        case ctype.Number:
                            idx = pattern.length;
                            len = patrn.val.length;
                            diff = options.isRFill ? -1 : len;
                            if (len === 1)
                                patrn.val.push(patrn.val[0] + 1);
                            regVal = this._getPredictionValue(patrn.val);
                            temp = { regVal: regVal, type: patrn.type, i: diff };
                            pattern.push(temp);
                            j = 1;
                            while (j < len) {
                                pattern.push(idx);
                                j++;
                            }
                            break;
                        case ctype.String:
                            idx = pattern.length;
                            temp = { val: patrn.val, type: patrn.type, i: 0 };
                            pattern.push(temp);
                            j = 1;
                            len = patrn.val.length;
                            while (j < len) {
                                pattern.push(idx);
                                j++;
                            }
                            break;
                        case ctype.Formula:
                            len = patrn.val.length;
                            patrn = this._getFormulaPattern(patrn.val, options);
                            diff = options.isRFill ? -1 : len;
                            if (patrn.isInPattern) {
                                idx = pattern.length;
                                temp = { val: patrn.val, type: ctype.Formula, i: diff };
                                pattern.push(temp);
                                j = 1;
                                while (j < len) {
                                    pattern.push(idx);
                                    j++;
                                }
                            }
                            else {
                                j = 0;
                                diff = options.isRFill ? -1 : 1;
                                while (j < len) {
                                    pattern.push({ val: patrn.val[j], type: ctype.Formula, i: diff });
                                    j++;
                                }
                            }
                            break;
                        default:
                            if (patrn.type.indexOf(ctype.Custom) > -1) {
                                idx = pattern.length;
                                len = patrn.val.length;
                                diff = options.isRFill ? -1 : len;
                                custColl = this._customList[Number(patrn.type.replace(ctype.Custom, ''))];
                                isLCase = custColl.indexOf(patrn.val[0]) === -1;
                                lCaseColl = xlObj.toArrayLowerCase(custColl.slice(0));
                                lCaseVal = xlObj.toArrayLowerCase(patrn.val);
                                regVal = this._getCustomPredictionValue(lCaseVal, lCaseColl);
                                temp = { val: isLCase ? lCaseColl : custColl, regVal: regVal, i: diff, type: ctype.Custom, len: custColl.length };
                                pattern.push(temp);
                                j = 1;
                                while (j < len) {
                                    pattern.push(idx);
                                    j++;
                                }
                            }
                    }
                    i++;
                }
                return pattern;
            }
        },

        _getCustomPredictionValue: function (data, coll) {
            var i = 0, temp = [], len = data.length;
            while (i < len) {
                temp.push(coll.indexOf(data[i]));
                i++;
            }
            if (temp.length === 1)
                temp.push(temp[0] + 1);
            return this._getPredictionValue(temp);
        },

        _getDataPattern: function (range) {
            var val, type, i = 0, obj = {}, patrn = [], data = this.XLObj.getRangeData({ range: range, valueOnly: true, skipDateTime: true }), dlen = data.length;
            if (dlen) {
                while (i < dlen) {
                    val = data[i];
                    type = this._getType(val);
                    if (i === 0)
                        obj = { val: [val], type: type };
                    else if (type === obj.type)
                        obj.val.push(val);
                    else {
                        patrn.push(obj);
                        obj = { val: [val], type: type };
                    }
                    i++;
                }
                patrn.push(obj);
                return patrn;
            }
        },

        _getFormulaPattern: function (data, options) {
            var patrn, j, temp, isInPatrn, xlObj = this.XLObj, patrns = [], i = 0, len = data.length, cRfrType;
            while (i < len) {
                patrns.push(this._parseFormula(data[i]));
                i++;
            }
            isInPatrn = this._isInPattern(patrns, options.isVFill);
            if (isInPatrn) {
                patrn = patrns[0];
                i = patrn.length;
                while (i--) {
                    temp = patrn[i];
                    cRfrType = xlObj._isCellReference(temp);
                    if (cRfrType && (cRfrType !== "absolute"))
                        patrn[i] = this._getCellRefPrediction(temp, options, null, cRfrType);
                }
                return { isInPattern: isInPatrn, val: patrn };
            }
            else {
                i = 0;
                while (i < len) {
                    patrn = patrns[i];
                    j = patrn.length;
                    while (j--) {
                        temp = patrn[j];
                        cRfrType = xlObj._isCellReference(temp);
                        if (cRfrType && (cRfrType !== "absolute"))
                            patrns[i][j] = this._getCellRefPrediction(temp, options, len, cRfrType);
                    }
                    i++;
                }
                return { isInPattern: isInPatrn, val: patrns };
            }
        },

        _getCellRefPrediction: function (text, options, length, rfrType) {
            text = text.toUpperCase();
            var eStr = "", aRegx = new RegExp("[a-z$]", "gi"), nRegx = new RegExp("[0-9$]", "g"), str = options.isVFill ? text.replace(nRegx, eStr) : text.replace(aRegx, eStr),
                temp = options.isVFill ? Number(text.replace(aRegx, eStr)) : this.XLObj._generateColCount(text.replace(nRegx, eStr)), arr = [temp], isColAbslt = text[0] === '$';
            if (length && length !== 1)
                arr.push(temp + length);
            else
                arr.push(temp + 1);
            temp = this._getPredictionValue(arr);
            if (rfrType && (rfrType === "mixed")) {
                if (isColAbslt === options.isVFill)
                    str = '$' + str;
                else
                    temp.b = 0;
            }
            temp.c = str;
            return temp;
        },

        _isInPattern: function (patrn, isVFill) {
            var oldPatrn, olen, newPatrn, nlen, oldStr, newStr, oldInt, newInt, xlObj = this.XLObj, eStr = "",
                i = 0, j = 1, plen = patrn.length, nregx = new RegExp("[0-9$]", "g"), aregx = new RegExp("[a-z$]", "gi");
            if (plen === 1)
                return false;
            while (j < plen) {
                oldPatrn = patrn[i];
                newPatrn = patrn[j];
                olen = oldPatrn.length;
                nlen = newPatrn.length;
                if (olen !== nlen)
                    return false;
                else {
                    while (olen--) {
                        oldStr = oldPatrn[olen];
                        newStr = newPatrn[olen];
                        if (xlObj._isCellReference(oldStr) === xlObj._isCellReference(newStr)) {
                            if (isVFill) {
                                oldInt = Number(oldStr.replace(aregx, eStr));
                                newInt = Number(newStr.replace(aregx, eStr));
                            }
                            else {
                                oldInt = xlObj._generateColCount(oldStr.replace(nregx, eStr));
                                newInt = xlObj._generateColCount(newStr.replace(nregx, eStr));
                            }
                            if (oldInt !== newInt - 1)
                                return false;
                        }
                        else if (oldStr !== newStr)
                            return false;
                    }
                }
                i++;
                j++;
            }
            return true;
        },

        _parseFormula: function (formula) {
            var temp, str, len, i = 0, arr = [];
            formula = this._markSpecialChar(formula.replace("=", ""));
            formula = formula.split(/\(|\)|=|\^|>|<|,|:|\+|-|\*|\/|%|&/g);
            len = formula.length;
            while (i < len) {
                temp = formula[i];
                if (!temp) {
                    i++;
                    continue;
                }
                if (temp.length === 1)
                    arr.push(this._isUniqueChar(temp) ? this._getUniqueCharVal(temp) : temp);
                else {
                    str = temp[0];
                    if (temp.indexOf('!') > 0) {
                        if (this._isUniqueChar(str)) {
                            arr.push(this._getUniqueCharVal(str));
                            temp = temp.substr(1);
                        }
                        str = temp.indexOf('!') + 1;
                        arr.push(temp.substr(0, str));
                        arr.push(temp.substr(str));
                    }
                    else if (this._isUniqueChar(str)) {
                        arr.push(this._getUniqueCharVal(str));
                        arr.push(temp.substr(1));
                    }
                    else
                        arr.push(temp);
                }
                i++;
            }
            return arr;
        },

        _getUniqueCharVal: function (str) {
            switch (str) {
                case this._uniqueOBracket:
                    return "(";
                case this._uniqueCBracket:
                    return ")";
                case this._uniqueCSeparator:
                    return ",";
                case this._uniqueCOperator:
                    return ':';
                case this._uniquePOperator:
                    return "+";
                case this._uniqueSOperator:
                    return "-";
                case this._uniqueMOperator:
                    return "*";
                case this._uniqueDOperator:
                    return "/";
                case this._uniqueModOperator:
                    return "%";
                case this._uniqueConcateOperator:
                    return "&";
                case this._uniqueEqualOperator:
                    return "=";
                case this._uniqueExpOperator:
                    return "^";
                case this._uniqueGTOperator:
                    return ">";
                case this._uniqueLTOperator:
                    return "<";
            }
            return "";
        },

        _isUniqueChar: function (str) {
            var code = str.charCodeAt(str);
            return code >= 129 && code <= 142;
        },

        _markSpecialChar: function (formula) {
            formula = formula.replace(/\(/g, "(" + this._uniqueOBracket).replace(/\)/g, ")" + this._uniqueCBracket);
            formula = formula.replace(/,/g, "," + this._uniqueCSeparator).replace(/:/g, ":" + this._uniqueCOperator);
            formula = formula.replace(/\+/g, "+" + this._uniquePOperator).replace(/-/g, "-" + this._uniqueSOperator);
            formula = formula.replace(/\*/g, "*" + this._uniqueMOperator).replace(/\//g, "/" + this._uniqueDOperator);
            formula = formula.replace(/&/g, "&" + this._uniqueConcateOperator);
            formula = formula.replace(/=/g, "=" + this._uniqueEqualOperator);
            formula = formula.replace(/\^/g, "^" + this._uniqueExpOperator);
            formula = formula.replace(/>/g, ">" + this._uniqueGTOperator).replace(/</g, "<" + this._uniqueLTOperator);
            return formula.replace(/%/g, "%" + this._uniqueModOperator);
        },

        _getPredictionValue: function (args) {
            var i = 0, sumx = 0, sumy = 0, sumxy = 0, sumxx = 0, n = args.length;
            while (i < n) {
                sumx = sumx + i;
                sumy = sumy + Number(args[i]);
                sumxy = sumxy + (i * Number(args[i]));
                sumxx = sumxx + (i * i);
                i++;
            }
            var a = this.XLObj._round(((sumy * sumxx) - (sumx * sumxy)) / ((n * sumxx) - (sumx * sumx)), 5), b = this.XLObj._round(((n * sumxy) - (sumx * sumy)) / ((n * sumxx) - (sumx * sumx)), 5);
            return { a: a, b: b };
        },

        _getType: function (val) {
            var type1, type = this._isCustomType(val), ctype = ej.Spreadsheet.CellType, xlObj = this.XLObj;
            if (type)
                type1 = type;
            else if (xlObj.isFormula(val))
                type1 = ctype.Formula;
            else if (xlObj.isNumber(val))
                type1 = ctype.Number;
            return type1 || ctype.String;
        },

        _isCustomType: function (val) {
            val = val + "";
            val = val.toLowerCase();
            var i = this._customList.length;
            while (i--) {
                if (this.XLObj.toArrayLowerCase(this._customList[i].slice(0)).indexOf(val) > -1)
                    return ej.Spreadsheet.CellType.Custom + i;
            }
            return false;
        },

        _ensurePattern: function (patterns) {
            var patrn, idx = -1, i = patterns.length;
            while (i--) {
                patrn = patterns[i];
                if (this.XLObj._isObject(patrn)) {
                    idx = i;
                    if (patrn.type === ej.Spreadsheet.CellType.String)
                        patrn.val = patrn.val.reverse();
                }
                else
                    patterns[i] = idx;
            }
            return patterns;
        },

        _selectAutoFillRange: function (trgt, idx) {
            if (trgt)
                idx = this.XLObj._getCellIdx(trgt);
            var i, cells, xlObj = this.XLObj, range = this._getAutoFillRange(idx);
            if (!range)
                return;
            this._autoFillCleanUp();
            cells = xlObj.getRange([range.startCell.rowIndex, range.startCell.colIndex, range.endCell.rowIndex, range.endCell.colIndex]);
            i = cells.length;
            while (i--)
                xlObj.addClass(cells[i], "e-autofillcell");
            xlObj.XLSelection._focusRange(range.startCell, range.endCell, xlObj._autofillBorder);
            xlObj._dautoFillCell = idx;
        },

        _getAutoFillRange: function (idx) {
            var dir = ej.Spreadsheet.autoFillDirection, xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), scell = sheet._startCell,
                ecell = sheet._endCell, acell = sheet._autoFillCell, range = sheet.selectedRange, minr = range[0], minc = range[1], maxr = range[2],
                maxc = range[3], inRange = xlObj.inRange(range, idx.rowIndex, idx.colIndex), minIdx = { rowIndex: minr, colIndex: minc },
                maxIdx = { rowIndex: maxr, colIndex: maxc };
            if (idx.rowIndex < acell.rowIndex) {// up 
                if (sheet._isFreezed && idx.rowIndex <= sheet.frozenRows && sheet._hiddenFreezeRows.indexOf(sheet.frozenRows) > -1)
                    idx.rowIndex = sheet._ftopRowIdx;
                if ((minr - idx.rowIndex > idx.colIndex - maxc) && (minr - idx.rowIndex > minc - idx.colIndex))
                    return inRange ? { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc } } : { startCell: maxIdx, endCell: { rowIndex: idx.rowIndex, colIndex: minc }, fillRange: [idx.rowIndex, minc, minr - 1, maxc], direction: dir.Up };
                else if (idx.colIndex > acell.colIndex)
                    return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: idx.colIndex }, fillRange: [minr, maxc + 1, maxr, idx.colIndex], direction: dir.Right };
                else if (idx.colIndex < acell.colIndex)
                    return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: idx.colIndex }, fillRange: [minr, idx.colIndex, maxr, minc - 1], direction: dir.Left };

            }
            else if (idx.colIndex > acell.colIndex) {// right
                if ((idx.rowIndex - maxr > idx.colIndex - maxc))
                    return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc }, fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: dir.Down };
                else
                    return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: idx.colIndex }, fillRange: [minr, maxc + 1, maxr, idx.colIndex], direction: dir.Right };
            }

            else if (idx.colIndex < acell.colIndex) { // left
                if (sheet._isFreezed && idx.colIndex <= sheet.frozenColumns && sheet._hiddenFreezeCols.indexOf(sheet.frozenColumns) > -1)
                    idx.colIndex = sheet._fleftColIdx;
                if ((idx.rowIndex - maxr > maxc - idx.colIndex) || ((idx.rowIndex - minr > maxc - idx.colIndex) && idx.rowIndex !== maxr))
                    return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc }, fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: dir.Down };
                else
                    return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: idx.colIndex }, fillRange: [minr, idx.colIndex, maxr, minc - 1], direction: dir.Left };
            }
            else if (idx.rowIndex > acell.rowIndex) // down                
                return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc }, fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: dir.Down };
            else if (idx.rowIndex === acell.rowIndex && idx.colIndex === acell.colIndex)
                return { startCell: scell, endCell: ecell };
        },

        _getDirection: function (endCell, currcell, isVerticalFill) {
            var dir = ej.Spreadsheet.autoFillDirection;
            isVerticalFill = this.XLObj.isUndefined(isVerticalFill) ? this._verticalFill : isVerticalFill;
            if (isVerticalFill) {
                if (currcell.rowIndex < endCell.rowIndex) // up
                    return dir.Up;
                else if (currcell.rowIndex > endCell.rowIndex) // down
                    return dir.Down;
                else if (currcell.colIndex > endCell.colIndex) // right
                    return dir.Right;
                else if (currcell.colIndex < endCell.colIndex) // left
                    return dir.Left;
            }
            else {
                if (currcell.colIndex > endCell.colIndex) // right
                    return dir.Right;
                else if (currcell.colIndex < endCell.colIndex) // left
                    return dir.Left;
                else if (currcell.rowIndex < endCell.rowIndex) // up
                    return dir.Up;
                else if (currcell.rowIndex > endCell.rowIndex) // down
                    return dir.Down;
            }
            return null;
        },

        _getFillRange: function (pStartCell, pEndCell, pFillCell, direction) {
            var dir = ej.Spreadsheet.autoFillDirection;
            switch (direction) {
                case dir.Up:
                    return [pFillCell.rowIndex, pStartCell.colIndex, pStartCell.rowIndex - 1, pEndCell.colIndex];
                case dir.Right:
                    return [pStartCell.rowIndex, pEndCell.colIndex + 1, pEndCell.rowIndex, pFillCell.colIndex];
                case dir.Down:
                    return [pEndCell.rowIndex + 1, pStartCell.colIndex, pFillCell.rowIndex, pEndCell.colIndex];
                case dir.Left:
                    return [pStartCell.rowIndex, pFillCell.colIndex, pEndCell.rowIndex, pStartCell.colIndex - 1];
            }
            return null;
        },

        _autoFillOptionClick: function (args) {
            var dragFill, sheet, dir, dataRange, fillRange, sCell, eCell, autoElem = $("#" + args.model.targetID).find("#" + args.ID).find(">>");
            if (this._hasClass(autoElem[0], "e-ss-fillselect"))
                return;
            dragFill = this.XLDragFill, sheet = this.getSheet(this.getActiveSheetIndex()), dir = dragFill._getDirection(this._pEndCell, this._pFillCell);
            dataRange = this.swapRange([this._pStartCell.rowIndex, this._pStartCell.colIndex, this._pEndCell.rowIndex, this._pEndCell.colIndex]);
            fillRange = dragFill._getFillRange(this._pStartCell, this._pEndCell, this._pFillCell, dir), sCell = sheet._startCell, eCell = sheet._endCell;
            this._isUndo = true;
            this._performUndoRedo();
            if (!sheet._isColSelected && !sheet._isRowSelected) {
                sheet._startCell = sCell;
                sheet._endCell = eCell;
                this.XLSelection.selectRange(sheet._startCell, sheet._endCell);
            }
            dragFill.positionAutoFillElement(true);
            dragFill.autoFill({ dataRange: dataRange, fillRange: fillRange, direction: dir, fillType: args.ID });
            dragFill._fillInfo.fillType = args.ID;
            this._isUndo = false;
        },

        _autoFillCleanUp: function () {
            var i, cname, cells, cell, hide = "e-hide", xlObj = this.XLObj, aElem = xlObj.getAutoFillElem(), aOpt = xlObj._getAutoFillOptElem();
            if (aElem)
                xlObj.addClass(aElem[0], hide);
            if (aOpt)
                xlObj.addClass(aOpt[0], hide);
            cells = xlObj._getContent(xlObj.getActiveSheetIndex())[0].querySelectorAll("td.e-autofillcell");
            i = cells.length;
            while (i--) {
                cell = cells[i];
                cname = cell.className;
                cname = cname.replace(/e-autofillcell|e-blur/g, "");
                cname = cname.replace(/ +/g, " ");
                cell.className = cname;
            }
        },

        _autoFillClick: function () {
            var len, i = 0, cname = "e-ss-fillselect", elems = $("#" + this._id + "_ctxtmenu").find("li"), enabledItem = elems.find("." + cname);
            // to remove existing enabled item
            if (enabledItem.length) {
                enabledItem = enabledItem[0];
                this._removeClass(enabledItem, cname);
                this.addClass(enabledItem, "e-ss-filloption");
            }
            // to show all elements 
            elems.show();
            // to hide some options based on scenario
            len = this.XLDragFill._fillInfo.disableItems.length;
            while (i < len) {
                $(elems[this.XLDragFill._fillInfo.disableItems[i]]).hide();
                i++;
            }
            // to select fill type item
            elems.filter("#" + this.XLDragFill._fillInfo.fillType).find("span").addClass(cname);
        },

        _fillRange: function (verticalFill, range) {
            var dirc, isProperKey, pRange, minr, minc, maxr, maxc, args = { isKeyFill: true }, xlObj = this.XLObj,
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), direction = ej.Spreadsheet.autoFillDirection;
            range = range ? range : sheet.selectedRange;
            minr = range[0], minc = range[1], maxr = range[2], maxc = range[3];
            dirc = this._getDirection({ rowIndex: minr, colIndex: minc }, { rowIndex: maxr, colIndex: maxc }, verticalFill);
            isProperKey = verticalFill ? dirc === direction.Down : dirc === direction.Right;
            if (xlObj.isRange(range) && isProperKey) {
                if (verticalFill) {
                    args.dataRange = [minr, minc, minr, maxc];
                    args.fillRange = [minr + 1, minc, maxr, maxc];
                }
                else {
                    args.dataRange = [minr, minc, maxr, minc];
                    args.fillRange = [minr, minc + 1, maxr, maxc];
                }
            }
            else {
                if (verticalFill) {
                    if (!minr)
                        return;
                    args.dataRange = [minr - 1, minc, minr - 1, maxc];
                }
                else {
                    if (!minc)
                        return;
                    args.dataRange = [minr, minc - 1, maxr, minc - 1];
                }
                args.fillRange = range;
            }
            args.direction = verticalFill ? direction.Down : direction.Right;
            args.fillType = ej.Spreadsheet.AutoFillOptions.CopyCells;
            pRange = xlObj.swapRange(args.fillRange);
            if (xlObj.model.allowLockCell && sheet.isSheetProtected) {
                if (xlObj._isPropExists(([pRange]), "isLocked", sheetIdx))
                    return;
            }
            if (xlObj._isPropExists(([pRange]), "isReadOnly", sheetIdx))
                return;
            this.autoFill(args);
        },

        _getFillInfo: function (options) {
            var i, val, isStringType = true, fillType = ej.Spreadsheet.AutoFillOptions.CopyCells, disableItems = [],
                xlObj = this.XLObj, pos = ej.Spreadsheet.autoFillDirection, isVFill = [pos.Down, pos.Up].indexOf(options.direction) > -1,
                data = xlObj.getRangeData({ range: options.dataRange, valueOnly: true, skipDateTime: true }), len = data.join().replace(/,/g, '').length;
            if (xlObj.isRange(options.dataRange) && len) {
                i = data.length;
                while (i--) {
                    val = data[i];
                    if (xlObj.isNumber(val) || xlObj.isFormula(val) || this._isCustomType(val)) {
                        isStringType = false;
                        fillType = xlObj.model.autoFillSettings.fillType;
                        break;
                    }
                }
            }
            else {
                val = data[0];
                if (xlObj.isNumber(val) || xlObj.isFormula(val) || this._isCustomType(val)) {
                    isStringType = false;
                    fillType = xlObj.model.autoFillSettings.fillType;
                }
            }
            if (!len || isStringType) {
                disableItems.push(1);
                fillType = (options.fillType == "fillseries") ? fillType : options.fillType;
            }
            if (!isVFill || (isVFill && options.dataRange[1] !== options.dataRange[3]))
                disableItems.push(4);
            return { fillType: fillType, disableItems: disableItems };
        },

        _updateHyperlinkTag: function (hlData, cellIdx) {
            var cell, xlObj = this.XLObj, val = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "value2");
            if (xlObj._isRowViewable(xlObj.getActiveSheetIndex(), cellIdx.rowIndex)) {
                cell = xlObj.getCell(cellIdx.rowIndex, cellIdx.colIndex);
                if (cell[0].lastChild.nodeType === 3)
                    $(cell[0].lastChild).remove();
                cell.append(ej.buildTag("a.e-hyperlinks", val, "", !hlData.webAddr ? { href: "#" } : { href: hlData.webAddr, target: "_blank" }));

            }
            xlObj.XLEdit._updateDataContainer(cellIdx, { dataObj: { hyperlink: hlData } });
        },

        _updateCFormat: function (cellIdx, rule) {
            var splitStr, i = 0, xlObj = this.XLObj, len = rule.length;
            xlObj._dupDetails = true;
            while (i < len) {
                splitStr = rule[i].split("_");
                if (splitStr[0] != "iconsets" && splitStr[0] != "databar" && splitStr[0] != "colorscale")
                    xlObj.XLCFormat._cFormat(splitStr[0], splitStr[2], splitStr[3], splitStr[4], splitStr[5], null, null, [cellIdx.rowIndex, cellIdx.colIndex, cellIdx.rowIndex, cellIdx.colIndex]);
                i++;
            }
            xlObj._dupDetails = false;
        },

        _updateNFormat: function (data, rowIdx, colIdx) {
            var formatObj = { type: data.type }, xlObj = this.XLObj;
            if (data.type != "general") {
                if (data.formatStr)
                    formatObj.formatStr = data.formatStr;
                if ("decimalPlaces" in data)
                    formatObj.decimalPlaces = data.decimalPlaces;
            }
            xlObj._dupDetails = true;
            xlObj.XLFormat.format(formatObj, xlObj._getAlphaRange(xlObj.getActiveSheetIndex(), rowIdx, colIdx, rowIdx, colIdx));
            xlObj._dupDetails = false;
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.cellNavigation = function (obj) {
        this.XLObj = obj;
        this._canKeyBoardNavigate = true;
        this._isNavigate = true;
    };

    ej.spreadsheetFeatures.cellNavigation.prototype = {
        _selectionKeyDownHandler: function (e) {
            var val, selRange, scell, ecell, range, obj, startCell, isRowcolSel, isMergeCell = false, cells = [], xlObj = this.XLObj,
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), keyCode = e.keyCode, shiftKey = e.shiftKey,
                ctrlKey = e.ctrlKey, key = { keyCode: keyCode, shiftKey: shiftKey, ctrlKey: ctrlKey, altKey: e.altKey }, _isChanged = false,
                activecell = sheet._activeCell, endCell = sheet._endCell, rowCount = sheet.rowCount, colCount = sheet.colCount, container = xlObj._dataContainer, rowdata, i, usedrange = sheet.usedRange;
            if (((keyCode === 9 && this._canKeyBoardNavigate) || keyCode === 13) && !ctrlKey) { // tab & Enter Key
                e.preventDefault(); // to prevent default browser actions
                val = xlObj.XLEdit.getCurrentEditCellData();
                if (xlObj.isFormula(val) && !xlObj.XLEdit._formulaValidate(val))
                    return;
                if (xlObj.XLEdit._isFormulaEdit && !xlObj._isFormulaSuggestion) {
                    if (val.length > 1) {
                        if (!this._isValidParameter(val)) {
                            xlObj._showAlertDlg("Alert", "MissingParenthesisAlert", "FormulaAlert", 440);
                            return;
                        }
                        else {
                            if (!xlObj.isFormula(val)) {
                                val = val + ")";
                                if (val.split("(").length !== val.split(")").length) {
                                    xlObj._showAlertDlg("Alert", "MissingParenthesisAlert", "FormulaAlert", 440);
                                    return;
                                }
                                xlObj.XLEdit._editElem.text(val);
                                if (xlObj.model.allowFormulaBar)
                                    xlObj._getInputBox().val(val);
                            }
                            xlObj.XLEdit.saveCell();
                            xlObj._getContent(sheetIdx).find("td").removeClass(xlObj._formulaBorder.join(" ").replace(/,/g, " ") + " " + xlObj._ctrlFormulaBorder.join(" ").replace(/,/g, " "));
                            xlObj.XLSelection._cleanUp();
                            xlObj.XLSelection.selectRange(sheet._activeCell, sheet._activeCell);
                            xlObj.XLEdit._isFormulaEdit = false;
                            xlObj._formulaRange = [];
                            xlObj._ctrlKeyCount = 0;
                        }
                    }
                    else {
                        xlObj.XLEdit.saveCell();
                        xlObj.XLEdit._isFormulaEdit = false;
                    }
                }
                else if (keyCode === 9 && xlObj.XLEdit._isEdit)
                    xlObj.XLEdit.saveCell();
                selRange = sheet.selectedRange;
                isRowcolSel = sheet._isRowSelected || sheet._isColSelected;
                if (isRowcolSel) {
                    if (selRange[0] === selRange[2] || selRange[1] === selRange[3])
                        cells.push({ rowIndex: selRange[0], colIndex: selRange[1] });
                    else
                        cells = sheet._selectedCells;
                }
                else
                    cells = sheet._selectedCells;
                if (cells.length) {
                    if (cells.length === 1 || (!isRowcolSel && this._isRangeMerged(cells))) {
                        if (sheet._isRowSelected) {
                            if (shiftKey) {
                                if (activecell.colIndex > 0)
                                    this._navigateRow("Backward", key);
                            }
                            else {
                                if (activecell.colIndex < 39)
                                    this._navigateRow("Forward", key);
                            }
                        }
                        else if (sheet._isColSelected) {
                            if (shiftKey) {
                                if (activecell.rowIndex > 0)
                                    this._navigateCol("Backward", key);
                            }
                            else {
                                if (activecell.rowIndex < 39)
                                    this._navigateCol("Forward", key);
                            }
                        }
                        else {
                            if (shiftKey) {
                                if (keyCode === 9 && activecell.colIndex > 0)
                                    this._navigateCell(activecell.rowIndex, activecell.colIndex - 1, key); //shifttab
                                else if (keyCode === 13 && activecell.rowIndex > 0)
                                    this._navigateCell(activecell.rowIndex - 1, activecell.colIndex, key); //shiftenter
                            }
                            else {
                                if (keyCode === 9 && activecell.colIndex < colCount)
                                    this._navigateCell(activecell.rowIndex, activecell.colIndex + 1, key); //tab
                                else if (keyCode === 13 && activecell.rowIndex < rowCount)
                                    this._navigateCell(activecell.rowIndex + 1, activecell.colIndex, key); //enter
                            }
                        }
                    }
                    else {
                        if (shiftKey)
                            keyCode === 9 ? this._navigateRange("ShiftTab", key) : this._navigateRange("ShiftEnter", key);
                        else
                            keyCode === 9 ? this._navigateRange("Tab", key) : this._navigateRange("Enter", key);
                    }
                }
            } else if ((keyCode === 37 || (keyCode === 38 && !xlObj._isFormulaSuggestion) || keyCode === 39 || (keyCode === 40 && !xlObj._isFormulaSuggestion)) && this._isNavigate) { //left ,up, right & down arrow
                e.preventDefault(); // to prevent default browser actions
                if (xlObj.XLEdit._isFormulaEdit) { // for formula navigation
                    range = xlObj.swapRange([xlObj._dStartCell.rowIndex, xlObj._dStartCell.colIndex, xlObj._dEndCell.rowIndex, xlObj._dEndCell.colIndex]);
                    xlObj.getRange([!range[0] ? range[0] : range[0] - 1, !range[1] ? range[1] : range[1] - 1, range[2], range[3]]).removeClass(xlObj._formulaBorder[xlObj._ctrlKeyCount % 6].join(' ') + " " + xlObj._ctrlFormulaBorder[xlObj._ctrlKeyCount % 6].join(' '));
                    if (ctrlKey) { //ctrl key support
                        scell = xlObj._dStartCell;
                        if (keyCode === 37 && scell.colIndex > 0)  // min column count reached? left arrow 
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: scell.rowIndex, colIndex: 0 };
                        else if (keyCode === 38 && scell.rowIndex > 0)  // min row count reached? up arrow
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: 0, colIndex: scell.colIndex };
                        else if (keyCode === 39 && scell.colIndex < sheet.colCount) // max column count reached ? right arrow
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: scell.rowIndex, colIndex: sheet.colCount };
                        else if (keyCode === 40 && scell.rowIndex < rowCount) //max row count reached? down arrow
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: sheet.colCount, colIndex: scell.colIndex };
                    }
                    if (shiftKey || xlObj._shiftKeyEnabled) { // shift key support
                        ecell = xlObj._dEndCell;
                        scell = xlObj._dStartCell;
                        if (keyCode === 37 && scell.colIndex > 0)
                            xlObj._dStartCell = { rowIndex: scell.rowIndex, colIndex: scell.colIndex - 1 };
                        else if (keyCode === 38 && scell.rowIndex > 0)
                            xlObj._dStartCell = { rowIndex: scell.rowIndex - 1, colIndex: scell.colIndex };
                        else if (keyCode === 39 && ecell.colIndex < sheet.colCount)
                            xlObj._dEndCell = { rowIndex: ecell.rowIndex, colIndex: ecell.colIndex + 1 };
                        else if (keyCode === 40 && ecell.rowIndex < sheet.rowCount)
                            xlObj._dEndCell = { rowIndex: ecell.rowIndex + 1, colIndex: ecell.colIndex };
                    }
                    else {
                        scell = xlObj._dStartCell;
                        if (keyCode === 37 && scell.colIndex > 0)  // min column count reached? left arrow
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: scell.rowIndex, colIndex: scell.colIndex - 1 }; // left
                        else if (keyCode === 38 && scell.rowIndex > 0) // min row index reached?
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: scell.rowIndex - 1, colIndex: scell.colIndex }; // up
                        else if (keyCode === 39 && scell.colIndex < sheet.colCount) // max col count reached?
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: scell.rowIndex, colIndex: scell.colIndex + 1 }; // right
                        else if (keyCode === 40 && scell.rowIndex < sheet.rowCount)  // max row count reached?
                            xlObj._dStartCell = xlObj._dEndCell = { rowIndex: scell.rowIndex + 1, colIndex: scell.colIndex }; // down   
                    }
                    xlObj.XLSelection._processFormulaRange(xlObj._ctrlFormulaBorder);
                    xlObj._formulaRange[xlObj._ctrlKeyCount] = xlObj._getProperAlphaRange(sheetIdx, xlObj._dStartCell.rowIndex, xlObj._dStartCell.colIndex, xlObj._dEndCell.rowIndex, xlObj._dEndCell.colIndex);
                }
                else {
                    if (ctrlKey) { //ctrl key support
                        if (keyCode === 37 && activecell.colIndex > 0) {  //  left arrow 
                            rowdata = container.sheets[sheetIdx][activecell.rowIndex];
                            i = activecell.colIndex - 1;
                            if (rowdata && i < usedrange.colIndex) { //Active row is non -empty && active column less than used range column
                                if (xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i + 1, "value2") && xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2")) { //active column is non - empty
                                    while (xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2") && i <= usedrange.colIndex)
                                        i--;
                                    colCount = i + 1;
                                }
                                else { //Active column is empty
                                    while (!xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2") && i < usedrange.colIndex && i > 0)
                                        i--;
                                    colCount = i;
                                }
                            }
                            else {// Active column greater than used range column
                                if (!xlObj.XLEdit.getPropertyValue(activecell.rowIndex, usedrange.colIndex, "value2")) {//used range is empty
                                    i = usedrange.colIndex;
                                    while (i > 0 && !xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2"))
                                        i--;
                                    colCount = i;
                                }
                                else //used range is non - empty
                                    colCount = usedrange.colIndex;  //used range is non-empty 
                            }
                            this._navigateCell(activecell.rowIndex, colCount, key);
                        }
                        else if (keyCode === 38 && activecell.rowIndex > 0) {  // up arrow
                            rowdata = container.sheets[sheetIdx];
                            i = activecell.rowIndex - 1;
                            if (i <= usedrange.rowIndex) {//Active row lees then used range
                                if (rowdata[i] && xlObj.XLEdit.getPropertyValue(i + 1, activecell.colIndex, "value2") && xlObj.XLEdit.getPropertyValue(i, activecell.colIndex, "value2")) { //previous row is non-empty and active column in previous row is non - empty
                                    while (xlObj.XLEdit.getPropertyValue(i, activecell.colIndex, "value2") && i <= usedrange.rowIndex)
                                        i--;
                                    rowCount = i + 1;
                                }
                                else {  //active column in previous row is empty
                                    while (!xlObj.XLEdit.getPropertyValue(i, activecell.colIndex, "value2") && i > 0)
                                        i--
                                    rowCount = i;
                                }
                            }
                            else { //active row greatrer than used range
                                if (!xlObj.XLEdit.getPropertyValue(usedrange.rowIndex, activecell.colIndex, "value2")) { //used range is empty
                                    i = usedrange.rowIndex;
                                    while (i > 0 && !xlObj.XLEdit.getPropertyValue(i, activecell.colIndex, "value2"))
                                        i--;
                                    rowCount = i;
                                }
                                else //used range is non - empty
                                    rowCount = usedrange.rowIndex;
                            }
                            this._navigateCell(rowCount, activecell.colIndex, key);
                        }
                        else if (keyCode === 39 && activecell.colIndex < colCount - 1) {//  right arrow
                            rowdata = container.sheets[sheetIdx][activecell.rowIndex];
                            i = activecell.colIndex + 1;
                            if (rowdata && i <= usedrange.colIndex) {// Active row is non - empty and active column less than / equalto used range
                                if (xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i - 1, "value2") && xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2")) {//Active column is non - empty
                                    while (xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2") && i <= usedrange.colIndex)
                                        i++;
                                    colCount = i - 1;
                                }
                                else { //Active column is empty
                                    while (!xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2") && i < usedrange.colIndex)
                                        i++;
                                    colCount = (!xlObj.XLEdit.getPropertyValue(activecell.rowIndex, i, "value2")) ? sheet.colCount : i;
                                }
                            }
                            else // Active column is greater than used range column
                                colCount = sheet.colCount;
                            (colCount === sheet.colCount) && --colCount;
                            this._navigateCell(activecell.rowIndex, colCount, key);
                        }
                        else if (keyCode === 40 && activecell.rowIndex < rowCount - 1) {// down arrow
                            rowdata = container.sheets[sheetIdx];
                            i = activecell.rowIndex + 1;
                            if (i < usedrange.rowIndex) {// active row index less than used range row index
                                if (rowdata[i] && xlObj.XLEdit.getPropertyValue(i - 1, activecell.colIndex, "value2") && xlObj.XLEdit.getPropertyValue(i, activecell.colIndex, "value2")) {//active column  next row is non - empty
                                    while (xlObj.XLEdit.getPropertyValue(i, activecell.colIndex, "value2") && i <= usedrange.rowIndex)
                                        i++;
                                    rowCount = i - 1;
                                }
                                else {//active column in next row is empty 
                                    while (!xlObj.XLEdit.getPropertyValue(i, activecell.colIndex, "value2") && i < sheet.rowCount)
                                        i++
                                    rowCount = i;
                                }
                            }
                            else //Active row greater or equal to used range
                                rowCount = sheet.rowCount - 1;
                            (rowCount === sheet.rowCount) && --rowCount;
                            this._navigateCell(rowCount, activecell.colIndex, key);
                        }
                    }
                    else if (shiftKey) {
                        if (keyCode === 37 && endCell.colIndex > 0)
                            sheet._endCell = { rowIndex: endCell.rowIndex, colIndex: endCell.colIndex - 1 };
                        else if (keyCode === 38 && endCell.rowIndex > 0) {
                            _isChanged = true;
                            sheet._endCell = { rowIndex: endCell.rowIndex - 1, colIndex: endCell.colIndex };
                        }
                        else if (keyCode === 39 && endCell.colIndex < colCount)
                            sheet._endCell = { rowIndex: endCell.rowIndex, colIndex: endCell.colIndex + 1 };
                        else if (keyCode === 40 && endCell.rowIndex < rowCount) {
                            _isChanged = true;
                            sheet._endCell = { rowIndex: endCell.rowIndex + 1, colIndex: endCell.colIndex };
                        }
                        if ((sheet.rowCount === sheet._endCell.rowIndex || sheet.colCount === sheet._endCell.colIndex) && xlObj.model.scrollSettings.scrollMode === "normal")
                            return;
                        if ((sheet.rowCount === sheet._endCell.rowIndex || sheet.colCount === sheet._endCell.colIndex) && !xlObj.model.scrollSettings.allowScrolling)
                            return;
                        if (xlObj.model.scrollSettings.allowScrolling) {
                            if (sheet.rowCount === sheet._endCell.rowIndex && keyCode === 40)
                                xlObj._scrollContent({ x: 0, y: +xlObj.model.rowHeight });
                            else if (sheet.colCount - 1 === sheet._endCell.colIndex && keyCode === 39)
                                xlObj._scrollContent({ x: +xlObj.model.columnWidth, y: 0 });
                        }
                        if (this._isHiddenCell(sheet._endCell)) {
                            obj = { rowIndex: sheet._endCell.rowIndex, colIndex: sheet._endCell.colIndex };
                            this._skipHiddenRowsAndCols(obj, key);
                            sheet._endCell.rowIndex = obj.rowIndex;
                            sheet._endCell.colIndex = obj.colIndex;
                        }
                        if (xlObj._isPropExists([[sheet._startCell.rowIndex, sheet._endCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]], "merge") || xlObj._isPropExists([[sheet._startCell.rowIndex, sheet._endCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]], "isMHide")) //Row wise support
                            isMergeCell = true;
                        if (xlObj.XLEdit.getPropertyValue(sheet._endCell.rowIndex, sheet._endCell.colIndex, "isMHide") || xlObj.XLEdit.getPropertyValue(sheet._endCell.rowIndex, sheet._endCell.colIndex, "merge") || (_isChanged && xlObj._isPropExists([[sheet._endCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]], "merge") || xlObj._isPropExists([[sheet._endCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]], "isMHide")) || isMergeCell) {
                            _isChanged = false;
                            xlObj.XLSelection._processBoundary();
                            if (keyCode === 37 || keyCode == 38) {
                                startCell = sheet._endCell;
                                sheet._endCell = sheet._startCell;
                                sheet._startCell = startCell;
                            }
                        }
                        if (sheet._endCell.colIndex <= sheet._leftCol.idx || sheet._endCell.colIndex >= sheet._rightCol.idx || sheet._endCell.rowIndex <= sheet._topRow.idx || sheet._endCell.rowIndex >= sheet._bottomRow.idx)
                            this._scrollToCell(sheet._endCell, key);
                        xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                        if (xlObj.model.allowAutoFill)
                            xlObj.XLDragFill.positionAutoFillElement();
                    }
                    else {
                        key = { keyCode: keyCode, shiftKey: false, ctrlKey: false, altKey: false };
                        if (keyCode === 37 && activecell.colIndex > 0)  // min column count reached? left arrow
                            this._navigateCell(activecell.rowIndex, activecell.colIndex - 1, key);//left
                        else if (keyCode === 38 && activecell.rowIndex > 0) // min row index reached?
                            this._navigateCell(activecell.rowIndex - 1, activecell.colIndex, key);//up
                        else if (keyCode === 39 && activecell.colIndex < colCount) // max col count reached?
                            this._navigateCell(activecell.rowIndex, activecell.colIndex + 1, key);//right
                        else if (keyCode === 40 && activecell.rowIndex < rowCount)  // max row count reached?
                            this._navigateCell(activecell.rowIndex + 1, activecell.colIndex, key);//down
                        else
                            return false;
                    }
                }
            }
        },

        _navigateCell: function (rowindex, colindex, key) { // select cell by rowindex and colindex
            var colgrp, cellInfo, isSpan, leftCol, actCellMerge, rows, rowIdx, colIdx, rIdx, cIdx, obj = { rowIndex: rowindex, colIndex: colindex },
                xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), cont = xlObj._getContent(sheetIdx),
                hScroll = cont.find("#hscrollBar").data("ejScrollBar"), vScroll = cont.find("#vscrollBar").data("ejScrollBar"),
                content = cont.find(".e-content"), xlEdit = xlObj.XLEdit, scrollReach = false, cntOffsetWidth = content[0].offsetWidth;
            if ((sheet.rowCount === obj.rowIndex || sheet.colCount === obj.colIndex) && (xlObj.model.scrollSettings.scrollMode === "normal"))
                return;
            if (sheet.rowCount === obj.rowIndex && xlObj.model.scrollSettings.allowVirtualScrolling)
                return;
            if ((sheet.rowCount === obj.rowIndex || sheet.colCount === obj.colIndex) && !xlObj.model.scrollSettings.allowScrolling)
                return;
            if (sheet.rowCount === obj.rowIndex) {
                xlObj.XLScroll._scrollY(sheetIdx);
                scrollReach = true;
            }
            if (!xlObj._isAutoWHMode && sheet.colCount === obj.colIndex && xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite) {
                xlObj.XLScroll._scrollX(sheetIdx);
                scrollReach = true;
            }
            this._navToCell(rowindex, colindex);
            if (this._isHiddenCell(obj))
                this._skipHiddenRowsAndCols(obj, key);
            actCellMerge = xlEdit.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "merge");
            if (actCellMerge && xlEdit.getPropertyValue(obj.rowIndex, obj.colIndex, "mergeIdx"))
                this._updateMergeRange(actCellMerge, obj, key);
            sheet._activeCell = sheet._endCell = sheet._startCell = obj;
            if ((xlObj.XLEdit.getPropertyValue(obj.rowIndex, obj.colIndex, "mergeIdx") || xlObj.hasSpan(obj))) {
                xlObj.XLSelection._processBoundary();
                sheet._activeCell = sheet._startCell;
                isSpan = true;
            }
            cellInfo = xlObj._getCellInfo(obj, sheetIdx);
            leftCol = sheet._leftCol.idx > 0 ? sheet._leftCol.idx - 1 : sheet._leftCol.idx;
            if (xlObj.model.scrollSettings.allowScrolling && (sheet._bottomRow.idx <= obj.rowIndex) && (key.keyCode === 40 || (key.keyCode === 13 && !key.shiftKey)) && !scrollReach && !sheet._isFreezed) {
                vScroll._scrollData.step = 1;
                if (key.ctrlKey && key.keyCode === 40)
                    xlObj.XLScroll._scrollSelectedPosition(sheetIdx, xlObj.getActiveCell(sheetIdx));
                else
                    vScroll.scroll(vScroll.value() + (xlObj._isFrozen(sheet.frozenRows) ? xlObj._getRowHeight(sheet._ftopRowIdx, sheetIdx) : cellInfo.height), true);
            }
            else if (xlObj.model.scrollSettings.allowScrolling && !xlObj._isFrozen(sheet.frozenRows) && (sheet._topRow.idx > obj.rowIndex) && (key.keyCode === 38 || (key.keyCode === 13 && key.shiftKey)) && !scrollReach && !xlObj._hasClass(cont.find("tr").eq(obj.rowIndex)[0], 'e-fr-hide')) {
                vScroll._scrollData.step = -1;
                if (obj.rowIndex > 0)
                    (key.ctrlKey) ? vScroll.scroll(cellInfo.top, true) : vScroll.scroll(vScroll.value() - cellInfo.height, true);
                else
                    vScroll.scroll(0);
            }
            if (xlObj.model.scrollSettings.allowScrolling && colindex >= sheet._rightCol.idx && cntOffsetWidth <= ((sheet._colWidthCollection[sheet._activeCell.colIndex] - sheet._colWidthCollection[leftCol]) + cellInfo.width) && (key.keyCode === 39 || (key.keyCode === 9 && !key.shiftKey)) && !scrollReach) {
                hScroll._scrollData.step = 1;
                if (key.ctrlKey && key.keyCode === 39)
                    hScroll.scroll((cellInfo.left + cellInfo.width) - hScroll._scrollData.handleSpace, true);
                else
                    hScroll.scroll(hScroll.value() + (xlObj._isFrozen(sheet.frozenColumns) ? xlObj._getColWidth(sheet._fleftColIdx, sheetIdx) : cellInfo.width), true);
            }
            else if (xlObj.model.scrollSettings.allowScrolling && !xlObj._isFrozen(sheet.frozenColumns) && (leftCol >= obj.colIndex) && (key.keyCode === 37 || (key.keyCode === 9 && key.shiftKey)) && !scrollReach) {
                hScroll._scrollData.step = -1;
                if (obj.colIndex > 0)
                    (key.ctrlKey) ? hScroll.scroll(cellInfo.left, true) : hScroll.scroll(hScroll.value() - cellInfo.width, true);
                else
                    hScroll.scroll(0);
            }
            else if (xlObj.model.scrollSettings.allowScrolling && key.ctrlKey && !scrollReach && !sheet._isFreezed) {
                if (key.keyCode === 37)
                    hScroll.scroll(cellInfo.left, true)
                else if (key.keyCode === 38)
                    vScroll.scroll(cellInfo.top, true);
                else if (key.keyCode === 39)
                    hScroll.scroll(cellInfo.left - hScroll._scrollData.handleSpace, true);
                else
                    xlObj.XLScroll._scrollSelectedPosition(sheetIdx, xlObj.getActiveCell(sheetIdx));
            }
            colgrp = cont.find("col");
            rows = $(xlObj.getRows(sheetIdx)[1]), rowIdx = sheet._startCell.rowIndex, colIdx = sheet._startCell.colIndex;
            if ((cntOffsetWidth >= cellInfo.left || content.offset().left + cntOffsetWidth >= (cellInfo.left + cellInfo.width)) && (key.keyCode == 39 || (key.keyCode == 9 && !key.shiftKey)))
                xlObj.XLSelection.selectRange(sheet._startCell, sheet._startCell);
            else if (!colgrp.eq(colIdx).hasClass("e-fc-hide") || (key.keyCode == 37 || (key.keyCode == 9 && key.shiftKey)))
                xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
            else if (!rows.eq(rowIdx).hasClass("e-fr-hide") && (key.keyCode == 38 || (key.keyCode == 13 && key.shiftKey)))
                xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
            else if (((content.offset().top + content[0].offsetHeight) >= cellInfo.top || content.offset().top + content[0].offsetHeight >= (cellInfo.top + cellInfo.height)) && (key.keyCode == 40 || (key.keyCode == 13 && !key.shiftKey)))
                xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
            if (isSpan) {
                if (key.keyCode === 37 || (key.shiftKey && key.keyCode === 9))
                    obj.colIndex = sheet._startCell.colIndex;
                else if (key.keyCode === 38 || (key.shiftKey && key.keyCode === 13))
                    obj.rowIndex = sheet._startCell.rowIndex;
                else if (key.keyCode === 39 || key.keyCode === 9)
                    obj.colIndex = sheet._endCell.colIndex;
                else if (key.keyCode === 40 || key.keyCode === 13)
                    obj.rowIndex = sheet._endCell.rowIndex;
                sheet._activeCell = obj;
            }
            sheet._startCell = obj;
            while ((key.keyCode === 37 || (key.shiftKey && key.keyCode === 9)) && xlObj._hasClass(colgrp[sheet._startCell.colIndex], 'e-c-hide')) {
                xlObj._removeClass(colgrp[sheet._startCell.colIndex], 'e-fc-hide');
                sheet._startCell.colIndex--;
            }
            while ((key.keyCode === 38 || (key.shiftKey && key.keyCode === 13)) && xlObj._hasClass(cont.find('tr')[sheet._startCell.rowIndex], 'e-r-hide')) {
                xlObj._removeClass(cont.find('tr')[sheet._startCell.rowIndex], 'e-fr-hide');
                sheet._startCell.rowIndex--;
            }
            while ((key.keyCode === 39 || key.keyCode === 9) && xlObj._hasClass(colgrp[sheet._startCell.colIndex], 'e-c-hide'))
                sheet._startCell.colIndex++;
            while ((key.keyCode === 40 || key.keyCode === 13) && xlObj._hasClass(cont.find('tr')[sheet._startCell.rowIndex], 'e-r-hide'))
                sheet._startCell.rowIndex++;
            rIdx = sheet._startCell.rowIndex, cIdx = sheet._startCell.colIndex;
            if (xlObj.model.selectionSettings.selectionType === "row")
                xlObj.XLSelection.selectRows(rIdx, rIdx);
            else if (xlObj.model.selectionSettings.selectionType === "column")
                xlObj.XLSelection.selectColumns(cIdx, cIdx);
            if (xlObj.model.showRibbon)
                xlObj.XLRibbon._updateRibbonIcons();
            if (xlObj.model.allowAutoFill)
                xlObj.XLDragFill.positionAutoFillElement();
        },

        _navToCell: function (rowIdx, colIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(), hiddenHgt, hiddenWth, i;
            hiddenHgt = hiddenWth = 0;
            if (sheet._isFreezed) {
                if (sheet._frozenRows - 1 <= rowIdx && rowIdx < sheet._ftopRowIdx) {
                    for (i = rowIdx; i < sheet._ftopRowIdx; i++)
                        hiddenHgt += sheet.rowsHeightCollection[i];
                    xlObj._scrollContent({ y: -hiddenHgt });
                }
                else if (sheet._frozenRows - 1 <= rowIdx && rowIdx > sheet._bottomRow.idx) {
                    for (i = sheet._bottomRow.idx; i < rowIdx; i++)
                        hiddenHgt += sheet.rowsHeightCollection[i];
                    xlObj._scrollContent({ y: +hiddenHgt });
                }

                if (sheet._frozenColumns - 1 <= colIdx && colIdx < sheet._fleftColIdx) {
                    for (i = colIdx; i < sheet._fleftColIdx; i++)
                        hiddenWth += sheet.columnsWidthCollection[i];
                    xlObj._scrollContent({ x: -hiddenWth });
                }
                else if (sheet._frozenColumns - 1 <= colIdx && colIdx > sheet._rightCol.idx) {
                    for (i = sheet._rightCol.idx; i < colIdx; i++)
                        hiddenWth += sheet.columnsWidthCollection[i];
                    xlObj._scrollContent({ x: +hiddenWth });
                }
            }
        },
        _navigateRange: function (args, key) { // active cell changes at range of cells,rows,columns
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), startcell = sheet._startCell, endcell = sheet._endCell, activecell = sheet._activeCell,
                minrowindex = startcell.rowIndex < endcell.rowIndex ? startcell.rowIndex : endcell.rowIndex,
                maxrowindex = startcell.rowIndex > endcell.rowIndex ? startcell.rowIndex : endcell.rowIndex,
                mincolindex = startcell.colIndex < endcell.colIndex ? startcell.colIndex : endcell.colIndex,
                maxcolindex = startcell.colIndex > endcell.colIndex ? startcell.colIndex : endcell.colIndex;
            if (args == "Tab") {
                if (activecell.colIndex < maxcolindex)
                    this._navigateRow("Forward", key);
                else if (activecell.rowIndex < maxrowindex)
                    this._updateActiveCell(activecell.rowIndex + 1, mincolindex, key, args);
                else if (activecell.rowIndex == maxrowindex && activecell.colIndex == maxcolindex)
                    this._updateActiveCell(minrowindex, mincolindex, key, args);
                else
                    return false;
            }
            else if (args == "Enter") {
                if (activecell.rowIndex < maxrowindex)
                    this._navigateCol("Forward", key);
                else if (activecell.colIndex < maxcolindex)
                    this._updateActiveCell(minrowindex, activecell.colIndex + 1, key, args);
                else if (activecell.rowIndex == maxrowindex && activecell.colIndex == maxcolindex)
                    this._updateActiveCell(minrowindex, mincolindex, key, args);
                else
                    return false;
            }
            else if (args == "ShiftTab") {
                if (activecell.colIndex > mincolindex)
                    this._navigateRow("Backward", key);
                else if (activecell.rowIndex > minrowindex)
                    this._updateActiveCell(activecell.rowIndex - 1, maxcolindex, key, args);
                else if (activecell.rowIndex == minrowindex && activecell.colIndex == mincolindex)
                    this._updateActiveCell(maxrowindex, maxcolindex, key, args);
                else
                    return false;
            }
            else { // shift enter
                if (activecell.rowIndex > minrowindex)
                    this._navigateCol("Backward", key);
                else if (activecell.colIndex > mincolindex)
                    this._updateActiveCell(maxrowindex, activecell.colIndex - 1, key, args);
                else if (activecell.rowIndex == minrowindex && activecell.colIndex == mincolindex)
                    this._updateActiveCell(maxrowindex, maxcolindex, key, args);
                else
                    return false;
            }
        },

        _navigateRow: function (args, key) { // active cell changes at single row
            var idx, action, xlObj = this.XLObj, activecell = xlObj.getSheet(xlObj.getActiveSheetIndex())._activeCell;
            if (args === "Forward") {
                idx = 1;
                action = "Tab";
            }
            else {
                idx = -1;
                action = "ShiftTab";
            }
            this._updateActiveCell(activecell.rowIndex, activecell.colIndex + idx, key, action);
        },

        _navigateCol: function (args, key) { // active cell changes at single column
            var idx, action, xlObj = this.XLObj, activecell = xlObj.getSheet(xlObj.getActiveSheetIndex())._activeCell;
            if (args === "Forward") {
                idx = 1;
                action = "Enter";
            }
            else {
                idx = -1;
                action = "ShiftEnter";
            }
            this._updateActiveCell(activecell.rowIndex + idx, activecell.colIndex, key, action);
        },

        _updateActiveCell: function (rowindex, colindex, key, args) { // to update active cell by removing existing active cell
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), activecell = sheet._activeCell;
            xlObj._removeClass(xlObj.getCell(activecell.rowIndex, activecell.colIndex), "e-activecell");
            sheet._activeCell = { rowIndex: rowindex, colIndex: colindex };
            if (key && this._isHiddenCell(sheet._activeCell))
                this._skipHiddenRowsAndCols(sheet._activeCell, key, true, args);
            if (this._isMergedCell(sheet._activeCell))
                this._skipMergedCells(sheet._activeCell, key);
            this._scrollToCell(sheet._activeCell, key);
            xlObj.addClass(xlObj.getCell(sheet._activeCell.rowIndex, sheet._activeCell.colIndex), "e-activecell")
            if (xlObj.model.allowFormulaBar)
                xlObj.updateFormulaBar();
            xlObj._setSheetFocus();
        },

        _isValidParameter: function (val) {
            var index = val.indexOf("(");
            if (index > -1) {
                val = val.split("(");
                return val[1].length > 0;
            }
            return true;
        },

        _skipHiddenRowsAndCols: function (obj, key, inRange, args) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), canIterate = true;
            if (inRange)
                this._navigateRange(args, key);
            else {
                if ((key.keyCode === 37 || (key.keyCode === 9 && key.shiftKey) || (key.keyCode === 39 && key.ctrlKey)) && obj.colIndex)
                    obj.colIndex--;
                else if ((key.keyCode === 38 || (key.keyCode === 13 && key.shiftKey) || (key.keyCode === 40 && key.ctrlKey)) && obj.rowIndex)
                    obj.rowIndex--;
                else if ((key.keyCode === 39 || key.keyCode === 9 || (key.keyCode === 37 && key.ctrlKey)) && obj.colIndex < sheet.colCount - 1)
                    obj.colIndex++;
                else if ((key.keyCode === 40 || key.keyCode === 13 || (key.keyCode === 38 && key.ctrlKey)) && obj.rowIndex < sheet.rowCount - 1)
                    obj.rowIndex++;
                else
                    canIterate = false;
                if (this._isHiddenCell(obj) && canIterate)
                    this._skipHiddenRowsAndCols(obj, key);
                else if (!canIterate) {
                    if ((key.keyCode === 37 || (key.keyCode === 9 && key.shiftKey)) && !obj.colIndex)
                        obj.colIndex = (key.keyCode === 37 && key.shiftKey) ? sheet._endCell.colIndex + 1 : sheet._startCell.colIndex;
                    else if ((key.keyCode === 38 || (key.keyCode === 13 && key.shiftKey)) && !obj.rowIndex)
                        obj.rowIndex = (key.keyCode === 38 && key.shiftKey) ? sheet._endCell.rowIndex + 1 : sheet._startCell.rowIndex;
                    else if (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal) {
                        if ((key.keyCode === 40 || key.keyCode === 13 || (key.keyCode === 40 && key.shiftKey)) && obj.rowIndex == sheet.rowCount - 1)
                            obj.rowIndex = (key.keyCode === 40 && key.shiftKey) ? sheet._endCell.rowIndex - 1 : sheet._startCell.rowIndex;
                    }
                }
            }
        },

        _isHiddenCell: function (cellIdx) {
            return this.XLObj.XLEdit.getPropertyValue(0, cellIdx.colIndex, "isCHide") || this.XLObj.XLEdit.getPropertyValue(cellIdx.rowIndex, 0, "isRHide") || this.XLObj.XLEdit.getPropertyValue(cellIdx.rowIndex, 0, "isFilterHide") || false;
        },

        _isMergedCell: function (cellIdx) {
            return this.XLObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "isMHide") || this.XLObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "merge");
        },

        _skipMergedCells: function (obj, key) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), startcell = sheet._startCell,
                endcell = sheet._endCell, canIterate = true,
                minr = startcell.rowIndex < endcell.rowIndex ? startcell.rowIndex : endcell.rowIndex,
                maxr = startcell.rowIndex > endcell.rowIndex ? startcell.rowIndex : endcell.rowIndex,
                minc = startcell.colIndex < endcell.colIndex ? startcell.colIndex : endcell.colIndex,
                maxc = startcell.colIndex > endcell.colIndex ? startcell.colIndex : endcell.colIndex;
            if (key.shiftKey && key.keyCode === 9)
                obj.colIndex--;
            else if (key.keyCode === 9)
                obj.colIndex++;
            else if (key.shiftKey && key.keyCode === 13)
                obj.rowIndex--;
            else if (key.keyCode === 13)
                obj.rowIndex++;
            else
                canIterate = false;
            if (obj.colIndex > maxc) {
                obj.colIndex = minc;
                obj.rowIndex = (obj.rowIndex === maxr ? minr : obj.rowIndex + 1);
            }
            else if (obj.colIndex < minc) {
                obj.colIndex = maxc;
                obj.rowIndex = (obj.rowIndex === minr ? maxr : obj.rowIndex - 1);
            }
            else if (obj.rowIndex > maxr) {
                obj.rowIndex = minr;
                obj.colIndex = (obj.colIndex === maxc ? minc : obj.colIndex + 1);
            }
            else if (obj.rowIndex < minr) {
                obj.rowIndex = maxr;
                obj.colIndex = (obj.colIndex === minc ? maxc : obj.colIndex - 1);
            }
            if (this._isMergedCell(obj) && canIterate)
                this._skipMergedCells(obj, key);
        },

        _updateMergeRange: function (merge, obj, key) {
            var colspan = merge.mSpan.colSpan - 1, rowspan = merge.mSpan.rowSpan - 1;
            if (!key.shiftKey && (key.keyCode === 39 || key.keyCode === 9))
                obj.colIndex = obj.colIndex + colspan;
            else if (!key.shiftKey && (key.keyCode === 40 || key.keyCode === 13))
                obj.rowIndex = obj.rowIndex + rowspan;
        },

        _isRangeMerged: function (cells) {
            var mergeCells, obj = {}, xlObj = this.XLObj, cell = cells[0], merge = xlObj.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "merge");
            if (merge) {
                obj = { rowIndex: cells[0].rowIndex + merge.mSpan.rowSpan - 1, colIndex: cells[0].colIndex + merge.mSpan.colSpan - 1 };
                mergeCells = xlObj._getSelectedRange(cells[0], obj);
                if (mergeCells.length === cells.length)
                    return true;
            }
        },

        _scrollToCell: function (obj, key) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), cellInfo = xlObj._getCellInfo(obj, sheetIdx),
                sheet = xlObj.getSheet(sheetIdx), cont = xlObj._getContent(sheetIdx), content = cont.find(".e-content"),
                hScroll = cont.find("#hscrollBar").data("ejScrollBar"), vScroll = cont.find("#vscrollBar").data("ejScrollBar");
            if (xlObj.model.scrollSettings.scrollMode === "normal" && sheet.colCount - 1 === obj.colIndex)
                return;
            if (sheet._bottomRow.idx > 0 && obj.rowIndex > sheet._bottomRow.idx - 1 && sheet.rowCount - 1 > obj.rowIndex && key.keyCode === 40)
                vScroll.scroll(vScroll.value() + cellInfo.height, true);
            else if (obj.rowIndex - 1 < sheet._topRow.idx && key.keyCode === 38) {
                vScroll._scrollData.step = -1;
                (obj.rowIndex > 0) ? vScroll.scroll(cellInfo.top, true) : vScroll.scroll(0);
            }
            else if (obj.colIndex < sheet._leftCol.idx)
                (obj.colIndex > 0) ? hScroll.scroll(hScroll.value() - cellInfo.width, true) : hScroll.scroll(0);
            else if (content[0].offsetWidth <= (cellInfo.left + cellInfo.width)) {
                if (key.keyCode === 39)
                    (sheet.colCount === obj.colIndex + 1) ? xlObj.XLScroll._scrollX(sheetIdx) : hScroll.scroll(hScroll.value() + cellInfo.width, true);
                else if (key.keyCode === 37) {
                    hScroll._scrollData.step = -1;
                    hScroll.scroll(cellInfo.left, true);
                }
            }
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.cellFormatting = function (obj) {
        this.XLObj = obj;
        this._formatEnable = false;
        this._thousandSeparator = ej.preferredCulture(this.XLObj.model.locale).numberFormat[","];
        this._formatAsTableStyle = {};
        this._rowLength = null;
        this._colLength = null;
        this._getFormat = null;
        this._getEformatClass = null;
        this._borderPosition = ["top", "right", "bottom", "left"];
        this._cellObj = null;
        this._isFAT = false;
        this._customFormatSpecifierType = {};
        this._customFontFamily = {};
        this._isHeaderAdded = false;
        this._styleDlgClick = false;
        this._isTableNameAdded = false;
    };

    ej.spreadsheetFeatures.cellFormatting.prototype = {
        format: function (formatObj, range) {
            var xlObj = this.XLObj, sheetIdx;
            if(range && range.indexOf("!") > 0) {
                var rng = range.split("!");
                range = rng[1];
                sheetIdx = parseInt(rng[0].match(/\d+$/)[0]);
            }
            if (!xlObj.model.allowCellFormatting || xlObj.model.isReadOnly)
                return;
			sheetIdx = sheetIdx ? sheetIdx : xlObj.getActiveSheetIndex();
            var info, cellIdx, cells, colWidh, tFormats, cellInfo, globalWidth, $cell, cell, len, formattedval, cHght, cWidth, val, extFormat, maxc, i = 0,
                cellObj = {}, selCells = [], style = "style", format = "format", sep = "thousandSeparator",
                sheet = xlObj.getSheet(sheetIdx), container = xlObj._dataContainer, args = { formatObj: formatObj, sheetIndex: sheetIdx, reqType: "cell-format", type: "actionBegin", action: "cellformat" },
                details = { sheetIndex: sheetIdx, reqType: "cell-format" }, dupDetails = xlObj._dupDetails, isRfrshCmtPos = false, mergeObj;
            if (xlObj._trigActionBegin(args))
                return;
            cells = xlObj._getMultiRangeCells(range);
            len = cells.length;
            if (xlObj._trigger("beforeCellFormat", { sheetIndex: sheetIdx, format: formatObj, cells: cells }))
                return false;
            if (len) {
                formatObj = this._getFormatObj(formatObj);
                if (style in formatObj || format in formatObj) {
                    details.oprType = style in formatObj ? "style" : "format";
                    maxc = cells[len - 1].colIndex;
                    while (i < len) {
                        cellIdx = cells[i], args = { sheetIndex: sheetIdx, format: formatObj, cell: cellIdx };
                        this._cellObj = {};
                        info = { rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex, beforeFormat: {}, afterFormat: {}, bRowHeight: xlObj.model.allowResizing && xlObj.XLResize.getRowHeight(cellIdx.rowIndex) };
                        if (!ej.isNullOrUndefined(container.sheets[sheetIdx][info.rowIndex]))
                            cellObj = ej.isNullOrUndefined(container.sheets[sheetIdx][info.rowIndex][info.colIndex]) ? {} : container.sheets[sheetIdx][info.rowIndex][info.colIndex];
                        else
                            cellObj = {};
                        if (xlObj._isRowViewable(sheetIdx, cellIdx.rowIndex)) {
                            $cell = xlObj.getCell(cellIdx.rowIndex, cellIdx.colIndex);
                            cell = $cell[0];
                        }
                        if (style in formatObj) {
                            info.prevClass = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, format);
                            info.prevClass = info.prevClass ? info.prevClass : "";
                            extFormat = this._getExtendedFormat(cellIdx, formatObj.style);
                            if (extFormat['format']['text-align'] && extFormat['format']['text-align'].toLowerCase() === 'right' && !xlObj._hasClass(cell, 'e-rightalign'))
                                xlObj.addClass(cell, 'e-rightalign');
                            else if ((!extFormat['format']['text-align'] || extFormat['format']['text-align'].toLowerCase() !== 'right') && xlObj._hasClass(cell, 'e-rightalign'))
                                xlObj._removeClass(cell, 'e-rightalign');
                            this._cellObj.formats = $.extend(true, {}, extFormat.format);
                            tFormats = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "tformats");
                            if (tFormats)
                                extFormat.format = $.extend(tFormats, extFormat.format);
                            this._cellObj.format = info.className = this._createFormatClass(extFormat.format);
                            info.beforeFormat = $.extend(true, {}, cellObj);
                            if (("font-family" in formatObj["style"] || "font-size" in formatObj["style"]) && !xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "isMHide") && ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "merge"))) {
                                val = xlObj.XLEdit.getPropertyValue(info.rowIndex, info.colIndex);
                                if (xlObj.model.allowResizing && (xlObj.isNumber(val) || xlObj._isDateTime(val) || xlObj.isTime(val))) {
                                    cWidth = xlObj.XLResize._getContentWidth(info.colIndex, sheetIdx, info.rowIndex, info.rowIndex) + 2;
                                    if (cWidth > sheet.columnsWidthCollection[info.colIndex])
                                        xlObj.setWidthToColumns([{ colIndex: info.colIndex, width: cWidth }]);
                                }
                                if (xlObj.model.allowSelection)
                                    xlObj.XLSelection._refreshBorder();
                                isRfrshCmtPos = true;
                            }
                            args.cssClass = extFormat.className;
                        }
                        if (format in formatObj && formatObj.type) {
                            formattedval = xlObj.XLEdit.getPropertyValue(info.rowIndex, info.colIndex);
                            formattedval = ej.isNullOrUndefined(formattedval) ? "" : formattedval;
                            this._cellObj.value = formattedval;
                            this._cellObj.type = formatObj.type;
                            this._cellObj.formatStr = formatObj.format.formatStr;
                            this._cellObj.decimalPlaces = formatObj.format.decimalPlaces;
                            this._cellObj.thousandSeparator = formatObj.format[sep] ? true : false;
                            this._cellObj.canUpdate = true;
                            info.beforeFormat = $.extend(true, {}, cellObj);
                            formattedval = this._getFormattedValue(info.rowIndex, info.colIndex, this._cellObj, formattedval);
                            args.value = this._cellObj.value;
                            args.value2 = this._cellObj["value2"] = ej.isNullOrUndefined(formattedval) ? "" : formattedval[0] == "'" ? formattedval.substr(1) : (formattedval + "");
                            delete this._cellObj.canUpdate;
                            info.beforeFormat.Oprtype = this._cellObj.type;
                        }
                        if (xlObj.XLEdit.getPropertyValue(info.rowIndex, info.colIndex, 'value2'))
                            xlObj._textClip(info.rowIndex, info.colIndex, 'delete');
                        xlObj.XLEdit._updateDataContainer(info, { dataObj: this._cellObj, sheetIdx: sheetIdx });
                        if ((style in formatObj && ("font-family" in formatObj["style"] || "font-size" in formatObj["style"])) && !xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "isMHide")) {
                            colWidh = sheet.columnsWidthCollection[info.colIndex];
                            cHght = xlObj._detailsFromGlobalSpan(info.rowIndex, info.colIndex, "height", xlObj.XLEdit.getPropertyValue(info.rowIndex, info.colIndex, "value2"), colWidh);
                            if (xlObj.XLEdit.getPropertyValue(info.rowIndex, 0, "wrapRow") ? (sheet.rowsHeightCollection[info.rowIndex] < cHght) : true)
                                mergeObj = xlObj.XLEdit.getPropertyValue(info.rowIndex, info.colIndex, "merge");
                            if (cHght >= xlObj.model.rowHeight && (!xlObj.XLEdit.getPropertyValue(info.rowIndex, info.colIndex, "mergeIdx") && !mergeObj) || (mergeObj && mergeObj.mSpan.rowSpan <= 1)) {
                                xlObj._updateFormatColl(sheetIdx, info.rowIndex, info.colIndex, cHght);
                                cHght = xlObj._getFormattedHeight(sheetIdx, info.rowIndex);
                                if (cell)
                                    $cell.parent().outerHeight(cHght);
                                sheet.rowsHeightCollection[info.rowIndex] = cHght;
                                xlObj.XLEdit._updateDataContainer({ rowIndex: info.rowIndex, colIndex: 0 }, { dataObj: { pHeight: sheet.rowsHeightCollection[info.rowIndex], cHeight: cHght } });
                                isRfrshCmtPos = true;
                                if (xlObj.model.allowFreezing) {
                                    xlObj.XLFreeze._refreshFRowResize(cellIdx.rowIndex);
                                    xlObj.XLFreeze._refreshFColResize(cellIdx.colIndex);
                                }
                            }
                        }
                        cellInfo = xlObj._getCellInfo(cellIdx);
                        xlObj._dupDetails = true;
                        if (format in formatObj && ["text", "general"].indexOf(this._cellObj.type) === -1) {
                            var data = xlObj.getRangeData({ range: [cellIdx.rowIndex, cellIdx.colIndex, cellIdx.rowIndex, cellIdx.colIndex], property: ['value2', "formats", "altTxt", "type"] });
                            if (xlObj._browserDetails.name == "msie" && xlObj._browserDetails.version == "8.0")
                                globalWidth = xlObj._detailsFromGlobalSpan(cellIdx.rowIndex, cellIdx.colIndex, "width", this._cellObj.value2);
                            else
                                globalWidth = xlObj._getTextContentWidth(data[0], this._cellObj.value2);
                            if (xlObj.model.allowResizing && globalWidth > cellInfo.width) {
                                xlObj.XLResize.setColWidth(cellIdx.colIndex, globalWidth);
                            }
                            if (xlObj.model.allowFreezing)
                                xlObj.XLFreeze._refreshFColResize(cellIdx.colIndex);
                        }
                        xlObj._dupDetails = false;
                        xlObj._dupDetails = dupDetails;
                        if (sheet._isColSelected && sheet.selectedRange[1] <= info.colIndex && info.colIndex <= sheet.selectedRange[3])
                            sheet._columnStyles[info.colIndex] = $.extend(true, sheet._columnStyles[info.colIndex], this._cellObj);
                        if (sheet._isRowSelected && sheet.selectedRange[0] <= info.rowIndex && info.rowIndex <= sheet.selectedRange[2])
                            sheet._rowStyles[info.rowIndex] = $.extend(true, sheet._rowStyles[info.rowIndex], this._cellObj);
                        this._cellObj = null;
                        if (!ej.isNullOrUndefined(container.sheets[sheetIdx][info.rowIndex]))
                            cellObj = ej.isNullOrUndefined(container.sheets[sheetIdx][info.rowIndex][info.colIndex]) ? {} : container.sheets[sheetIdx][info.rowIndex][info.colIndex];
                        else
                            cellObj = {};
                        info.afterFormat = $.extend(true, {}, cellObj);
                        info.afterFormat.Oprtype = info.beforeFormat.Oprtype;
                        details["formtObj"] = formatObj;
                        info.aRowHeight = xlObj.model.allowResizing && xlObj.XLResize.getRowHeight(cellIdx.rowIndex);
                        selCells.push(info);
                        xlObj._trigger("cellFormatting", args);
                        if (xlObj.XLEdit.getPropertyValue(info.rowIndex, info.colIndex, 'value2'))
                            xlObj._textClip(info.rowIndex, info.colIndex, 'add');
                        if (maxc === info.colIndex)
                            xlObj._setRowHdrHeight(sheetIdx, info.rowIndex);
                        i++;
                    }
                    details.selectedCell = selCells;
                    details.range = sheet.selectedRange;
                    xlObj.XLScroll._getRowHeights(sheetIdx, cells[0].rowIndex);
                    if (isRfrshCmtPos && (!sheet._isImported || sheet._isLoaded) && xlObj.model.allowComments && !xlObj._isExport)
                        xlObj.XLComment._updateCmntArrowPos(null, sheetIdx);
                }
                xlObj.model.allowFormulaBar && xlObj.updateFormulaBar();
                if ("border" in formatObj && !xlObj._isMultiRange(range))
                    this.applyBorder(formatObj.border, range, details);
                else if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo && !xlObj._dupDetails && !xlObj._isSort && !xlObj._isExport) {
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            }
        },

        _getFormattedValue: function (rowIdx, colIdx, cellObj, formattedval) {
            var type, xlObj = this.XLObj, options = {};
            formattedval = ej.isNullOrUndefined(formattedval) ? "" : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx);
            if (ej.isNullOrUndefined(formattedval))
                formattedval = "";
            if (xlObj.isFormula(formattedval)) {
                formattedval = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "calcValue");
                cellObj.canUpdate = false;
            }
            if (["text", "general"].indexOf(cellObj.type) !== -1) {
                if (xlObj._isDateTime(formattedval)) {
                    type = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type");
                    formattedval = xlObj._dateToInt(formattedval, type === ej.Spreadsheet.CellType.Time);
                    cellObj.value = formattedval;
                }
                if (cellObj.type === ej.Spreadsheet.CellType.Text)
                    options.align = "";
                else if (xlObj.isNumber(formattedval) && xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "align") != "right")
                    options.align = ej.Spreadsheet.Align.Right;
                if ("align" in options) {
                    options.cellIdx = { rowIndex: rowIdx, colIndex: colIdx };
                    xlObj.XLEdit._refreshCellAlignment(options);
                }
            }
            else {
                if (xlObj._isDateTime(formattedval))
                    type = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type");
                formattedval = this._format(formattedval, { formatStr: cellObj.formatStr, type: cellObj.type, thousandSeparator: cellObj.thousandSeparator, decimalPlaces: cellObj.decimalPlaces, cellObj: cellObj, isTime: type === ej.Spreadsheet.CellType.Time }, { rowIndex: rowIdx, colIndex: colIdx });
            }
            return formattedval;
        },

        _format: function (value, formatObj) {
            var xlObj = this.XLObj, formatstr = formatObj.formatStr,
                temp = xlObj.isUndefined(value) ? "" : value, type = formatObj.type || "", ctype = ej.Spreadsheet.CellType,
                locale = xlObj.model.locale, prefix = ["."].indexOf(this._thousandSeparator) > -1 ? '\\' : "", regx = new RegExp(prefix + this._thousandSeparator, "g");
            value = temp.toString();
            xlObj.XLEdit._formatCellVal = null;
            switch (type) {
                case ctype.Accounting:
                    if (xlObj._isDateTime(temp)) {
                        temp = xlObj._dateToInt(temp);
                        xlObj.XLEdit._formatCellVal = temp;
                        if (this._cellObj && this._cellObj.canUpdate)
                            this._cellObj.value = temp;
                    }
                    if (xlObj.isNumber(temp))
                        temp = xlObj.toAccounting(formatstr, temp, locale);
                    break;
                case ctype.Currency:
                case ctype.Number:
                case ctype.Percentage:
                    if (xlObj._isDateTime(temp)) {
                        temp = xlObj._dateToInt(temp);
                        xlObj.XLEdit._formatCellVal = temp;
                        if (this._cellObj && this._cellObj.canUpdate)
                            this._cellObj.value = temp;
                    }
                    if (xlObj.isNumber(temp)) {
                        temp = xlObj.formatting(formatstr, temp, locale);
                        if (!formatObj.thousandSeparator && [ctype.Number, ctype.Percentage].indexOf(type) > -1 && this._thousandSeparator)
                            temp = temp.replace(regx, "");
                    }
                    break;
                case ctype.Scientific:
                    if (xlObj._isDateTime(temp)) {
                        temp = xlObj._dateToInt(temp);
                        xlObj.XLEdit._formatCellVal = temp;
                        if (this._cellObj && this._cellObj.canUpdate)
                            this._cellObj.value = temp;
                    }
                    if (xlObj.isNumber(temp))
                        temp = xlObj.toExponential(temp, formatObj.decimalPlaces);
                    break;
                case ctype.Fraction:
                    if (xlObj._isDateTime(temp)) {
                        temp = xlObj._dateToInt(temp);
                        xlObj.XLEdit._formatCellVal = temp;
                        if (this._cellObj && this._cellObj.canUpdate)
                            this._cellObj.value = temp;
                    }
                    if (xlObj.isNumber(temp)) {
                        temp = xlObj.toFraction(temp);
                        temp = "numerator" in temp ? temp.integer + " " + temp.numerator + "/" + temp.denominator : temp.integer;
                    }
                    break;
                case ctype.LongDate:
                case ctype.ShortDate:
                case ctype.Date:
                case ctype.Time:
                case ctype.DateTime:
                    if (typeof temp === "string")
                        temp = xlObj._isValidTime(temp) ? new Date("01/01/1990 " + temp) : new Date(temp);
                    if (!isNaN(ej.parseFloat(temp.toString(), 10, locale))) {
                        temp = xlObj.intToDate(temp);
                    }
                    else if (!xlObj._isDateTime(temp))
                        temp = ej.parseDate(temp);
                    if (temp && this._cellObj && this._cellObj.canUpdate) {
                        this._cellObj.value = temp;
                        xlObj.XLEdit._formatCellVal = temp;
                    }
                    if (xlObj._isDateTime(temp))
                        temp = xlObj.formatting(formatstr, temp, locale);
                    break;
                case ctype.String:
                    var pos = formatstr.indexOf("\\"), hasPos = formatstr.indexOf("#"), str = formatstr.split("\\").join("");
                    if (hasPos < 0)
                        hasPos = formatstr.indexOf("0");
                    if (pos < hasPos)
                        temp = str.substr(pos, str.length - 1) + value;
                    else if (pos > hasPos)
                        temp = value + str.substr(hasPos + 1, str.length);
                    break;
            }
            return ej.isNullOrUndefined(temp) ? value : temp;
        },

        createTable: function (tableObj, range) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowFormatAsTable || (!xlObj.model.allowSelection && ej.isNullOrUndefined(range) || (xlObj.getSheet()._isLoaded && xlObj.model.isReadOnly)))
                return;
            ej.isNullOrUndefined(tableObj.format) && (tableObj.format = this._getTableLayoutFromName(tableObj.formatName).format);
            ej.isNullOrUndefined(tableObj.showHeaderRow) && (tableObj.showHeaderRow = true);
            var details, evtArgs, pcells, trange, cname, tmpRange, tlength, tname = tableObj.name || "", filterHdr,
                sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), tmgr = sheet.tableManager, scell = sheet._startCell,
                ecell = sheet._endCell, str = "formatName", args = { sheetIndex: sheetIdx, tableStyle: tableObj, reqType: "format-table" },
                format = tableObj.format || this._getTableLayoutFromName(tableObj.formatName).format, obj = { format: format }, dupDetails = xlObj._dupDetails, fltrColElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_tsofiltercolumn");
            evtArgs = { range: ej.isNullOrUndefined(range) ? [scell.rowIndex, scell.colIndex, ecell.rowIndex, ecell.colIndex] : range, sheetIndex: args.sheetIndex, tableStyle: args.tableStyle, reqType: args.reqType }
            if (xlObj._trigActionBegin(evtArgs) || !format)
                return;
            tableObj = args.tableStyle;
            this._isFAT = true;
            range = xlObj._getRangeArgs(range, "object");
            if (xlObj._isUndoRedo)
                trange = $.merge([], range);
            else {
                trange = range ? range : sheet.selectedRange;
                for (var i = trange[0]; i <= trange[2]; i++) {
                    for (var j = trange[1]; j <= trange[3]; j++) {
                        filterHdr = xlObj.XLFilter._getFilterHeader(sheetIdx, i, j);
                        if (!ej.isNullOrUndefined(filterHdr) && filterHdr.status.indexOf("e-ssfilter") > -1) {
                            xlObj._showAlertDlg("Alert", "FilterAlert", "", 440);
                            return;
                        }
                    }
                }
            }
            if (tableObj.name && !xlObj.XLRibbon._validateNamedRange(tableObj.name, xlObj._getDollarAlphaRange(trange, true), "Workbook") && !xlObj.XLClipboard._isCut)
                return;
            cname = xlObj.XLEdit.getPropertyValue(trange[0], trange[1], "tableName") || "";
            if (!sheet._isImported || sheet._isLoaded) {
                pcells = xlObj.getRange(trange);
                details = { sheetIndex: sheetIdx, reqType: "format-table", beforeFormat: this.getHashCodeClassAsArray(), beforeRange: $.extend(true, [], trange), pcells: pcells, beforeRangeHeader: xlObj.getRangeData({ range: [trange[0], trange[1], trange[0], trange[3]] }) };
                tmpRange = tableObj.header ? [trange[0], trange[1], trange[2], trange[3]] : [trange[0], trange[1], trange[2] + 1, trange[3]];
                details.beforeRangeData = xlObj.getRangeData({ range: tmpRange }),
                    details.beforeMergeRange = xlObj.XLEdit._getPropWithCellIdx(tmpRange, "merge", sheetIdx);
                xlObj._dupDetails = true;
                if (details.beforeMergeRange.length)
                    xlObj.unmergeCells(xlObj._getAlphaRange(sheetIdx, tmpRange[0], tmpRange[1], tmpRange[2], tmpRange[3]));
                xlObj._dupDetails = false;
            }
            if (str in tableObj)
                obj[str] = tableObj.formatName;
            if ("showHeaderRow" in tableObj)
                obj["showHeaderRow"] = tableObj.showHeaderRow;
            if ("totalRow" in tableObj)
                obj["totalRow"] = tableObj.totalRow;
            if (!cname) {
                if (xlObj.XLClipboard._isCut) {
                    while (tableObj.tblId in tmgr)
                        tableObj.tblId++;
                    tlength = parseInt(tableObj.tblId);
                }
                else
                    tlength = xlObj.getObjectLength(tmgr) + 1;
                tname = tname.length ? tname : 'Table' + tlength;
                xlObj.model.sheets[sheetIdx]._header[tlength] = { header: tableObj.header };
                if (sheet._isLoaded) {
                    if (tableObj.header) {
                        if (range) {
                            sheet._startCell = { rowIndex: range[0], colIndex: range[1] };
                            sheet._endCell = { rowIndex: range[2], colIndex: range[3] };
                            xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                            if (xlObj.model.allowAutoFill && (!sheet._isImported || sheet._isLoaded))
                                xlObj.XLDragFill.positionAutoFillElement();
                        }
                        else
                            range = xlObj.swapRange([scell.rowIndex, scell.colIndex, ecell.rowIndex, ecell.colIndex]);
                        if (range[0] === range[2]) {
                            trange = range;
                            trange[2] = trange[2] + 1;
                        }
                    }
                    else {
                        if (xlObj._isUndoRedo)
                            trange = $.extend(true, [], range);
                        else {
                            trange = range ? range : xlObj.swapRange([scell.rowIndex, scell.colIndex, ecell.rowIndex, ecell.colIndex]);
                            range = trange;
                        }
                        if (xlObj.model.allowDragAndDrop)
                            xlObj.XLDragDrop._moveRangeTo(trange, [trange[0] + 1, trange[1], trange[2] + 1, trange[3]], ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "range", "format", "border", "borders", "comment", "hyperlink", "picture", "cFormatRule", "rule", "chart", "isLocked", "wrap", "formats", "tformats", "tborders", "tableName"]);
                        sheet._startCell = { rowIndex: trange[0], colIndex: trange[1] };
                        sheet._endCell = { rowIndex: trange[2] + 1, colIndex: trange[3] };
                        xlObj.XLSelection.selectRange(sheet._startCell, sheet._endCell);
                        if (xlObj.model.allowAutoFill && (!sheet._isImported || sheet._isLoaded))
                            xlObj.XLDragFill.positionAutoFillElement();
                        trange[2] = trange[2] + 1;
                    }
                }
                if ("dataSource" in tableObj)
                    xlObj._updateRangeValue(sheetIdx, { showHeader: "showHeader" in tableObj ? tableObj.showHeader : true, startCell: xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[0], range[1]), dataSource: tableObj.dataSource }, false);
                xlObj.updateUniqueData({ tableName: 'e-table' + tlength }, range);
                tmgr[tlength] = { name: tname, range: trange, showHeaderRow: tableObj.showHeaderRow };
                tableObj.fnNumber && (tmgr[tlength].fnNumber = tableObj.fnNumber);
                tmgr[tlength]["isFilter"] = tableObj.showHeaderRow;
                xlObj.XLRibbon._isDesignTab = true;
                xlObj._dupDetails = true;
                this._createTable(tlength, obj);
                tableObj.showHeaderRow && xlObj.model.allowFiltering && xlObj.XLFilter._filterTable(sheetIdx, tlength, { startCell: { rowIndex: range[0], colIndex: range[1] }, endCell: { rowIndex: range[2], colIndex: range[3] } });
                xlObj._dupDetails = false;
                this._updateTblStyleOptns(tlength, tableObj);
                if ((!sheet._isImported || sheet._isLoaded) && !tableObj.hideTab)
                    xlObj.XLRibbon._designTabUpdate(tlength, { rowIndex: range[0], colIndex: range[1] });
                if (xlObj.model.allowComments)
                    xlObj.XLComment._updateCmntArrowPos();
            }
            else {
                this._formatAsTableStyle = obj;
                xlObj._dupDetails = true;
                this._createTable(xlObj._getTableID(cname), obj);
                xlObj._dupDetails = false;
                xlObj._undoCollection.pop();
                xlObj._undoCollection.pop();
            }
            if (!sheet._isImported || sheet._isLoaded) {
                xlObj.XLRibbon._dirtySelect(xlObj.getRange(range));
                details.tableID = tlength;
                details.tableStyle = tableObj;
                details.afterRange = trange;
                xlObj._dupDetails = dupDetails;
                evtArgs = { pCells: details.pcells, reqType: details.reqType, sheetIndex: details.sheetIndex, tableID: details.tableID, tableStyle: details.tableStyle, range: range };
                if (!xlObj._isPaste && !xlObj._isUndoRedo && !xlObj._dupDetails && !xlObj._isExport) {
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(evtArgs);
                }
            }
            fltrColElem.length && fltrColElem.ejCheckBox("option", { checked: true });
            if (!this._isTableNameAdded)
                xlObj.XLRibbon.addNamedRange(tname, xlObj._getDollarAlphaRange(range, true), null, sheetIdx, "Workbook");
            this._updateTableFormula("addRange", tmgr[tlength], sheetIdx);
            var keys = xlObj.getObjectKeys(xlObj._tableRangesFormula[tname]), keysLen = keys.length;
            xlObj._tableFormulaCollection[tname] = [];
            for (j = 0; j < keysLen; j++)
                xlObj._tableFormulaCollection[tname].push({ "text": "[" + keys[j] + "]", "display": keys[j] });
            sheet._isLoaded && xlObj.XLSelection._refreshBorder();
            this._isFAT = false;
            return tableObj.name;
        },

        _createTable: function (tableId, options) {
            var cellIdx, i, j, k, l, style, arange, val, txt, len, eformat, canUpdate, args, dstyle, idx = 1, col = "Column", frmt = "format",
                bdr = "border", frmtName = "formatName", hdrLyt = "headerLayout", cntLyt = "contentLayout",
                cntBdr = "contentBorder", val2 = "value2", tblName = "tableName", hlk = "hyperlink", tableName = "e-table" + tableId,
                hasStyle = false, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx),
                table = sheet.tableManager[tableId], range = table.range, minr = range[0],
                minc = range[1], maxr = range[2], maxc = range[3], tempArr = [], pos = 2, tempVal;
            table[frmt] = options.format;
            if (options.formatName)
                table[frmtName] = options.formatName;
            if (table.showHeaderRow)
                options["showHeaderRow"] = table.showHeaderRow;
            this.removeStyle(range, { tableStyle: true, border: true, sheetIdx: sheetIdx });
            if (options.showHeaderRow && hdrLyt in options.format) {
                style = $.extend(true, {}, options.format.headerLayout);
                if (bdr in style) {
                    arange = xlObj._getProperAlphaRange(sheetIdx, minr, minc, minr, maxc);
                    xlObj._intrnlReq = true;
                    xlObj._isTableBrdrEnd = true;
                    this.applyBorder(style.border, arange);
                    xlObj._intrnlReq = false;
                    delete style.border;
                }
            }
            hasStyle = xlObj.getObjectLength(style) > 0;
            i = minr, j = minc, k = maxc;
            if (options.showHeaderRow) {
                while (j <= k) {
                    canUpdate = false, args = {};
                    cellIdx = { rowIndex: i, colIndex: j };
                    val = xlObj.XLEdit.getPropertyValue(i, j, val2) || "";
                    txt = col + idx;
                    if (xlObj.XLEdit.getPropertyValue(i, j, tblName, sheetIdx) !== tableName) {
                        args.tableName = tableName;
                        canUpdate = true;
                    }
                    if (!val.length) {
                        xlObj.XLEdit._updateCell(cellIdx, txt);
                        idx++;
                    }
                    else if (val.toLowerCase() === txt.toLowerCase())
                        idx++;
                    tempVal = val.toLowerCase();
                    if (val.length) {
                        if (tempArr.indexOf(tempVal) < 0)
                            tempArr.push(tempVal);
                        else {
                            val = val + pos;
                            pos++;
                            tempArr.push(val.toLowerCase());
                            xlObj.XLEdit._updateCell(cellIdx, val);
                        }
                    }
                    if (hasStyle) {
                        eformat = this._getExtendedFormat(cellIdx, style, this._isFAT);
                        args.format = this._createFormatClass(eformat.format);
                        args.tformats = style;
                        canUpdate = true;
                    }
                    if (canUpdate)
                        xlObj.XLEdit._updateDataContainer(cellIdx, { dataObj: args, sheetIdx: sheetIdx });
                    j++;
                }
            }
            if (xlObj.isImport || xlObj.model.isImport)
                maxr = options.totalRow ? (maxr + 1) : maxr;
            if (cntLyt in options.format) {
                len = options.format.contentLayout.length;
                idx = 0, i = options.showHeaderRow ? (minr + 1) : minr, j = maxr;
                while (i <= j) {
                    style = $.extend(true, {}, options.format.contentLayout[idx % len]);
                    if (bdr in style) {
                        arange = xlObj._getProperAlphaRange(sheetIdx, i, minc, i, maxc);
                        xlObj._intrnlReq = true;
                        xlObj._isTableBrdrEnd = true;
                        this.applyBorder(style.border, arange);
                        xlObj._intrnlReq = false;
                        delete style.border;
                    }
                    if (xlObj.getObjectLength(style)) {
                        k = minc, l = maxc;
                        while (k <= l) {
                            args = {}, cellIdx = { rowIndex: i, colIndex: k };
                            dstyle = $.extend({}, style);
                            if (xlObj.XLEdit.getPropertyValue(i, k, tblName, sheetIdx) !== tableName)
                                args.tableName = tableName;
                            if (dstyle.color && xlObj.XLEdit.getPropertyValue(i, k, hlk))
                                delete dstyle.color;
                            eformat = this._getExtendedFormat(cellIdx, dstyle, this._isFAT);
                            args.format = this._createFormatClass(eformat.format);
                            args.tformats = style;
                            xlObj.XLEdit._updateDataContainer(cellIdx, { dataObj: args, sheetIdx: sheetIdx });
                            k++;
                        }
                    }
                    i++;
                    idx++;
                }
            }
            if (cntBdr in options.format) {
                arange = xlObj._getProperAlphaRange(sheetIdx, minr + 1, minc, maxr, maxc);
                xlObj._intrnlReq = true;
                xlObj._isTableBrdrEnd = true;
                this.applyBorder($.extend({}, options.format.contentBorder.border), arange);
                xlObj._intrnlReq = false;
            }
            if (xlObj.model.scrollSettings.allowVirtualScrolling & xlObj._isTableBrdrEnd) {
                xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "vertical");
                xlObj._isTableBrdrEnd = false;
            }
            if (!xlObj.XLClipboard._isCut)
                xlObj._tableCnt++;
        },

        resizeTable: function (range, tableName, sheetIndex) {
            var xlObj = this.XLObj, tableId = xlObj._getTableID(null, tableName);
            xlObj.XLRibbon._resizeTable(range, tableId, sheetIndex)
        },
        firstColumn: function (tableName, sheetIdx) {
            var xlObj = this.XLObj, tid = xlObj._getTableID(null, tableName);
            xlObj.XLRibbon._isFirstColumn = true;
            xlObj.XLRibbon._firstLastColumn(tid, sheetIdx);
            xlObj.XLRibbon._isFirstColumn = false;
        },
        lastColumn: function (tableName, sheetIdx) {
            var xlObj = this.XLObj, tid = xlObj._getTableID(null, tableName);
            xlObj.XLRibbon._firstLastColumn(tid, sheetIdx);
        },
        totalRow: function (tableName, sheetIdx) {
            var xlObj = this.XLObj, tid = xlObj._getTableID(null, tableName);
            xlObj.XLRibbon._totalRow(tid, sheetIdx);
        },
        filterButton: function (tableName, sheetIdx, isFilter) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), tmgr = sheet.tableManager, tid = xlObj._getTableID(null, tableName);
            xlObj.XLFilter._clearFilterTableIcon(sheetIdx, tid);
            tmgr[tid]["isFilter"] = isFilter;
        },
        _updateTblStyleOptns: function (tdId, tbObj) {
            var tmgrDt, tRange, fstCol = "firstColumn", lstCol = "lastColumn", bold = "bold", normal = "normal", trow = "totalRow",
                isFilter = "isFilter", xlObj = this.XLObj, sheetIdx = xlObj._getSheetIndex(), sheet = xlObj.getSheet(sheetIdx), tmgr = sheet.tableManager;
            if (tdId in tmgr) {
                tmgrDt = tmgr[tdId];
                tRange = tmgrDt.range;
                tmgrDt[isFilter] = isFilter in tbObj ? tbObj.isFilter : ("showHeaderRow" in tbObj ? tbObj["showHeaderRow"] : true);
                if (xlObj.model.allowFiltering && !tmgrDt[isFilter])
                    xlObj.XLFilter._clearFilterTableIcon(sheetIdx, tdId);
                xlObj._dupDetails = true;
                if (fstCol in tbObj) {
                    tmgrDt[fstCol] = tbObj.firstColumn;
                    this.format({ style: { "font-weight": tmgrDt[fstCol] ? bold : normal } }, xlObj._getProperAlphaRange(sheetIdx, tRange[0] + 1, tRange[1], tRange[2], tRange[1]));
                }
                if (lstCol in tbObj) {
                    tmgrDt[lstCol] = tbObj.lastColumn;
                    this.format({ style: { "font-weight": tmgrDt[lstCol] ? bold : normal } }, xlObj._getProperAlphaRange(sheetIdx, tRange[0] + 1, tRange[3], tRange[2], tRange[3]));
                }
                xlObj._dupDetails = false
                if (trow in tbObj)
                    tmgrDt[trow] = tbObj.totalRow;
            }
        },

        removeTable: function (tableId) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowFormatAsTable || xlObj.model.isReadOnly)
                return;
            var cells, len, formats, tformats, borders, tborders, i = 0, sheetIdx = xlObj.getActiveSheetIndex(), tmgr = xlObj.getSheet(sheetIdx).tableManager, range = tmgr[tableId].range, name = tmgr[tableId].name, fltrColElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_tsofiltercolumn");
            this._updateTableFormula("removeTable", tmgr[tableId], sheetIdx);
            if (tableId in tmgr) {
                xlObj.clearRangeData(range, ["tableName"]);
                cells = xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
                len = cells.length;
                if (len) {
                    while (i < len) {
                        formats = xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "formats");
                        tformats = xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "tformats");
                        borders = xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "borders");
                        tborders = xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "tborders");
                        if (tformats) {
                            $.extend(tformats, formats);
                            xlObj.XLEdit._updateDataContainer(cells[i], { dataObj: { formats: tformats } });
                        }

                        if (tborders) {
                            $.extend(tborders, borders);
                            xlObj.XLEdit._updateDataContainer(cells[i], { dataObj: { borders: tborders } });
                        }
                        xlObj.XLEdit._clearDataContainer({ cellIdx: { rowIndex: cells[i].rowIndex, colIndex: cells[i].colIndex }, property: ["tformats", "tborders"] });
                        i++;
                    }
                }
                if (xlObj.model.allowFiltering && !xlObj._isFATResize)
                    xlObj.XLFilter._clearFilterTable(sheetIdx, parseInt(tableId));
                delete tmgr[tableId];
                delete xlObj.model.sheets[sheetIdx]._header[tableId];
                xlObj.XLRibbon.removeNamedRange(name);
                fltrColElem.length && fltrColElem.ejCheckBox("option", { checked: false });
                xlObj.XLRibbon._toggleDesignTab(xlObj.getActiveCell(sheetIdx));
            }
        },

        _renameTable: function (cname) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), tmgr = xlObj.getSheet(sheetIdx).tableManager, tid = xlObj._getTableID(cname), tname, trange, details, robj = $('#' + xlObj._id + '_Ribbon').data('ejRibbon'), newName;
            if (tid) {
                newName = document.getElementById(xlObj._id + '_Ribbon_Design_Properties_TableName') && document.getElementById(xlObj._id + '_Ribbon_Design_Properties_TableName').value;
                tname = tmgr[tid].name;
                if (tname != newName) {
                    trange = xlObj._getDollarAlphaRange(tmgr[tid].range, true);
                    if (xlObj.XLRibbon._validateNamedRange(newName, trange)) {
                        details = { sheetIndex: sheetIdx, reqType: "format-table", action: "renaming", range: trange, tableId: parseInt(tid), prevName: tname };
                        xlObj.XLRibbon.removeNamedRange(tname);
                        tmgr[tid].name = newName;
                        xlObj.XLRibbon.addNamedRange(tmgr[tid].name, trange, null, sheetIdx);
                        this._updateTableFormula("rename", tmgr[tid], sheetIdx, tname);
                        details.newName = tmgr[tid].name;
                        robj.showTab(xlObj._getLocStr('Design'));
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                }
            }
        },

        _getTableLayoutFromName: function (name) {
            if (!name)
                return;
            return this.XLObj._FATStyles[name];
        },

        _getTableIdxFromName: function (name) {
            var xlObj = this.XLObj, tmgr = xlObj.getSheet(xlObj.getActiveSheetIndex()).tableManager,
                len = xlObj.getObjectLength(tmgr);
            if (len) {
                while (len--) {
                    if (tmgr[len].name === name)
                        return len;
                }
            }
            return -1;
        },

        convertToRange: function (options) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            if (options.alert)
                xlObj._showAlertDlg("", "ConverToRangeAlert", "ConvertToRange", 498);
            else
                this._convertToRange(options);
        },

        _convertToRange: function (options) {
            var i, tableId, xlObj = this.XLObj, sheetIdx = options.sheetIdx || xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), tid, details,
                tmgr = xlObj.getSheet(sheetIdx).tableManager, tableRange = sheet.filterSettings.tableRange;
            tid = options.tableId || xlObj._getTableID(null, document.getElementById(xlObj._id + '_Ribbon_Design_Properties_TableName') && document.getElementById(xlObj._id + '_Ribbon_Design_Properties_TableName').value);
            for (i = 0; i < tableRange.length; i++)
                tableRange[i].tableID == tid && (tableId = i);
            if (xlObj.getObjectLength(tmgr))
                details = {
                    sheetIndex: sheetIdx, reqType: "format-table", action: "Design_Tools_ConvertToRange", beforeFormat: xlObj.XLFormat.getHashCodeClassAsArray(),
                    tableID: tid, name: tmgr[tid].name, format: tmgr[tid].format, formatName: tmgr[tid].formatName, tableRange: tableRange[tableId], beforeRange: tmgr[tid].range,
                    isFilter: tmgr[tid].isFilter, header: $.extend(true, [], sheet._header[tid]), firstColumn: tmgr[tid].firstColumn, lastColumn: tmgr[tid].lastColumn, totalRow: tmgr[tid].totalRow, fnNumber: tmgr[tid].fnNumber
                };
            if (xlObj.isNumber(tid))
                xlObj.XLFormat.removeTable(tid);
            xlObj.model.showRibbon && xlObj.XLRibbon._toggleDesignTab(xlObj.getActiveCell());
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        _calculateTotalRow: function (sheetIdx, tid, isChecked, isShift, isOk) {
            var i, xlObj = this.XLObj, cells, pCells = [], cCells = [], aRange, tRange, range, isString = false, rData, sheet = xlObj.getSheet(sheetIdx), tmgr = sheet.tableManager, insAlert, selCells = sheet._selectedCells,
                details, chkboxId = xlObj._id + "_Ribbon_Design_TableStyleOptions_TotalRow", startCell, endCell, isUndo = xlObj._isUndo, isUndoRedo = xlObj._isUndoRedo, isDupDetails = xlObj._dupDetails;
            tid = tid || parseInt(document.getElementById(xlObj._id + '_tableid').value);
            range = tmgr[tid].range;
            pCells.push(xlObj.getRangeData({ range: [range[2] + 1, range[1], range[2] + 1, range[3]] }))
            aRange = xlObj._getProperAlphaRange(sheetIdx, range[0] + 1, range[3], range[2], range[3]);
            cells = xlObj._getSelectedRange({ rowIndex: range[2] + 1, colIndex: range[1] }, { rowIndex: range[2] + 1, colIndex: range[3] });
            if (isChecked) {
                startCell = { rowIndex: range[2] + 1, colIndex: range[1] };
                endCell = { rowIndex: range[2] + 1, colIndex: range[3] };
                xlObj._dupDetails = xlObj._isTotalRow = true;
                xlObj._insRows = { startRow: startCell.rowIndex, endRow: endCell.rowIndex };
                xlObj._isUndo = false;
                if (!isOk) {
                    insAlert = xlObj.insertShiftBottom(startCell, endCell);
                    if (insAlert)
                        return;
                }
                xlObj._isUndo = isUndo;
                xlObj._isUndoRedo = isUndoRedo;
                xlObj._dupDetails = xlObj._isTotalRow = false;
                if (!xlObj._isFilterApplied || xlObj._insDelStatus == "insert") {
                    if (cells.length > 1)
                        xlObj.XLEdit._updateCellValue(cells[0], isChecked ? 'Total' : '');
                    if (!tmgr[tid]["fnNumber"] && isChecked) {
                        rData = ej.distinct(xlObj.getRangeData({ range: xlObj.getRangeIndices(aRange), valueOnly: true }));
                        rData = rData.filter(Boolean);
                        i = rData.length;
                        if (i) {
                            while (i--) {
                                if (!xlObj.isNumber(rData[i])) {
                                    isString = true;
                                    break;
                                }
                            }
                        }
                        else
                            isString = true;
                        tmgr[tid]["fnNumber"] = isString ? 103 : 109;
                    }
                    xlObj.XLEdit._updateCellValue(cells[cells.length - 1], isChecked ? '=SUBTOTAL(' + tmgr[tid]["fnNumber"] + ',' + aRange + ')' : '');
                    tmgr[tid].range[2] += 1;
                    xlObj._insDelStatus == "";
                }
            }
            else {
                startCell = { rowIndex: range[2], colIndex: range[1] };
                endCell = { rowIndex: range[2], colIndex: range[3] };
                xlObj._dupDetails = xlObj._isTotalRow = true;
                if (xlObj.model.allowFiltering)
                    xlObj.XLFilter._checkFilterApplied(sheetIdx, startCell.rowIndex, 1, startCell.colIndex, 1, "filter");
                xlObj._checkTableApplied(sheetIdx, startCell.rowIndex, 1, startCell.colIndex, 1, "shiftUp");
                if (xlObj._isFilterApplied || xlObj._isTableApplied) {
                    xlObj._intrnlReq = true;
                    xlObj._isUndo = false;
                    xlObj.deleteEntireRow(startCell.rowIndex, endCell.rowIndex);
                    xlObj._isUndo = isUndo;
                    xlObj._intrnlReq = false;
                    isShift = false;
                }
                else
                    xlObj._deleteShiftUp(sheetIdx, startCell, endCell, { startCol: startCell.colIndex, colCount: (endCell.colIndex - startCell.colIndex) + 1, startRow: startCell.rowIndex, rowCount: (endCell.rowIndex - startCell.rowIndex) + 1, status: "shiftUp" });
                xlObj._isTotalRow = false;
                tmgr[tid].range[2] -= 1;
            }
            xlObj._dupDetails = isDupDetails;
            isChecked ? tmgr[tid]["totalRow"] = true : "totalRow" in tmgr[tid] && delete tmgr[tid]["totalRow"];
            tRange = tmgr[tid].range;
            xlObj.XLFormat._createTable(tid, { format: tmgr[tid].format });
            this._updateTableFormula("totalRow", tmgr[tid], sheetIdx);
            cCells.push(xlObj.getRangeData({ range: [tRange[2] + 1, tRange[1], tRange[2] + 1, tRange[3]] }))
            details = { sheetIndex: sheetIdx, reqType: "format-table", action: "totalrow", range: aRange, check: isChecked, id: chkboxId, cell: cells, tmgr: tmgr, tableId: tid, pcells: pCells[0], curCells: cCells[0], fnNumber: tmgr[tid]["fnNumber"], isShift: isShift };
            if (isOk)
                xlObj._dupDetails = xlObj._isUndoRedo = false;
            if (!xlObj._dupDetails) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
            xlObj.performSelection({ rowIndex: selCells[0].rowIndex, colIndex: selCells[0].colIndex }, { rowIndex: selCells[selCells.length - 1].rowIndex, colIndex: selCells[selCells.length - 1].colIndex });
            xlObj._dupDetails = false;
        },

        _updateTotalRow: function (sheetIdx, tblId, fnNumber, range, isClear) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), tmgr = sheet.tableManager;
            tmgr[tblId].fnNumber = fnNumber;
            isClear && xlObj._clearFormula(range[2], range[3]);
            xlObj.XLEdit._updateCellValue({ rowIndex: range[2], colIndex: range[3] }, '=SUBTOTAL(' + tmgr[tblId].fnNumber + ',' + xlObj._getAlphaRange(sheetIdx, range[0] + 1, range[3], range[2] - 1, range[3]) + ')');
        },

        customFormatParser: function (input) {
            if (!this.XLObj.model.allowCellFormatting)
                return;
            var str, type, splitter, formatObj = {}, ctype = ej.Spreadsheet.CellType, pre = "{0:", suf = "}", n = "N",
                p = "P", d = ".", c = ",", z = "0";
            input = ej.isNullOrUndefined(input) ? "" : input.toString();
            if (Number(input) === 0) {
                if (input.indexOf(d) > -1) {
                    splitter = input.split(d);
                    str = pre + n + splitter[1].length + suf;
                }
                else
                    str = pre + "D" + input.length + suf;
                type = ctype.Number;
            }
            else if (!input.indexOf("#") && input.indexOf(c) > -1 && input.lastIndexOf(z) === input.length - 1) {
                if (input.indexOf(d) > -1) {
                    splitter = input.split(d);
                    str = pre + n + splitter[1].length + suf;
                }
                else
                    str = pre + n + z + suf;
                formatObj["thousandSeparator"] = true;
                type = ctype.Number;
            }
            else if (input.lastIndexOf("%") === input.length - 1 && Number(input.replace(/%/g, "")) === 0) {
                if (input.indexOf(d) > -1) {
                    splitter = input.split(d);
                    str = pre + p + --splitter[1].length + suf;
                }
                else
                    str = pre + p + z + suf;
                type = ctype.Percentage;
            }
            else if (/^[dMy/\-\s,]+$/.test(input)) {
                str = pre + input + suf;
                type = ctype.Date;
            }
            else if (/^[hmst:\s]+$/.test(input)) {
                str = pre + input + suf;
                type = ctype.Time;
            }
            else if (input.indexOf("\\") > -1) {
                formatObj["formatStr"] = input;
                formatObj["type"] = "string";
            }
            if (str) {
                formatObj["formatStr"] = str;
                formatObj["type"] = type;
            }
            return formatObj;
        },

        addCustomFormatSpecifier: function (name, formatSpecifier, type) {
            var i, cellTypes = ej.Spreadsheet.CellType, culture = ej.preferredCulture(this.XLObj.model.locale);
            if ([cellTypes.Date, cellTypes.DateTime, cellTypes.LongDate, cellTypes.ShortDate, cellTypes.Time].indexOf(type) > -1) {
                for (i in culture.calendar.patterns)
                    if (culture.calendar.patterns[i] == formatSpecifier)
                        return;
                if (!name)
                    name = "cDFrmt" + Object.keys(culture.calendar.patterns).length;
                culture.calendar.patterns[name] = formatSpecifier;
                ej.globalize._getDateParseRegExp(culture.calendar, formatSpecifier);
                this._customFormatSpecifierType[name] = type;
            }
        },

        addFontFamily: function (fontName) {
            var key, ddObj, ddDataSrc, selectedIdx, ddText = fontName, customFont = this._customFontFamily, xlObj = this.XLObj, fontVal = 49, tVal;
            fontName = fontName.toLowerCase();
            if (xlObj.isUndefined(customFont[fontName])) {
                for (key in customFont) {
                    tVal = parseInt(customFont[key]);
                    if (tVal > fontVal)
                        fontVal = tVal;
                }
                fontVal++;
                if (xlObj.model.showRibbon) {
                    ddObj = $("#" + xlObj._id + "_Ribbon_Home_Font_FontFamily").data("ejDropDownList");
                    ddDataSrc = $.extend(true, [], xlObj.XLRibbon._fontFamily);
                    ddDataSrc.push({ text: ddText, value: fontVal });
                    if (ddObj) {
                        selectedIdx = ddObj.model.selectedItemIndex;
                        ddObj.option({ dataSource: ddDataSrc });
                        ddObj._initValue = true;
                        ddObj.selectItemByIndex(selectedIdx);
                        ddObj._initValue = false;
                        xlObj.XLRibbon._fontFamily = ddDataSrc;
                    }
                }
                customFont[fontName] = fontVal + "";
                ej.Spreadsheet.FontFamily[fontName] = fontVal + "";
            }
        },

        removeFontFamily: function (fontName) {
            var i, ddObj, customFont = this._customFontFamily, xlObj = this.XLObj, ddDataSrc, selectedIdx;
            if (xlObj.model.showRibbon) {
                ddObj = $("#" + xlObj._id + "_Ribbon_Home_Font_FontFamily").data("ejDropDownList");
                ddDataSrc = $.extend(true, [], xlObj.XLRibbon._fontFamily);
                for (i = 0; i < ddDataSrc.length; i++) {
                    if (ddDataSrc[i]["text"] === fontName) {
                        ddDataSrc.splice(i, 1);
                        if (ddObj) {
                            selectedIdx = ddObj.model.selectedItemIndex;
                            ddObj.option({ dataSource: ddDataSrc });
                            ddObj._initValue = true;
                            ddObj.selectItemByIndex(selectedIdx);
                            ddObj._initValue = false;
                        }
                        xlObj.XLRibbon._fontFamily = ddDataSrc;
                        break;
                    }
                }
            }
            fontName = fontName.toLowerCase();
            if (!xlObj.isUndefined(customFont[fontName])) {
                delete customFont[fontName];
                if (!xlObj.isUndefined(ej.Spreadsheet.FontFamily[fontName]))
                    delete ej.Spreadsheet.FontFamily[fontName];
            }
        },

        applyBorder: function (options, range, details) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), args = { options: options, range: range, details: details, sheetIndex: sheetIdx, reqType: "cell-format", type: "actionBegin", action: "applyborder" };
            if (xlObj._trigActionBegin(args))
                return;
            if (!xlObj.model.allowCellFormatting || !xlObj.model.formatSettings.allowCellBorder || (sheet._isLoaded && xlObj.model.isReadOnly))
                return;
            range = xlObj._getRangeArgs(args.range, "object", sheetIdx);
            if (!sheet._isImported || sheet._isLoaded) {
                if (!details)
                    details = { sheetIndex: sheetIdx, reqType: "cell-format", process: "border", options: $.extend(true, {}, options) };
                details.range = range;
                details.beforeFormat = this.getHashCodeClassAsArray(range);
                details.property = options.property;
                details.prevHeight = [];
                details.newHeight = [];
                delete options.property;
            }
            if (xlObj.getObjectLength(options)) {
                if (options.isGridBorder)
                    this._applyAllBorderCss(options, range, details);
                else
                    this._applyBorderCss(options, range, details)
            }
            else
                this.removeStyle(range, { cellStyle: true, border: true, sheetIdx: sheetIdx });
            if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo) {
                xlObj._refreshRangeTRHght(sheetIdx, range);
                if (ej.isNullOrUndefined(options.tableID) && !this._dupDetails) {
                    details.afterFormat = this.getHashCodeClassAsArray(range);
                    if (!xlObj._intrnlReq) {
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                }
            }
        },

        updateDecimalPlaces: function (type, range) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowCellFormatting || !xlObj.model.formatSettings.allowDecimalPlaces || xlObj.model.isReadOnly)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), args = { range: range, type: type, sheetIndex: sheetIdx, reqType: "cell-format", type: "actionBegin", action: "decimal" };
            if (xlObj._trigActionBegin(args))
                return;
            var len, cell, temp, cells, rowIdx, colIdx, dataAttr, i = 0, obj = {}, cellObj,
                sheet = xlObj.getSheet(sheetIdx), details = { action: "decimal", reqType: "cell-format", sheetIndex: sheetIdx, oprType: "format" }, selCells = [];
            range = xlObj._getRangeArgs(args.range, "object");
            cells = xlObj._getSelectedCells(sheetIdx, range).selCells;
            len = cells.length;
            while (i < len) {
                rowIdx = cells[i].rowIndex; colIdx = cells[i].colIndex;
                dataAttr = xlObj.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], property:["type", "value", "value2", "calcValue", "decimalPlaces", "thousandSeparator", "formatStr"] })[0];
                if(xlObj.isFormula(dataAttr.value)) {
                    dataAttr["type"] = "general";
					dataAttr.value = dataAttr.calcValue;
                }
                cell = { rowIndex: rowIdx, colIndex: colIdx, afterFormat: {}, beforeFormat: {} };
                cellObj = xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx];
                $.extend(true, cell.beforeFormat, cellObj);
                if (xlObj.isNumber(dataAttr.value)) {
                    if (xlObj.isUndefined(dataAttr.decimalPlaces))
                        dataAttr.decimalPlaces = xlObj._decimalCnt(dataAttr.value);
                    obj["type"] = dataAttr.type === ej.Spreadsheet.CellType.General ? ej.Spreadsheet.CellType.Number : dataAttr.type;
                    obj["decimalPlaces"] = dataAttr.decimalPlaces = type === "DecreaseDecimal" ? (dataAttr.decimalPlaces > 0 ? dataAttr.decimalPlaces - 1 : dataAttr.decimalPlaces) : dataAttr.decimalPlaces + 1;
                    obj["formatStr"] = xlObj._getFormatString(obj.type, obj.decimalPlaces);
                    temp = this._format(dataAttr.value, { formatStr: obj.formatStr, type: obj.type, thousandSeparator: dataAttr.thousandSeparator, decimalPlaces: obj.decimalPlaces });
                    obj["value2"] = temp;
                    if (xlObj.XLResize && xlObj.XLResize._getContentWidth(colIdx, sheetIdx, 0, xlObj.getSheet(sheetIdx).usedRange.rowIndex) >= (sheet.columnsWidthCollection[colIdx] - 5)) {
                        xlObj._dupDetails = true;
                        xlObj.XLResize._fitWidth(colIdx);
                        xlObj._dupDetails = false;
                        xlObj.XLSelection.refreshSelection();
                        if (xlObj.model.allowAutoFill)
                            xlObj.XLDragFill.positionAutoFillElement();
                    }
                    xlObj.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: obj });
                    cell.beforeFormat.Oprtype = obj.type;
                }
                dataAttr = xlObj.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx] })[0];
                cellObj = xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx];
                $.extend(true, cell.afterFormat, cellObj);
                cell.afterFormat.Oprtype = cell.beforeFormat.Oprtype;
                selCells.push(cell);
                i++;
            }
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        getFormatClass: function (classname, isborder) {
            var str = isborder ? "e-border" : "e-format", regx = new RegExp('\\b' + str + '.*?\\b', 'g');
            return classname.indexOf(str) !== -1 ? classname.match(regx)[0] : "";
        },

        getHashCodeClassAsArray: function (range) {
            var cells, len, cname, i = 0, obj = { format: [] }, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), arr = ["topborder", "leftborder"];
            range = xlObj._toIntrnlRange(range, sheetIdx);
            range = range ? xlObj.swapRange(range) : xlObj.getSheet(sheetIdx).selectedRange;
            cells = xlObj.getRange(range), len = cells.length;
            while (i < len) {
                cname = cells[i].className;
                obj.format.push(this.getFormatClass(cname) + " " + this.getFormatClass(cname, true));
                i++;
            }
            i = 2;
            while (i--)
                obj[arr[i]] = this._getBorderArray(range, arr[i]);
            return obj;
        },

        _getBorderArray: function (range, position) {
            var length, i = 0, arr = [], xlObj = this.XLObj, str = "topborder", minindex = position === str ? range[0] - 1 : range[1] - 1, cells;
            if (minindex >= 0) {
                cells = position === str ? xlObj.getRange([range[0] - 1, range[1], range[0] - 1, range[3]]) : xlObj.getRange([range[0], range[1] - 1, range[2], range[1] - 1]);
                length = cells.length;
                while (i < length) {
                    arr.push(this.getFormatClass(cells[i].className, true));
                    i++;
                }
            }
            else {
                length = position === str ? (range[3] - range[1]) + 1 : (range[2] - range[0]) + 1;
                while (length--)
                    arr.push("");
            }
            return arr;
        },

        removeStyle: function (range, options) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            options = options || { cellStyle: true, tableStyle: true, format: true, border: true };
            var cells, len, idx, cellIdx, hcode, styles, cstyles, tstyles, hstyles, ncstyles, ntstyles, props, canRemove, canClear, i = 0, pos = this._borderPosition,
                sheetIdx = xlObj._getSheetIndex(options.sheetIdx), sheet = xlObj.getSheet(sheetIdx), curSheetIdx = xlObj.getActiveSheetIndex();
            range = xlObj._getRangeArgs(range, "object");
            cells = xlObj._getSelectedCells(sheetIdx, range).selCells;
            len = cells.length;
            if (options.sheetIdx && options.sheetIdx != curSheetIdx)
                xlObj.gotoPage(options.sheetIdx, false);
            while (i < len) {
                canRemove = false;
                cellIdx = cells[i];
                if (!options.skipHiddenRow || !xlObj._isHiddenRow(cellIdx.rowIndex, options.sheetIdx)) {
                    if (options.format) {
                        if (options.cellStyle && options.tableStyle)
                            xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["format", "formats", "tformats"], sheetIdx: options.sheetIdx });
                        else if ((options.cellStyle && xlObj._hasCellStyle(cellIdx.rowIndex, cellIdx.colIndex, options.sheetIdx) || (options.tableStyle && xlObj._isTableRange(cellIdx.rowIndex, cellIdx.colIndex, options.sheetIdx)))) {
                            props = [options.cellStyle ? "formats" : "tformats"];
                            styles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, options.cellStyle ? "tformats" : "formats", options.sheetIdx);
                            if (styles) {
                                hcode = this.getFormatHashCode(styles);
                                this._updateFormatClass(cellIdx, hcode);
                            }
                            else
                                props.push("format");
                            xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: props, sheetIdx: options.sheetIdx });
                        }
                    }
                    if (options.border) {
                        if (options.cellStyle && options.tableStyle) {
                            cstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                            tstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                            $.extend(tstyles, cstyles);
                            if (pos[0] in tstyles && cellIdx.rowIndex) {
                                idx = cellIdx.rowIndex - 1;
                                hcode = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                ncstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                                ntstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                                $.extend(ntstyles, ncstyles);
                                this._remStyle(idx, cellIdx.colIndex, ntstyles, hstyles, "bottom", "bottom", true);
                                canRemove = true;
                            }
                            if (pos[1] in tstyles) {
                                canClear = true;
                                idx = cellIdx.colIndex + 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                if (idx < sheet.colCount) {
                                    ncstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "borders", options.sheetIdx) || {};
                                    ntstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "tborders", options.sheetIdx) || {};
                                    $.extend(ntstyles, ncstyles);
                                    if (pos[3] in ntstyles) {
                                        if (hstyles.right != ntstyles.left) {
                                            hstyles.right = ntstyles.left;
                                            hcode = this._getBorderHashCode(hstyles);
                                            this._updateFormatClass(cellIdx, hcode, true);
                                        }
                                        canClear = false;
                                    }
                                }
                                if (canClear) {
                                    delete hstyles.right;
                                    if (xlObj.getObjectLength(hstyles)) {
                                        hcode = this._getBorderHashCode(hstyles);
                                        this._updateFormatClass(cellIdx, hcode, true);
                                    }
                                    else
                                        xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["border"] });
                                }
                                canRemove = true;
                            }
                            if (pos[2] in tstyles) {
                                canClear = true;
                                idx = cellIdx.rowIndex + 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                if (idx < sheet.rowCount) {
                                    ncstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                                    ntstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                                    $.extend(ntstyles, ncstyles);
                                    if (pos[0] in ntstyles) {
                                        if (hstyles.bottom != ntstyles.top) {
                                            hstyles.bottom = ntstyles.top;
                                            hcode = this._getBorderHashCode(hstyles);
                                            this._updateFormatClass(cellIdx, hcode, true);
                                        }
                                        canClear = false;
                                    }
                                }
                                if (canClear) {
                                    delete hstyles.bottom;
                                    if (xlObj.getObjectLength(hstyles)) {
                                        hcode = this._getBorderHashCode(hstyles);
                                        this._updateFormatClass(cellIdx, hcode, true);
                                    }
                                    else
                                        xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["border"] });
                                }
                                canRemove = true;
                            }
                            if (pos[3] in tstyles && cellIdx.colIndex) {
                                idx = cellIdx.colIndex - 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                ncstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "borders", options.sheetIdx) || {};
                                ntstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "tborders", options.sheetIdx) || {};
                                $.extend(ntstyles, ncstyles);
                                this._remStyle(cellIdx.rowIndex, idx, ntstyles, hstyles, "right", "right", true);
                                canRemove = true;
                            }
                            if (canRemove)
                                xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["borders", "tborders"] });
                        }
                        else if (options.cellStyle) {
                            cstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                            tstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                            if (pos[0] in cstyles && cellIdx.rowIndex) {
                                idx = cellIdx.rowIndex - 1;
                                hcode = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                ncstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                                ntstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                                $.extend(ntstyles, ncstyles);
                                if ("bottom" in ntstyles) {
                                    if (cstyles.bottom === hstyles.bottom) {
                                        if ("top" in tstyles) {
                                            hstyles.bottom = tstyles.top;
                                            hcode = this._getBorderHashCode(hstyles);
                                            this._updateFormatClass({ rowIndex: idx, colIndex: cellIdx.colIndex }, hcode, true);
                                        }
                                        else if (ntstyles.bottom != hstyles.bottom) {
                                            hstyles.bottom = ntstyles.bottom;
                                            hcode = this._getBorderHashCode(hstyles);
                                            this._updateFormatClass({ rowIndex: idx, colIndex: cellIdx.colIndex }, hcode, true);
                                        }
                                    }
                                }
                                else
                                    this._remStyle(idx, cellIdx.colIndex, ntstyles, hstyles, "top", "bottom");
                                canRemove = true;
                            }
                            if (pos[1] in cstyles) {
                                idx = cellIdx.colIndex + 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                if (idx < sheet.colCount) {
                                    ncstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "borders", options.sheetIdx) || {};
                                    ntstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "tborders", options.sheetIdx) || {};
                                    $.extend(ntstyles, ncstyles);
                                    if ("left" in ntstyles) {
                                        if (cstyles.right === hstyles.right) {
                                            if ("right" in tstyles) {
                                                hstyles.right = tstyles.right;
                                                hcode = this._getBorderHashCode(hstyles);
                                                this._updateFormatClass(cellIdx, hcode, true);
                                            }
                                            else if (ntstyles.left != hstyles.right) {
                                                hstyles.right = ntstyles.left;
                                                hcode = this._getBorderHashCode(hstyles);
                                                this._updateFormatClass(cellIdx, hcode, true);
                                            }
                                        }
                                    }
                                    else
                                        this._remStyle(cellIdx.rowIndex, cellIdx.colIndex, tstyles, hstyles, "right", "right");
                                }
                                else
                                    this._remStyle(cellIdx.rowIndex, cellIdx.colIndex, tstyles, hstyles, "right", "right");
                                canRemove = true;
                            }
                            if (pos[2] in cstyles) {
                                idx = cellIdx.rowIndex + 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                if (idx < sheet.rowCount) {
                                    ncstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                                    ntstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                                    $.extend(ntstyles, ncstyles);
                                    if ("top" in ntstyles) {
                                        if (cstyles.bottom === hstyles.bottom) {
                                            if ("bottom" in tstyles) {
                                                hstyles.bottom = tstyles.bottom;
                                                hcode = this._getBorderHashCode(hstyles);
                                                this._updateFormatClass(cellIdx, hcode, true);
                                            }
                                            else if (ntstyles.top != hstyles.bottom) {
                                                hstyles.bottom = ntstyles.top;
                                                hcode = this._getBorderHashCode(hstyles);
                                                this._updateFormatClass(cellIdx, hcode, true);
                                            }
                                        }
                                    }
                                    else
                                        this._remStyle(cellIdx.rowIndex, cellIdx.colIndex, tstyles, hstyles, "bottom", "bottom");
                                }
                                else
                                    this._remStyle(cellIdx.rowIndex, cellIdx.colIndex, tstyles, hstyles, "bottom", "bottom");
                                canRemove = true;
                            }
                            if (pos[3] in cstyles && cellIdx.colIndex) {
                                idx = cellIdx.colIndex - 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                ncstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "borders", options.sheetIdx) || {};
                                ntstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "tborders", options.sheetIdx) || {};
                                $.extend(ntstyles, ncstyles);
                                if ("right" in ntstyles) {
                                    if (cstyles.left === hstyles.right) {
                                        if ("left" in tstyles) {
                                            hstyles.right = tstyles.left;
                                            hcode = this._getBorderHashCode(hstyles);
                                            this._updateFormatClass({ rowIndex: cellIdx.rowIndex, colIndex: idx }, hcode, true);
                                        }
                                        else if (ntstyles.right != hstyles.right) {
                                            hstyles.right = ntstyles.right;
                                            hcode = this._getBorderHashCode(hstyles);
                                            this._updateFormatClass({ rowIndex: cellIdx.rowIndex, colIndex: idx }, hcode, true);
                                        }
                                    }
                                }
                                else
                                    this._remStyle(cellIdx.rowIndex, idx, tstyles, hstyles, "left", "right");
                                canRemove = true;
                            }
                            if (canRemove)
                                xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["borders"] });
                            if (xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "merge", sheetIdx))
                                xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["border"] });
                        }
                        else if (options.tableStyle) {
                            cstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                            tstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                            if ("top" in tstyles && !("top" in cstyles) && cellIdx.rowIndex) {
                                idx = cellIdx.rowIndex - 1;
                                hcode = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                ncstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                                ntstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                                $.extend(ntstyles, ncstyles);
                                this._remStyle(idx, cellIdx.colIndex, ntstyles, hstyles, "bottom", "bottom", true);
                                canRemove = true;
                            }
                            if ("right" in tstyles && !("right" in cstyles)) {
                                idx = cellIdx.colIndex + 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                if (idx < sheet.colCount) {
                                    ncstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "borders", options.sheetIdx) || {};
                                    ntstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "tborders", options.sheetIdx) || {};
                                    $.extend(ntstyles, ncstyles);
                                    this._remStyle(cellIdx.rowIndex, cellIdx.colIndex, ntstyles, hstyles, "left", "right", true);
                                }
                                else {
                                    delete hstyles.right;
                                    if (xlObj.getObjectLength(hstyles)) {
                                        hcode = this._getBorderHashCode(hstyles);
                                        this._updateFormatClass(cellIdx, hcode, true);
                                    }
                                    else
                                        xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["border"] });
                                }
                                canRemove = true;
                            }
                            if ("bottom" in tstyles && !("bottom" in cstyles)) {
                                idx = cellIdx.rowIndex + 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                if (idx < sheet.rowCount) {
                                    ncstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "borders", options.sheetIdx) || {};
                                    ntstyles = xlObj.XLEdit.getPropertyValue(idx, cellIdx.colIndex, "tborders", options.sheetIdx) || {};
                                    $.extend(ntstyles, ncstyles);
                                    this._remStyle(cellIdx.rowIndex, cellIdx.colIndex, ntstyles, hstyles, "top", "bottom", true);
                                }
                                else {
                                    delete hstyles.bottom;
                                    if (xlObj.getObjectLength(hstyles)) {
                                        hcode = this._getBorderHashCode(hstyles);
                                        this._updateFormatClass(cellIdx, hcode, true);
                                    }
                                    else
                                        xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["border"] });
                                }
                                canRemove = true;
                            }
                            if ("left" in tstyles && !("left" in cstyles) && cellIdx.colIndex) {
                                idx = cellIdx.colIndex - 1;
                                hcode = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "border", options.sheetIdx);
                                hstyles = this.getBorderFromHashCode(hcode);
                                ncstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "borders", options.sheetIdx) || {};
                                ntstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, idx, "tborders", options.sheetIdx) || {};
                                $.extend(ntstyles, ncstyles);
                                this._remStyle(cellIdx.rowIndex, idx, ntstyles, hstyles, "right", "right", true);
                                canRemove = true;
                            }
                            if (canRemove)
                                xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: ["tborders"] });
                        }
                    }
                }
                i++;
            }
            if (options.sheetIdx && options.sheetIdx != curSheetIdx)
                xlObj.gotoPage(curSheetIdx, false);
        },

        _remStyle: function (rowIdx, colIdx, ntstyles, hstyles, type1, type2, isCond) {
            var xlObj = this.XLObj;
            if (type1 in ntstyles) {
                if (!isCond || (ntstyles[type1] != hstyles[type2])) {
                    hstyles[type2] = ntstyles[type1];
                    this._updateFormatClass({ rowIndex: rowIdx, colIndex: colIdx }, this._getBorderHashCode(hstyles), true);
                }
            }
            else {
                delete hstyles[type2];
                if (xlObj.getObjectLength(hstyles))
                    this._updateFormatClass({ rowIndex: rowIdx, colIndex: colIdx }, this._getBorderHashCode(hstyles), true);
                else
                    xlObj.XLEdit._clearDataContainer({ cellIdx: { rowIndex: rowIdx, colIndex: colIdx }, property: ["border"] });
            }
        },

        _refreshStyles: function (range, type) {
            var styles, tstyles, cssClass, frmt = "format", bdr = "border", frmts = "formats", bdrs = "borders", tfrmts = "tformats", cellIdx,
                tbdrs = "tborders", isFormat = !type || type === frmt, isBorder = !type || type === bdr, xlObj = this.XLObj,
                cells = xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }),
                i = cells.length;
            while (i--) {
                cellIdx = cells[i];
                if (isFormat) {
                    styles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, frmts) || {};
                    tstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, tfrmts) || {};
                    $.extend(tstyles, styles);
                    if (xlObj.getObjectLength(tstyles)) {
                        cssClass = this._createFormatClass(tstyles);
                        this._updateFormatClass(cellIdx, cssClass, false);
                    }
                    else if (xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, frmt))
                        xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: [frmt] });
                }
                if (isBorder) {
                    styles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, bdrs) || {};
                    tstyles = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, tbdrs) || {};
                    $.extend(tstyles, styles);
                    if (xlObj.getObjectLength(tstyles)) {
                        cssClass = this._getBorderHashCode(tstyles);
                        this._updateFormatClass(cellIdx, cssClass, true);
                    }
                    else if (xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, bdr)) {
                        if (xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, bdr))
                            xlObj.XLEdit._clearDataContainer({ cellIdx: cellIdx, property: [bdr] });
                    }
                }
            }
        },

        updateFormat: function (formatobj, range) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var i, cells, pos = ["topborder", "leftborder"], arr = formatobj.format;
            range = xlObj._getRangeArgs(range, "object");
            cells = xlObj._getSelectedCells(xlObj.getActiveSheetIndex(), range).selCells;
            i = cells.length;
            while (i--) {
                arr[i] && this._createFormatClass(this.getFormatFromHashCode(arr[i]), arr[i]);
                this._updateHashCodeClass(cells[i], arr[i]);
            }
            i = 2;
            while (i--)
                this._updateBorderClass(range, formatobj[pos[i]], pos[i]);
        },

        _updateBorderClass: function (range, format, position) {
            var i, cells, xlObj = this.XLObj, str = "topborder", index = position === str ? range[0] - 1 : range[1] - 1;
            if (index >= 0) {
                cells = position === str ? xlObj._getSelectedRange({ rowIndex: range[0] - 1, colIndex: range[1] }, { rowIndex: range[0] - 1, colIndex: range[3] }) : xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] - 1 }, { rowIndex: range[2], colIndex: range[1] - 1 });
                i = cells.length;
                while (i--) {
                    this._createFormatClass({ border: this.getBorderFromHashCode(format[i]) }, format[i]);
                    this._updateFormatClass(cells[i], format[i], true);
                }
            }
        },

        updateUniqueFormat: function (formatcls, range, cellstyle) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), cells, formatclass, i, formtObj;
            range = xlObj._getRangeArgs(range, "object");
            cells = xlObj._getSelectedCells(sheetIdx, range).selCells;
            i = cells.length;
            while (i--) {
                formatclass = xlObj._isUndoRedo ? ((ej.isNullOrUndefined(formatcls[i]['format'])) ? "e-format" : formatcls[i]['format']) : formatcls;
                this._createFormatClass(formatclass.indexOf("e-format") > -1 ? this.getFormatFromHashCode(formatclass) : { border: this.getBorderFromHashCode(formatclass) }, formatclass, cellstyle);
                this._updateFormatClass(cells[i], formatclass);
                formtObj = this.getFormatFromHashCode(formatclass);
                xlObj.XLEdit._updateDataContainer(cells[i], { dataObj: { formats: formtObj }, sheetIdx: sheetIdx });
            }
            if (cellstyle == "Title" || cellstyle == "Heading 4" || !ej.isNullOrUndefined(formtObj["font-size"]))
                this._updateRowHeight(range, sheetIdx);
        },

        _updateRowHeight: function (range, sheetIdx) {
            var xlObj = this.XLObj; sheetIdx = sheetIdx ? sheetIdx : xlObj.getActiveSheetIndex();
            var sheet = xlObj.getSheet(sheetIdx), i, cells = xlObj._getSelectedCells(sheetIdx, range).selCells, cell, cHght;
            i = cells.length;
            while (i--) {
                if (xlObj._isRowViewable(sheetIdx, cells[i].rowIndex))
                    cell = xlObj.getCell(cells[i].rowIndex, cells[i].colIndex);
                cHght = xlObj._detailsFromGlobalSpan(cells[i].rowIndex, cells[i].colIndex, "height", xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "value2"), sheet.columnsWidthCollection[cells[i].colIndex]);
                if (cHght >= xlObj.model.rowHeight && !(xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "wrap") && xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "merge")) && !xlObj.XLEdit.getPropertyValue(cells[i].rowIndex, cells[i].colIndex, "mergeIdx")) {
                    xlObj._updateFormatColl(sheetIdx, cells[i].rowIndex, cells[i].colIndex, cHght);
                    cHght = xlObj._getFormattedHeight(sheetIdx, cells[i].rowIndex);
                    (cell) && cell.parent().outerHeight(cHght);
                    xlObj.XLEdit._updateDataContainer({ rowIndex: cells[i].rowIndex, colIndex: 0 }, { dataObj: { pHeight: sheet.rowsHeightCollection[cells[i].rowIndex], cHeight: cHght } });
                    sheet.rowsHeightCollection[cells[i].rowIndex] = cHght;
                    if (xlObj.model.allowFreezing)
                        xlObj.XLFreeze._refreshFRowResize(cells[i].rowIndex);
                }
            }
            xlObj._refreshRangeTRHght(sheetIdx, xlObj.swapRange(range));
        },

        _hasFormat: function (formatclass) {
            if (formatclass)
                return !ej.isNullOrUndefined(formatclass.match(/e-format|e-border/));
            return false;
        },

        getFormatHashCode: function (style) {
            var hcode, key, code = "", i = 0, bg = "background-color", clr = "color", ff = "font-family", fs = "font-size",
                arr = ["font-style", "text-decoration", "vertical-align", "text-align", "font-weight"], cnt = arr.length,
                prop = ["FontStyle", "TextDecoration", "VerticalAlign", "TextAlign", "FontWeight"], ti = "text-indent";
            code = bg in style ? style[bg].replace("#", "") : "6N";
            code += clr in style ? style[clr].replace("#", "") : "6N";
            if (ff in style) {
                hcode = this._getStyleCode("FontFamily", style[ff]);
                code += hcode || "2N";
            }
            else
                code += "2N";
            code += fs in style ? this._getFontCode(style[fs]) : "2N";
            while (i < cnt) {
                key = arr[i];
                if (key in style) {
                    hcode = this._getStyleCode(prop[i], style[key]);
                    code += hcode || "1N";
                }
                else
                    code += "1N";
                i++;
            }
            if (!code.endsWith("N"))
                code = code + "N";
            if (ti in style)
                code += style[ti].replace(/pt|-|\+/g, "");
            return "e-format" + code;
        },

        getFormatFromHashCode: function (code) {
            var i, j, pt, ff, FF, fs, arr, cnt, len, prop, temp, style = {}, str = "e-format";
            code = code || "";
            if (!code.indexOf(str)) {
                pt = "pt";
                i = j = 0;
                prop = ["FontStyle", "TextDecoration", "VerticalAlign", "TextAlign"];
                arr = ["font-style", "text-decoration", "vertical-align", "text-align"];
                cnt = arr.length;
                temp = code.replace(str, "").split("N");
                if (temp[i].length === 1)
                    i++;
                else {
                    style["background-color"] = "#" + temp[i].slice(0, 6);
                    temp[i] = temp[i].substr(6);
                }
                if (temp[i].length === 1)
                    i++;
                else {
                    style["color"] = "#" + temp[i].slice(0, 6);
                    temp[i] = temp[i].substr(6);
                }
                len = temp[i].length;
                if (len === 1)
                    i++;
                else {
                    FF = "FontFamily";
                    ff = "font-family";
                    if (len === 2) {
                        style[ff] = this._getCodeStyle(FF, temp[i].slice(0, 1) + "1N");
                        i++;
                    }
                    else {
                        style[ff] = this._getCodeStyle(FF, temp[i].slice(0, 2));
                        temp[i] = temp[i].substr(2);
                    }
                }
                len = temp[i].length;
                if (len === 1)
                    i++;
                else {
                    fs = "font-size";
                    if (len === 2) {
                        style[fs] = temp[i].slice(0, 1) + pt;
                        i++;
                    }
                    else {
                        style[fs] = temp[i].slice(0, 2) + pt;
                        temp[i] = temp[i].substr(2);
                    }
                }
                while (j < cnt) {
                    if (temp[i].length === 1)
                        i++;
                    else {
                        style[arr[j]] = this._getCodeStyle(prop[j], temp[i].slice(0, 1));
                        temp[i] = temp[i].substr(1);
                    }
                    j++;
                }
                if (temp[i] === "2")
                    style["font-weight"] = "bold";
                i++;
                if (temp[i])
                    style["text-indent"] = temp[i] + pt;
            }
            return style;
        },

        getBorderFromHashCode: function (code, isComplete) {
            var temp, i = 0, obj = {}, prefix = "e-border", bdrPos = this._borderPosition;
            code = code || "";
            if (!code.indexOf(prefix)) {
                temp = code.replace(prefix, "").split("N");
                if (temp[i].length > 1) {
                    obj[bdrPos[1]] = this._concatBorderCode(temp[i]);
                    temp[i] = temp[i].substr(8);
                }
                else
                    i += 3;
                if (temp[i].length > 1) {
                    obj[bdrPos[2]] = this._concatBorderCode(temp[i]);
                    if (isComplete)
                        temp[i] = temp[i].substr(8);
                }
                else
                    i += 3;
                if (isComplete) {
                    if (temp[i].length > 1) {
                        obj[bdrPos[0]] = this._concatBorderCode(temp[i]);
                        temp[i] = temp[i].substr(8);
                    }
                    else
                        i += 3;
                    if (temp[i].length > 1)
                        obj[bdrPos[3]] = this._concatBorderCode(temp[i]);
                }
            }
            return obj;
        },

        _formatPainter: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowFormatPainter || !xlObj.model.allowCellFormatting)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), i, j, cellIdx = 0, sheet = xlObj.getSheet(sheetIdx), startCell = sheet._startCell, endCell = sheet._endCell, args = { sheetIndex: sheetIdx, reqType: "format-painter", type: "actionBegin", action: "formatpainter" };
            if (xlObj._trigActionBegin(args))
                return;
            this._rowLength = (endCell.rowIndex - startCell.rowIndex) + 1, this._colLength = (endCell.colIndex - startCell.colIndex) + 1;
            var rowLen = this._rowLength, colLen = this._colLength, getData;
            getData = xlObj.getRangeData({ range: [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex], property: ["value", "value2", "type", "wrap", "formatStr", "thousandSeparator", "decimalPlaces", "cFormatRule", "hyperlink", "format", "cellType"] });
            this._getEformatClass = new Array(rowLen);
            for (i = 0; i < rowLen; i++) {
                this._getEformatClass[i] = new Array(colLen);
                for (j = 0; j < colLen; j++) {
                    this._getEformatClass[i][j] = { "rangeData": getData[cellIdx] };
                    cellIdx++;
                }
            }
            args = { sheetIndex: sheetIdx, reqType: "format-painter", type: "actionComplete", action: "formatpainter" };
            xlObj._trigActionComplete(args);
        },

        _fPMouseUp: function (e) {
            var obj, cell, cellType, evtArgs, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), sheetCont = xlObj._getContent(sheetIdx).find("div.e-content"),
                colcount = 0, cFRule, getCell = sheet._selectedCells, startCell = sheet._startCell, endCell = sheet._endCell,
                i, j, cellIndex = 0, cellCount = 0, cFormatStr, rule, cellAddr, len, k, rowlength = (endCell.rowIndex - startCell.rowIndex), collength = (endCell.colIndex - startCell.colIndex),
                alphaRange, xlEdit = xlObj.XLEdit, getType, selRange = sheet.selectedRange, rangeVal = xlObj.getRangeData({ range: selRange, property: ["wrap", "hyperlink", "value", "value2", "cFormatRule", "format", "cellType", "formats", "formatStr", "decimalPlaces", "thousandSeparator", "type"] }),
                details = { sheetIndex: sheetIdx, reqType: "format-painter", range: selRange, beforeData: rangeVal, bFormat: this.getHashCodeClassAsArray(selRange), unwrapCells: [], wrapCells: [] }, fpElem = xlObj.element.find("#" + xlObj._id + "_Ribbon_Home_Clipboard_FormatPainter");
            xlObj._dupDetails = true;
            for (i = 0; i <= rowlength; i++) {
                cellCount++;
                for (j = 0; j <= collength; j++) {
                    colcount++;
                    alphaRange = xlObj._getAlphaRange(sheetIdx, getCell[cellIndex].rowIndex, getCell[cellIndex].colIndex, getCell[cellIndex].rowIndex, getCell[cellIndex].colIndex);
                    cell = getCell[cellIndex];
                    getType = this._getEformatClass[i][j];
                    this.removeStyle([getCell[cellIndex].rowIndex, getCell[cellIndex].colIndex, getCell[cellIndex].rowIndex, getCell[cellIndex].colIndex], { cellStyle: true, tableStyle: false, format: true });
                    obj = { type: getType.rangeData.type ? getType.rangeData.type : "general" };
                    if (getType.rangeData.format)
                        obj.style = this.getFormatFromHashCode(getType.rangeData.format);
                    if (getType.rangeData.formatStr)
                        obj.formatStr = getType.rangeData.formatStr;
                    if (getType.rangeData.decimalPlaces)
                        obj.decimalPlaces = getType.rangeData.decimalPlaces;
                    if (getType.rangeData.thousandSeparator)
                        obj.thousandSeparator = getType.rangeData.thousandSeparator;
                    this.format(obj, alphaRange);
                    if (getType.rangeData.cellType) {
                        cellType = xlObj._dataContainer.sheetCellType[getType.rangeData.cellType];
                        cellType.text = '';
                        xlObj.XLCellType._renderControls(getCell[cellIndex].rowIndex, getCell[cellIndex].colIndex, sheetIdx, cellType);
                    }
                    if (!ej.isNullOrUndefined(getType.rangeData.cFormatRule)) {
                        for (k = 0, len = getType.rangeData.cFormatRule.length; k < len; k++) {
                            cFRule = getType.rangeData.cFormatRule[k];
                            rule = cFRule.split("_");
                            cellAddr = rule[5];
                            rule[rule.indexOf(cellAddr)] = alphaRange;
                            xlObj._dataContainer.cFormatRule = rule.join("_");
                            cFormatStr = xlObj._dataContainer.cFormatRule.split("_");
                            xlObj.XLCFormat._cFormat(cFormatStr[0], cFormatStr[2], cFormatStr[3], cFormatStr[4], cFormatStr[5]);
                        }
                    }
                    if (rangeVal[cellIndex].wrap && !getType.rangeData.wrap) {
                        xlObj.setWrapText("unwrap", alphaRange);
                        details.wrapCells.push({ rowIndex: getCell[cellIndex].rowIndex, colIndex: getCell[cellIndex].colIndex });
                    }
                    else if (!rangeVal[cellIndex].wrap && getType.rangeData.wrap) {
                        xlObj.setWrapText("wrap", alphaRange);
                        details.unwrapCells.push({ rowIndex: getCell[cellIndex].rowIndex, colIndex: getCell[cellIndex].colIndex });
                    }
                    if (getType.rangeData.hyperlink && !rangeVal[cellIndex].hyperlink)
                        this.format({ style: { "text-decoration": "underline", "color": xlObj._hlColor } }, alphaRange);
                    else if (!getType.rangeData.hyperlink && rangeVal[cellIndex].hyperlink) {
                        this.format({ style: { "text-decoration": "none" } }, alphaRange);
                        xlObj.addClass(xlObj.getCell(cell.rowIndex, cell.colIndex, sheetIdx).find("a"), xlEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "format", sheetIdx));
                    }
                    //if (i === 0) {    // border not supported in formatpainter
                    //    startCell.rowIndex > 0 && this._updateFormatClass(xlObj.getCell(startCell.rowIndex - 1, startCell.colIndex + (colcount - 1), sheetIdx)[0], this._getFormat.topborder[topborder]);
                    //    topborder++;
                    //    (this._getFormat.topborder.length === topborder) && (topborder = 0);
                    //}
                    //if (j === 0) {
                    //    startCell.colIndex > 0 && this._updateFormatClass(xlObj.getCell(startCell.rowIndex + (cellCount - 1), startCell.colIndex - 1, sheetIdx)[0], this._getFormat.leftborder[leftborder]);
                    //    leftborder++;
                    //    (this._getFormat.topborder.length === leftborder) && (leftborder = 0);
                    //}
                    cellIndex++;
                    if (colcount === collength + 1) {
                        colcount = 0;
                        break;
                    }
                    (this._colLength === j + 1) && (j = -1);
                }
                if (cellCount === rowlength + 1)
                    break;
                (this._rowLength === i + 1) && (i = -1);
            }
            this._formatEnable = false;
            sheetCont.addClass("e-ss-cursor");
            sheetCont.removeClass("e-ss-fpcursor");
            fpElem.length && fpElem.ejToggleButton("option", { toggleState: false });
            xlObj._dupDetails = false;
            details["afterData"] = xlObj.getRangeData({ range: selRange, property: ["wrap", "hyperlink", "value", "value2", "cFormatRule", "format", "cellType", "formats", "formatStr", "decimalPlaces", "thousandSeparator", "type"] });
            details.aFormat = this.getHashCodeClassAsArray(selRange);
            xlObj.XLSelection.refreshSelection();
            xlObj.XLDragFill && xlObj.XLDragFill.positionAutoFillElement();
            evtArgs = { sheetIndex: details.sheetIndex, currData: details["afterData"], currFormat: details.aFormat, reqType: details.reqType, range: details.range, prevData: details.beforeData, prevFormat: details.bFormat, unwrapCells: details.unwrapCells, wrapCells: details.wrapCells };
            if (!xlObj._isUndoRedo) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(evtArgs);
            }
        },

        _getFormatObj: function (obj) {
            if ("type" in obj || "formatStr" in obj) {
                var format = {}, sep = "thousandSeparator";
                format["formatStr"] = "formatStr" in obj ? obj.formatStr : this.XLObj._getFormatString(obj.type, obj.decimalPlaces);
                format["decimalPlaces"] = "decimalPlaces" in obj ? obj.decimalPlaces : ["currency", "accounting", "number"].indexOf(obj.type) !== -1 ? parseInt(format.formatStr.replace(/{0:|[A-Z]|}/g, "")) : 0;
                if (sep in obj)
                    format[sep] = obj[sep];
                else if (obj.type === "number")
                    format[sep] = true;
                obj["format"] = format;
            }
            if ("style" in obj && obj.style.border) {
                obj["border"] = obj.style.border;
                delete obj.style.border;
                if (!this.XLObj.getObjectLength(obj.style))
                    delete obj.style;
            }
            return obj;
        },

        _createFormatClass: function (args, hashcode, isCellStyle) {
            var properties, container = this.XLObj._dataContainer.hashCode;
            hashcode = hashcode || this.getFormatHashCode(args);
            if (container.indexOf(hashcode) !== -1 && !isCellStyle)
                return hashcode;
            properties = this._getCssPropertyAsString(args);
            this._writeCssRules(hashcode, properties, isCellStyle);
            (container.indexOf(hashcode) === -1) && container.push(hashcode);
            return hashcode;
        },

        _writeCssRules: function (hashcode, rules, isCellStyle, isCellType) {
            var stag = document.getElementById(this.XLObj._id + "_sscustomformat"), prop = ".e-js.e-spreadsheet .e-spreadsheetmainpanel ." + hashcode + " {" + rules + "}";
            !isCellType && (stag.styleSheet ? stag.styleSheet.cssText += prop : stag.appendChild(document.createTextNode(prop)));
            if (isCellStyle) {
                prop = prop.replace(".e-spreadsheetmainpanel ", "");
                stag.styleSheet ? stag.styleSheet.cssText += prop : stag.appendChild(document.createTextNode(prop));
            }
        },

        _getCssPropertyAsString: function (args) {
            var str = "", prop, j, k;
            if ("border" in args) {
                prop = args.border;
                for (j in prop)
                    args["border-" + j] = prop[j];
                delete args.border;
            }
            for (k in args)
                str = str + (k + ":" + args[k] + ";");
            return str;
        },

        _splitBorderCode: function (code) {
            code = code.split(" ");
            return code[0].replace("px", "") + this._getStyleCode("BorderStyle", code[1]) + code[2].replace("#", "");
        },

        _concatBorderCode: function (code) {
            return code.substr(0, 1) + "px " + this._getCodeStyle("BorderStyle", code.substr(1, 1)) + " #" + code.substr(2, 6);
        },

        _getCodeStyle: function (obj, value) {
            obj = ej.Spreadsheet[obj];
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    if (obj[prop] === value)
                        return prop;
                }
            }
            return "";
        },

        _getStyleCode: function (prop, val) {
            val = val || "";
            return ej.Spreadsheet[prop][val.toLowerCase()];
        },

        _getFontCode: function (args) {
            var temp = args.replace(/pt|-|\+/g, "");
            return temp.length === 2 ? temp : (temp.length === 1 ? temp + "1N" : "2N");
        },

        _getExtendedFormat: function (cellIdx, style, isTable) {
            var format = this.XLObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "formats") || {};
            if (isTable) {
                $.extend(style, format);
                return { format: style };
            }
            if (format["text-indent"] && style["text-align"]) {
                delete format["text-indent"];
                delete format["text-align"];
                $.extend(style, format);
                return { format: style };
            }
            else {
                $.extend(format, style);
                return { format: format };
            }
        },

        _updateHashCodeClass: function (cellIdx, cssclass) {
            var format, border, xlObj = this.XLObj, frmt = "e-format", bdr = "e-border", obj = {},
                fregx = xlObj._formatRegx, bregx = xlObj._borderRegx;
            if (cssclass) {
                format = cssclass.indexOf(frmt) > -1;
                border = cssclass.indexOf(bdr) > -1;
                if (format)
                    obj.format = cssclass.match(fregx)[0];
                if (border)
                    obj.border = cssclass.match(bregx)[0];
                if (format || border)
                    xlObj.XLEdit._updateDataContainer({ rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex }, { dataObj: obj });
            }
        },

        _updateFormatClass: function (cellIdx, cssclass, isborder) {
            var format = "e-format", border = "e-border";
            if (cssclass && (cssclass.indexOf(format) > -1 || cssclass.indexOf(border) > -1))
                this.XLObj.XLEdit._updateDataContainer(cellIdx, { dataObj: isborder ? { border: cssclass } : { format: cssclass } });
        },

        _applyBorderCss: function (options, range, details) {
            var bdrpos = this._borderPosition, top = bdrpos[0], rgt = bdrpos[1], btm = bdrpos[2], lft = bdrpos[3],
                minr = range[0], minc = range[1], maxr = range[2], maxc = range[3];
            if (top in options) {
                if (minr)
                    this._updateBorder([minr - 1, minc, minr - 1, maxc], options, btm, true, details);
                else
                    this._updateBorderObj([minr, minc, minr, maxc], options, top);
            }
            if (rgt in options)
                this._updateBorder([minr, maxc, maxr, maxc], options, rgt, "", details);
            if (btm in options)
                this._updateBorder([maxr, minc, maxr, maxc], options, btm, "", details);
            if (lft in options) {
                if (minc)
                    this._updateBorder([minr, minc - 1, maxr, minc - 1], options, rgt, true, details);
                else
                    this._updateBorderObj([minr, minc, maxr, minc], options, lft);
            }
        },

        _applyAllBorderCss: function (options, range, details) {
            var right = this._borderPosition[1], btm = this._borderPosition[2], minr = range[0], minc = range[1],
                maxr = range[2], maxc = range[3];
            this._updateBorder(range, options, right + " " + btm, "", details);
            if (minr)
                this._updateBorder([minr - 1, minc, minr - 1, maxc], options, btm, true, details);
            if (minc)
                this._updateBorder([minr, minc - 1, maxr, minc - 1], options, right, true, details);
        },

        _updateBorderObj: function (range, options, props) {
            var k, l, pBdr, cellIdx, i = range[0], j = range[2];
            while (i <= j) {
                k = range[1], l = range[3];
                while (k <= l) {
                    cellIdx = { rowIndex: i, colIndex: k };
                    pBdr = this._extendBorderObj(cellIdx, this._parseBorder(options, props).border, this._isFAT);
                    this.XLObj.XLEdit._updateDataContainer(cellIdx, { dataObj: this._isFAT ? { tborders: pBdr } : { borders: pBdr } });
                    k++;
                }
                i++;
            }
        },

        _updateBorder: function (range, options, props, isDuplicate, details) {
            var k, l, rowIdx, colIdx, hColIdx, hRowIdx, cellIdx, prevIdx, sameRow, hCode, extBdr, pextBdr, bdrObj, pbdrObj, canUpdt = false, isTop = false,
                bdrPos = this._borderPosition, i = range[0], j = range[2], isGridBdr = options.isGridBorder, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), rangeData = xlObj.getRangeData({ range: range, property: ["merge", "isMHide", "mergeIdx"] }), cells = 0; // pextbdr - previous cell extended border
            delete options.isGridBorder;
            while (i <= j) {
                k = range[1], l = range[3];
                while (k <= l) {
                    cellIdx = { rowIndex: i, colIndex: k };
                    rowIdx = i;
                    colIdx = k;
                    if (isDuplicate) {
                        isTop = props === bdrPos[2];
                        if (isTop)
                            rowIdx++;
                        else
                            colIdx++;
                        extBdr = this._parseBorder(options, isTop ? bdrPos[0] : bdrPos[3]).border;
                    }
                    else
                        extBdr = this._parseBorder(options, props).border;
                    if (!isGridBdr) {
                        if (isDuplicate) {
                            prevIdx = { rowIndex: rowIdx, colIndex: colIdx };
                            pextBdr = this._extendBorderObj(prevIdx, extBdr, this._isFAT);
                            xlObj.XLEdit._updateDataContainer(prevIdx, { dataObj: this._isFAT ? { tborders: pextBdr } : { borders: pextBdr }, skipCell: options.skipCell });
                        }
                        else {
                            pextBdr = this._extendBorderObj(cellIdx, this._parseBorder(options, props).border, this._isFAT);
                            canUpdt = true;
                        }
                    }
                    else if (!isDuplicate) {
                        pextBdr = this._extendBorderObj(cellIdx, options, this._isFAT);
                        canUpdt = true;
                    }
                    if (canUpdt)
                        xlObj.XLEdit._updateDataContainer(cellIdx, { dataObj: this._isFAT ? { tborders: pextBdr } : { borders: pextBdr }, skipCell: options.skipCell });
                    if (!(isDuplicate && xlObj.hasSpan(cellIdx))) {
                        hColIdx = cellIdx.colIndex;
                        if (props === bdrPos[1] && isDuplicate && hColIdx) {
                            while (hColIdx) {
                                if (!xlObj.XLEdit.getPropertyValue(0, hColIdx, "isCHide"))
                                    break;
                                hColIdx--;
                            }
                        }
                        hRowIdx = cellIdx.rowIndex;
                        if (props === bdrPos[2] && isDuplicate && hRowIdx) {
                            while (hRowIdx) {
                                if (!xlObj.XLEdit.getPropertyValue(hRowIdx, 0, "isRHide"))
                                    break;
                                hRowIdx--;
                            }
                        }
                        pbdrObj = xlObj.XLEdit.getPropertyValue(hRowIdx, hColIdx, "border");
                        if (pbdrObj)
                            pbdrObj = this.getBorderFromHashCode(pbdrObj);
                        else
                            pbdrObj = xlObj.XLEdit.getPropertyValue(hRowIdx, hColIdx, "borders") || {};
                        if (isDuplicate) {
                            pextBdr = {};
                            if (bdrPos[1] in pbdrObj)
                                pextBdr[bdrPos[3]] = pbdrObj[bdrPos[1]];
                            if (bdrPos[2] in pbdrObj)
                                pextBdr[bdrPos[0]] = pbdrObj[bdrPos[2]];
                            extBdr = this._isFAT ? $.extend(extBdr, pextBdr) : $.extend(pextBdr, extBdr);
                        }
                        else
                            extBdr = this._isFAT ? $.extend(extBdr, pbdrObj) : $.extend(pbdrObj, extBdr);
                        bdrObj = this._parseBorder(extBdr, bdrPos[1] + " " + bdrPos[2], isDuplicate);
                        hCode = this._getBorderHashCode(bdrObj.border);
                        this._createFormatClass(bdrObj, hCode);
                        if (rangeData[cells]["isMHide"])
                            this._updateFormatClass({ rowIndex: rangeData[cells]["mergeIdx"].rowIndex, colIndex: rangeData[cells]["mergeIdx"].colIndex }, hCode, true);
                        this._updateFormatClass({ rowIndex: hRowIdx, colIndex: hColIdx }, hCode, true);
                        if ((xlObj.getObjectKeys(bdrObj.border).indexOf("bottom") > -1 && bdrObj.border.bottom.indexOf("double") > -1 || (!ej.isNullOrUndefined(bdrObj["border-bottom"]) && bdrObj["border-bottom"].indexOf("double") > -1)) && sameRow != hRowIdx) {
                            var cHght = Math.round(xlObj._detailsFromGlobalSpan(hRowIdx, hColIdx, "height", xlObj.XLEdit.getPropertyValue(hRowIdx, hColIdx, "value2"), sheet.columnsWidthCollection[hColIdx]));
                            if (cHght >= sheet.rowsHeightCollection[hRowIdx]) {
                                if (!xlObj._isUndoRedo && (!sheet._isImported || sheet._isLoaded))
                                    details.prevHeight.push([hRowIdx, sheet.rowsHeightCollection[hRowIdx]]);
                                xlObj._dupDetails = true;
                                xlObj.XLResize.setRowHeight(hRowIdx, cHght + 3);
                                xlObj._dupDetails = false;
                                sameRow = hRowIdx;
                                sheet.rowsHeightCollection[hRowIdx] = cHght + 3;
                                if (!xlObj._isUndoRedo && (!sheet._isImported || sheet._isLoaded))
                                    details.newHeight.push([hRowIdx, cHght + 3]);
                            }
                        }
                    }
                    k++;
                    cells++;
                }
                i++;
            }
        },

        _extendBorderObj: function (cellIdx, options, isTable) {
            var xlObj = this.XLObj, bdrObj = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, isTable ? "tborders" : "borders") || {};
            $.extend(bdrObj, options);
            return bdrObj;
        },

        _getBorderHashCode: function (args, isComplete) {
            var code = "", def = "1N1N6N", bdrPos = this._borderPosition, top = bdrPos[0], rgt = bdrPos[1], btm = bdrPos[2], lft = bdrPos[3];
            code = rgt in args ? this._splitBorderCode(args[rgt]) : def;
            code += btm in args ? this._splitBorderCode(args[btm]) : def;
            if (isComplete) {
                code += top in args ? this._splitBorderCode(args[top]) : def;
                code += lft in args ? this._splitBorderCode(args[lft]) : def;
            }
            return "e-border" + code;
        },

        _parseBorder: function (options, props, isDuplicate) {
            var i, key, prop, value, obj = { border: {} }, bdrPos = this._borderPosition;
            props = props.split(" ");
            i = props.length;
            while (i--) {
                prop = key = props[i];
                if (isDuplicate)
                    prop = key === bdrPos[1] ? bdrPos[3] : bdrPos[0];
                value = options[prop];
                if (value)
                    obj.border[key] = value;
            }
            return obj;
        },

        _refreshTableRowCol: function (options) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), tableMngr = sheet.tableManager, curTable = tableMngr[options.tid];
            if (curTable) {
                if (options.isInsertBefore) {
                    if (options.pos === "row") {
                        curTable.range[0] += options.cnt;
                        curTable.range[2] += options.cnt;
                    }
                    else {
                        curTable.range[1] += options.cnt;
                        curTable.range[3] += options.cnt;
                    }
                }
                else {
                    if (options.pos === "row")
                        curTable.range[2] = curTable.range[2] + options.cnt;
                    else
                        curTable.range[3] = curTable.range[3] + options.cnt;
                    xlObj._dupDetails = true;
                    xlObj.XLFormat._createTable(options.tid, { format: curTable.format });
                    this._updateTableFormula("updateRange", curTable, sheetIdx)
                    xlObj._dupDetails = false;
                }
            }

        },

        _refreshHiddenBorder: function (start, end, isRow, hide) {
            var i, j, k, l, m, n, o, pRoC, eRoC, hCode, brdr, isHide, cStyle, dupBrdr, pCelBrdr, sCelBrdr, pTblBrdr, sTblBrdr, eCelBrdr, eTblBrdr, xlEdit = this.XLObj.XLEdit, uIdx = this.XLObj.getSheet().usedRange;
            if (isRow) {
                brdr = "bottom";
                dupBrdr = "top";
                isHide = "isRHide";
                uIdx = uIdx.colIndex;
            }
            else {
                brdr = "right";
                dupBrdr = "left";
                isHide = "isCHide";
                uIdx = uIdx.rowIndex;
            }
            if (hide) {
                pRoC = start, eRoC = end;
                while (eRoC++) {
                    l = isRow ? eRoC : 0;
                    m = isRow ? 0 : eRoC;
                    if (!xlEdit.getPropertyValue(l, m, isHide))
                        break;
                }
                while (pRoC) {
                    l = isRow ? pRoC : 0;
                    m = isRow ? 0 : pRoC;
                    if (!xlEdit.getPropertyValue(l, m, isHide))
                        break;
                    pRoC--;
                }
                for (i = 0; i <= uIdx; i++) {
                    if (isRow) {
                        l = pRoC;
                        j = n = start;
                        k = m = o = i;
                    }
                    else {
                        m = pRoC;
                        j = l = n = i;
                        k = o = start;
                    }
                    if (xlEdit.getPropertyValue(j, k, "isMHide")) {
                        j = xlEdit.getPropertyValue(j, k, "mergeIdx");
                        k = j.colIndex;
                        j = j.rowIndex;
                    }
                    pCelBrdr = xlEdit.getPropertyValue(l, m, "borders");
                    sCelBrdr = xlEdit.getPropertyValue(j, k, "borders");
                    pTblBrdr = xlEdit.getPropertyValue(l, m, "tborders");
                    sTblBrdr = xlEdit.getPropertyValue(n, o, "tborders");
                    if ((!pCelBrdr || (pCelBrdr && !pCelBrdr[brdr])) && ((sCelBrdr && sCelBrdr[dupBrdr]) || ((!pTblBrdr || (pTblBrdr && !pTblBrdr[brdr])) && sTblBrdr && sTblBrdr[dupBrdr]))) {
                        hCode = xlEdit.getPropertyValue(l, m, "border");
                        cStyle = this.getBorderFromHashCode(hCode);
                        delete cStyle[brdr];
                        if (pTblBrdr && pTblBrdr[brdr])
                            cStyle[brdr] = pTblBrdr[brdr];
                        if (cStyle.bottom || cStyle.right) {
                            hCode = this._getBorderHashCode(cStyle);
                            xlEdit._updateDataContainer({ rowIndex: l, colIndex: m }, { dataObj: { border: hCode } });
                        }
                        else
                            xlEdit._clearDataContainer({ cellIdx: { rowIndex: l, colIndex: m }, property: ["border"] });
                    }
                    if (isRow) {
                        o = pRoC;
                        j = l = eRoC;
                        k = m = n = i;
                    }
                    else {
                        n = pRoC;
                        k = m = eRoC;
                        j = l = o = i;
                    }
                    if (xlEdit.getPropertyValue(j, k, "isMHide")) {
                        j = xlEdit.getPropertyValue(j, k, "mergeIdx");
                        k = j.colIndex;
                        j = j.rowIndex;
                    }
                    eCelBrdr = xlEdit.getPropertyValue(j, k, "borders");
                    eTblBrdr = xlEdit.getPropertyValue(l, m, "tborders");
                    if ((!pCelBrdr || (pCelBrdr && !pCelBrdr[brdr])) && ((eCelBrdr && eCelBrdr[dupBrdr]) || ((!pTblBrdr || (pTblBrdr && !pTblBrdr[brdr])) && eTblBrdr && eTblBrdr[dupBrdr]))) {
                        cStyle = {};
                        if (pCelBrdr || xlEdit.getPropertyValue(o, n, "border")) {
                            hCode = xlEdit.getPropertyValue(o, n, "border");
                            cStyle = this.getBorderFromHashCode(hCode);
                        }
                        cStyle[brdr] = (eCelBrdr && eCelBrdr[dupBrdr]) ? eCelBrdr[dupBrdr] : eTblBrdr[dupBrdr];
                        hCode = this._getBorderHashCode(cStyle);
                        xlEdit._updateDataContainer({ rowIndex: o, colIndex: n }, { dataObj: { border: hCode } });
                    }
                }
            }
            else {
                l = isRow ? start - 1 : 0;
                m = isRow ? 0 : start - 1;
                if (xlEdit.getPropertyValue(l, m, isHide)) {
                    pRoC = start - 1;
                    while (pRoC) {
                        l = isRow ? pRoC : 0;
                        m = isRow ? 0 : pRoC;
                        if (!xlEdit.getPropertyValue(l, m, isHide))
                            break;
                        pRoC--;
                    }
                    for (i = 0; i <= uIdx; i++) {
                        if (isRow) {
                            l = pRoC;
                            k = m = o = i;
                            j = n = start - 1;
                        }
                        else {
                            m = pRoC;
                            j = l = n = i;
                            k = o = start - 1;
                        }
                        if (xlEdit.getPropertyValue(j, k, "isMHide")) {
                            j = xlEdit.getPropertyValue(j, k, "mergeIdx");
                            k = j.colIndex;
                            j = j.rowIndex;
                        }
                        pCelBrdr = xlEdit.getPropertyValue(l, m, "borders");
                        sCelBrdr = xlEdit.getPropertyValue(j, k, "borders");
                        pTblBrdr = xlEdit.getPropertyValue(l, m, "tborders");
                        sTblBrdr = xlEdit.getPropertyValue(n, o, "tborders");
                        cStyle = this.getBorderFromHashCode(xlEdit.getPropertyValue(l, m, "border"));
                        if ((((!pCelBrdr || (pCelBrdr && !pCelBrdr[brdr])) || (pCelBrdr && pCelBrdr[brdr] !== (cStyle && cStyle[brdr]))) && ((!pTblBrdr || (pTblBrdr && !pTblBrdr[brdr])) || (pTblBrdr && pTblBrdr[brdr] && (xlEdit.getPropertyValue(l, m, "border") !== this._getBorderHashCode(pTblBrdr)
                            || (sCelBrdr && sCelBrdr[dupBrdr]))))) && (((sCelBrdr && sCelBrdr[dupBrdr]) || ((cStyle && cStyle[brdr]) && (!sCelBrdr || (sCelBrdr && !sCelBrdr[dupBrdr])))) || ((sTblBrdr && sTblBrdr[dupBrdr])))) {
                            l = isRow ? j : k;
                            m = isRow ? k : j;
                            this._showHiddenBorder(pRoC, l, m, i, isRow);
                        }

                    }
                    for (i = 0; i <= uIdx; i++) {
                        if (isRow) {
                            l = j - 1;
                            j = n = start;
                            k = o = m = i;
                        }
                        else {
                            m = k - 1;
                            j = l = n = i;
                            k = o = start;
                        }
                        if (xlEdit.getPropertyValue(j, k, "isMHide")) {
                            j = xlEdit.getPropertyValue(j, k, "mergeIdx");
                            k = j.colIndex;
                            j = j.rowIndex;
                        }
                        sCelBrdr = xlEdit.getPropertyValue(l, m, "borders");
                        eCelBrdr = xlEdit.getPropertyValue(j, k, "borders");
                        sTblBrdr = xlEdit.getPropertyValue(l, m, "tborders");
                        eTblBrdr = xlEdit.getPropertyValue(n, o, "tborders");
                        cStyle = this.getBorderFromHashCode(xlEdit.getPropertyValue(l, m, "border"));
                        if ((((!sCelBrdr || (sCelBrdr && !sCelBrdr[brdr])) || (sCelBrdr && sCelBrdr[brdr] !== (cStyle && cStyle[brdr]))) && ((!sTblBrdr || (sTblBrdr && !sTblBrdr[brdr])) || (sTblBrdr && sTblBrdr[brdr] && xlEdit.getPropertyValue(n, o, "border") !== this._getBorderHashCode(sTblBrdr))))
                            && (((eCelBrdr && eCelBrdr[dupBrdr]) || ((cStyle && cStyle[brdr]) && (!eCelBrdr || (eCelBrdr && !eCelBrdr[dupBrdr])))) || (eTblBrdr && eTblBrdr[dupBrdr]))) {
                            l = isRow ? j : k;
                            m = isRow ? k : j;
                            this._showHiddenBorder(start - 1, l, m, i, isRow);
                        }
                    }
                }
                for (start; start < end; start++) {
                    eRoC = start + 1;
                    if (isRow) {
                        l = eRoC;
                        m = k = 0;
                        j = start;
                    }
                    else {
                        m = eRoC;
                        l = j = 0;
                        k = start;
                    }
                    if (xlEdit.getPropertyValue(l, m, isHide) || xlEdit.getPropertyValue(j, k, isHide)) {
                        for (i = 0; i <= uIdx; i++) {
                            if (isRow) {
                                j = eRoC;
                                k = m = i;
                                l = start;
                            }
                            else {
                                j = l = i;
                                k = eRoC;
                                m = start;
                            }
                            if (xlEdit.getPropertyValue(j, k, "isMHide")) {
                                j = xlEdit.getPropertyValue(j, k, "mergeIdx");
                                k = j.colIndex;
                                j = j.rowIndex;
                            }
                            sCelBrdr = xlEdit.getPropertyValue(l, m, "borders");
                            eCelBrdr = xlEdit.getPropertyValue(j, k, "borders");
                            sTblBrdr = xlEdit.getPropertyValue(l, m, "tborders");
                            eTblBrdr = xlEdit.getPropertyValue(j, k, "tborders");
                            cStyle = this.getBorderFromHashCode(xlEdit.getPropertyValue(l, m, "border"));
                            if ((((!sCelBrdr || (sCelBrdr && !sCelBrdr[brdr])) || (sCelBrdr && sCelBrdr[brdr] !== (cStyle && cStyle[brdr]))) && ((!sTblBrdr || (sTblBrdr && !sTblBrdr[brdr])) || (sTblBrdr && sTblBrdr[brdr] && (xlEdit.getPropertyValue(l, m, "border") !== this._getBorderHashCode(sTblBrdr)
                                || (eCelBrdr && eCelBrdr[dupBrdr]))))) && (((eCelBrdr && eCelBrdr[dupBrdr]) || ((cStyle && cStyle[brdr]) && (!eCelBrdr || (eCelBrdr && !eCelBrdr[dupBrdr])))) || (eTblBrdr && eTblBrdr[dupBrdr]))) {
                                j = isRow ? k : j;
                                this._showHiddenBorder(start, eRoC, j, i, isRow);
                            }
                        }
                    }
                }
            }
        },

        _showHiddenBorder: function (start, end, idx, mrgIdx, isRow) {
            var i, j, l, m, n, o, brdr, hCode, cStyle, sCelBrdr, eCelBrdr, eTblBrdr, sTblBrdr, dupBrdr, xlEdit = this.XLObj.XLEdit;
            if (isRow) {
                l = end;
                o = mrgIdx;
                j = m = idx;
                i = n = start;
                brdr = "bottom";
                dupBrdr = "top";
            }
            else {
                m = end;
                n = mrgIdx;
                i = l = idx;
                j = o = start;
                brdr = "right";
                dupBrdr = "left";
            }
            hCode = xlEdit.getPropertyValue(i, j, "border");
            cStyle = this.getBorderFromHashCode(hCode);
            if (cStyle[brdr])
                delete cStyle[brdr];
            sTblBrdr = xlEdit.getPropertyValue(i, j, "tborders");
            eCelBrdr = xlEdit.getPropertyValue(l, m, "borders");
            eTblBrdr = xlEdit.getPropertyValue(l, m, "tborders");
            sCelBrdr = xlEdit.getPropertyValue(n, o, "borders");
            if (sCelBrdr && sCelBrdr[brdr])
                cStyle[brdr] = sCelBrdr[brdr];
            else if (eCelBrdr && eCelBrdr[dupBrdr])
                cStyle[brdr] = eCelBrdr[dupBrdr];
            else if ((sTblBrdr && sTblBrdr[brdr]) || (eTblBrdr && eTblBrdr[dupBrdr]))
                cStyle[brdr] = (sTblBrdr && sTblBrdr[brdr]) ? sTblBrdr[brdr] : eTblBrdr[dupBrdr];
            if (cStyle.bottom || cStyle.right) {
                hCode = this._getBorderHashCode(cStyle);
                xlEdit._updateDataContainer({ rowIndex: n, colIndex: o }, { dataObj: { border: hCode } });
            }
            else
                xlEdit._clearDataContainer({ cellIdx: { rowIndex: i, colIndex: j }, property: ["border"] });
        },

        _resizeFormatTableMenu: function () {
            var xlObj = this.XLObj, elem = document.getElementById(xlObj._id + "_formatastable");
            if (xlObj._tabMode || xlObj._phoneMode) {
                $("#" + xlObj._id + "_Ribbon").append($("#" + xlObj._id + "_formatastable").parent());
                xlObj._removeClass(elem, "e-formatastable");
                xlObj.addClass(elem, "e-formatastable-adaptive");
                elem.style.height = xlObj._dlgHeight + "px";
            }
            else {
                xlObj._removeClass(elem, "e-formatastable-adaptive");
                xlObj.addClass(elem, "e-formatastable");
            }
        },

        _resizeStyleMenu: function () {
            var xlObj = this.XLObj, elem = document.getElementById(xlObj._id + "_cellstyles");
            if (xlObj._tabMode || xlObj._phoneMode) {
                $("#" + xlObj._id + "_Ribbon").append($("#" + xlObj._id + "_cellstyles").parent());
                xlObj._removeClass(elem, "e-cellstyles");
                xlObj.addClass(elem, "e-cellstyles-adaptive");
                elem.style.height = xlObj._dlgHeight + "px";
            }
            else {
                xlObj._removeClass(elem, "e-cellstyles-adaptive");
                xlObj.addClass(elem, "e-cellstyles");
            }
        },

        _resizeBorderMenu: function (args) {
            var xlObj = this.XLObj, $borderElem = xlObj.element.find(".e-bordercontainer");
            if (xlObj._phoneMode) {
                $("#" + xlObj._id + "_Ribbon").append($("#" + xlObj._id + "_Ribbon_Border").parent());
                if ($borderElem.length)
                    $borderElem.show();
                else {
                    this._createBorderDiv();
                    xlObj.element.find(".e-bordercontainer").show();
                }
                xlObj.addClass($borderElem[0], "e-border e-adaptive");
                args.cancel = true;
                var splitBtn = $("#" + xlObj._id + "_Ribbon_Home_Font_Border").ejSplitButton("instance");
                splitBtn.contstatus = true;
            }
        },

        _customStyleDlg: function () {
            var xlObj = this.XLObj, $dlg, $label, $okBtn, $formatBtn, $canBtn, $btndiv;
            $dlg = ej.buildTag("div", "", "", { id: xlObj._id + "_CustomCellDialog" });
            $btndiv = ej.buildTag("div.e-dlg-btnfields");
            var $frmtDiv1 = ej.buildTag("div.e-dlg-btnfields"), $frmtDiv2 = ej.buildTag("div.e-dlg-btnctnr"), $div = ej.buildTag("div.e-dlg-btnctnr");
            $label = "<div class= 'e-dlgctndiv'><table><tr class= 'e-dlgtd-fields '><td style='width: 22%;'><label>" + xlObj._getLocStr("StyleName") + ":</label></td><td style= 'padding-left: 10px;'><input id ='" + xlObj._id + "_StyleName' type ='text' value = 'Style' class = 'ejinputtext'/></td></tr></table></div>";
            $dlg.append($label);
            $okBtn = ej.buildTag("input", "", "", { id: xlObj._id + "_CustomCellDlgOkBtn", type: "submit" });
            $formatBtn = ej.buildTag("input", "", "", { id: xlObj._id + "_CustomCellDlgFrmtBtn", type: "submit" });
            $canBtn = ej.buildTag("input", "", "", { id: xlObj._id + "_CustomCellDlgCanBtn" });
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._dlgOK, this), enabled: true, cssClass: "e-ss-okbtn" });
            $formatBtn.ejButton({ text: xlObj._getLocStr("Format") + "...", showRoundedCorner: true, width: 60, click: ej.proxy(this._dlgFrmt, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._dlgCancel, xlObj), showRoundedCorner: true, width: 60 });
            $dlg.append($frmtDiv1.append($frmtDiv2.append($formatBtn)));
            $btndiv.append($div.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({
                enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("Style"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg", close: ej.proxy(this._dlgCancel, xlObj),
                open: ej.proxy(function (e) {
                    var styleNameElm = $("#" + xlObj._id + "_StyleName");
                    styleNameElm.focus().setInputPos(styleNameElm.val().length).select();
                })
            });
        },

        _dlgOK: function () {
            var xlObj = this.XLObj, xlFormat = xlObj.XLFormat, xlCmenu = xlObj.XLCMenu, dataMngr = $("#" + xlObj._id + "_formatdlg_format_dataMnger").data();
            if (xlCmenu) {
                if (xlFormat._styleDlgClick)
                    (xlCmenu._modifyClick) ? this.modifyCustomStyle(xlCmenu._oldCustomName, $.extend(true, {}, dataMngr), $("#" + xlObj._id + "_StyleName").val()) : this.addNewCustomStyle($("#" + xlObj._id + "_StyleName").val(), $.extend(true, {}, dataMngr));
                else
                    (xlCmenu._modifyClick) ? this.modifyCustomStyle(xlCmenu._oldCustomName, xlObj._dataContainer.customCellStyle[xlCmenu._oldCustomName], $("#" + xlObj._id + "_StyleName").val()) : this.addNewCustomStyle($("#" + xlObj._id + "_StyleName").val(), { style: { "font-family": "Calibri", "font-weight": "normal", "font-style": "normal", "font-size": "11pt", "text-decoration": "none", "color": "#333333" }, NumFormat: { "type": "general" } });
            }
            else
                (xlFormat._styleDlgClick) ? this.addNewCustomStyle($("#" + xlObj._id + "_StyleName").val(), $.extend(true, {}, dataMngr)) : this.addNewCustomStyle($("#" + xlObj._id + "_StyleName").val(), { style: { "font-family": "Calibri", "font-weight": "normal", "font-style": "normal", "font-size": "11pt", "text-decoration": "none", "color": "#333333" }, NumFormat: { "type": "general" } });
            $("#" + xlObj._id + "_CustomCellDialog").ejDialog("close");
            xlFormat._styleDlgClick = false;
            if (xlCmenu) {
                xlCmenu._modifyClick = false;
                xlCmenu._oldCustomName = xlCmenu._target = "";
            }
        },

        _dlgFrmt: function () {
            var xlObj = this.XLObj;
            xlObj.XLFormat._styleDlgClick = true;
            xlObj._showDialog(xlObj._id + "_FormatCells");

        },

        _styleDlgOpen: function () {
            var xlObj = this.XLObj, val = (xlObj.model.enableContextMenu) ? xlObj.XLCMenu._target : "";
            $("#" + xlObj._id + "_StyleName").val(val);
            $("#" + xlObj._id + "_CustomCellDialog").ejDialog("open");
        },

        _dlgCancel: function () {
            var menuObj = this.XLCMenu;
            $("#" + this._id + "_CustomCellDialog").ejDialog("close");
            this.XLFormat._styleDlgClick = false;
            if (menuObj) {
                menuObj._modifyClick = false;
                menuObj._oldCustomName = menuObj._target = "";
            }
        },
        addNewCustomStyle: function (styleName, options) {
            var xlObj = this.XLObj, container = xlObj._dataContainer;
            if (!(xlObj.isImport || xlObj.model.isImport)) {
                if (this._isHeaderAdded && xlObj.getObjectKeys(container.customCellStyle).indexOf(styleName) > -1) {
                    xlObj._showAlertDlg("Alert", "cellStyleAlert", "cellStyleAlert", 200);
                    return;
                }
            }
            var hashCode = this._createFormatClass(options.style, "", true), xlMenuObj = xlObj.XLCMenu, parent = $("#" + xlObj._id + "_cellstyles"), $cellDiv = ej.buildTag("div.e-cellstylecell e-customcellstyle" + " " + hashCode, styleName, "", { title: styleName }),
                menuObj;
            if (parseInt(options.style["font-size"]) > 11)
                $cellDiv.css({ "font-size": "11pt" });
            // cell styles drop down changes
            if (this._isHeaderAdded)
                parent.children().eq(1).append($cellDiv);
            else {
                var $contentDiv = ej.buildTag("div.e-cellstylecontent"), $headerDiv = ej.buildTag("div.e-cellstyleheader", "Custom");
                $contentDiv.append($cellDiv);
                parent.prepend($contentDiv).prepend($headerDiv);
                parent.children().eq(0).append($("#" + xlObj._id + "_cellstyles_back"));
                this._isHeaderAdded = true;
                if (xlMenuObj)
                    xlMenuObj._createMenu(ej.buildTag("ul .e-spreadsheet e-" + xlMenuObj._uniqueClass, " ", { display: "none" }, { id: xlObj._id + "_contextMenuCellStyles" }), xlObj.XLCMenu._cellStylesMenuData, "  .e-cellstylecontent");
            }
            if (ej.isNullOrUndefined(container.customCellStyle[styleName]))
                container.customCellStyle[styleName] = options;
            if (xlMenuObj) {
                menuObj = $("#" + xlObj._id + "_contextMenuCellStyles").data("ejMenu");
                menuObj.model.contextMenuTarget = " .e-customcellstyle";
            }
        },

        modifyCustomStyle: function (oldStyleName, options, newStyleName) {
            var xlObj = this.XLObj, container = xlObj._dataContainer;
            if (this._isHeaderAdded && xlObj.getObjectKeys(container.customCellStyle).indexOf(oldStyleName) === -1) {
                xlObj._showAlertDlg("Alert", "modifyCellStyleAlert", "modifyCellStyleAlert", 200);
                return;
            }
            else if (this._isHeaderAdded && xlObj.getObjectKeys(container.customCellStyle).indexOf(newStyleName) > -1 && oldStyleName != newStyleName)
                return;
            $.extend(container.customCellStyle[oldStyleName], options);
            var hashCode = this._createFormatClass(container.customCellStyle[oldStyleName].style, "", true), cellDiv = $("#" + xlObj._id + "_cellstyles").children().eq(1).find("div[title=\"" + oldStyleName + "\"]");
            xlObj._removeClass(cellDiv[0], cellDiv[0].classList[2]);
            xlObj.addClass(cellDiv[0], hashCode);
            if (oldStyleName != newStyleName) {
                container.customCellStyle[newStyleName] = container.customCellStyle[oldStyleName];
                delete container.customCellStyle[oldStyleName];
                cellDiv.attr('title', newStyleName);
                cellDiv.html(newStyleName);
            }
        },

        deleteCustomStyle: function (styleName) {
            var xlObj = this.XLObj, container = xlObj._dataContainer;
            if (this._isHeaderAdded && xlObj.getObjectKeys(container.customCellStyle).indexOf(styleName) === -1) {
                xlObj._showAlertDlg("Alert", "modifyCellStyleAlert", "", 200);
                return;
            }
            var parent = $("#" + xlObj._id + "_cellstyles").children(); parent.eq(1).find("div[title=\"" + styleName + "\"]").remove();
            delete container.customCellStyle[styleName];
            if (parent.eq(1).children().length === 0) {
                parent[0].remove();
                parent[1].remove()
                $("#" + xlObj._id + "_cellstyles").children().eq(0).append("<span id ='" + xlObj._id + "_cellstyles_back' class = 'e-cellstyles-back e-icon e-ss-leftarrow'/>");
                this._isHeaderAdded = false;
            }
        },

        applyCustomCellStyle: function (styleName, range) {
            var xlObj = this.XLObj, container = xlObj._dataContainer;
            if (this._isHeaderAdded && xlObj.getObjectKeys(container.customCellStyle).indexOf(styleName) === -1) {
                xlObj._showAlertDlg("Alert", "modifyCellStyleAlert", "modifyCellStyleAlert", 200);
                return;
            }
            var formatObj = { style: container.customCellStyle[styleName].style }
            $.extend(formatObj, container.customCellStyle[styleName].NumFormat)
            this.format(formatObj, range);
        },

        _createBorderDiv: function () {
            var xlObj = this.XLObj, hdrdiv = "<div class='e-ss-bdr-header'><span id ='" + xlObj._id + "_border_back' class = 'e-border-back e-icon e-ss-leftarrow'/></div><div class='e-ss-border-content'>", contDiv = '', div = ej.buildTag("div#" + xlObj._id + "_bordercontainer.e-bordercontainer", {}, { display: 'none', height: xlObj._responsiveHeight - 2 }), borderObj = xlObj.XLRibbon._borderMenuData;
            for (var i = 0; i < 13; i++)
                contDiv += "<div class = 'e-bordercell' id=" + borderObj[i].id + ">" + xlObj._renderDIV('e-ss-border ' + borderObj[i].sprite + " e-ss-menu", "", borderObj[i].text) + "</div>";
            hdrdiv += contDiv + "</div>";
            div.append($(hdrdiv));
            $("#" + xlObj._id + "_Ribbon").append(div);
            xlObj._on($('#' + xlObj._id + '_bordercontainer'), "click", xlObj._borderSelectionClick);
        },

        _updateTableFormula: function (operation, tmgr, sheetIdx, oldName) {
            var xlObj = this.XLObj, calcEngine = xlObj.getCalcEngine(), isUpdate = false, isRename = false, xlEdit = xlObj.XLEdit;
            if (operation === "updateRange")
                isUpdate = true;
            if (operation === "rename")
                isRename = true;
            if (operation === "addRange" || isUpdate) {
                var i, range = tmgr.range, colsName, name = tmgr.name, tableFormulaCln = {}, colsLen;
                colsName = xlObj.getRangeData({ range: [range[0], range[1], range[0], range[3]], property: ["value2"], sheetIdx: sheetIdx });
                for (i = 0, colsLen = colsName.length; i < colsLen; i++) {
                    if (isUpdate)
                        calcEngine.removeNamedRange(name + "[" + colsName[i].value2 + "]");
                    tableFormulaCln[colsName[i].value2] = xlEdit._parseSheetRef(xlObj._getDollarAlphaRange([range[0] + 1, range[1] + i, range[2], range[1] + i], true, sheetIdx));
                    calcEngine.addNamedRange(name + "[" + colsName[i].value2 + "]", tableFormulaCln[colsName[i].value2]);
                }
                if (isUpdate) {
                    calcEngine.removeNamedRange(name + "[#All]");
                    calcEngine.removeNamedRange(name + "[#Data]");
                    calcEngine.removeNamedRange(name + "[#Headers]");
                }
                if (tmgr.totalRow) {
                    calcEngine.removeNamedRange(name + "[#Rows]");
                    tableFormulaCln["#Rows"] = xlEdit._parseSheetRef(xlObj._getDollarAlphaRange([range[2], range[1], range[2], range[3]], true, sheetIdx));
                    calcEngine.addNamedRange(name + "[#Rows]", tableFormulaCln["#Rows"]);
                }
                tableFormulaCln["#All"] = xlEdit._parseSheetRef(xlObj._getDollarAlphaRange(range, true, sheetIdx));
                calcEngine.addNamedRange(name + "[#All]", tableFormulaCln["#All"]);
                tableFormulaCln["#Data"] = xlEdit._parseSheetRef(xlObj._getDollarAlphaRange([range[0] + 1, range[1], range[2], range[3]], true, sheetIdx));
                calcEngine.addNamedRange(name + "[#Data]", tableFormulaCln["#Data"]);
                tableFormulaCln["#Headers"] = xlEdit._parseSheetRef(xlObj._getDollarAlphaRange([range[0], range[1], range[0], range[3]], true, sheetIdx));
                calcEngine.addNamedRange(name + "[#Headers]", tableFormulaCln["#Headers"]);
                xlObj._tableRangesFormula[tmgr.name] = tableFormulaCln;
            }
            else if (operation === "totalRow") {
                if (calcEngine.namedRangeValues.containsKey(tmgr.name + "[#Rows]"))
                    calcEngine.removeNamedRange(tmgr.name + "[#Rows]");
                if (tmgr.totalRow) {
                    xlObj._tableRangesFormula[tmgr.name]["#Rows"] = xlEdit._parseSheetRef(xlObj._getDollarAlphaRange([tmgr.range[2], tmgr.range[1], tmgr.range[2], tmgr.range[3]], true, sheetIdx));
                    calcEngine.addNamedRange(tmgr.name + "[#Rows]", xlObj._tableRangesFormula[tmgr.name]["#Rows"]);
                }
                else
                    xlObj._tableRangesFormula[tmgr.name]["#Rows"] && delete xlObj._tableRangesFormula[tmgr.name]["#Rows"];

                xlObj._tableRangesFormula[tmgr.name]["#All"] = xlEdit._parseSheetRef(xlObj._getDollarAlphaRange(tmgr.range, true, sheetIdx));
                calcEngine.removeNamedRange(tmgr.name + "[#All]");
                calcEngine.addNamedRange(tmgr.name + "[#All]", xlObj._tableRangesFormula[tmgr.name]["#All"]);
            }
            else if (operation === "removeTable" || isRename) {
                if (!isRename)
                    oldName = tmgr.name;
                var keyLen, keys = xlObj.getObjectKeys(xlObj._tableRangesFormula[oldName]);
                name = tmgr.name;
                for (i = 0, keyLen = keys.length; i < keyLen; i++) {
                    calcEngine.removeNamedRange(oldName + "[" + keys[i] + "]");
                    if (isRename)
                        calcEngine.addNamedRange(name + "[" + keys[i] + "]", xlObj._tableRangesFormula[oldName][keys[i]]);
                }
                if (isRename)
                    xlObj._tableFormulaCollection[name] = xlObj._tableFormulaCollection[oldName];
                delete xlObj._tableRangesFormula[oldName];
                delete xlObj._tableFormulaCollection[oldName];
            }
        },
        _updateTableColName: function (rowIdx, colIdx, preVal, val, sheetIdx, tableClass) {
            var xlObj = this.XLObj, tid = xlObj._getTableID(tableClass), tmgr = xlObj.getSheet(sheetIdx).tableManager, range = tmgr[tid].range, tempVal = val.toUpperCase();
            if (range[0] === rowIdx && preVal.length && preVal.toUpperCase() !== tempVal) {
                var calcEngine = xlObj.getCalcEngine(), keys, i, len, name = tmgr[tid].name, colsName = xlObj.getRangeData({ range: [range[0], range[1], range[0], range[3]], property: ["value2"], sheetIdx: sheetIdx }), j = 2, tempArr = [], inc;
                for (i = 0, len = colsName.length; i < len; i++) {
                    tempArr[i] = colsName[i].value2 ? colsName[i].value2.toUpperCase() : "";
                    if (tempArr[i] === tempVal) {
                        val = val + j;
                        j++;
                    }
                }
                while (tempArr.indexOf(val.toUpperCase()) > -1) {
                    inc = parseInt(val.slice(-1));
                    val = val.substring(0, val.length - 1);
                    val = isNaN(inc) ? val + j : (inc++ && val + inc);
                }
                calcEngine.removeNamedRange(name + "[" + preVal + "]");
                calcEngine.addNamedRange(name + "[" + val + "]", xlObj._tableRangesFormula[name][preVal]);
                xlObj._tableRangesFormula[name][val] = xlObj._tableRangesFormula[name][preVal];
                delete xlObj._tableRangesFormula[name][preVal];
                keys = xlObj.getObjectKeys(xlObj._tableRangesFormula[name]);
                xlObj._tableFormulaCollection[name] = [];
                for (i = 0, len = keys.length; i < len; i++)
                    xlObj._tableFormulaCollection[name].push({ "text": "[" + keys[i] + "]", "display": keys[i] });
            }
            return val;
        }
    };

    ej.Spreadsheet.FontFamily = {
        "angsana new": "11N",
        "arial": "21N",
        "arial black": "31N",
        "batang": "41N",
        "book antiqua": "51N",
        "browallia new": "61N",
        "calibri": "71N",
        "cambria": "81N",
        "candara": "91N",
        "century": "10",
        "comic sans ms": "11",
        "consolas": "12",
        "constantia": "13",
        "corbel": "14",
        "cordia new": "15",
        "courier": "16",
        "courier new": "17",
        "dilleniaupc": "18",
        "dotum": "19",
        "fangsong": "20",
        "garamond": "21",
        "georgia": "22",
        "gulim": "23",
        "gungsuh": "24",
        "kaiti": "25",
        "jasmineupc": "26",
        "malgun gothic": "27",
        "mangal": "28",
        "meiryo": "29",
        "microsoft jhenghei": "30",
        "microsoft yahei": "31",
        "mingliu": "32",
        "mingliu_hkscs": "33",
        "ms gothic": "34",
        "ms mincho": "35",
        "ms pgothic": "36",
        "ms pmincho": "37",
        "pmingliu": "38",
        "pmingliu-extb": "39",
        "simhei": "40",
        "simsun": "41",
        "simsun-extb": "42",
        "tahoma": "43",
        "times": "44",
        "times new roman": "45",
        "trebuchet ms": "46",
        "verdana": "47",
        "yu gothic": "48",
        "yu mincho": "49"
    };

    ej.Spreadsheet.FontStyle = {
        "normal": "1",
        "italic": "2",
        "oblique": "3"
    };

    ej.Spreadsheet.TextAlign = {
        "left": "1",
        "right": "2",
        "center": "3",
        "justify": "4"
    };

    ej.Spreadsheet.VerticalAlign = {
        "top": "1",
        "middle": "2",
        "bottom": "3"
    };

    ej.Spreadsheet.TextDecoration = {
        "none": "1",
        "underline": "2",
        "overline": "3",
        "line-through": "4",
        "line-through underline": "5"
    };

    ej.Spreadsheet.FontWeight = {
        normal: "1",
        bold: "2"
    };

    ej.Spreadsheet.BorderStyle = {
        solid: "1",
        dashed: "2",
        dotted: "3",
        double: "4"
    };

    ej.Spreadsheet.CellFormat = {
        number: "{0:N2}",
        currency: "{0:C2}",
        accounting: "{0:C2}",
        percentage: "{0:P2}",
        shortdate: "{0:M/d/yyyy}",
        longdate: "{0:dddd, MMMM dd, yyyy}",
        time: "{0:h:mm:ss tt}",
        scientific: "{0:N2}",
    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

	ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

	ej.spreadsheetFeatures.cellType = function (obj) {
		this.XLObj = obj;
		this._isIntrnlUpdate = false;
		this._cellTypeDate = '';
	};

	ej.spreadsheetFeatures.cellType.prototype = {
		_renderControls: function (rowIndex, colIndex, sheetIndex, cellType, cellTypeValue, isCntnrUpdated) {
			if (!cellType || (this.XLObj.model.isGridMode && (sheetIndex > 1 || cellType['dataSourceSheetIndex'] > 1)))
				return;
			var id, cell, data, cont, dataRange, xlObj = this.XLObj, browser = xlObj._browserDetails.name, actSheetIndex, sheetIdx = xlObj._getSheetIndex(sheetIndex), $cell = xlObj.getCell(rowIndex, colIndex, sheetIdx), sheet = xlObj.getSheet(sheetIdx), value = xlObj.XLEdit.getPropertyValue(rowIndex, colIndex, 'value2', sheetIdx), cntrl = cellType['type'], headerTxt = xlObj._generateHeaderText(colIndex + 1),
				container = xlObj._dataContainer.sheetCellType, height = xlObj._getRowHeight(rowIndex, sheetIndex), propVal = xlObj.XLEdit.getPropertyValue(rowIndex, colIndex, 'cellType'), index = (propVal > -1) ? propVal : xlObj.getObjectLength(container);
			xlObj._textClip(rowIndex, colIndex, 'delete', '', true);
			xlObj._textClip(rowIndex, colIndex, 'add', '');
			if ($cell)
				cell = $cell[0];
			xlObj.addClass(cell, 'e-cellreadonly');
			if (!xlObj._dupDetails)
				if (propVal)
					cellType['isChecked'] = container[index]['isChecked'];
				else
					sheet.cellTypes.push({ 'range': xlObj._getAlphaRange(sheetIndex, rowIndex, colIndex, rowIndex, colIndex), 'settings': $.extend(true, {}, cellType) });
			switch (cntrl) {
				case 'Button':
					id = xlObj._id + '_btn_' + sheetIdx + headerTxt + (rowIndex + 1);
					xlObj.XLFormat._writeCssRules('e-btncls' + rowIndex + colIndex, 'border: 0px; vertical-align: middle;padding: 0px;color:' + cellType['color'] + ';background:' + cellType['backgroundColor'] + ';', true, true);
					if (cell)
						cell.innerHTML = '<button id =' + id + ' class = "e-btncls' + rowIndex + colIndex + '"></button>';
					if (cell && (browser === 'mozilla' || browser === 'msie')) {
						xlObj.addClass(cell, 'e-btnhgt');
						xlObj.addClass($cell.parents('.e-table')[0], 'e-btnhgt');
					}
					if (!isCntnrUpdated) {
						data = { 'type': cntrl, 'id': id, 'text': cellType['text'] || value || cellType['type'] + headerTxt + (rowIndex + 1), 'color': cellType['color'] || '', 'background-color': cellType['backgroundColor'] || '' };
						container[index] = data;
						xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': { 'cellType': index }, 'sheetIdx': sheetIdx });
					}
					$('#' + id).ejButton({ type: "button", width: '100%', height: '100%', text: cellType['text'] || value || cellType['type'] + headerTxt + (rowIndex + 1), create: $.proxy(this._onButtonCreate), click: $.proxy(this.onButtonClick), cssClass: cellType['class'] || '' });
					break;
				case 'CheckBox':
					id = xlObj._id + '_chk_' + sheetIdx + headerTxt + (rowIndex + 1);
					cell && (cell.innerHTML = '<input id =' + id + ' style = "" />');
					if (!isCntnrUpdated) {
						data = { 'type': cntrl, 'id': id, 'isChecked': cellTypeValue || (value && value.toLowerCase()) || cellType['isChecked'] || false };
						container[index] = data;
						cont = xlObj.XLEdit._parseValue(data['isChecked'], { rowIndex: rowIndex, colIndex: colIndex });
						cont['cellType'] = index;
						xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': cont, 'sheetIdx': sheetIdx });
						cell && (cell.lastChild.textContent = '');
					}
					$('#' + id).ejCheckBox({ size: 'small', change: $.proxy(this.onActiveStateChange), checked: data ? (data['isChecked'].toString() == "true") : cellType['isChecked'], cssClass: cellType['class'] || '' });
					break;
				case 'DropDownList':
					actSheetIndex = cellType['dataSourceSheetIndex'] || sheetIdx;
					id = xlObj._id + '_drpdwn_' + sheetIdx + headerTxt + (rowIndex + 1), dataRange = cellType['dataSourceRange'] && xlObj.getRangeIndices(cellType['dataSourceRange']);
					if (xlObj.element.find("#" + id).length > 0)
						return;
					cell && (cell.innerHTML = '<input id =' + id + ' />');

					if (actSheetIndex !== sheetIdx && !xlObj.getSheet(actSheetIndex)._isLoaded)
						xlObj._initSheet(actSheetIndex);
					if (xlObj.isUndefined(cellType["selectedIndex"]) && value) {
						var dSrc, field, i;
						dSrc = (cellType['dataSource'] || xlObj.getRangeData({ range: dataRange, sheetIdx: actSheetIndex }));
						field = cellType['field'] = (cellType['field'] || {text: 'value2'});
						var ddlText = field.text;
						i = dSrc.length;
						while (--i >= 0) {
							if (dSrc[i][ddlText] == value) {
								cellType["selectedIndex"] = i;
								break;
							}
						}
					}
					if (!isCntnrUpdated) {
						data = { 'type': cntrl, 'id': id, 'text': value, 'style': '', 'dataSource': cellType['dataSource'] || '', 'dataSourceRange': cellType['dataSourceRange'] || '', 'selectedIndex': cellType['selectedIndex'] > -1 ? cellType['selectedIndex'] : -1, 'dataSourceSheetIndex': actSheetIndex };
						container[index] = data;
						xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': { 'cellType': index }, 'sheetIdx': sheetIdx });
					}
					if (cellType['dataSourceRange']) {
						var datacells = xlObj._getSelectedRange({ rowIndex: dataRange[0], colIndex: dataRange[1] }, { rowIndex: dataRange[2], colIndex: dataRange[3] }), ddlCells = xlObj.XLEdit._getPropWithCellIdx([datacells[0].rowIndex, datacells[0].colIndex, datacells[datacells.length - 1].rowIndex, datacells[datacells.length - 1].colIndex], "ddlRange", actSheetIndex);
						if (ddlCells.length === 0)
							xlObj.updateUniqueData({ 'ddlRange': [{ rowIndex: rowIndex, colIndex: colIndex, sheetIndex: sheetIdx }] }, [datacells[0].rowIndex, datacells[0].colIndex, datacells[datacells.length - 1].rowIndex, datacells[datacells.length - 1].colIndex], '', actSheetIndex);
						else
							for (var j = 0; j < datacells.length; j++) {
								ddlCells = xlObj.XLEdit.getPropertyValue(datacells[j].rowIndex, datacells[j].colIndex, 'ddlRange', actSheetIndex)
								if (ddlCells) {
									ddlCells.push({ rowIndex: rowIndex, colIndex: colIndex });
									xlObj.XLEdit._updateDataContainer({ rowIndex: datacells[j].rowIndex, colIndex: datacells[j].colIndex }, { 'dataObj': { 'ddlRange': ddlCells }, 'sheetIdx': actSheetIndex });
								}
								else
									xlObj.XLEdit._updateDataContainer({ rowIndex: datacells[j].rowIndex, colIndex: datacells[j].colIndex }, { 'dataObj': { 'ddlRange': [{ rowIndex: rowIndex, colIndex: colIndex }] }, 'sheetIdx': actSheetIndex });
							}
					}
					$('#' + id).ejDropDownList({ loadOnDemand: true, width: '100%', height: xlObj.model.rowHeight - 1, change: $.proxy(this.onActiveValueChange), dataSource: cellType['dataSource'] || xlObj.getRangeData({ range: dataRange, sheetIdx: actSheetIndex }), fields: cellType['field'] ? cellType['field'] : { text: 'value2' }, watermarkText: cellType['watermarkText'] || 'Select an option', cssClass: cellType['class'] || '', selectedIndex: cellType['selectedIndex'] > -1 ? cellType['selectedIndex'] : -1, beforePopupShown: $.proxy(this._onBeforePopupOpen) });
					break;
				case 'DatePicker':
					id = xlObj._id + '_dp_' + sheetIdx + headerTxt + (rowIndex + 1);
					cell && (cell.innerHTML = '<input id =' + id + ' style = "height:' + (height - 1) + 'px" />');
					if (!isCntnrUpdated) {
						data = { 'type': cntrl, 'id': id, 'text': value, 'style': '' };
						container[index] = data;
						xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': { 'cellType': index }, 'sheetIdx': sheetIdx });
					}
					$('#' + id).ejDatePicker({ dateFormat: cellType['format'], width: '100%', height: xlObj.model.rowHeight - 1, value: (value && ej.parseDate(value, cellType['format'])) || cellType['value'] || new Date(), create: $.proxy(this._onDateCreate), change: $.proxy(this.onDateChange), cssClass: cellType['class'] || '', locale: xlObj.model.locale });
					break;
			}
		},

		addCellTypes: function (range, settings, sheetIndex) {
			var xlObj = this.XLObj;
			if (!xlObj.model.allowCellType)
				return;
			if (xlObj.model.isReadOnly)
				return;
			xlObj._isPublic = true;
			if (Array.isArray(range))
				range = xlObj._getAlphaRange(sheetIndex, range[0], range[1], range[2], range[3]);
			this._rangeCellTypes([{ 'range': range, 'settings': settings }], sheetIndex, true);
			xlObj._isPublic = false;
		},

		_rangeCellTypes: function (cellType, sheetIndex, isNew) {
			if (!cellType)
				return;
			var text, xlObj = this.XLObj, cont, headerTxt, actSheetIndex, browser = xlObj._browserDetails.name, sheetIdx = xlObj._getSheetIndex(sheetIndex), data, container = xlObj._dataContainer, cells, type, cell, id, dataRange, datacells, range, index, sheet = xlObj.getSheet(sheetIdx),
				cellTypeValue, rowIndex, colIndex, isRowViewable = false;
			if (isNew || !sheet._isLoaded) {
				if (JSON.stringify(sheet.cellTypes) != JSON.stringify(cellType))
					ej.merge(sheet.cellTypes, cellType);
				cellType = sheet.cellTypes;
			}
			for (var i = 0, length = sheet.cellTypes.length; i < length; i++) {
				range = xlObj.getRangeIndices(cellType[i]['range']); type = cellType[i]['settings']; cellTypeValue = type['isChecked'];
				cells = xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
				if (cells.length === 1) {
					xlObj._dupDetails = true;
					if (xlObj._isRowViewable(sheetIdx, cells[0].rowIndex) || !sheet._isLoaded)
						this._renderControls(cells[0].rowIndex, cells[0].colIndex, sheetIdx, type, cellTypeValue);
					xlObj._dupDetails = false;
				}
				else {
					actSheetIndex = type['dataSourceSheetIndex'] || sheetIdx;
					for (var j = 0, len = cells.length; j < len; j++) {
						rowIndex = cells[j].rowIndex; colIndex = cells[j].colIndex;
						isRowViewable = false;
						xlObj._isRowViewable(sheetIdx, rowIndex) && (isRowViewable = true);
						if (!isRowViewable && sheet._isLoaded)
							continue;
						xlObj._textClip(rowIndex, colIndex, 'delete', '', true);
						xlObj._textClip(rowIndex, colIndex, 'add');
						index = xlObj.getObjectLength(container.sheetCellType);
						cell = isRowViewable ? xlObj.getCell(rowIndex, colIndex, sheetIdx)[0] : null;
						text = xlObj.XLEdit.getPropertyValue(rowIndex, colIndex, 'value2', sheetIdx);
						cell && (cell.innerHTML = '');
						if (!xlObj._hasClass(cell, 'e-cellreadonly'))
							xlObj.addClass(cell, 'e-cellreadonly');
						headerTxt = xlObj._generateHeaderText(colIndex + 1);
						switch (type['type']) {
							case 'Button':
								id = xlObj._id + '_btn' + i + '_' + sheetIdx + headerTxt + (rowIndex + 1);
								if (xlObj.element.find("#" + id).length > 0)
									return;
								xlObj.XLFormat._writeCssRules('e-btncls' + rowIndex + colIndex, 'border: 0px; vertical-align: middle; padding: 0px;color:' + (type['color'] || '') + ';background:' + (type['backgroundColor'] || '') + ';', true, true);
								if (cell)
									cell.innerHTML = '<button id =' + id + ' type="button" class = "e-btncls' + rowIndex + colIndex + '"></button>';
								if (cell && browser === 'mozilla' || browser === 'msie') {
									xlObj.addClass(cell, 'e-btnhgt');
									xlObj.addClass(cell.parents('.e-table')[0], 'e-btnhgt');
								}
								if (isNew || !sheet._isLoaded) {
									data = { 'type': type['type'], 'id': id, 'text': type['text'] || text || type['type'] + xlObj._generateHeaderText(cells[j].colIndex + 1) + (cells[j].rowIndex + 1), 'color': (type['color'] || ''), 'background-color': (type['backgroundColor'] || '') };
									cont = { 'cellType': index };
								}
								break;
							case 'CheckBox':
								id = xlObj._id + '_chk' + i + '_' + sheetIdx + headerTxt + (rowIndex + 1);
								if (xlObj.element.find("#" + id).length > 0)
									return;
								cell && (cell.innerHTML = '<input id =' + id + ' />');
								data = { 'type': type['type'], 'id': id, 'isChecked': cellTypeValue || text || false };
								if (isNew || !sheet._isLoaded) {
									if (text && ["false", "true", "yes", "no"].indexOf(text.toLowerCase()) === -1)
										text = '';
									cont = xlObj.XLEdit._parseValue(data['isChecked'], { rowIndex: rowIndex, colIndex: colIndex });
									cont['cellType'] = index;
								}
								cell && (cell.lastChild.textContent = '');
								break;
							case 'DropDownList':
								id = xlObj._id + '_drpdwn' + i + '_' + sheetIdx + headerTxt + (rowIndex + 1);
								if (xlObj.element.find("#" + id).length > 0)
									return;
								cell && (cell.innerHTML = '<input id =' + id + ' value = ' + text + ' />');
								data = { 'type': type['type'], 'id': id, 'style': '', 'dataSource': type['dataSource'] || '', 'dataSourceRange': type['dataSourceRange'] || '', 'selectedIndex': type['selectedIndex'] > -1 ? type['selectedIndex'] : '', 'dataSourceSheetIndex': actSheetIndex };
								if (type['dataSource'] && type['field'])
									data['field'] = type['field'];
								if (type['dataSourceRange'])
									dataRange = xlObj.getRangeIndices(type['dataSourceRange']);
								if (isNew || !sheet._isLoaded) {
									if (type['dataSourceRange']) {
										dataRange = xlObj.getRangeIndices(type['dataSourceRange']), datacells = xlObj._getSelectedRange({ rowIndex: dataRange[0], colIndex: dataRange[1] }, { rowIndex: dataRange[2], colIndex: dataRange[3] });
										var ddlCells = xlObj.XLEdit._getPropWithCellIdx([datacells[0].rowIndex, datacells[0].colIndex, datacells[datacells.length - 1].rowIndex, datacells[datacells.length - 1].colIndex], "ddlRange", actSheetIndex)
										if (ddlCells.length === 0)
											xlObj.updateUniqueData({ 'ddlRange': [{ rowIndex: rowIndex, colIndex: colIndex, sheetIndex: sheetIdx }] }, [datacells[0].rowIndex, datacells[0].colIndex, datacells[datacells.length - 1].rowIndex, datacells[datacells.length - 1].colIndex], '', actSheetIndex);
										else
											for (var k = 0; k < datacells.length; k++) {
												ddlCells = xlObj.XLEdit.getPropertyValue(datacells[k].rowIndex, datacells[k].colIndex, 'ddlRange', actSheetIndex)
												if (ddlCells) {
													ddlCells.push({ rowIndex: rowIndex, colIndex: colIndex, sheetIndex: sheetIdx });
													xlObj.XLEdit._updateDataContainer({ rowIndex: datacells[k].rowIndex, colIndex: datacells[k].colIndex }, { 'dataObj': { 'ddlRange': ddlCells }, 'sheetIdx': actSheetIndex });
												}
												else
													xlObj.XLEdit._updateDataContainer({ rowIndex: datacells[k].rowIndex, colIndex: datacells[k].colIndex }, { 'dataObj': { 'ddlRange': [{ rowIndex: rowIndex, colIndex: colIndex, sheetIndex: sheetIdx }] }, 'sheetIdx': actSheetIndex });
											}
									}
									if (actSheetIndex !== sheetIdx && !xlObj.getSheet(actSheetIndex)._isLoaded)
										xlObj._initSheet(actSheetIndex);
									if (xlObj.isUndefined(type["selectedIndex"]) && text) {
										var dSrc, field;
										dSrc = type['dataSource'] || xlObj.getRangeData({ range: dataRange, sheetIdx: actSheetIndex });
										field = type['field'] || {text: 'value2'};
										var ddlText = field.text;
										if (!type['field'])
											type['field'] = field;
										k = dSrc.length;
										while (--k >= 0) {
											if (dSrc[k][ddlText] == text) {
												data["selectedIndex"] = k;
												break;
											}
											if (k == 0)
												delete data["selectedIndex"];
										}
									}
								}
								cont = { 'cellType': index };
								break;
							case "DatePicker":
								id = xlObj._id + '_dp' + i + '_' + sheetIdx + headerTxt + (rowIndex + 1);
								if (xlObj.element.find("#" + id).length > 0)
									return;
								cell && (cell.innerHTML = '<input id =' + id + ' value = ' + text + ' style = "height:' + (xlObj._getRowHeight(rowIndex, sheetIdx) - 1) + 'px" />');
								if (isNew || !sheet._isLoaded) {
									data = { 'type': type['type'], 'id': id, 'value': type['value'] || (text && ej.parseDate(text)) || new Date() };
									cont = { 'cellType': index };
								}
								break;
						}
						if (isNew || !sheet._isLoaded || xlObj._isInsdel) {
							container.sheetCellType[index] = data;
							xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': cont, 'sheetIdx': sheetIdx });
						}
					}
					switch (type['type']) {
						case 'Button':
							$("[id^='" + xlObj._id + '_btn' + i + '_' + sheetIdx + "']").not("[id *= '_hidden']").ejButton({ type: "button", width: '100%', height: '100%', text: text, create: $.proxy(this._onButtonCreate), click: $.proxy(this.onButtonClick), cssClass: cellType['class'] || '' });
							break;
						case 'CheckBox':
							$("input[id^='" + xlObj._id + '_chk' + i + '_' + sheetIdx + "']").not("[id *= '_hidden']").ejCheckBox({ change: $.proxy(this.onActiveStateChange), cssClass: cellType['class'] || '', checked: cellTypeValue || false });
							break;
						case 'DropDownList':
							$("input[id^='" + xlObj._id + '_drpdwn' + i + '_' + sheetIdx + "']").not("[id *= '_hidden']").ejDropDownList({ loadOnDemand: true, width: '100%', height: xlObj.model.rowHeight - 1, change: $.proxy(this.onActiveValueChange), 'dataSource': type['dataSource'] || xlObj.getRangeData({ range: dataRange, sheetIdx: actSheetIndex }), fields: type['field'] ? type['field'] : { text: 'value2' }, watermarkText: type['watermarkText'] || 'Select an option', cssClass: type['class'] || '', selectedIndex: type['selectedIndex'] > -1 ? type['selectedIndex'] : -1, beforePopupShown: $.proxy(this._onBeforePopupOpen) });
							break;
						case "DatePicker":
							this._cellTypeDate = type['value'];
							$("input[id^='" + xlObj._id + '_dp' + i + '_' + sheetIdx + "']").not("[id *= '_hidden']").ejDatePicker({ dateFormat: type["format"], width: '100%', height: xlObj.model.rowHeight - 1, create: $.proxy(this._onDateCreate), change: $.proxy(this.onDateChange), cssClass: cellType['class'] || '', locale: xlObj.model.locale });
							break;
					}
				}
			}
			this._cellTypeDate = '';
			var l, lLen, refreshArrRows = xlObj.getObjectKeys(sheet._refrshObj), refreshArrColumn, kLen;
			for (k = 0, kLen = refreshArrRows.length; k < kLen; k++) {
				refreshArrColumn = xlObj.getObjectKeys(sheet._refrshObj[refreshArrRows[k]]);
				for (l = 0, lLen = refreshArrColumn.length; l < lLen; l++) {
					this._isIntrnlUpdate = true;
					if (sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].type === 'CheckBox')
						$('#' + sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].id).length && $('#' + sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].id).ejCheckBox('instance').option('checked', sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]]['isChecked']);
					else if (sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].type === 'DropDownList')
						$('#' + sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].id).length && $('#' + sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].id).ejDropDownList('instance').option('selectedIndex', sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]]['selectedIndex']);
					else if (sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].type === 'DatePicker')
						$('#' + sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].id).length && $('#' + sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]].id).ejDatePicker('instance').option('value', sheet._refrshObj[refreshArrRows[k]][refreshArrColumn[l]]['value']);
					this._isIntrnlUpdate = false;
				}
			}
		},

		removeCellTypes: function (aRange, sheetIdx) {
			var xlObj = this.XLObj;
			if (xlObj.model.isReadOnly)
				return;
			sheetIdx = xlObj._getSheetIndex(sheetIdx)
			var i, len, range = xlObj._getRangeArgs(aRange, "object"), cells = xlObj.XLEdit._getPropWithCellIdx(range, 'cellType', sheetIdx);
			for (i = 0, len = cells.length; i < len; i++)
				this._removeControls(cells[i].rowIdx, cells[i].colIdx, sheetIdx);
		},

		_removeControls: function (rowIndex, colIndex, sheetIdx, cntnrUpdate) {
			var xlObj = this.XLObj; sheetIdx = xlObj._getSheetIndex(sheetIdx);
			var cell, container = xlObj._dataContainer, sheet = xlObj.getSheet(sheetIdx), index;
			if (!cntnrUpdate) {
				delete container.sheetCellType[container.sheets[sheetIdx][rowIndex][colIndex]['cellType']];
				delete container.sheets[sheetIdx][rowIndex][colIndex]['cellType'];
				index = this._rangeInColl(xlObj._getAlphaRange(sheetIdx, rowIndex, colIndex, rowIndex, colIndex), sheetIdx);
				(index > -1) && sheet.cellTypes.splice(index, 1);
			}
			if (xlObj._isRowViewable(sheetIdx, rowIndex)) {
				cell = xlObj.getCell(rowIndex, colIndex, sheetIdx)[0];
				cell.innerHTML = xlObj.XLEdit.getPropertyValue(rowIndex, colIndex, 'value2', sheetIdx) || '';
				xlObj._removeClass(cell, 'e-cellreadonly');
			}
		},

		onActiveValueChange: function (args) {
			var xlObj = this.element.closest(".e-spreadsheet").data("ejSpreadsheet")
			if (xlObj.model.isReadOnly)
				return;
			var container = xlObj._dataContainer, cell = this.element.closest('td'), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), cellIndex = xlObj._getCellIdx(cell[0]), rowIndex = cellIndex.rowIndex, colIndex = cellIndex.colIndex, cType = container.sheetCellType[container.sheets[sheetIdx][rowIndex][colIndex]['cellType']], dRange = cType['dataSourceRange'] && xlObj.getRangeIndices(cType['dataSourceRange']);
			cType['selectedIndex'] = args.itemId;
			if (cType.id.split("_")[1] != "drpdwn") {
				if (ej.isNullOrUndefined(sheet._refrshObj[rowIndex]))
					sheet._refrshObj[rowIndex] = {};
				sheet._refrshObj[rowIndex][colIndex] = { rowIndex: rowIndex, colIndex: colIndex, selectedIndex: args.itemId, type: "DropDownList", id: cType.id };
			}
			xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': xlObj.XLEdit._parseValue(args.text, { rowIndex: rowIndex, colIndex: colIndex }) });
			if (dRange && (xlObj.XLEdit.getPropertyValue(dRange[0] + args.itemId, dRange[1], 'type') === "number"))
				xlObj.XLFormat.format({ 'type': "number" }, [rowIndex, colIndex, rowIndex, colIndex]);
			args.cellIndex = cellIndex;
			args.cellType = "dropdownlist";
			xlObj._trigger('cellSave', args);
			(xlObj.model.allowFormulaBar) && xlObj.updateFormulaBar();
		},

		onActiveStateChange: function (args) {
			var xlObj = this.element.closest(".e-spreadsheet").data("ejSpreadsheet");
			if (xlObj.model.isReadOnly || xlObj.XLCellType._isIntrnlUpdate)
				return;
			var container = xlObj._dataContainer, text, cell = this.element.closest('td'), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), cellIndex = xlObj._getCellIdx(cell[0]), rowIndex = xlObj._getRowIdx(cellIndex.rowIndex, sheetIdx), colIndex = cellIndex.colIndex, cType, range;
			cType = container.sheetCellType[container.sheets[sheetIdx][cellIndex.rowIndex][colIndex]['cellType']]
			cType['isChecked'] = args.isChecked;
			range = xlObj.getAlphaRange(rowIndex, colIndex, rowIndex, colIndex);
			for (var i = 0, len = sheet.cellTypes.length; i < len; i++) {
				if (sheet.cellTypes[i].range == range)
					sheet.cellTypes[i].settings['isChecked'] = args.isChecked;
			}
			if (cType.id.split("_")[1] != "chk") {
				if (ej.isNullOrUndefined(sheet._refrshObj[rowIndex]))
					sheet._refrshObj[rowIndex] = {};
				sheet._refrshObj[rowIndex][colIndex] = { rowIndex: rowIndex, colIndex: colIndex, isChecked: args.isChecked, type: "CheckBox", id: cType.id };
			}
			if (['yes', 'no'].indexOf(xlObj.XLEdit.getPropertyValue(cellIndex.rowIndex, colIndex, 'value2').toString().toLowerCase()) > -1) {
				if (args.isChecked)
					text = 'YES';
				else
					text = 'NO';
			}
			else
				text = args.isChecked.toString().toUpperCase();
			xlObj.XLEdit._updateDataContainer({ rowIndex: cellIndex.rowIndex, colIndex: colIndex }, { 'dataObj': xlObj.XLEdit._parseValue(text, { rowIndex: cellIndex.rowIndex, colIndex: colIndex }) });
			args.cellIndex = cellIndex;
			args.cellType = "checkbox";
			xlObj._trigger('cellSave', args);
			(xlObj.model.allowFormulaBar) && xlObj.updateFormulaBar();
		},

		_onDateCreate: function (args) {
			var xlObj = this.element.closest(".e-spreadsheet").data("ejSpreadsheet"), cell = this.element.closest('td'), sheetIdx = xlObj.getActiveSheetIndex(), cellIndex = xlObj._getCellIdx(cell[0]), rowIndex = xlObj._getRowIdx(cellIndex.rowIndex, sheetIdx), colIndex = cellIndex.colIndex;
			var dateValue = args.model.value || new Date(xlObj.XLCellType._cellTypeDate);
			var dataObj = xlObj.XLEdit._parseValue(dateValue ? (dateValue.toLocaleString().split(', ')[0]) : "", { rowIndex: rowIndex, colIndex: colIndex });
			dataObj.formatStr = "{0:" + args.model.dateFormat + "}";
			dataObj.value = dateValue;
			dataObj.value2 = ej.format(dateValue, args.model.dateFormat, xlObj.model.locale);
			if (xlObj.XLCellType._cellTypeDate) {
				this.option('value', dateValue);
			}
			xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': dataObj });
		},

		onDateChange: function (args) {
			var xlObj = this.element.closest(".e-spreadsheet").data("ejSpreadsheet"), cType;
			if (xlObj.model.isReadOnly)
				return;
			var container = xlObj._dataContainer, cell = this.element.closest('td'), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), cellIndex = xlObj._getCellIdx(cell[0]), rowIndex = xlObj._getRowIdx(cellIndex.rowIndex, sheetIdx), colIndex = cellIndex.colIndex;
			cType = container.sheetCellType[container.sheets[sheetIdx][cellIndex.rowIndex][colIndex]['cellType']];
			container.sheets[sheetIdx][cellIndex.rowIndex][colIndex]['SelectedTextValue'] = args.value;
			if (cType.id.split("_")[1] != "dp") {
				if (ej.isNullOrUndefined(sheet._refrshObj[rowIndex]))
					sheet._refrshObj[rowIndex] = {};
				sheet._refrshObj[rowIndex][colIndex] = { rowIndex: rowIndex, colIndex: colIndex, value: args.model.value, type: "DatePicker", id: cType.id };
			}
			var dataObj = xlObj.XLEdit._parseValue(args.model.value ? (args.model.value.toLocaleString().split(ej.isNullOrUndefined(args.model.value.toLocaleString().match(/[,]/)) ? ' ' : ', ')[0]) : "", { rowIndex: rowIndex, colIndex: colIndex });
			dataObj.formatStr = "{0:" + args.model.dateFormat + "}";
			dataObj.value = args.model.value;
			dataObj.value2 = ej.format(args.model.value, args.model.dateFormat, xlObj.model.locale);
			xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': dataObj });
			args.cellIndex = cellIndex;
			args.cellType = "datepicker";
			!xlObj._isPublic && xlObj._trigger('cellSave', args);
			(xlObj.model.allowFormulaBar) && xlObj.updateFormulaBar();
		},

		_onButtonCreate: function (args) {
			var xlObj = this.element.closest(".e-spreadsheet").data("ejSpreadsheet"), cell = this.element.closest('td'), sheetIdx = xlObj.getActiveSheetIndex(), cellIndex = xlObj._getCellIdx(cell[0]), rowIndex = xlObj._getRowIdx(cellIndex.rowIndex, sheetIdx), colIndex = cellIndex.colIndex;
			xlObj.XLEdit._updateDataContainer({ rowIndex: rowIndex, colIndex: colIndex }, { 'dataObj': xlObj.XLEdit._parseValue(args.model.text, { rowIndex: rowIndex, colIndex: colIndex }) });
		},

		onButtonClick: function (args) {
			var xlObj = this.element.closest(".e-spreadsheet").data("ejSpreadsheet");
			if (xlObj.model.isReadOnly)
				return;
			args.cellIndex = xlObj._getCellIdx($(args.target).closest('td')[0]);
			args.cellType = "button";
			xlObj._trigger('cellClick', args);
			args.e.stopPropagation();
		},

		_onBeforePopupOpen: function () {
			var xlObj = this.element.closest(".e-spreadsheet").data("ejSpreadsheet"), sheetIdx = xlObj.getActiveSheetIndex(), container = xlObj._dataContainer, cell = this.element.closest('td'), cellIndex = xlObj._getCellIdx(cell[0]), rowIndex = cellIndex.rowIndex,
				colIndex = cellIndex.colIndex, ddlCont = container.sheetCellType[container.sheets[sheetIdx][rowIndex][colIndex]['cellType']],
				actSheetIndex = ddlCont['dataSourceSheetIndex'] || sheetIdx, dataSource;
			!xlObj.getSheet(actSheetIndex)._isLoaded && xlObj._initSheet(actSheetIndex);
			dataSource = ddlCont['dataSource'] || xlObj.getRangeData({ range: xlObj.getRangeIndices(ddlCont['dataSourceRange']), sheetIdx: actSheetIndex });
			if(!xlObj._isEmptyString(ddlCont["dataSourceRange"])) {
				$('#' + ddlCont['id']).ejDropDownList('instance').option("dataSource", dataSource);
				$('#' + ddlCont['id']).ejDropDownList('instance').option("selectedItemIndex", ddlCont['selectedIndex']);
			}
		},

		_rangeInColl: function (range, sheetIndex) {
			var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj._getSheetIndex(sheetIndex)), type = sheet.cellTypes;
			for (var i = 0, len = type.length; i < len; i++)
				if (type[i].range === range)
					return i;
		},

		_rfrshCtrlText: function (cellInfo, val) {
			var xlObj = this.XLObj, isUpdtDtcnr = true, cType, cTypeObj, selectedIndex;
			if (!xlObj.isUndefined(cellInfo.rowIndex) && !xlObj.isUndefined(cellInfo.colIndex)) {
				cellInfo = xlObj.getRangeData({ range: [cellInfo.rowIndex, cellInfo.colIndex, cellInfo.rowIndex, cellInfo.colIndex], property: ["cellType", "value"] })[0];
				val = cellInfo.value;
			}
			cType = xlObj._dataContainer.sheetCellType[cellInfo.cellType];
			if (cType) {
				switch (cType.type) {
					case ej.Spreadsheet.CustomCellType.DropDownList:
						cTypeObj = $("#" + cType.id).data("ej" + cType.type);
						if (cTypeObj) {
							selectedIndex = cTypeObj.selectedIndexValue;
							cTypeObj._raiseEvents = false;
							cTypeObj.selectItemByText(val, true);
							cTypeObj._raiseEvents = true;
							if (selectedIndex !== cTypeObj.selectedIndexValue) {
								cType.selectedIndex = cTypeObj.selectedIndexValue;
								xlObj._isSelIdxChange = true;
							}
							else
								isUpdtDtcnr = false;
						}
						break;
					case ej.Spreadsheet.CustomCellType.DatePicker:
						cTypeObj = $("#" + cType.id).data("ej" + cType.type);
						if (cTypeObj)
							cTypeObj.option("value", val);
						break;
				}
			}
			return isUpdtDtcnr;
		},

		_refreshCellType: function (value) {
			var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), cellTypeRow, cellTypeColumn, oldCellType, id, cellTypeObj;
			cellTypeRow = xlObj.getObjectKeys(sheet._refrshObj);
			for (var a = 0, length = cellTypeRow.length; a < length; a++) {
				cellTypeRow[a] = parseInt(cellTypeRow[a]);
				if (value.status == "insertRow")
					sheet._refrshObj[cellTypeRow[a] + value.rowCount] = {};
				if (value.status == "deleteRow")
					sheet._refrshObj[cellTypeRow[a] - value.rowCount] = {};
				cellTypeColumn = xlObj.getObjectKeys(sheet._refrshObj[cellTypeRow[a]]);
				for (var b = 0, len = cellTypeColumn.length; b < len; b++) {
					cellTypeColumn[b] = parseInt(cellTypeColumn[b]);
					oldCellType = sheet._refrshObj[cellTypeRow[a]][cellTypeColumn[b]];
					id = oldCellType.id.split("_");
					if (value.startCol <= cellTypeColumn[b]) {
						if (value.status == "insertColumn") {
							id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) + value.colCount + 1) + (cellTypeRow[a] + 1);
							cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
							if (oldCellType.type == "DropDownList")
								cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
							if (oldCellType.type == "CheckBox")
								cellTypeObj["isChecked"] = oldCellType.isChecked;
							if (oldCellType.type == "DatePicker")
								cellTypeObj.value = oldCellType.value;
							sheet._refrshObj[cellTypeRow[a]][parseInt(cellTypeColumn[b]) + value.colCount] = cellTypeObj;
							delete sheet._refrshObj[cellTypeRow[a]][cellTypeColumn[b]];
						}
						if (value.status == "deleteColumn") {
							id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) - value.colCount + 1) + (cellTypeRow[a] + 1);
							cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
							if (oldCellType.type == "DropDownList")
								cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
							if (oldCellType.type == "CheckBox")
								cellTypeObj["isChecked"] = oldCellType.isChecked;
							if (oldCellType.type == "DatePicker")
								cellTypeObj.value = oldCellType.value;
							sheet._refrshObj[cellTypeRow[a]][parseInt(cellTypeColumn[b]) - value.colCount] = cellTypeObj;
							delete sheet._refrshObj[cellTypeRow[a]][cellTypeColumn[b]];
						}
					}
					if (value.startRow <= cellTypeRow[a]) {
						if (value.status == "insertRow") {
							id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) + 1) + (cellTypeRow[a] + value.rowCount + 1);
							cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
							if (oldCellType.type == "DropDownList")
								cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
							if (oldCellType.type == "CheckBox")
								cellTypeObj["isChecked"] = oldCellType.isChecked;
							if (oldCellType.type == "DatePicker")
								cellTypeObj.value = oldCellType.value;
							sheet._refrshObj[cellTypeRow[a] + value.rowCount][cellTypeColumn[b]] = cellTypeObj;
						}
						if (value.status == "deleteRow") {
							if (value.startRow == cellTypeRow[a]) {
								delete sheet._refrshObj[cellTypeRow[a]];
							}
							else {
								id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) + 1) + (cellTypeRow[a] - value.rowCount + 1);
								cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
								if (oldCellType.type == "DropDownList")
									cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
								if (oldCellType.type == "CheckBox")
									cellTypeObj["isChecked"] = oldCellType.isChecked;
								if (oldCellType.type == "DatePicker")
									cellTypeObj.value = oldCellType.value;
								sheet._refrshObj[cellTypeRow[a] - value.rowCount][cellTypeColumn[b]] = cellTypeObj;
							}
						}
					}
					if (value.status == "shiftBottom") {
						id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) + 1) + (cellTypeRow[a] + value.rowCount + 1);
						sheet._refrshObj[cellTypeRow[a] + value.rowCount] = {};
						cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
						if (oldCellType.type == "DropDownList")
							cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
						if (oldCellType.type == "CheckBox")
							cellTypeObj["isChecked"] = oldCellType.isChecked;
						if (oldCellType.type == "DatePicker")
							cellTypeObj.value = oldCellType.value;
						sheet._refrshObj[cellTypeRow[a] + value.rowCount][cellTypeColumn[b]] = cellTypeObj;
						delete sheet._refrshObj[cellTypeRow[a]];
					}
					if (value.status == "shiftUp") {
						id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) + 1) + (cellTypeRow[a] - value.rowCount + 1);
						sheet._refrshObj[cellTypeRow[a] - value.rowCount] = {};
						cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
						if (oldCellType.type == "DropDownList")
							cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
						if (oldCellType.type == "CheckBox")
							cellTypeObj["isChecked"] = oldCellType.isChecked;
						if (oldCellType.type == "DatePicker")
							cellTypeObj.value = oldCellType.value;
						sheet._refrshObj[cellTypeRow[a] - value.rowCount][cellTypeColumn[b]] = cellTypeObj;
						delete sheet._refrshObj[cellTypeRow[a]];
					}
					if (value.status == "shiftRight") {
						id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) + value.colCount + 1) + (cellTypeRow[a] + 1);
						cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
						if (oldCellType.type == "DropDownList")
							cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
						if (oldCellType.type == "CheckBox")
							cellTypeObj["isChecked"] = oldCellType.isChecked;
						if (oldCellType.type == "DatePicker")
							cellTypeObj.value = oldCellType.value;
						sheet._refrshObj[cellTypeRow[a]][parseInt(cellTypeColumn[b]) + value.colCount] = cellTypeObj;
						delete sheet._refrshObj[cellTypeRow[a]][cellTypeColumn[b]];
					}
					if (value.status == "shiftLeft") {
						id[2] = sheetIdx + xlObj._generateHeaderText(parseInt(cellTypeColumn[b]) - value.colCount + 1) + (cellTypeRow[a] + 1);
						cellTypeObj = { rowIndex: oldCellType.rowIndex, colIndex: oldCellType.colIndex + value.colCount, type: oldCellType.type, id: id.join("_") };
						if (oldCellType.type == "DropDownList")
							cellTypeObj["selectedIndex"] = oldCellType.selectedIndex;
						if (oldCellType.type == "CheckBox")
							cellTypeObj["isChecked"] = oldCellType.isChecked;
						if (oldCellType.type == "DatePicker")
							cellTypeObj.value = oldCellType.value;
						sheet._refrshObj[cellTypeRow[a]][parseInt(cellTypeColumn[b]) - value.colCount] = cellTypeObj;
						delete sheet._refrshObj[cellTypeRow[a]][cellTypeColumn[b]];
					}
				}
				if ((value.status == "insertRow") || (value.status == "deleteRow")) {
					delete sheet._refrshObj[cellTypeRow[a]];
				}
			}
		}
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.cFormat = function (obj) {
        this.XLObj = obj;
        this._dataBarStyle = [];
    };

    ej.spreadsheetFeatures.cFormat.prototype = {

        //Conditional formatting   

        getCFRule: function (rowIdx, colIdx) {
            var xlObj = this.XLObj;
            var ruleColl = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, ["cFormatRule"]);
            var rules = [], names = xlObj._dataContainer.cFormatData, splitStr;
            if (ruleColl) {
                for (var i = 0, len = ruleColl.length; i < len; i++) {
                    splitStr = names[ruleColl[i]].split("_");
                    rules.push({ "action": splitStr[0], "inputs": [splitStr[2], splitStr[3]], "color": splitStr[4], "bgColor": splitStr[5], "range": splitStr[6], "isApplied": JSON.parse(splitStr[8]) });
                }
            }
            return rules;
        },

        setCFRule: function (rule) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            if (!xlObj.model.allowConditionalFormats)
                return;
            if (rule.action == "databar" || rule.action == "colorscale" || rule.action == "iconset") {
                if (rule.action == "iconset") {
                    colors = (rule.iconSet) ? this._getIconSet(rule.iconSet) : rule.color ? (rule.color.indexOf(',') > -1 && rule.color) : this._getIconSet(rule.color);
                }
                (rule.action == "databar" || rule.action == "colorscale") && (colors = rule.color);
                !ej.isNullOrUndefined(colors) && this._cFormat(rule.action, null, null, colors, null, rule.range, xlObj.getActiveSheetIndex());
            } else {
                var input1 = rule.inputs[0], input2 = rule.inputs[1];
                this._cFormat(rule.action, input1, input2, rule.color, rule.bgColor, rule.range, xlObj.getActiveSheetIndex());
            }
        },

        _getIconSet: function (iconset) {
            var iconcolors = "greenarrow,yellowarrow,redarrow";
            switch (iconset) {
                case ej.Spreadsheet.IconSet.ThreeArrows:
                    iconcolors = "greenarrow,yellowarrow,redarrow";
                    break;
                case ej.Spreadsheet.IconSet.ThreeArrowsGray:
                    iconcolors = "uparrow,midarrow,downarrow";
                    break;
                case ej.Spreadsheet.IconSet.ThreeTriangles:
                    iconcolors = "uptriangle,midtriangle,downtriangle";
                    break;
                case ej.Spreadsheet.IconSet.ThreeTrafficLights:
                    iconcolors = "greencircle,yellowcircle,redcircle";
                    break;
                case ej.Spreadsheet.IconSet.ThreeTrafficLightsRimmed:
                    iconcolors = "rimgreencircle,rimyellowcircle,rimredcircle";
                    break;
                case ej.Spreadsheet.IconSet.ThreeSigns:
                    iconcolors = "greencircle,yellowtri,redsquare";
                    break;
                case ej.Spreadsheet.IconSet.ThreeSymbolsCircled:
                    iconcolors = "greencircleindi,yellowcircleindi,redcircleindi";
                    break;
                case ej.Spreadsheet.IconSet.ThreeSymbolsUnCircled:
                    iconcolors = "tick,exclam,cross";
                    break;
                case ej.Spreadsheet.IconSet.ThreeFlags:
                    iconcolors = "greenflag,yellowflag,redflag";
                    break;
                case ej.Spreadsheet.IconSet.ThreeStars:
                    iconcolors = "fullstar,halfstar,drystar";
                    break;
            }
            return iconcolors;
        },
        _updateCFormatRule: function (rule, isApply) {
            rule = rule.indexOf("true") > -1 ? rule.replace("true", isApply) : rule.replace("false", isApply);
            return rule;
        },

        _getRuleIndex: function (rule, ruleCol) {
            if (ej.isNullOrUndefined(ruleCol))
                return -1;
            for (var i = 0, len = ruleCol.length; i < len; i++) {
                if (ruleCol[i] === rule)
                    return i;
            }
            return -1;
        },
        _refreshCFormatFormula: function (rowIdx, colIdx, sheetIdx) {
            var xlObj = this.XLObj, sheetData = xlObj.getSheet(sheetIdx)._cFormatFormula, cellDetail, range;
            if (!xlObj.isUndefined(sheetData[rowIdx]) && !xlObj.isUndefined(sheetData[rowIdx][colIdx])) {
                cellDetail = sheetData[rowIdx][colIdx][0].Formula;
                this._applyFormulaValues(cellDetail.referCell, cellDetail.cFColor, cellDetail.bgColor, "formularule", cellDetail.addr, sheetIdx, range, cellDetail.applyCell);
            }
        },

        _applyFormulaValues: function (input, cFColor, bgColor, action, addr, sheetIdx, range, cell, status, copyCell) {
            var xlObj = this.XLObj, selected, i, j, len, inputSplt, rangeIndex, formula, getSheet = xlObj.getSheet(sheetIdx), rowIdx, colIdx, operandCln, tRule, isApply, prevStatus = true, ruleIdx = -1, input2, splt = [], operand, calcEngine, referCell, selRng, rcRefer, rRefer, cRefer, cellRefer, selRowIdx, selColIdx;
            if (ej.isNullOrUndefined(range) && ej.isNullOrUndefined(addr))
                selected = getSheet._selectedCells;
            else if (!ej.isNullOrUndefined(addr))
                selected = xlObj._getMultiRangeCells(addr);
            else
                selected = xlObj._getMultiRangeCells(range);
            addr = xlObj._getAlphaRange(sheetIdx, selected[0].rowIndex, selected[0].colIndex, selected[selected.length - 1].rowIndex, selected[selected.length - 1].colIndex);
            if (xlObj.isUndefined(action)) {
                calcEngine = xlObj._calcEngine;
                var cellArgs = new ValueChangedArgs(-1, -1, input);
                calcEngine.valueChanged(getSheet.sheetInfo.value, cellArgs);
                input = (calcEngine.getFormulaInfoTable().getItem("!" + (sheetIdx - 1) + "!-1").getFormulaValue() === "TRUE") ? true : false;
                if (xlObj._isBool(input))
                    isApply = input;
                else
                    isApply = false;
                tRule = "formularule" + "_" + action + "_" + input + "__" + cFColor + "_" + bgColor + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                this._applyCFormatRule({ rowIndex: cell.rowIndex, colIndex: cell.colIndex }, tRule, ruleIdx, isApply, prevStatus, cFColor, bgColor);
            }
            else {
                operandCln = ["<=", ">=", "<", ">", "="];
                if (input.startsWith("="))
                    input = input.substr(1);
                if (input.indexOf("==") > -1) {
                    xlObj._showAlertDlg("Alert", "NewRuleAlert", "", 430);
                    return true;
                }
                for (i = 0, len = operandCln.length; i < len; i++) {
                    if (input.indexOf(operandCln[i]) > -1) {
                        splt = input.split(operandCln[i]);
                        operand = operandCln[i];
                    }
                }
                if (!splt.length)
                    splt[0] = input;
                inputSplt = splt.slice();
                if (status === "paste") {
                    var difRowIdx, difColIdx; input = "";
                    for (i = 0, len = splt.length; i < len; i++) {
                        if (xlObj._isvalidRange(splt[i] + ":" + splt[i])) {
                            cell = xlObj._getMultiRangeCells(splt[i]);
                            difRowIdx = range[0] - copyCell.rowIndex;
                            difColIdx = range[1] - copyCell.colIndex;
                            splt[i] = xlObj._getAlphaRange(sheetIdx, cell[0].rowIndex + difRowIdx, cell[0].colIndex + difColIdx, cell[0].rowIndex + difRowIdx, cell[0].colIndex + difColIdx);
                        }
                    }
                    input = (len === 2) ? splt[0] + operand + splt[1] : splt[0];
                }
                rangeIndex = this._formulaCellRefer(splt, selected);
                for (i = 0, len = selected.length; i < len; i++) {
                    rcRefer = false, rRefer = false, cRefer = false, cellRefer = false, selRng = false;
                    rowIdx = selected[i].rowIndex;
                    colIdx = selected[i].colIndex;
                    referCell = this._formulaCellRange({ rowIndex: rowIdx, colIndex: colIdx }, rangeIndex, inputSplt, operand, sheetIdx);
                    formula = referCell.formula;
                    calcEngine = xlObj._calcEngine;
                    cellArgs = new ValueChangedArgs(-1, -1, formula);
                    calcEngine.valueChanged(getSheet.sheetInfo.value, cellArgs);
                    input2 = (calcEngine.getFormulaInfoTable().getItem("!" + (sheetIdx - 1) + "!-1").getFormulaValue() === "TRUE") ? true : false;
                    if (xlObj._isBool(input2)) {
                        isApply = input2;
                        if (isApply) {
                            selRng = true;
                            selRowIdx = rowIdx;
                            selColIdx = colIdx;
                            rcRefer = true;
                        }
                    }
                    else
                        isApply = false;
                    if (input.indexOf("$") >= 0) {
                        if (input.split("$").length === 2) {
                            if (input.charAt(0) === "$") { // row or column wise
                                if (isApply && selected[i].rowIndex === selected[0].rowIndex || selected[i].rowIndex === selRowIdx)
                                    rRefer = true;
                            }
                            else if (isApply && selected[i].colIndex === selected[0].colIndex || selected[i].colIndex === selColIdx)
                                cRefer = true;
                        }
                        else
                            cellRefer = true;
                    }
                    tRule = "formularule" + "_" + operand + "_" + input + "/" + formula + "__" + cFColor + "_" + bgColor + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                    for (j = 0; j < xlObj.getObjectLength(referCell) - 1; j++)
                        this._formulaCellUpdate({ rowIndex: referCell["referCell" + j].rowIndex, colIndex: referCell["referCell" + j].colIndex }, { rowIndex: rowIdx, colIndex: colIdx }, input, formula, addr, cFColor, bgColor, sheetIdx);
                    this._applyCFormatRule({ rowIndex: rowIdx, colIndex: colIdx }, tRule, ruleIdx, isApply, prevStatus, cFColor, bgColor, selRng, rcRefer, rRefer, cRefer, cellRefer);
                    if (!(isApply || (selRng || rcRefer || rRefer || cRefer)) && xlObj._isRowViewable(sheetIdx, rowIdx))
                        xlObj.getCell(rowIdx, colIdx, sheetIdx).removeClass("e-redft e-yellowft e-greenft e-redf e-redt");
                }
            }
        },

        _formulaCellUpdate: function (referCell, currCell, input, formula, addr, cFColor, bgColor, sheetIdx) {
            var xlObj = this.XLObj, sheetData = xlObj.getSheet(sheetIdx)._cFormatFormula, rowData, referRowIdx = referCell.rowIndex, referColIdx = referCell.colIndex;
            if (referRowIdx in sheetData) {
                rowData = sheetData[referRowIdx];
                if (referColIdx in rowData)
                    rowData[referColIdx].push({ "Formula": { "applyCell": currCell, "formula": input, "referCell": formula, "addr": addr, "cFColor": cFColor, "bgColor": bgColor } });
                else {
                    rowData[referColIdx] = [];
                    rowData[referColIdx].push({ "Formula": { "applyCell": currCell, "formula": input, "referCell": formula, "addr": addr, "cFColor": cFColor, "bgColor": bgColor } });
                }
            }
            else {
                rowData = sheetData[referRowIdx] = {};
                rowData[referColIdx] = [];
                rowData[referColIdx].push({ "Formula": { "applyCell": currCell, "formula": input, "referCell": formula, "addr": addr, "cFColor": cFColor, "bgColor": bgColor } });
            }
        },

        _formulaCellRange: function (selected, rangeIndex, inputFormula, operand, sheetIdx) {
            var i, len, formula, xlObj = this.XLObj, k = 0, j, aRange = [], index = 0, objLen = xlObj.getObjectLength(rangeIndex), spltFormula, referRowIdx, referColIdx, alphaRange = {}, range = {};
            for (i = 0; i < objLen; i++) {
                if (xlObj._isObject(rangeIndex["range" + i])) {
                    referRowIdx = selected.rowIndex + rangeIndex["range" + i].rowIndex;
                    referColIdx = selected.colIndex + rangeIndex["range" + i].colIndex;
                    alphaRange["range" + i] = xlObj._getAlphaRange(sheetIdx, referRowIdx, referColIdx, referRowIdx, referColIdx);
                }
                else {
                    referRowIdx = selected.rowIndex;
                    referColIdx = selected.colIndex;
                    alphaRange["range" + i] = rangeIndex["range" + i];
                }
                range["referCell" + i] = { rowIndex: referRowIdx, colIndex: referColIdx };
            }
            for (j = 0; j < inputFormula.length; j++) {
                spltFormula = xlObj.XLDragFill._parseFormula("=" + inputFormula[j]);
                for (i = 0, len = spltFormula.length; i < len; i++) {
                    if (xlObj._isvalidRange(spltFormula[i] + ":" + spltFormula[i])) {
                        spltFormula[i] = alphaRange["range" + k];
                        k++;
                    }

                }
                aRange[index] = spltFormula.join("");
                index++;
            }
            if (xlObj.isUndefined(operand))
                formula = "=" + aRange[0];
            else
                formula = "=" + aRange[0] + operand + aRange[1];
            range["formula"] = formula;
            return range;
        },

        _formulaCellRefer: function (splt, selected) {
            var xlObj = this.XLObj, j, i, len, formulaCell, index = 0, spltFormula, aRange = [], alphRange, rangeSplit, difRowIndex, difColIndex, rangeIndex = {}, refer;
            for (j = 0; j < splt.length; j++) {
                if (xlObj.isFormula("=" + splt[j])) {
                    spltFormula = xlObj.XLDragFill._parseFormula(splt[j]);
                    for (i = 0, len = spltFormula.length; i < len; i++) {
                        if (xlObj._isvalidRange(spltFormula[i] + ":" + spltFormula[i])) {
                            aRange[index] = spltFormula[i];
                            index++;
                        }
                    }
                }
                else {
                    aRange[index] = splt[j];
                    index++;
                }
            }
            splt = aRange;
            for (i = 0; i < splt.length; i++) {
                alphRange = splt[i].startsWith("=") ? splt[i].split("=")[1] : splt[i];
                rangeSplit = alphRange.split("$").length;
                if (xlObj._isvalidRange(splt[i] + ":" + splt[i])) {
                    if (xlObj._isvalidRange(alphRange + ":" + alphRange)) {
                        if (alphRange.indexOf("$") < 0)
                            refer = "RCRefer";
                        else if (alphRange.startsWith("$") && rangeSplit === 3)
                            refer = "CellRefer"
                        else if (alphRange.startsWith("$") && rangeSplit === 2)
                            refer = "RRefer";
                        else if (!alphRange.startsWith("$") && alphRange.indexOf("$") > -1)
                            refer = "CRefer";
                    }
                    if (splt[i].indexOf("$") > -1)
                        splt[i] = splt[i].split("$").join("");
                    formulaCell = xlObj._getMultiRangeCells(splt[i]);
                    switch (refer) {
                        case "RCRefer":
                            difRowIndex = formulaCell[0].rowIndex - selected[0].rowIndex;
                            difColIndex = formulaCell[0].colIndex - selected[0].colIndex;
                            break;
                        case "RRefer":
                            difRowIndex = formulaCell[0].rowIndex - selected[0].rowIndex;
                            difColIndex = formulaCell[0].colIndex - selected[0].colIndex;
                            break;
                        case "CRefer":
                            difRowIndex = formulaCell[0].rowIndex - selected[0].rowIndex
                            difColIndex = formulaCell[0].colIndex - selected[0].colIndex;
                            break;
                        case "CellRefer":
                            difRowIndex = formulaCell[0].rowIndex - selected[0].rowIndex;
                            difColIndex = formulaCell[0].colIndex - selected[0].colIndex;
                            break;

                    }
                    splt[i] = { rowIndex: difRowIndex, colIndex: difColIndex };
                }
                rangeIndex["range" + i] = splt[i];
            }
            return rangeIndex;
        },

        _clearCFormula: function (rowIdx, colIdx, sheetIdx) {
            var xlObj = this.XLObj, input, splt = [], aRange = [], index = 0, spltFormula, i, j, len, cFormatRule = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "cFormatRule"), referCell, operandCln,
                sheetData = xlObj.getSheet(sheetIdx)._cFormatFormula;
            if (cFormatRule && cFormatRule[0].split("_")[0] === 'formularule') {
                input = cFormatRule[0].split("_")[2].split("/")[1];
                if (input.startsWith("="))
                    input = input.substr(1);
                if (xlObj.isFormula("=" + input)) {
                    operandCln = ["<=", ">=", "<", ">", "="];
                    for (i = 0, len = operandCln.length; i < len; i++) {
                        if (input.indexOf(operandCln[i]) > -1)
                            splt = input.split(operandCln[i]);
                    }
                    if (!splt.length)
                        splt[0] = input;
                    for (i = 0, len = splt.length; i < len; i++) {
                        if (xlObj.isFormula("=" + splt[i])) {
                            spltFormula = xlObj.XLDragFill._parseFormula(splt[i]);
                            for (j = 0; j < spltFormula.length; j++) {
                                if (xlObj._isvalidRange(spltFormula[j] + ":" + spltFormula[j])) {
                                    aRange[index] = spltFormula[j];
                                    index++;
                                }
                            }
                        }
                        else {
                            aRange[index] = splt[i];
                            index++;
                        }
                    }
                    for (i = 0, len = aRange.length; i < len; i++) {
                        referCell = xlObj._getMultiRangeCells(aRange[i])[0];
                        if (!xlObj.isUndefined(sheetData[referCell.rowIndex])) {
                            if (!xlObj.isUndefined(sheetData[referCell.rowIndex][referCell.colIndex]))
                                delete sheetData[referCell.rowIndex][referCell.colIndex];
                            if (!xlObj.getObjectLength(sheetData[referCell.rowIndex]))
                                delete sheetData[referCell.rowIndex];
                        }
                    }
                }
            }
        },

        _getGradient: function (t, start, middle, end, large) {
            if (ej.isNullOrUndefined(end)) {
                return this._getLinear(start, middle, t / large);
            } else {
                var center = large / 2;
                return t >= center ? this._getLinear(middle, end, Math.abs((t - center) / center)) : this._getLinear(start, middle, t / center);
            }
        },

        _getLinear: function (s, e, x) {
            var r = this._byteLinear(s[1] + s[2], e[1] + e[2], x);
            var g = this._byteLinear(s[3] + s[4], e[3] + e[4], x);
            var b = this._byteLinear(s[5] + s[6], e[5] + e[6], x);
            return "#" + r + g + b;
        },

        // a,b are hex values from 00 to FF; x is real number in range 0..1
        _byteLinear: function (a, b, x) {
            (this.XLObj._browserDetails.name == "msie") && this.XLObj._padStart();
            var y = (parseInt(a, 16) * (1 - x) + parseInt(b, 16) * x) | 0;
            return Math.abs(y).toString(16).padStart(2, '0') // hex output
        },

        _cFormat: function (action, input1, input2, cFColor, bgColor, addr, sheetIdx, range, status, copyCell) {
            var xlObj = this.XLObj, cell, isApplied;
            if (!xlObj.model.allowConditionalFormats)
                return;
            bgColor = xlObj.isUndefined(bgColor) ? "" : bgColor;
            cFColor = xlObj.isUndefined(cFColor) ? "" : cFColor;
            xlObj.showWaitingPopUp();
            sheetIdx = sheetIdx ? sheetIdx : xlObj.getActiveSheetIndex();
            if (ej.isNullOrUndefined(action))
                action = "lessthan";
            var sheet = xlObj.getSheet(sheetIdx), rangeData = (!range) ? xlObj._getRangeArgs(addr, "object") : xlObj._getRangeArgs(range, "object"), details = { cFAction: action, input1: input1, input2: input2, cFColor: cFColor, bgColor: bgColor, sheetIndex: sheetIdx, reqType: "cond-format", action: "add", range: addr, data: rangeData },
                args = { cfAction: action, input1: input1, input2: input2, cfColor: cFColor, bgColor: bgColor, sheetIndex: sheetIdx, reqType: "cond-format", type: "actionBegin", action: "add", range: range, addr: addr, status: status, copyCell: copyCell };
            action = args.cfAction, input1 = args.input1, input2 = args.input2, cFColor = args.cfColor, bgColor = args.bgColor, addr = args.addr, range = args.range, status = args.status, copyCell = args.copyCell;
            if (xlObj._trigActionBegin(args))
                return;
            action = action.indexOf("databar") > -1 ? "databar" : action.indexOf("colorscale") > -1 ? "colorscale" : action.indexOf("iconset") > -1 ? "iconset" : action;
            switch (action) {
                case "greaterthan":
                    this._applyGLEValues(">", input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "greaterequalto":
                    this._applyGLEValues(">=", input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "lessthan":
                    this._applyGLEValues("<", input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "lessequalto":
                    this._applyGLEValues("<=", input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "equalto":
                    this._applyGLEValues("==", input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "notequalto":
                    this._applyGLEValues("!=", input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "between":
                    this._applyBetweenValues("=", input1, input2, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "notbetween":
                    this._applyBetweenValues("!", input1, input2, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "textcontains":
                    this._applyContainsValues(input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "dateoccur":
                    this._applyDateContainsValues(input1, cFColor, bgColor, action, addr, sheetIdx, range);
                    break;
                case "formularule":
                    if (input1.indexOf("/") > -1)
                        input1 = input1.split("/")[1];
                    isApplied = this._applyFormulaValues(input1, cFColor, bgColor, action, addr, sheetIdx, range, cell, status, copyCell);
                    break;
                case "databar":
                    this._dataBarsFormatting(cFColor, action, addr, sheetIdx, range, false);
                    break;
                case "colorscale":
                    this._dataBarsFormatting(cFColor, action, addr, sheetIdx, range, false);
                    break;
                case "iconset":
                    this._dataBarsFormatting(cFColor, action, addr, sheetIdx, range);
                    break;
            }
            if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo && status !== "paste" && !xlObj._dupDetails && !xlObj._isExport && !isApplied) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
            xlObj.hideWaitingPopUp();
        },

        _dataBarsFormatting: function (cFColor, action, addr, sheetIdx, range, isGradient) {
            var xlObj = this.XLObj, selected, i, len, rangeData = (addr) ? xlObj._getRangeArgs(addr, "object") : xlObj._getRangeArgs(range, "object");
            selected = xlObj._getSelectedCells(sheetIdx, rangeData).selCells;
            var sheet = xlObj.getSheet(sheetIdx), startCell = sheet._startCell, endCell = sheet._endCell, isApply = false, scaleColor = cFColor, cfBarData;
            for (i = 0, len = selected.length; i < len; i++) {
                rowIdx = selected[i].rowIndex; colIdx = selected[i].colIndex;
                if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isMHide") || xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isFilterHide"))
                    continue;
                value = this._getValueForCFormat({ rowIndex: rowIdx, colIndex: colIdx }, sheetIdx);
                type = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") ? xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") : "general";
                prevStatus = true;
                ruleIdx = -1;
                if ($.isNumeric(value)) {
                    value = parseFloat(value);
                    if (action == 'databar') {
                        cfBarData = this._applyDataBars(value, selected, cFColor, isGradient, rowIdx, colIdx, sheetIdx, type);
                    } else if (action == "colorscale") {
                        cfBarData = this._applyColorScale(value, selected, scaleColor, rowIdx, colIdx, sheetIdx, type);
                    } else if (action == "iconset") {
                        cfBarData = this._applyIconSets(value, selected, rowIdx, colIdx, sheetIdx, cFColor, type);
                    }
                }
                else if (!ej.isNullOrUndefined(value) && (xlObj._isValidDate(value) || xlObj._isValidTime(value))) {
                    (type == "time" || type == "datetime") && (value = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value"));
                    if (action == 'databar') {
                        cfBarData = this._applyDataBars(xlObj._dateToInt(value), selected, cFColor, isGradient, rowIdx, colIdx, sheetIdx, type);
                    } else if (action == "colorscale") {
                        cfBarData = this._applyColorScale(xlObj._dateToInt(value), selected, scaleColor, rowIdx, colIdx, sheetIdx, type);
                    } else if (action == "iconset") {
                        cfBarData = this._applyIconSets(xlObj._dateToInt(value), selected, rowIdx, colIdx, sheetIdx, cFColor, type);
                    }
                }
                else if (action == 'databar') {
                    cfBarData = this._applyDataBars(value, selected, cFColor, isGradient, rowIdx, colIdx, sheetIdx, type);
                }
                if (ej.isNullOrUndefined(addr))
                    addr = xlObj._generateHeaderText(startCell.colIndex + 1) + (startCell.rowIndex + 1) + ":" + xlObj._generateHeaderText(endCell.colIndex + 1) + (endCell.rowIndex + 1);
                tRule = action + "_" + "" + "_" + "" + "__" + cFColor + "_" + "" + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                this._applyCFormatRule({ rowIndex: rowIdx, colIndex: colIdx }, tRule, ruleIdx, isApply, prevStatus, cFColor, null, null, null, null, null, null, cfBarData);
            }
        },

        _applyColorScale: function (value, range, cFColor, rowIdx, colIdx, sheetIdx, cType) {
            var valArr = [], cellVal, xlObj = this.XLObj, id, colors = this._getColor(cFColor), type, thouSep = xlObj._calcEngine.getParseDecimalSeparator();
            if (!ej.isNullOrUndefined(value))
                if (cType == "time" || cType == "datetime") {
                    value = value.toString().split(thouSep)[1] || value;
                } else if (cType == "shortdate" || cType == "longdate" || cType == "date") {
                    value = Math.ceil(value);
                }
            for (var i = 0, len = range.length; i < len; i++) {
                cellVal = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "value", sheetIdx);
                if (cellVal && cellVal.toString().startsWith('='))
                    cellVal = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "calcValue", sheetIdx);
                if (!ej.isNullOrUndefined(cellVal) && !xlObj.isNumber(cellVal) && (!xlObj._isDateTime(cellVal)))
                    continue;
                type = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "type", sheetIdx);
                if (type == "shortdate" || type == "longdate" || type == "date") {
                    cellVal = Math.ceil(xlObj._dateToInt(cellVal));
                }
                if (type == "time" || type == "datetime") {
                    cellVal = xlObj._dateToInt(cellVal).toString().split(thouSep)[1];
                }
                !ej.isNullOrUndefined(cellVal) && valArr.push(Number(cellVal));
            }
            valArr = valArr.sort(xlObj._dSortBehavior);
            for (var i = 0, len = valArr.length; i < valArr.length; i++) {
                if (valArr[i] == value) {
                    id = i;
                    break;
                }
            }
            hexcode = (id == 0) ? colors[0] : (id == valArr.length - 1) ? colors[colors.length - 1] : (valArr.length == 3 && id == 1) ? colors[1] : this._getGradient(id, colors[0], colors[1], colors[2], valArr.length);
            var actCell = xlObj.getCell(rowIdx, colIdx);
            if (!ej.isNullOrUndefined(actCell)) {
                actCell[0].style.backgroundColor = hexcode;
            }
            return hexcode;
        },

        _applyIconSets: function (value, range, rowIdx, colIdx, sheetIdx, iconList, cType) {
            var valArr = [], cellVal, xlObj = this.XLObj, min, max, currentSymbol, minPercent, maxPercent, cfIcon, type, thouSep = xlObj._calcEngine.getParseDecimalSeparator();
            iconList = iconList.split(",");
            var actCell = xlObj.getCell(rowIdx, colIdx);
            if(actCell && actCell.find('.e-cf-databar').length)
                return;
            if (!ej.isNullOrUndefined(value))
                if (cType == "time" || cType == "datetime") {
                    value = value.toString().split(thouSep)[1] || value;
                } else if (cType == "shortdate" || cType == "longdate" || cType == "date") {
                    value = Math.ceil(value);
                }
            for (var i = 0, len = range.length; i < len; i++) {
                cellVal = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "value", sheetIdx);
                if (cellVal && cellVal.toString().startsWith('='))
                    cellVal = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "calcValue", sheetIdx);
                if (!ej.isNullOrUndefined(cellVal) && !xlObj.isNumber(cellVal) && (!xlObj._isDateTime(cellVal)))
                    continue;
                type = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "type", sheetIdx);
                if (type == "shortdate" || type == "longdate" || type == "date") {
                    cellVal = Math.ceil(xlObj._dateToInt(cellVal));
                }
                if (type == "time" || type == "datetime") {
                    cellVal = xlObj._dateToInt(cellVal).toString().split(thouSep)[1];
                }
                !ej.isNullOrUndefined(cellVal) && valArr.push(Number(cellVal));
            }
            valArr = valArr.sort(xlObj._aSortBehavior);
            min = valArr[0];
            max = valArr[valArr.length - 1];
            maxPercent = min + (0.67 * ((max) - (min))); // 67th percent.
            minPercent = min + (0.33 * ((max) - (min))); // 33rd percent.
            currentSymbol = "e-ss-" + (value >= maxPercent ? iconList[0].trim() : value >= minPercent ? iconList[1].trim() : iconList[2].trim());
            if (!ej.isNullOrUndefined(actCell)) {
                var cfIcon = ej.buildTag("span .e-icon", "", {});
                cfIcon.addClass("e-iconsetspan" + " " + currentSymbol);
                this._applyIconSetIcon({ rowIndex: rowIdx, colIndex: colIdx }, cfIcon);
            }
            return currentSymbol;
        },

        _applyIconSetIcon: function (activeObj, cfIcon) {
            var activeEle, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), rowIdx = activeObj.rowIndex, colIdx = activeObj.colIndex,
                isViewed = xlObj._isRowViewable(sheetIdx, rowIdx);
            activeEle = xlObj.getCell(rowIdx, colIdx, sheetIdx);
            if (isViewed) {
                if (activeEle[0].classList.contains('e-iconset')) {
                    activeEle.find('.e-iconset, .e-iconsetspan').remove();
                }
                activeEle[0].insertBefore(cfIcon[0], activeEle[0].childNodes[0]);
                activeEle.addClass("e-iconset");
            }
            if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "wrap", sheetIdx)) {
                isWrap = true;
                xlObj.setWrapText("unwrap", xlObj._getAlphaRange(sheetIdx, rowIdx, colIdx, rowIdx, colIdx));
            }
        },

        _applyDataBars: function (value, range, cFColor, isGradient, rowIdx, colIdx, sheetIdx, cType) {
            var posArr = [], negArr = [], cellVal, type, xlObj = this.XLObj, rowHeight = xlObj.model.rowHeight, topVal, thouSep = xlObj._calcEngine.getParseDecimalSeparator(), leftStandardWidth = 0, nTopVal, currentVal = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value", sheetIdx);
            if (!ej.isNullOrUndefined(value))
                if (cType == "time" || cType == "datetime") {
                    value = value.toString().split(thouSep)[1] || value;
                } else if (cType == "shortdate" || cType == "longdate" || cType == "date") {
                    value = Math.ceil(value);
                }
            for (var i = 0, len = range.length; i < len; i++) {
                cellVal = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "value", sheetIdx);
                if (cellVal && cellVal.toString().startsWith('='))
                    cellVal = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "calcValue", sheetIdx);
                if (!ej.isNullOrUndefined(cellVal) && !xlObj.isNumber(cellVal) && (!xlObj._isDateTime(cellVal)))
                    continue;
                type = xlObj.XLEdit.getPropertyValue(range[i].rowIndex, range[i].colIndex, "type", sheetIdx);
                if (type == "shortdate" || type == "longdate" || type == "date") {
                    cellVal = Math.ceil(xlObj._dateToInt(cellVal));
                }
                if (type == "time" || type == "datetime") {
                    cellVal = xlObj._dateToInt(cellVal).toString().split(thouSep)[1];
                }
                if (cellVal && cellVal != "") {
                    (cellVal >= 0) ? posArr.push(Number(cellVal)) : negArr.push(Number(cellVal));
                }
            }
            posColor = this._getColor(cFColor)[0]; negColor = this._getColor('r')[0];
            posArr = posArr.sort(xlObj._dSortBehavior);
            negArr = negArr.sort(xlObj._aSortBehavior);
            if (negArr.length && posArr.length) {
                topVal = posArr[0] + Math.abs(negArr[0]);
                leftStandardWidth = (Math.abs(parseInt((negArr[0] / topVal) * 100).toFixed()));
            } else if (negArr.length || posArr.length) {
                topVal = negArr.length ? negArr[0] : posArr[0];
            } else {
                return;
            }
            var actCell = xlObj.getCell(rowIdx, colIdx), id = xlObj.element[0].id;
            if (actCell) {
                if (actCell.find('.e-iconsetspan').length)
                    return;
                if (ej.isNullOrUndefined(value) || value == "") {
                    actCell.find('.e-cf-databar').remove();
                }
            }
            if (xlObj.isNumber(value)) {
                var right = {}, left = {};
                if (actCell && (!actCell[0].children.length || (actCell[0].children.length && !actCell[0].children[0].classList.contains('e-databar')))) {
                    var $databar = ej.buildTag("div#" + id + "_databar.e-cf-databar");
                    var $leftSpan = ej.buildTag("span#" + id + "_leftspan.e-databar"), $rightSpan = ej.buildTag("span#" + id + "_rightspan.e-databar");
                    var $dataSpan = ej.buildTag("span#" + id + "_dataspan.e-databar-value");
                    right = $rightSpan[0].style, left = $leftSpan[0].style;
                    $databar[0].appendChild($dataSpan[0]);
                    $databar[0].insertBefore($leftSpan[0], $dataSpan[0]);
                    $databar[0].insertBefore($rightSpan[0], $dataSpan[0]);
                    actCell[0].textContent = "";
                    actCell[0].appendChild($databar[0]);
                    $dataSpan[0].innerHTML = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx) || "";
                    $databar[0].style.height = rowHeight - 1 + "px";
                    $dataSpan[0].style.fontSize = "11pt";
                  //  $dataSpan[0].style.textIndent = "0pt";
                }
                if (!negArr.length) {
                    right.width = "" + Math.ceil(Math.abs(parseInt((value / topVal) * 100).toFixed())) + "%";
                    right.height = rowHeight - 3 + "px";
                    right.backgroundColor = cFColor = posColor;
                    right.left = "0px";
                    this._refreshDataBarCollection(rowIdx + "" + colIdx, { width: right.width, height: right.height, backgroundColor: right.backgroundColor, left: right.left }, null, this._dataBarStyle);
                } else if (!posArr.length) {
                    right.width = "" + Math.ceil(Math.abs(parseInt((value / topVal) * 100).toFixed())) + "%";
                    right.height = rowHeight - 3 + "px";
                    right.backgroundColor = cFColor = negColor;
                    right.left = "0px";
                    this._refreshDataBarCollection(rowIdx + "" + colIdx, { width: right.width, height: right.height, backgroundColor: right.backgroundColor, left: right.left }, null, this._dataBarStyle);
                } else {
                    if (value > -1) {
                        left.width = leftStandardWidth + "%";
                        left.height = rowHeight - 3 + "px"; // -3 buffer of data bar.
                        left.backgroundColor = "transparent";
                        left.left = "0px";
                        right.width = "" + Math.ceil(Math.abs(parseInt((value / topVal) * 100).toFixed())) + "%";
                        right.height = rowHeight - 3 + "px";
                        right.backgroundColor = cFColor = posColor;
                        right.left = leftStandardWidth + "%";
                        this._refreshDataBarCollection(rowIdx + "" + colIdx, { width: right.width, height: right.height, backgroundColor: right.backgroundColor, left: right.left }, { width: left.width, height: left.height, backgroundColor: left.backgroundColor, left: left.left }, this._dataBarStyle);
                    } else if (value < 0) {
                        left.width = "" + Math.ceil(Math.abs(parseInt((value / topVal) * 100).toFixed())) + "%";
                        left.height = rowHeight - 3 + "px";
                        left.backgroundColor = cFColors = negColor;
                        if (left.width == leftStandardWidth + "%")
                            left.left = "0px";
                        else
                            left.right = (100 - leftStandardWidth) + "%";
                        this._refreshDataBarCollection(rowIdx + "" + colIdx, null, { width: left.width, height: left.height, backgroundColor: left.backgroundColor, left: left.left, right: left.right }, this._dataBarStyle)
                    }
                }
            }
            return cFColor;
        },
        _refreshDataBarCollection: function (idx, rightStyle, leftStyle, barColl) {
            var flag = false;
            if (this._dataBarStyle.length)
                for (var i = 0, len = this._dataBarStyle.length; i < len; i++) {
                    if (this._dataBarStyle[i]["idx"] == idx) {
                        rightStyle ? (this._dataBarStyle[i]["rightStyle"] = rightStyle) : delete this._dataBarStyle[i]["rightStyle"];
                        leftStyle ? (this._dataBarStyle[i]["leftStyle"] = leftStyle) : delete this._dataBarStyle[i]["leftStyle"];
                        flag = true;
                        break;
                    }
                }
            if (!flag) {
                rightStyle && (this._dataBarStyle.push({ idx: idx, rightStyle: rightStyle }))
                leftStyle && (this._dataBarStyle.push({ idx: idx, leftStyle: leftStyle }));
            }

        },
        _getColor: function (cfColor) {
            if (cfColor == 'lb') {
                return ["#008aef"];
            }
            var colorCodeArr = cfColor.split(""), colorArr = [];
            for (var i = 0, len = colorCodeArr.length; i < len; i++) {
                switch (colorCodeArr[i].toLowerCase()) {
                    case 'g':
                        colorArr.push("#63be7b");
                        break;
                    case 'y':
                        colorArr.push("#ffeb84");
                        break;
                    case 'r':
                        colorArr.push("#f8696b");
                        break;
                    case 'w':
                        colorArr.push("#ffffff");
                        break;
                    case 'b':
                        colorArr.push("#5a8ac6");
                        break;
                    case 'o':
                        colorArr.push("#ffb628");
                        break;
                    case 'lb':
                        colorArr.push("#008aef");
                        break;
                    case 'p':
                        colorArr.push("#d6007b");
                        break;
                }
            }
            return colorArr;
        },

        clearCF: function (range) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), rowIdx, colIdx, details = { sheetIndex: sheetIdx, reqType: "cond-format", action: "clear", rule: [] }, sheet = xlObj.getSheet(sheetIdx);
            if (!xlObj.model.allowConditionalFormats)
                return;
            var i, len, cFormatData = xlObj._dataContainer.cFormatData, selected;
            details.selection = !xlObj.isUndefined(range);
            range = range ? xlObj._getRangeArgs(range, "object") : [0, 0, sheet.rowCount - 1, sheet.colCount - 1];
            selected = xlObj._getSelectedCells(sheetIdx, range).selCells;
            for (i = 0, len = selected.length; i < len; i++) {
                rowIdx = selected[i].rowIndex, colIdx = selected[i].colIndex;
                if (!ej.isNullOrUndefined(xlObj._dataContainer.sheets[sheetIdx][rowIdx]))
                    if (!ej.isNullOrUndefined(xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx]))
                        if (!ej.isNullOrUndefined(xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx].cFormatRule)) {
                            details.rule.push(this.getCFRule(rowIdx, colIdx));
                            this._clearCFormula(rowIdx, colIdx, sheetIdx);
                            xlObj.clearRangeData([rowIdx, colIdx, rowIdx, colIdx], ["cFormatRule"]);
                        }
            }
            var rule = details.selection ? "clear_" + sheetIdx + "_" + xlObj._getSelectedItems()[1] : "clear_" + sheetIdx + "_" + "entire";
            if (cFormatData.indexOf(rule) === -1)
                cFormatData.push(rule);
            if (!xlObj._isUndoRedo && !xlObj._dupDetails) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _getValueForCFormat: function (cell, sheetIdx) {
            var xlObj = this.XLObj, rowIdx = cell.rowIndex, colIdx = cell.colIndex, cellObj = xlObj.getRangeData({ range: [rowIdx, colIdx, rowIdx, colIdx], sheetIdx: sheetIdx });
            var value = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx), value2 = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2");
            value = !ej.isNullOrUndefined(value) ? value.toString() : "";
            if (value2 && (typeof value2 == "string" && !cellObj.formatStr && value[0] === "=") || (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") === "datetime") || (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") === "shortdate") || (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") === "longdate") || (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") === "time"))
                value = value2;
            return value;
        },

        _applyGLEValues: function (op, input, cFColor, bgColor, action, addr, sheetIdx, range) {
            var i, len, cellArgs, xlObj = this.XLObj, value, selected, rowIdx, colIdx, isApply, prevStatus, tRule, ruleIdx, type, numRegx = new RegExp(/[^.0-9]+/g), txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
            var sheet = xlObj.getSheet(sheetIdx), startCell = sheet._startCell, endCell = sheet._endCell, j, inputValue = input;
            var referCell, rangeIndex, inputSplit = [], rangeData = (!range) ? xlObj._getRangeArgs(addr, "object") : xlObj._getRangeArgs(range, "object");
            selected = xlObj._getSelectedCells(sheetIdx, rangeData).selCells;
            if (inputValue.startsWith("=")) {
                var operand, operandCln;
                inputValue = inputValue.substr(1);
                operandCln = ["<=", ">=", "<", ">", "="];
                for (i = 0, len = operandCln.length; i < len; i++) {
                    if (inputValue.indexOf(operandCln[i]) > -1) {
                        inputSplit = inputSplit.split(operandCln[i]);
                        operand = operandCln[i];
                    }
                }
                if (!inputSplit.length)
                    inputSplit[0] = inputValue;
                rangeIndex = this._formulaCellRefer(inputSplit, selected);
            }
            for (i = 0, len = selected.length; i < len; i++) {
                rowIdx = selected[i].rowIndex; colIdx = selected[i].colIndex;
                input = input.replace(/^"|"$/g, "");
                if (input.startsWith("=")) {
                    var calcEngine = xlObj._calcEngine;
                    referCell = this._formulaCellRange({ rowIndex: rowIdx, colIndex: colIdx }, rangeIndex, inputSplit, operand, sheetIdx);
                    cellArgs = new ValueChangedArgs(-1, -1, referCell.formula);
                    calcEngine.valueChanged(xlObj.getSheet(sheetIdx).sheetInfo.value, cellArgs);
                    input = calcEngine.getFormulaInfoTable().getItem("!0!-1").getFormulaValue();
                    if (xlObj._isBool(input))
                        isApply = (input === "TRUE") ? true : false;
                    else
                        isApply = false;
                    if (ej.isNullOrUndefined(input))
                        input = "0";
                }
                if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isMHide") || xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isFilterHide"))
                    continue;
                value = this._getValueForCFormat({ rowIndex: rowIdx, colIndex: colIdx }, sheetIdx);
                type = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") ? xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") : "general";
                prevStatus = true;
                ruleIdx = -1;
                if (ej.isNullOrUndefined(value) || (!value.length && action != "equalto") || input == "0") {
                    if ($.isNumeric(input)) {
                        if (input > 0)
                            isApply = (action === "lessthan" || action === "lessequalto" || action === "notequalto");
                        else if (input < 0)
                            isApply = (action === "greaterthan" || action === "greaterequalto" || action === "notequalto");
                        else
                            isApply = (action === "equalto" || action === "lessequalto" || action === "greaterequalto");
                    }
                }
                else if ($.isNumeric(input)) {
                    if ($.isNumeric(value)) {
                        value = parseFloat(value);
                        isApply = xlObj.operators[op](value, parseFloat(input.replace(txtRegx, "")));
                    }
                    else if (xlObj._isValidDate(value)) {
                        isApply = xlObj.operators[op](xlObj._dateToInt(value), parseFloat(input));
                    }
                    else if (xlObj._isValidTime(value))
                        continue;
                    else
                        isApply = xlObj.operators[op](value.toLowerCase(), input.toLowerCase());
                }
                else if (input.lastIndexOf("%") === input.length - 1 && $.isNumeric(input.replace(numRegx, ""))) {
                    if (type === "percentage")
                        isApply = xlObj.operators[op](parseFloat(value), parseFloat(input.replace(numRegx, "")));
                    else
                        isApply = $.isNumeric(value) ? xlObj.operators[op](parseFloat(value), 0) : xlObj.operators[op](value.length, 0);
                }
                else if (input.indexOf("$") === 0 && $.isNumeric(input.replace(numRegx, ""))) {
                    if (type === "accounting" || type !== "currency" || $.isNumeric(value))
                        isApply = xlObj.operators[op](parseFloat(value), parseFloat(input.replace(numRegx, "")));
                    else
                        isApply = ((xlObj.operators[op](value.length, 0) || xlObj._isValidDate(value)) && !xlObj._isValidTime(value));
                }
                else if (xlObj._isValidDate(input)) {
                    if (xlObj._isValidDate(value)) {
                        isApply = xlObj.operators[op](xlObj._dateToInt(new Date(value)), xlObj._dateToInt(new Date(input)));
                    }
                    else if (!xlObj._isValidTime(value)) {
                        if ($.isNumeric(value))
                            isApply = xlObj.operators[op](parseFloat(value), xlObj._dateToInt(input));
                        else
                            isApply = xlObj.operators[op](value.length, xlObj._dateToInt(input));
                    }
                }
                else if (xlObj._isValidTime(input)) {
                    if (xlObj._isValidTime(value))
                        isApply = xlObj.operators[op](xlObj.parse.parseTime(value), xlObj.parse.parseTime(input));
                    else
                        isApply = $.isNumeric(value) ? xlObj.operators[op](parseFloat(value), 0) : xlObj.operators[op](value.length, 0);
                }
                else
                    isApply = xlObj.operators[op](value.toLowerCase(), input.toLowerCase());
                if (ej.isNullOrUndefined(addr))
                    addr = xlObj._generateHeaderText(startCell.colIndex + 1) + (startCell.rowIndex + 1) + ":" + xlObj._generateHeaderText(endCell.colIndex + 1) + (endCell.rowIndex + 1);
                tRule = action + "_" + op + "_" + input + "__" + cFColor + "_" + bgColor + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                if (inputValue.startsWith("=")) {
                    input = inputValue.substr(1);
                    tRule = action + "_" + op + "_" + input + "__" + cFColor + "_" + bgColor + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                    for (j = 0; j < xlObj.getObjectLength(referCell) - 1; j++)
                        this._formulaCellUpdate({ rowIndex: referCell["referCell" + j].rowIndex, colIndex: referCell["referCell" + j].colIndex }, { rowIndex: rowIdx, colIndex: colIdx }, input, referCell.formula, addr, cFColor, sheetIdx);
                }
                this._applyCFormatRule({ rowIndex: rowIdx, colIndex: colIdx }, tRule, ruleIdx, isApply, prevStatus, cFColor, bgColor);
            }
        },

        _applyBetweenValues: function (op, input1, input2, cFColor, bgColor, action, addr, sheetIdx, range) {
            var rowIdx, colIdx, xlObj = this.XLObj, value, selected, temp, isApply, prevStatus, tRule, ruleIdx, type, numRegx = new RegExp(/[^.0-9]+/g), txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g), convDate;
            var sheet = xlObj.getSheet(sheetIdx), startCell = sheet._startCell, endCell = sheet._endCell;
            if (!xlObj.operators["<"](xlObj.isNumber(input1) ? parseFloat(input1) : input1, xlObj.isNumber(input2) ? parseFloat(input2) : input2)) {
                temp = input2;
                input2 = input1;
                input1 = temp;
            }
            selected = (ej.isNullOrUndefined(range) && ej.isNullOrUndefined(addr)) ? xlObj.getSheet(sheetIdx)._selectedCells : xlObj._getSelectedCells(sheetIdx, addr).selCells;
            for (var i = 0, len = selected.length; i < len; i++) {
                rowIdx = selected[i].rowIndex; colIdx = selected[i].colIndex;
                if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isMHide") || xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isFilterHide"))
                    continue;
                value = this._getValueForCFormat({ rowIndex: rowIdx, colIndex: colIdx }, sheetIdx);
                type = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") ? xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "type") : "general";
                prevStatus = true;
                ruleIdx = -1;
                if (ej.isNullOrUndefined(value) || !value.length) {
                    if ($.isNumeric(input1) && $.isNumeric(input2)) {
                        if ((input1 > 0 && input2 > 0) || (input1 < 0 && input2 < 0))
                            isApply = (action === "notbetween");
                        else
                            isApply = (action === "between");
                    }
                }
                else if ($.isNumeric(input1.replace(txtRegx, "")) && $.isNumeric(input2.replace(txtRegx, "")) && type !== "percentage" && type !== "currency" && type !== "accounting") {
                    input1 = input1.replace(txtRegx, "");
                    input2 = input2.replace(txtRegx, "");
                    if ($.isNumeric(value))
                        isApply = xlObj.operators[op](parseFloat(value) >= parseFloat(input1) && parseFloat(value) <= parseFloat(input2));
                    else if (xlObj._isValidDate(value)) {
                        isApply = xlObj.operators[op](xlObj._dateToInt(value) >= parseFloat(input1) && convDate <= parseFloat(input2));
                    }
                    else if (xlObj._isValidTime(value))
                        continue;
                    else
                        isApply = xlObj.operators[op](value.toLowerCase() >= input1.toLowerCase() && value.toLowerCase() <= input2.toLowerCase());
                }
                else if (input1.lastIndexOf("%") === input1.length - 1 && $.isNumeric(input1.replace(numRegx, "")) && input2.lastIndexOf("%") === input2.length - 1 && $.isNumeric(input2.replace(numRegx, "")) && type === "percentage")
                    isApply = xlObj.operators[op](parseFloat(value) >= parseFloat(input1.replace(numRegx, "")) && parseFloat(value) <= parseFloat(input2.replace(numRegx, "")));
                else if (input1.indexOf("$") === 0 && $.isNumeric(input1.replace(numRegx, "")) && input2.indexOf("$") === 0 && $.isNumeric(input2.replace(numRegx, "")) && (type === "accounting" || type !== "currency"))
                    isApply = xlObj.operators[op](parseFloat(value) >= parseFloat(input1.replace(numRegx, "")) && parseFloat(value) <= parseFloat(input2.replace(numRegx, "")));
                else if (xlObj._isValidDate(input1) && xlObj._isValidDate(input2)) {
                    var date1 = xlObj._dateToInt(new Date(value)), date2 = xlObj._dateToInt(new Date(input1)), date3 = xlObj._dateToInt(new Date(input2));
                    isApply = xlObj.operators[op](date1 >= date2 && date1 <= date3);
                }
                else if (xlObj._isValidTime(input1) && xlObj._isValidTime(input2) && xlObj._isValidTime(value))
                    isApply = xlObj.operators[op](xlObj.parse.parseTime(value) >= xlObj.parse.parseTime(input1) && xlObj.parse.parseTime(value) <= xlObj.parse.parseTime(input2));
                else if ($.isNumeric(value))
                    isApply = xlObj.operators[op](parseFloat(value) >= parseFloat(input1) && parseFloat(value) <= parseFloat(input2));
                else
                    isApply = xlObj.operators[op](value.toLowerCase() >= input1.toLowerCase() && value.toLowerCase() <= input2.toLowerCase());
                if (ej.isNullOrUndefined(addr))
                    addr = xlObj._generateHeaderText(startCell.colIndex + 1) + (startCell.rowIndex + 1) + ":" + xlObj._generateHeaderText(endCell.colIndex + 1) + (endCell.rowIndex + 1);
                tRule = action + "_" + op + "_" + input1 + "_" + input2 + "_" + cFColor + "_" + bgColor + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                this._applyCFormatRule({ rowIndex: rowIdx, colIndex: colIdx }, tRule, ruleIdx, isApply, prevStatus, cFColor, bgColor);
            }
        },

        _applyContainsValues: function (input, cFColor, bgColor, action, addr, sheetIdx, range) {
            var rowIdx, colIdx, xlObj = this.XLObj, value, selected, isApply, prevStatus, tRule, ruleIdx, txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
            var sheet = xlObj.getSheet(sheetIdx), startCell = sheet._startCell, endCell = sheet._endCell;
            selected = (ej.isNullOrUndefined(range) && ej.isNullOrUndefined(addr)) ? xlObj.getSheet(sheetIdx)._selectedCells : xlObj._getSelectedCells(sheetIdx, addr).selCells;
            for (var i = 0, len = selected.length; i < len; i++) {
                rowIdx = selected[i].rowIndex; colIdx = selected[i].colIndex;
                if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isMHide") || xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isFilterHide"))
                    continue;
                value = this._getValueForCFormat({ rowIndex: rowIdx, colIndex: colIdx }, sheetIdx);
                prevStatus = true;
                ruleIdx = -1;
                if (ej.isNullOrUndefined(value) || !value.length)
                    isApply = false;
                else if ($.isNumeric(input.replace(txtRegx, ""))) {
                    input = input.replace(txtRegx, "");
                    if (xlObj._isValidDate(value))
                        value = ((xlObj._dateToInt(value))).toString();
                    isApply = value.indexOf(input) > -1;
                }
                else if (xlObj._isValidDate(input)) {
                    if (xlObj._isValidDate(value))
                        value = xlObj._dateToInt(value).toString();
                    isApply = value.indexOf(xlObj._dateToInt(input)) > -1;
                }
                else if (xlObj._isValidTime(input)) {
                    if (xlObj._isValidTime(value))
                        value = xlObj._dateToInt("01/01/1990 " + value).toString();
                    isApply = value.indexOf(xlObj._dateToInt("01/01/1990 " + input)) > -1;
                }
                else
                    isApply = value.toLowerCase().indexOf(input.toLowerCase()) > -1;
                if (ej.isNullOrUndefined(addr))
                    addr = xlObj._generateHeaderText(startCell.colIndex + 1) + (startCell.rowIndex + 1) + ":" + xlObj._generateHeaderText(endCell.colIndex + 1) + (endCell.rowIndex + 1);
                tRule = action + "__" + input + "__" + cFColor + "_" + bgColor + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                this._applyCFormatRule({ rowIndex: rowIdx, colIndex: colIdx }, tRule, ruleIdx, isApply, prevStatus, cFColor, bgColor);
            }
        },

        _applyDateContainsValues: function (input, cFColor, bgColor, action, addr, sheetIdx, range) {
            var rowIdx, colIdx, xlObj = this.XLObj, value, isApply = false, tRule, ruleIdx;
            var sheet = xlObj.getSheet(sheetIdx), startCell = sheet._startCell, endCell = sheet._endCell, selected;
            selected = (ej.isNullOrUndefined(range) && ej.isNullOrUndefined(addr)) ? xlObj.getSheet(sheetIdx)._selectedCells : xlObj._getSelectedCells(sheetIdx, addr).selCells;
            for (var i = 0, len = selected.length; i < len; i++) {
                rowIdx = selected[i].rowIndex; colIdx = selected[i].colIndex;
                if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isMHide") || xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isFilterHide"))
                    continue;
                value = this._getValueForCFormat({ rowIndex: rowIdx, colIndex: colIdx }, sheetIdx);
                ruleIdx = -1;
                if (ej.isNullOrUndefined(value) || !value.length)
                    isApply = false;
                else if (xlObj._isValidDate(input)) {
                    var date1 = new Date(value), date2 = new Date(input);
                    isApply = (date1 - date2) === 0;
                }
                if (ej.isNullOrUndefined(addr))
                    addr = xlObj._generateHeaderText(startCell.colIndex + 1) + (startCell.rowIndex + 1) + ":" + xlObj._generateHeaderText(endCell.colIndex + 1) + (endCell.rowIndex + 1);
                tRule = action + "__" + input + "__" + cFColor + "_" + bgColor + "_" + addr + "_" + xlObj.getActiveSheetIndex();
                this._applyCFormatRule({ rowIndex: rowIdx, colIndex: colIdx }, tRule, ruleIdx, isApply, true, cFColor, bgColor);
            }
        },

        refreshCFormat: function (range) {
            var xlObj = this.XLObj, dupDetails = xlObj._dupDetails;
            if (xlObj.model.isReadOnly)
                return;
            xlObj._dupDetails = true;
            if (!xlObj.model.allowConditionalFormats)
                return;
            var i, j, rules = [], sheetIdx = xlObj.getActiveSheetIndex(), cFormatStr, selected, cFormatRule, len, rLen, rowIdx, colIdx;
            selected = xlObj._getSelectedCells(sheetIdx, range).selCells;
            for (i = 0, len = selected.length; i < len; i++) { //getting rules & clear rules
                rowIdx = selected[i].rowIndex; colIdx = selected[i].colIndex;
                cFormatRule = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "cFormatRule");
                if (!xlObj.isUndefined(cFormatRule) && cFormatRule.length)
                    for (j = 0, rLen = cFormatRule.length; j < rLen; j++) {
                        cFormatRule[j] = cFormatRule[j].replace("_true", "").replace("_false", "");
                        if (rules.indexOf(cFormatRule[j]) < 0)
                            rules.push(cFormatRule[j]);
                    }
                if (xlObj._isRowViewable(sheetIdx, rowIdx))
                    xlObj.getCell(rowIdx, colIdx, sheetIdx).removeClass("e-redft e-yellowft e-greenft e-redf e-redt");
                xlObj.clearRangeData([rowIdx, colIdx, rowIdx, colIdx], ["cFormatRule"], selected[i]);
            }
            //apply rules
            for (j = 0, rLen = rules.length; j < rLen; j++) {
                cFormatStr = rules[j].split("_");
                this._cFormat(cFormatStr[0], cFormatStr[2], cFormatStr[3], cFormatStr[4], cFormatStr[5], cFormatStr[6]);
            }
            xlObj._dupDetails = dupDetails;
        },
        _applyColors: function (cFColor, cfColors, actCell, bgColor) {
            if (cFColor.length && cfColors.indexOf(cFColor) > -1)
                actCell && actCell.removeClass(cfColors).addClass("e-" + cFColor);
            else {
                if (cFColor.length && cfColors.indexOf(cFColor) < 0)
                    actCell && actCell.removeClass(cfColors).css({ "color": cFColor }).addClass("e-cformat");
                if (bgColor.length && cfColors.indexOf(bgColor) < 0) {
                    if (actCell) {
                        actCell.removeClass(cfColors).css({ "background-color": bgColor });
                        !actCell.hasClass("e-cformat") && actCell.addClass("e-cformat")
                    }
                }
            }
        },
        _applyCFormatRule: function (cell, tRule, ruleIdx, isApply, prevStatus, cFColor, bgColor, selRng, rcRefer, rRefer, cRefer, cellRefer, cfBarData) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), cFormatRule, rowIdx = cell.rowIndex, colIdx = cell.colIndex, isViewed, actCell, cFormatRule = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "cFormatRule"), rule, idx, isUpdate = true, cfColors = "e-redft e-yellowft e-greenft e-redf e-redt";
            if (this._getRuleIndex(tRule + "_true", cFormatRule) > -1)
                ruleIdx = this._getRuleIndex(tRule + "_true", cFormatRule); //check already rule exists
            if (this._getRuleIndex(tRule + "_false", cFormatRule) > -1)
                ruleIdx = this._getRuleIndex(tRule + "_false", cFormatRule);
            if (ruleIdx > -1) { //change rule index in cellobj and container for rule true, false changes
                rule = cFormatRule[ruleIdx];
                idx = xlObj._dataContainer.cFormatData.indexOf(this._updateCFormatRule(rule, isApply));
                if (idx > -1)
                    xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx].cFormatRule[ruleIdx] = idx;
                else {
                    xlObj._dataContainer.cFormatData.push(this._updateCFormatRule(rule, isApply));
                    xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx].cFormatRule[ruleIdx] = xlObj._dataContainer.cFormatData.length - 1;
                }
            }
            cFormatRule = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "cFormatRule");
            if (xlObj._isRowViewable(sheetIdx, rowIdx)) {
                isViewed = true;
                actCell = xlObj.getCell(rowIdx, colIdx);
            }
            if (!xlObj.isUndefined(cFormatRule) && (cFormatRule.length > 0 && cFormatRule.indexOf("databar") < 0 && (!(tRule + "_true" === cFormatRule[ruleIdx] || tRule + "_false" === cFormatRule[ruleIdx]) || (cFormatRule.length > 1)))) { //check and change prev applied status for multirule
                for (var j = 0, len = cFormatRule.length; j < len; j++) {
                    rule = cFormatRule[j].split("_");
                    //if (rule[7] === "true" && rule[4] === cFColor)
                    //    prevStatus = false;
                }
                if (isViewed)
                    if (isApply || selRng || rcRefer || rRefer || cRefer || cellRefer) {
                        isApply = true;
                        this._applyColors(cFColor, cfColors, actCell, bgColor);
                    } else {
                        actCell && actCell.removeClass(cfColors)
                    }
            }
            else {
                if (isViewed)
                    if (isApply || selRng || rcRefer || rRefer || cRefer || cellRefer) {
                        isApply = true;
                        this._applyColors(cFColor, cfColors, actCell, bgColor);
                    } else {
                        actCell && actCell.removeClass(cfColors)
                    }
            }
            //for editing 
            if (cFormatRule && cFormatRule.length) {
                var range1 = xlObj.getRangeIndices(tRule.split("_")[6]), range2 = xlObj.getRangeIndices(cFormatRule[0].split("_")[6]), ruleArray = tRule.split("_");
                ruleArray.splice(6, 1);//remove sheet index
                ruleArray.splice(5, 1);//remove address
                if (cFormatRule[0].indexOf(ruleArray.join("_")) > -1 && xlObj.inRange(range2, range1[0], range1[1]))
                    isUpdate = false;
            }

            if (isUpdate && (this._getRuleIndex(tRule + "_true", cFormatRule) < 0 && this._getRuleIndex(tRule + "_false", cFormatRule) < 0)) {  //apply rule for first time while applying        
                if (!xlObj.isUndefined(cfBarData))
                    cFormatRule = tRule + "_" + isApply + "_" + cfBarData;
                else
                    cFormatRule = tRule + "_" + isApply;
                xlObj.XLEdit._updateDataContainer(cell, { dataObj: { "cFormatRule": [cFormatRule] }, skipCell: !isApply });
            }
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.clipboard = function (obj) {
        this.XLObj = obj;
        this._cutCells = [];
        this._copyCells = [];
        this._copyBackup = {};
        this._cData = "";
        this._isCut = false;
        this._copyRange = [];
        this._isSpecial = !obj.isPasteValuesOnly;
        this._isShape = false;
        this._copyRnge = {};
        this._highLightRange = [];
    };

    ej.spreadsheetFeatures.clipboard.prototype = {
        //Cut, copy and paste
        copy: function () {
            this._triggerKeyDown(67, true);
        },

        cut: function () {
            if (this.XLObj.model.isReadOnly)
                return;
            this._triggerKeyDown(88, true);
        },

        paste: function () {
            if (this.XLObj.model.isReadOnly)
                return;
            this._triggerKeyDown(86, true);
        },

        _initCopyPaste: function () {
            var xlId = this.XLObj._id, $div = ej.buildTag("div", {}, { position: "fixed", top: -1000, left: -1000 }, { id: xlId + "_copyPaste" });
            $("body").append($div);
            $div.append(ej.buildTag("textarea " + "." + xlId + "_copyTxt", {}, { width: 1, height: 1, overflow: "hidden", opacity: 0, resize: "none", cursor: "default" }, { id: xlId + "_hiddenTxt" }));
        },

        _copyPasteHandler: function (e) {
            var selCells, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), actSheet = xlObj.getSheet(sheetIdx), evtArgs, isMac = navigator.platform.toLowerCase().indexOf('mac') > -1, time;
            if (isMac)
                time = ($("#" + xlObj._id + "_hiddenTxt").val() === '' && xlObj._browserDetails.name === "chrome") ? 900 : 10;
            else
                time = 0;
            xlObj._isUndoRedo = false;
            if (!xlObj.model.allowEditing && (e.keyCode === 88 || e.keyCode === 86)) {
                return false;
            }
            if ((e.keyCode === 67 || e.keyCode === 88 || e.keyCode === 86) && xlObj._preventctrlkey) {
                xlObj._showAlertDlg("Alert", "CtrlKeyErrorAlert", "CtrlKeyErrorAction", 450);
                return;
            }
            if (e.ctrlKey) {
                if (e.keyCode === 67) //copy
                {
                    evtArgs = { reqType: "copy", startcell: actSheet._startCell, endcell: actSheet._endCell, selectedCells: actSheet._selectedCells };
                    if (xlObj._trigActionBegin(evtArgs))
                        return false;
                    this._getClipboard(e);
                    this._cutCells = [];
                    $.extend(true, this._copyCells, actSheet._selectedCells);
                    if (!this._copyCells.length)
                        this._copyCells = [xlObj.XLShape._picCellIdx];
                    setTimeout(function () {
                        xlObj._setSheetFocus();
                    }, 0);
                }
                else if (e.keyCode === 88) //cut
                {
                    selCells = actSheet._selectedCells;
                    if (xlObj.model.allowLockCell && actSheet.isSheetProtected) {
                        if (xlObj._isPropExists([actSheet.selectedRange], "isLocked", sheetIdx))
                            return;
                    }
                    if (selCells.length && xlObj._isPropExists([actSheet.selectedRange], "isReadOnly", sheetIdx))
                        return;
                    evtArgs = { reqType: "cut", startcell: actSheet._startCell, endcell: actSheet._endCell, selectedCells: actSheet._selectedCells };
                    if (xlObj._trigActionBegin(evtArgs))
                        return false;
                    if (selCells.length && xlObj._isPropExists([actSheet.selectedRange], "rule", sheetIdx))
                        xlObj.getRange(actSheet.selectedRange, sheetIdx).removeClass("e-hlcell")
                    this._copyCells = [];
                    $.extend(true, this._cutCells, selCells);
                    if (!this._cutCells.length)
                        this._cutCells = [xlObj.XLShape._picCellIdx];
                    this._getClipboard(e);
                    setTimeout(function () {
                        xlObj._setSheetFocus();
                    }, 0);
                }
                else if (e.keyCode === 86) //paste
                {
                    evtArgs = { reqType: "paste", isCopy: !this._cutCells.length, isShape: this._isShape, activecell: actSheet._activeCell };
                    !this._isShape && (evtArgs.cRange = this._copyRange);
                    if (xlObj._trigActionBegin(evtArgs))
                        return;
                    if (!xlObj.isUndefined(e.bubbles))
                        this._isSpecial = !xlObj.isPasteValuesOnly;
                    if (this._cData.length || this._copyBackup.elem)
                        $("#" + xlObj._id + "_hiddenTxt").val(this._cData).select();
                    else if (e.originalEvent || isMac)
                        $("#" + xlObj._id + "_hiddenTxt").select();
                    else {
                        $("#" + xlObj._id + "_hiddenTxt").val("");
                        xlObj._showAlertDlg("Alert", ["ClipboardAccessError", "Cut", "Copy", "Paste"], "ClipboardAccessError", 450);
                        return;
                    }
                    setTimeout(function () {
                        xlObj.XLClipboard._setClipboard();
                    }, time);
                }
            }
            else if (e.keyCode === 27 && xlObj.element.find(".e-cdata").length) { //escape          
                xlObj.element.find("td.e-cutright, td.e-cutbottom").removeClass("e-cutright e-cutbottom");
                $("#" + xlObj._id + "_hiddenTxt").val("");
                this._cData = "";
                this._copyCells = [];
            }
        },

        _triggerKeyDown: function (keyCode, ctrlKey) {
            var xlObj = this.XLObj;
            xlObj._setSheetFocus();
            var e = $.Event("keydown");
            e.keyCode = keyCode;
            e.ctrlKey = ctrlKey;
            $("#" + xlObj._id).trigger(e);
        },

        _getClipboard: function (e) {
            var i, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), actSheet = xlObj.getSheet(sheetIdx), startcell = actSheet._startCell, endcell = actSheet._endCell;
            var selected = xlObj._getContent(sheetIdx).find(".e-selected"), actCell = xlObj.getActiveCellElem(sheetIdx)[0], fRange;
            if (!xlObj.model.allowClipboard)
                return;
            if (!xlObj.XLClipboard._copyBackup.cells && xlObj.model.showRibbon && !xlObj.model.isReadOnly) {
                xlObj.XLRibbon._enableButtons(["Home_Clipboard_Paste"], "ejButton");
                xlObj.XLRibbon._enableButtons(["Home_Clipboard_PasteOptions"], "ejSplitButton");
            }
            if (selected.length) {
                this._copyBackup = { cells: [], border: xlObj.model.allowCellFormatting && xlObj.XLFormat.getHashCodeClassAsArray(), table: [], filterRange: [] };
                var textContent = this._getSelectedData(startcell, endcell);
                if (xlObj.element.find(".e-cdata").length)
                    xlObj.element.find("td.e-cutright, td.e-cutbottom").removeClass("e-cutright e-cutbottom");
                $(selected).addClass("e-cdata");
                xlObj.XLSelection._focusBorder(startcell, endcell, xlObj._cutFocus);
                if (selected.length < 2 && !textContent.length)
                    this._cData = textContent = " ";
                else
                    this._cData = textContent;
                this._isCut = false;
                $("#" + xlObj._id + "_hiddenTxt").val(textContent).select();
                navigator.platform.toLowerCase().indexOf('mac') > -1 && document.execCommand("copy");
                this._copyBackup.actCellPos = { "top": actCell.offsetTop, "left": actCell.offsetLeft };
                if (e.keyCode == 67)
                    this._copyBackup.copypaste = true;
                this._isShape = false;
            }
            else {
                this._isShape = true;
                this._copyBackup = { elem: xlObj.getSheetElement(sheetIdx).find(".e-ss-activeimg"), isCut: e.keyCode === 88, sIdx: sheetIdx };
            }
            for (i = 0; i < selected.length; i++) {
                fRange = xlObj.XLEdit.getPropertyValue(xlObj._getCellIdx(selected[i]).rowIndex, xlObj._getCellIdx(selected[i]).colIndex, "formulaRange");
                if (fRange) {
                    if (this._copyRnge[fRange])
                        this._copyRnge[fRange].push({ rowIdx: xlObj._getCellIdx(selected[i]).rowIndex, colIdx: xlObj._getCellIdx(selected[i]).colIndex })
                    else
                        this._copyRnge[fRange] = [{ rowIdx: xlObj._getCellIdx(selected[i]).rowIndex, colIdx: xlObj._getCellIdx(selected[i]).colIndex }];
                }
            }
        },

        _getSelectedData: function (startCell, endCell) {
            var cData, xlObj = this.XLObj, textContent = "", i, j, value, sheetIdx = xlObj.getActiveSheetIndex();
            if (startCell.rowIndex >= endCell.rowIndex) {
                var t = startCell;
                startCell = endCell;
                endCell = t;
            }
            this._copyRange = [];
            this._copyRange.push(xlObj.getActiveSheetIndex());
            this._copyRange.push(xlObj._getSelectedItems()[1]);
            for (i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                if (i !== startCell.rowIndex)
                    textContent += "\n";
                if (startCell.colIndex <= endCell.colIndex) {
                    for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                        cData = xlObj.getRangeData({ range: [i, j, i, j], property: ["type", "value", "value2"] })[0];
                        if (xlObj.getObjectLength(cData))
                            value = cData.type !== "general" ? cData.value2 : cData.value;
                        else
                            value = "";
                        this._updateCBackupData(i, j);
                        //if (cell) {
                        if (j !== endCell.colIndex)
                            textContent += value + "\t";
                        else {
                            textContent += value;
                        }
                    }
                }
                else {
                    for (j = endCell.colIndex; j <= startCell.colIndex; j++) {
                        cData = xlObj.getRangeData({ range: [i, j, i, j], property: ["type", "value", "value2"] })[0];
                        if (xlObj.getObjectLength(cData))
                            value = cData.type !== "general" ? cData.value2 : cData.value;
                        else
                            value = "";
                        this._updateCBackupData(i, j);
                        //if (cell) {
                        if (j !== startCell.colIndex)
                            textContent += value + "\t";
                        else {
                            textContent += value;
                        }
                        //}
                    }
                }
            }
            //get table details
            var tblMgr = xlObj.model.sheets[sheetIdx].tableManager, tblKeys, tblObj, tblRange, tblName = [], selectedRange = xlObj.model.sheets[sheetIdx].selectedRange;
            tblKeys = xlObj.getObjectKeys(tblMgr);
            for (var m = 0, rLen = tblKeys.length; m <= rLen; m++) {
                tblObj = $.extend(true, {}, tblMgr[tblKeys[m]]);
                if (xlObj.getObjectLength(tblObj)) {
                    tblRange = tblObj.range;
                    if (this._compareRange(selectedRange, tblRange)) {
                        tblName.push(tblObj.name);
                        tblObj.header = true;
                        tblObj.tblId = tblKeys[m];
                        this._copyBackup.table.push({ tblName: tblName, tblObj: tblObj, range: tblRange, sheetIdx: sheetIdx });
                        break;
                    }
                }
            }
            //get filtering details
            var fltrRange = xlObj.getRangeIndices(xlObj.model.sheets[sheetIdx].filterSettings.range);
            if (this._compareRange(selectedRange, fltrRange))
                this._copyBackup.filterRange = fltrRange;
            return textContent;
        },

        _updateCBackupData: function (rowIdx, colIdx) {
            var xlObj = this.XLObj;
            var sheetIdx = xlObj.getActiveSheetIndex(), format, container = xlObj._dataContainer.sheets[sheetIdx], cellObj;
            if (rowIdx in container && colIdx in container[rowIdx]) {
                cellObj = $.extend(true, {}, container[rowIdx][colIdx]);
                format = cellObj.format ? cellObj.format : "";
            }
            else {
                cellObj = {};
                format = "";
            }
            this._copyBackup.cells.push({ cell: cellObj, format: format });
        },

        _setClipboard: function () {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            xlObj._isCopyPaste = true;
            var currentCellIdx, cHeight, tRange, pval, evtArgs, settings, contentRows, fval, prop, cellObj, prtctRange, row = [], cell = [], type, regx = new RegExp("\\b" + "e-format" + ".*?\\b", "g"), currentCell, isColor = false, partialTbl = false, currCell, sheetIdx = xlObj.getActiveSheetIndex(), args = { cSheetIndex: this._copyRange[0], pSheetIndex: sheetIdx, sheetIndex: sheetIdx, reqType: (this._copyBackup.isCut) ? "cut-paste" : "copy-paste", type: "actionBegin", action: (this._copyBackup.isCut) ? "cut-paste" : "copy-paste", copyRange: this._copyRange[1] }, details, pastedTable = [];
            if (xlObj._trigActionBegin(args))
                return;
            details = { cSheetIndex: this._copyRange[0], pSheetIndex: sheetIdx, sheetIndex: sheetIdx, isHighlightData: false };
            var startCell = xlObj.getSheet(sheetIdx)._startCell, endCell = xlObj.getSheet(sheetIdx)._endCell, i, j, k = 0, m, rLen, addr, cFormatRule, splitStr, shapeObj = {}, shapeElem, fltr, currCellObj, shapeRegx = new RegExp("\\b" + "e-shapebdr" + ".*?\\b", "g"), bstyle = ["solid", "dashed", "dotted"];
            var minRowIdx = (startCell.rowIndex < endCell.rowIndex) ? startCell.rowIndex : endCell.rowIndex, tblName, tblRange, tableObj = this._copyBackup.table, style, bcolor, copyRowIdx;
            var minColIdx = (startCell.colIndex < endCell.colIndex) ? startCell.colIndex : endCell.colIndex, container = xlObj._dataContainer, range, cellPos, sparklineId;
            var pstCells, selCells, cpyLen = this._copyCells.length, cutLen = this._cutCells.length, copyRangeKeys, multipleArrayFormula;
            xlObj.isPasteValuesOnly && (this._isSpecial = false);
            if (this._copyRange.length) {
                prtctRange = xlObj.swapRange(xlObj.getRangeIndices(this._copyRange[1]));
                selCells = xlObj._getSelectedRange({ rowIndex: prtctRange[0], colIndex: prtctRange[1] }, { rowIndex: prtctRange[2], colIndex: prtctRange[3] });
                tRange = [minRowIdx, minColIdx, minRowIdx + (prtctRange[2] - prtctRange[0]), minColIdx + (prtctRange[3] - prtctRange[1])];
                pstCells = xlObj._getSelectedRange({ rowIndex: tRange[0], colIndex: tRange[1] }, { rowIndex: tRange[2], colIndex: tRange[3] });
                if (xlObj.model.allowLockCell && xlObj.getSheet(sheetIdx).isSheetProtected) {
                    if (xlObj._isPropExists([tRange], "isLocked", sheetIdx))
                        return;
                }
                if (xlObj._isPropExists([tRange], "isReadOnly", sheetIdx))
                    return;
            }
            else {
                if (xlObj.model.allowLockCell && xlObj.getSheet(sheetIdx).isSheetProtected) {
                    if (xlObj._isPropExists([[startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]], "isLocked", sheetIdx))
                        return;
                }
                if (xlObj._isPropExists([[startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]], "isReadOnly", sheetIdx))
                    return;
            }
            if ((minRowIdx === 0 && minColIdx === 0 && cpyLen === (this.XLObj.model.rowCount * this.XLObj.model.columnCount)) || cpyLen !== (this.XLObj.model.rowCount * this.XLObj.model.columnCount)) {
                var objIdx, actSheet = xlObj.model.sheets[sheetIdx], psheet = xlObj.model.sheets[this._copyBackup.sIdx], actCell = xlObj.getSheetElement(sheetIdx).find(".e-activecell"), shapeMgr = xlObj.getSheet(this._copyBackup.sIdx || this._copyRange[0] || sheetIdx).shapeMngr, pRange, className, len, cLen, isCut, cutCells, cSheetIdx = this._copyRange[0];
                if (this._isShape) {
                    if (!this._isSpecial)
                        return false;
                    var id, formulaArr, cellIdx = xlObj.XLShape._picCellIdx, actCellIdx = xlObj.getActiveCell(sheetIdx);
                    shapeElem = this._copyBackup.elem;
                    id = shapeElem[0].id;
                    type = id.indexOf("picture") > -1 ? "picture" : "chart";
                    details = { sheetIndex: sheetIdx, cSheetIndex: this._copyBackup.sIdx, pSheetIndex: sheetIdx, operation: "shape", cShapeId: id, reqType: (this._copyBackup.isCut) ? "cut-paste" : "copy-paste" };
                    cellObj = $.extend(true, {}, container.sheets[this._copyBackup.sIdx][cellIdx.rowIndex][cellIdx.colIndex]);
                    cell = xlObj.getCell(actCellIdx.rowIndex, actCellIdx.colIndex);
                    $.extend(true, shapeObj, shapeMgr[type][id]);
                    details.cutCell = { rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex, obj: cellObj, shapeObj: $.extend(true, {}, shapeObj) };
                    shapeElem = xlObj.element.find("#" + shapeObj.id);
                    if (type === "picture") {
                        className = shapeElem[0].className;
                        if (className.indexOf("e-shapebdr") > -1) {
                            className = shapeElem[0].className.match(shapeRegx)[0];
                            style = className.replace("e-shapebdr", "").split("N");
                            bcolor = style[2];
                            xlObj.XLShape._createPicture(sheetIdx, actCellIdx, shapeMgr.sharedPics[shapeObj.data], cell[0].offsetTop, cell[0].offsetLeft, shapeObj.width, shapeObj.height, null, "#" + bcolor, bstyle[parseInt(style[1]) - 1], style[0] + "px");
                            (xlObj.model.showRibbon) && xlObj.XLRibbon._formatTabUpdate();
                        }
                        else {
                            xlObj.XLShape._createPicture(sheetIdx, actCellIdx, shapeMgr.sharedPics[shapeObj.data], cell[0].offsetTop, cell[0].offsetLeft, shapeObj.width, shapeObj.height);
                            (xlObj.model.showRibbon) && xlObj.XLRibbon._formatTabUpdate();
                        }
                    }
                    else {
                        if (!shapeObj.isChartSeries) {
                            range = shapeObj.range;
                            range = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                            if (range.indexOf(":") === -1)
                                range = range + ":" + range;
                        }
                        shapeObj.top = cell[0].offsetTop;
                        shapeObj.left = cell[0].offsetLeft;
                        xlObj.XLChart.createChart(shapeObj.isChartSeries ? null : range, $.extend(true, {}, shapeObj));
                    }
                    this._isShape = this._copyBackup.isCut ? false : true;
                    this._cutCells = [];
                    if (!xlObj._isUndoRedo) {
                        cellObj = $.extend(true, {}, container.sheets[sheetIdx][actCellIdx.rowIndex][actCellIdx.colIndex]);
                        shapeObj = $.extend(true, {}, actSheet.shapeMngr[type][cellObj[type][0]]);
                        details.pShapeId = cellObj[type][0];
                        details.pasteCell = { rowIndex: actCellIdx.rowIndex, colIndex: actCellIdx.colIndex, obj: cellObj, shapeObj: shapeObj };
                        evtArgs = { sheetIndex: details.sheetIndex, cutCell: details.cutCell, pasteSheetIndex: details.pSheetIndex, operation: details.operation, reqType: details.reqType, pasteShapeId: details.pShapeId, pasteCell: details.pasteCell };
                        if (evtArgs.reqType === "cut-paste") {
                            evtArgs.cutSheetIndex = details.cSheetIndex;
                            evtArgs.cutShapeId = details.cShapeId;
                        }
                        else {
                            evtArgs.copySheetIndex = details.cSheetIndex;
                            evtArgs.copyshapeId = details.cShapeId;
                        }
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(evtArgs);
                        if (this._copyBackup.isCut) {
                            cellObj = $.extend(true, {}, container.sheets[this._copyBackup.sIdx][cellIdx.rowIndex][cellIdx.colIndex]);
                            cellObj[type].some(function (obj, i) {
                                if (shapeElem[0].id === psheet.shapeMngr[type][cellObj[type][i]].id) {
                                    objIdx = i;
                                    return true;
                                }
                                return false;
                            });
                            if (Object.keys(cellObj).length < 2 && cellObj[type].length < 2) {
                                delete container.sheets[this._copyBackup.sIdx][cellIdx.rowIndex][cellIdx.colIndex];
                                if (xlObj.getObjectLength(container.sheets[this._copyBackup.sIdx][cellIdx.rowIndex]) < 1)
                                    delete container.sheets[this._copyBackup.sIdx][cellIdx.rowIndex]
                            }
                            else if (cellObj[type].length < 2)
                                delete cellObj[type];
                            else
                                cellObj[type].splice(objIdx, 1);
                            delete psheet.shapeMngr[type][details.cShapeId];
                        }
                    }
                    if (this._copyBackup.isCut)
                        shapeElem.remove();
                }
                else {
                    isColor = (this._cData === $("#" + xlObj._id + "_hiddenTxt").val()) && (this._copyRange.length > 0);
                    if (isColor) {
                        if (xlObj.model.allowLockCell && xlObj.getSheet(sheetIdx).isSheetProtected) {
                            if (xlObj._isPropExists([tRange], "isLocked", sheetIdx))
                                return;
                        }
                        if (xlObj._isPropExists([tRange], "isReadOnly", sheetIdx))
                            return;
                    }
                    details.reqType = (cutLen > 0) ? "cut-paste" : "copy-paste";
                    if (xlObj.element.find(".e-selected").hasClass("e-readonly")) {
                        if (xlObj.element.find(".e-cdata").length)
                            xlObj.element.find(".e-cutright, .e-cutbottom").removeClass("e-cutright e-cutbottom");
                        return;
                    }
                    details.text = row = $("#" + xlObj._id + "_hiddenTxt").val().length ? $("#" + xlObj._id + "_hiddenTxt").val().split("\n") : [];
                    if (this._cData.length < 1 && details.text.length < 1)
                        return;
                    if (!isColor && row[row.length - 1] === "")
                        row.splice(row.length - 1, 1);
                    var pasteCells = [], hldata, value2, rowIdx, colIdx, cRowIdx;
                    if (isColor) {
                        details.isSpecial = this._isSpecial;
                        range = xlObj.getRangeIndices(this._copyRange[1]);
                        xlObj.setActiveSheetIndex(this._copyRange[0]);
                        details.cutBorder = { range: range, prevBorder: xlObj.model.allowCellFormatting && xlObj.XLFormat.getHashCodeClassAsArray(range) };
                        xlObj.setActiveSheetIndex(sheetIdx);
                    }
                    else
                        details.isSpecial = false;
                    if (details.reqType == "cut-paste") {
                        copyRangeKeys = xlObj.getObjectKeys(this._copyRnge);
                        multipleArrayFormula = xlObj.XLEdit.getPropertyValue(selCells[0].rowIndex, selCells[0].colIndex, "hasMultipleFormulaArray");
                        for (var a = 0; a < copyRangeKeys.length; a++) {
                            if (cutLen == 1 && multipleArrayFormula) {
                                formulaArr = xlObj.XLEdit.getPropertyValue(this._cutCells[a].rowIndex, this._cutCells[a].colIndex, "hasFormulaArray");
                                if (formulaArr) {
                                    xlObj._showAlertDlg("Alert", "ArrayaFormula", 430);
                                    this._copyRnge = {};
                                    return;
                                }
                            }
                        }
                    }
                    if (cutLen) { //cut special
                        cutCells = [];
                        cSheetIdx = this._copyRange[0];
                        (!tableObj.length) && this._cutPasteBorder(prtctRange, tRange);
                        for (i = 0; i < cutLen; i++) {
                            rowIdx = this._cutCells[i].rowIndex;
                            colIdx = this._cutCells[i].colIndex;
                            currentCell = xlObj.getCell(rowIdx, colIdx, cSheetIdx);   //this._copyRange[0] is cutcell sheetIndex
                            cell = { rowIndex: rowIdx, colIndex: colIdx, prevObj: {}, newObj: {}, shapes: [] };
                            if (!ej.isNullOrUndefined(container.sheets[cSheetIdx][rowIdx]))
                                $.extend(true, cell.prevObj, container.sheets[cSheetIdx][rowIdx][colIdx]);
                            else
                                cell.prevObj = {};
                            cellObj = ej.isNullOrUndefined(container.sheets[cSheetIdx][rowIdx]) ? {} : $.extend(true, {}, container.sheets[cSheetIdx][rowIdx][colIdx]);
                            if (currentCell && currentCell[0]) {
                                if ("cFormatRule" in cellObj) {
                                    cFormatRule = $.extend(true, [], cellObj.cFormatRule);
                                    cellObj.cFormatRule = [];
                                    for (m = 0, rLen = cFormatRule.length; m < rLen; m++) {
                                        splitStr = xlObj._dataContainer.cFormatData[cFormatRule[m]].split("_");
                                        if (splitStr[0] === 'databar' || splitStr[0] === 'iconsets' || splitStr[0] === 'colorscale')
                                            return;
                                    }
                                }
                                if (!("merge" in cell.prevObj)) {
                                    xlObj.XLEdit._updateCellValue({ rowIndex: rowIdx, colIndex: colIdx }, "", "", cSheetIdx);
                                    xlObj._refreshRowHeight(cSheetIdx, rowIdx);
                                }
                                if ("wrap" in cellObj) {
                                    addr = xlObj._generateHeaderText(colIdx + 1) + (rowIdx + 1);
                                    xlObj._dupDetails = true;
                                    xlObj.setActiveSheetIndex(cSheetIdx);
                                    xlObj.setWrapText("unwrap", addr + ":" + addr);
                                    xlObj.setActiveSheetIndex(sheetIdx);
                                    xlObj._dupDetails = false;
                                }
                                if ('cellType' in cellObj)
                                    xlObj.model.allowCellType && xlObj.XLCellType._removeControls(rowIdx, colIdx, cSheetIdx, true);
                                if (xlObj.model.allowSparkline && 'sparkline' in cellObj) {
                                    sparklineId = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "sparkline", cSheetIdx);
                                    cell.prevSparklineProp = $.extend(true, {}, xlObj.getSheet(cSheetIdx).shapeMngr.sparkline[sparklineId]);
                                    !this._copyBackup.sparkline && (this._copyBackup.sparkline = {});
                                    this._copyBackup.sparkline[sparklineId] = cell.prevSparklineProp;
                                    xlObj.XLSparkline._removeSparklineElem(rowIdx, colIdx, cSheetIdx);
                                }
                                currentCell.removeClass("e-hyperlinks e-redft e-yellowft e-greenft e-redf e-redt");
                                currentCell.find('a').remove();
                                if (currentCell.hasClass("e-commentcell"))
                                    xlObj.XLComment.deleteComment([rowIdx, colIdx, rowIdx, colIdx], cSheetIdx);
                                if (xlObj.model.allowCellFormatting && !xlObj.XLRibbon._isDirtySelect) {
                                    partialTbl = (xlObj._checkTableRange(xlObj._getRangeArgs(range, "string")).status == "partial");
                                    if (tableObj.length) {
                                        for (m = 0, rLen = tableObj.length; m < rLen; m++)
                                            xlObj.XLFormat.removeStyle(range, { cellStyle: true, tableStyle: true, format: true, border: true, sheetIdx: tableObj[m].sheetIdx })
                                    }
                                    else if (!partialTbl)
                                        xlObj.XLFormat.removeStyle(range, { cellStyle: true, tableStyle: true, format: true });
                                }
                                if ((rowIdx in container.sheets[cSheetIdx]) && (colIdx in container.sheets[cSheetIdx][rowIdx])) {
                                    if (partialTbl)
                                        xlObj.XLEdit._clearDataContainer({ cellIdx: { rowIndex: rowIdx, colIndex: colIdx }, sheetIdx: cSheetIdx, property: ["value", "value2", "type", "cFormatRule", "thousandSeparator", "rule", "calcValue", "align", "hyperlink", "comment", "decimalPlaces", "formatStr"] });
                                    else {
                                        delete container.sheets[cSheetIdx][rowIdx][colIdx];
                                        xlObj._textClip(rowIdx, colIdx, 'delete');
                                    }
                                }
                                if (currentCell[0].className.match(regx) && xlObj._checkTableRange(xlObj._getRangeArgs(range, "string")).status != "partial")
                                    currentCell[0].className = currentCell[0].className.replace(regx, "");
                                if (!ej.isNullOrUndefined(container.sheets[cSheetIdx][rowIdx]))
                                    $.extend(true, cell.newObj, container.sheets[cSheetIdx][rowIdx][colIdx]);
                                else
                                    cell.newObj = {};
                                xlObj._setRowHdrHeight(cSheetIdx, xlObj._getCellIdx(currentCell[0]).rowIndex);
                            }
                            else if (xlObj.getObjectLength(cellObj)) {
                                prop = xlObj.getObjectKeys(cellObj);
                                partialTbl = (xlObj._checkTableRange(xlObj._getRangeArgs(range, "string")).status == "partial");
                                if (partialTbl) {
                                    prop.splice(prop.indexOf("tableName"), 1);
                                    prop.splice(prop.indexOf("tformats"), 1);
                                    prop.splice(prop.indexOf("format"), 1);
                                }
                                xlObj.clearRangeData([rowIdx, colIdx, rowIdx, colIdx], prop);
                                if (xlObj.model.allowCellType && ('cellType' in cellObj))
                                    delete container.sheetCellType[container.sheets[cSheetIdx][rowIdx][colIdx]['cellType']];
                            }
                            cutCells.push(cell);
                        }
                        for (m = 0, rLen = tableObj.length; m < rLen; m++) {
                            var tempIdx = xlObj.getActiveSheetIndex();
                            xlObj.gotoPage(cSheetIdx, false);
                            tblName = $.trim(tableObj[m].tblName);
                            xlObj.XLFormat.removeTable(xlObj._getTableID(null, tblName, cSheetIdx));
                            xlObj.gotoPage(tempIdx, false);
                        }
                        if (xlObj.model.allowCellFormatting && !partialTbl)
                            xlObj.XLFormat.removeStyle(range, { cellStyle: true, tableStyle: true, format: true });
                        xlObj.setActiveSheetIndex(cSheetIdx);
                        //xlObj.model.allowCellFormatting && xlObj.XLFormat.removeStyle(range, { cellStyle: true, tableStyle: true, border: true });
                        xlObj.setActiveSheetIndex(sheetIdx);
                        details.cutCells = cutCells;
                        details.cfat = { table: tblName, range: range };
                        isCut = true;
                        if (xlObj.element.find(".e-cdata").length)
                            xlObj.element.find(".e-cutright, .e-cutbottom").removeClass("e-cutright e-cutbottom");
                    }
                    else {
                        var copyCells = [];
                        if (this._isSpecial) {
                            for (i = 0; i < cpyLen; i++) {
                                rowIdx = this._copyCells[i].rowIndex;
                                colIdx = this._copyCells[i].colIndex;
                                cell = { rowIndex: rowIdx, colIndex: colIdx, prevObj: {}, newObj: {} };
                                if (!ej.isNullOrUndefined(container.sheets[sheetIdx][rowIdx]))
                                    $.extend(true, cell.prevObj, container.sheets[sheetIdx][rowIdx][colIdx]);
                                copyCells.push(cell);
                            }
                        }
                        else
                            copyCells = this._copyCells;
                        details.cutCells = copyCells;
                    }
                    if (row.length)
                        pRange = [minRowIdx, minColIdx, minRowIdx + row.length - 1, minColIdx + row[0].split("\t").length - 1];
                    else {
                        pRange = [minRowIdx, minColIdx, minRowIdx, minColIdx];
                        i = j = 1;
                    }
                    details.pasteBorder = { range: pRange, prevBorder: xlObj.model.allowCellFormatting && xlObj.XLFormat.getHashCodeClassAsArray(pRange) };
                    if (cpyLen) {
                        var l, pIdx, plen, bordrs = [];
                        if (!xlObj.isPasteValuesOnly)
                            xlObj.XLFormat.removeStyle(tRange, { border: true, cellStyle: true, format: true });
                        for (l = 0, plen = pstCells.length; l < plen; l++) {
                            pIdx = pstCells[l];
                            rowIdx = selCells[l].rowIndex;
                            colIdx = selCells[l].colIndex;
                            bordrs = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "borders", this._copyRange[0]);
                            if (!xlObj.isUndefined(bordrs))
                                xlObj.XLFormat.applyBorder(bordrs, [pIdx.rowIndex, pIdx.colIndex, pIdx.rowIndex, pIdx.colIndex]);
                        }
                    }
                    var merge, isMHide, mergeIdx, cutCntnr;
                    contentRows = xlObj._getContTBody(sheetIdx).find("rows");
                    for (i = 0, len = row.length; i < len; i++) {
                        cell = row[i].split("\t");
                        for (j = 0, cLen = cell.length; j < cLen; j++) {
                            currentCell = contentRows[xlObj._getRowIdx(minRowIdx + i)] ? xlObj.getCell(minRowIdx + i, minColIdx + j)[0] : undefined;
                            if (ej.isNullOrUndefined(currentCell)) {
                                if (actSheet.colCount <= minColIdx + j)
                                    xlObj.XLScroll._createNewColumn(sheetIdx, { rowIndex: -1, colIndex: -1 }, { rowIndex: -1, colIndex: -1 }, "insert");
                                else if (xlObj.model.scrollSettings.allowScrolling && !xlObj.model.scrollSettings.allowVirtualScrolling)
                                    xlObj.XLScroll._createNewRow(sheetIdx, -1, -1, "insert");
                                xlObj.XLScroll._refreshScroller(sheetIdx, "refresh", "all");
                                currentCell = xlObj.getCell(minRowIdx + i, minColIdx + j);
                            }
                            else
                                currentCell = $(currentCell);
                            currentCell.find('.e-cf-databar').remove();
                            currCell = { rowIndex: minRowIdx + i, colIndex: minColIdx + j };
                            currCell.prevObj = (!ej.isNullOrUndefined(container.sheets[sheetIdx][minRowIdx + i])) ? $.extend(true, {}, container.sheets[sheetIdx][minRowIdx + i][minColIdx + j]) : {};
                            if (!ej.isNullOrUndefined(currCell.prevObj)) {
                                delete currCell.prevObj["isMHide"];
                                delete currCell.prevObj["mergeIdx"];
                                if (!ej.isNullOrUndefined(currCell.prevObj.cellType))
                                    currCell.prevObj.cTypeObj = container.sheetCellType[currCell.prevObj.cellType];
                            }
                            if (this._isCut && isColor)
                                return;
                            currentCellIdx = { rowIndex: minRowIdx + i, colIndex: minColIdx + j };
                            if (this._isSpecial && isColor) { //paste special 
                                rowIdx = currentCellIdx.rowIndex;
                                colIdx = currentCellIdx.colIndex;
                                cRowIdx = selCells[k].rowIndex;
                                className = xlObj._dataContainer.hashCode[this._copyBackup.cells[k].format];
                                if (!("merge" in this._copyBackup.cells[k].cell) && !ej.isNullOrUndefined(className))
                                    xlObj.addClass(currentCell, className);
                                cellObj = $.extend(true, {}, this._copyBackup.cells[k].cell);
                                if (!(rowIdx in container.sheets[sheetIdx]))
                                    container.sheets[sheetIdx][rowIdx] = {};
                                if (!(colIdx in container.sheets[sheetIdx][rowIdx]))
                                    container.sheets[sheetIdx][rowIdx][colIdx] = {};
                                else {
                                    if ("comment" in container.sheets[sheetIdx][rowIdx][colIdx])
                                        xlObj.getCell(rowIdx, colIdx).removeClass("e-commentcell");
                                }
                                if (cellObj) {
                                    merge = $.extend(true, {}, xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "merge"));
                                    isMHide = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isMHide");
                                    mergeIdx = $.extend(true, {}, xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "mergeIdx"));
                                    delete cellObj['overflow'];
                                    delete cellObj['isOverflow'];
                                    delete cellObj['tableName'];
                                    delete cellObj['isReadOnly'];
                                    delete cellObj['isLocked'];
                                    if ("wrap" in cellObj)
                                        cellObj['wrap'] = "";
                                    $.extend(true, container.sheets[sheetIdx][rowIdx][colIdx], cellObj);
                                    cutCntnr = container.sheets[sheetIdx][rowIdx][colIdx];
                                    if (xlObj.getObjectLength(merge))
                                        cutCntnr.merge = merge;
                                    else
                                        delete cutCntnr.merge;
                                    if (xlObj.getObjectLength(mergeIdx))
                                        cutCntnr.mergeIdx = mergeIdx;
                                    else
                                        delete cutCntnr.mergeIdx;
                                    if (!xlObj.isUndefined(isMHide))
                                        cutCntnr.isMHide = isMHide;
                                    else
                                        delete cutCntnr.isMHide;
                                    if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2")) {
                                        xlObj._textClip(rowIdx, colIdx, 'delete');
                                        xlObj._textClip(rowIdx, colIdx, 'add');
                                    }
                                    if (cellObj.value2 && typeof cellObj.value2 == "string" && !cellObj.formatStr)
                                        value2 = container.sharedData[cellObj.value][0] === "=" ? container.sharedData[cellObj.value] : cellObj.value2;
                                    else
                                        value2 = container.sharedData[cellObj.value];
                                    if (cellObj.type === 3)
                                        value2 = this._getUpdatedCellFormula(value2, this._copyCells[k], { rowIdx: rowIdx, colIdx: colIdx });
                                    if (!("merge" in cellObj)) {
                                        xlObj._dupDetails = true;
                                        var csArgs = { cellIndex: currentCellIdx, value: value2, prevValue: xlObj._getCellValue(currentCellIdx.rowIndex, currentCellIdx.colIndex).value, sheetIdx: sheetIdx, reqType: "paste" };
                                        if (xlObj._trigger("cellSave", csArgs))
                                            return;
                                        xlObj._saveTriggered = true;
                                        xlObj.XLEdit._updateCellValue(csArgs.cellIndex, csArgs.value, null, null, cellObj.cellType);
                                        xlObj._saveTriggered = false;
                                        xlObj._dupDetails = false;
                                        cHeight = xlObj.XLEdit.getPropertyValue(cRowIdx, 0, (details.reqType === "copy-paste") ? "cHeight" : "pHeight", this._copyRange[0]);
                                        if (!xlObj.isUndefined(cHeight)) {
                                            xlObj.XLEdit._updateDataContainer({ rowIndex: csArgs.cellIndex.rowIndex, colIndex: 0 }, { dataObj: { pHeight: xlObj.getSheet(sheetIdx).rowsHeightCollection[currentCellIdx.rowIndex], cHeight: cHeight } });
                                            xlObj.getSheet(sheetIdx).rowsHeightCollection[currentCellIdx.rowIndex] = cHeight;
                                            if (xlObj._isRowViewable(sheetIdx, currentCellIdx.rowIndex))
                                                xlObj.getRows(sheetIdx)[1][xlObj._getRowIdx(currentCellIdx.rowIndex)].style.height = cHeight + "px";
                                        }
                                    }
                                    if ("merge" in cellObj) {
                                        var length = 0, pstCell, pstCellObj, rowSpan, colSpan;
                                        merge = cellObj.merge;
                                        range = xlObj.getRangeIndices(merge.mRange);
                                        var rowCnt = range[2] - range[0], colCnt = range[3] - range[1], selectCells = xlObj.getSheet(sheetIdx)._selectedCells;
                                        var cellRange = xlObj._getAlphaRange(sheetIdx, currCell.rowIndex, currCell.colIndex, currCell.rowIndex + rowCnt, currCell.colIndex + colCnt);
                                        var mCell, sRowCnt = endCell.rowIndex - startCell.rowIndex, sColCnt = endCell.colIndex - startCell.colIndex;//sRowCnt is selected cell row count & sColCnt is selectedcell Colcount
                                        pstCell = xlObj._getSelectedRange({ rowIndex: currCell.rowIndex, colIndex: currCell.colIndex }, { rowIndex: currCell.rowIndex + rowCnt, colIndex: currCell.colIndex + colCnt });
                                        if (selCells.length >= selectCells.length || !(((sColCnt + 1) % (colCnt + 1)) === 0 && ((sRowCnt + 1) % (rowCnt + 1)) === 0)) {
                                            for (m = 0, rLen = pstCell.length; m < rLen; m++) {
                                                if (ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(pstCell[m].rowIndex, pstCell[m].colIndex, "isMHide"))) {
                                                    pstCellObj = xlObj.XLEdit.getPropertyValue(pstCell[m].rowIndex, pstCell[m].colIndex, "merge");
                                                    length++;
                                                    if (!ej.isNullOrUndefined(pstCellObj)) {
                                                        if (pstCellObj) {
                                                            rowSpan = pstCellObj.mSpan.rowSpan;
                                                            colSpan = pstCellObj.mSpan.colSpan;
                                                        }
                                                        if (!ej.isNullOrUndefined(rowSpan) && !ej.isNullOrUndefined(colSpan))
                                                            length += (parseInt(rowSpan) * parseInt(colSpan)) - 1;
                                                        if (pstCellObj.isCenterAlign) {
                                                            if (xlObj._isRowViewable(sheetIdx, pstCell[m].rowIndex))
                                                                xlObj.getCell(pstCell[m].rowIndex, pstCell[m].colIndex).addClass("e-calign").removeClass("e-ralign");
                                                        }
                                                    }
                                                }
                                            }
                                            if (pstCell.length === length) {
                                                if (cutLen) {
                                                    var fCell = false, r, c, cpycontainer = xlObj._dataContainer.sheets[cSheetIdx];
                                                    mCell = xlObj._getSelectedCells(cSheetIdx, merge.mRange).range;
                                                    for (r = mCell[0]; r <= mCell[2]; r++) {
                                                        for (c = mCell[1]; c <= mCell[3]; c++) {
                                                            if (xlObj._isRowViewable(cSheetIdx, r))
                                                                xlObj.getCell(r, c, cSheetIdx).text("");
                                                            (ej.isNullOrUndefined(cpycontainer[r])) && (cpycontainer[r] = {});
                                                            (ej.isNullOrUndefined(cpycontainer[r][c])) && (cpycontainer[r][c] = {});
                                                            if (!fCell) {
                                                                cpycontainer[r][c].merge = merge;
                                                                fCell = true;
                                                            }
                                                            else {
                                                                cpycontainer[r][c].isMHide = true;
                                                                cpycontainer[r][c].mergeIdx = { rowIndex: range[0], colIndex: range[1] };
                                                            }
                                                        }
                                                    }
                                                    xlObj.setActiveSheetIndex(cSheetIdx);
                                                    xlObj._unMergeAllCells(this._copyRange[0], 0, xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }), [], 0, 0);
                                                    xlObj.setActiveSheetIndex(sheetIdx);
                                                }
                                            }
                                            xlObj._paste = true;
                                            xlObj._dupDetails = true;
                                            if (!xlObj.isUndefined(currCell.prevObj.merge))
                                                xlObj.unmergeCells(currCell.prevObj.merge.mRange);
                                            xlObj.unmergeCells(cellRange);
                                            xlObj.mergeCenter = merge.isCenterAlign;
                                            if (!xlObj.isUndefined(mCell) && mCell === "1")
                                                xlObj.mergeAcrossCells(cellRange, true);
                                            else
                                                xlObj.mergeCells(cellRange, true);
                                            xlObj._dupDetails = false;
                                            xlObj.XLEdit._updateCellValue(currentCellIdx, value2);
                                            if (!ej.isNullOrUndefined(className))
                                                xlObj.addClass(currentCell, className);
                                        }
                                        else {
                                            var obj = $.extend(true, {}, cellObj);
                                            obj.value = obj.value2 = value2;
                                            if (!ej.isNullOrUndefined(className))
                                                xlObj.getCell(range[0], range[1], this._copyRange[0]).addClass(className);
                                            xlObj.XLEdit._updateDataContainer({ rowIndex: range[0], colIndex: range[1] }, { dataObj: obj });
                                            xlObj._showAlertDlg("Alert", "MergeAlert", "", 250);
                                            return;
                                        }
                                    }
                                    if ("hyperlink" in cellObj) {
                                        hldata = cellObj.hyperlink;
                                        if (currentCell) {
                                            if (hldata && !hldata.webAddr)
                                                currentCell.html(ej.buildTag("a.e-hyperlinks", xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, 'value2'), "", { href: "#" }));
                                            else
                                                currentCell.html(ej.buildTag("a.e-hyperlinks", xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, 'value2'), "", { href: hldata.webAddr, target: "_blank" }));
                                        }
                                    }
                                    if ("comment" in cellObj) {
                                        xlObj._removeClass(currentCell, "e-commentcell");
                                        xlObj.XLComment.setComment([rowIdx, colIdx, rowIdx, colIdx], null, false);
                                    }
                                    if ("cFormatRule" in cellObj) {
                                        cFormatRule = $.extend(true, [], cellObj.cFormatRule);
                                        cellObj.cFormatRule = [];
                                        for (m = 0, rLen = cFormatRule.length; m < rLen; m++) {
                                            splitStr = xlObj._dataContainer.cFormatData[cFormatRule[m]].split("_");
                                            if (splitStr[0] !== 'databar' && splitStr[0] !== 'iconsets' && splitStr[0] !== 'colorscale')
                                                xlObj.XLCFormat._cFormat(splitStr[0], splitStr[2], splitStr[3], splitStr[4], splitStr[5], splitStr[0] == "databar" ? splitStr[6] : null, null, [rowIdx, colIdx, rowIdx, colIdx], "paste", this._copyCells[k]);
                                        }
                                    }
                                    xlObj._isPaste = true;
                                    if ("wrap" in cellObj) {
                                        xlObj._dupDetails = true;
                                        addr = xlObj._generateHeaderText(colIdx + 1) + (rowIdx + 1);
                                        xlObj.setWrapText("wrap", addr + ":" + addr);
                                        xlObj._dupDetails = false;
                                    }
                                    if ('cellType' in cellObj) {
                                        settings = $.extend(true, {}, xlObj._dataContainer.sheetCellType[cellObj['cellType']]);
                                        delete settings["id"];
                                        delete settings["value"];
                                        delete settings["selectedIndex"];
                                        delete settings["text"];
                                        if (settings.type !== "DropDownList")
                                            settings.text = '';
                                        var cellType, alphRange = xlObj.getAlphaRange(rowIdx, colIdx);
                                        for (m = 0; m < actSheet.cellTypes.length; m++) {
                                            cellType = actSheet.cellTypes[m];
                                            if (cellType["range"] == alphRange) {
                                                actSheet.cellTypes.splice(m, 1);
                                                break;
                                            }
                                        }
                                        xlObj.XLEdit._clearDataContainer({ cellIdx: { rowIndex: rowIdx, colIndex: colIdx }, property: ["cellType"] });
                                        xlObj.model.allowCellType && xlObj.XLCellType._renderControls(rowIdx, colIdx, sheetIdx, settings, false);
                                    }
                                    if (xlObj.model.allowSparkline && 'sparkline' in cellObj)
                                        xlObj.XLSparkline._refreshSparklineClipboard(rowIdx, colIdx, sheetIdx, cSheetIdx, this._copyCells.length);
                                    xlObj._isPaste = true;
                                    if ("picture" in cellObj) {
                                        delete cutCntnr.picture;
                                        for (m = 0, rLen = cellObj.picture.length; m < rLen; m++) {
                                            cell = cpyLen ? this._copyCells[k] : this._cutCells[k];
                                            cellPos = this._copyBackup.actCellPos;
                                            currCellObj = xlObj.getRangeData([cell.rowIndex, cell.colIndex, cell.rowIndex, cell.colIndex], "", "", this._copyRange[0])[0];
                                            if ((!xlObj.isUndefined(currCellObj.picture) && currCellObj.picture.indexOf(cellObj.picture[m]) > -1) || !cpyLen) {
                                                $.extend(true, shapeObj, shapeMgr.picture[cellObj.picture[m]]);
                                                shapeElem = xlObj.element.find("#" + shapeObj.id);
                                                if (shapeObj.rowIndex === cell.rowIndex && shapeObj.colIndex === cell.colIndex) {
                                                    shapeElem = xlObj.element.find("#" + shapeObj.id);
                                                    className = shapeElem[0].className;
                                                    if (className.indexOf("e-shapebdr") > -1) {
                                                        className = shapeElem[0].className.match(shapeRegx)[0];
                                                        style = className.replace("e-shapebdr", "").split("N");
                                                        bcolor = style[2];
                                                        xlObj.XLShape._createPicture(sheetIdx, currentCellIdx, shapeMgr.sharedPics[shapeObj.data], parseInt(shapeElem.css("top")) - cellPos.top + actCell[0].offsetTop, parseInt(shapeElem.css("left")) - cellPos.left + actCell[0].offsetLeft, shapeObj.width, shapeObj.height, null, "#" + bcolor, bstyle[parseInt(style[1]) - 1], style[0] + "px");
                                                    }
                                                    else
                                                        xlObj.XLShape._createPicture(sheetIdx, currentCellIdx, shapeMgr.sharedPics[shapeObj.data], parseInt(shapeElem.css("top")) - cellPos.top + actCell[0].offsetTop, parseInt(shapeElem.css("left")) - cellPos.left + actCell[0].offsetLeft, shapeObj.width, shapeObj.height);
                                                    if (this._copyRange[0] === sheetIdx)
                                                        container.sheets[sheetIdx][minRowIdx + i][minColIdx + j].picture[m] = xlObj.getObjectKeys(shapeMgr.picture)[xlObj.getObjectLength(shapeMgr.picture) - 1];
                                                    if (cutLen)
                                                        shapeElem.remove();
                                                }
                                            }
                                        }
                                    }
                                    if ("chart" in cellObj) {
                                        delete cutCntnr.chart;
                                        currCellObj = xlObj.getRangeData([rowIdx, colIdx, rowIdx, colIdx]);
                                        for (m = 0, rLen = cellObj.chart.length; m < rLen; m++) {
                                            cell = cpyLen ? this._copyCells[k] : this._cutCells[k];
                                            cellPos = this._copyBackup.actCellPos;
                                            currCellObj = xlObj.getRangeData([cell.rowIndex, cell.colIndex, cell.rowIndex, cell.colIndex])[0];
                                            if ((!xlObj.isUndefined(currCellObj.chart) && currCellObj.chart.indexOf(cellObj.chart[m]) > -1) || !cpyLen) {
                                                $.extend(true, shapeObj, shapeMgr.chart[cellObj.chart[m]]);
                                                shapeElem = xlObj.element.find("#" + shapeObj.id);
                                                if (shapeObj.rowIndex === cell.rowIndex && shapeObj.colIndex === cell.colIndex) {
                                                    if (!shapeObj.isChartSeries) {
                                                        range = shapeObj.range;
                                                        range = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]);
                                                        if (range.indexOf(":") < 0)
                                                            range = range + ":" + range;
                                                    }
                                                    shapeObj.top = parseInt(shapeElem.css("top")) - cellPos.top + actCell[0].offsetTop;
                                                    shapeObj.left = parseInt(shapeElem.css("left")) - cellPos.left + actCell[0].offsetLeft;
                                                    xlObj.XLChart.createChart(shapeObj.isChartSeries ? null : range, shapeObj);
                                                    container.sheets[sheetIdx][minRowIdx + i][minColIdx + j].chart[m] = xlObj.getObjectKeys(shapeMgr.chart)[xlObj.getObjectLength(shapeMgr.chart) - 1];
                                                    if (cutLen)
                                                        shapeElem.remove();
                                                }
                                            }
                                        }
                                    }
                                    if ('rule' in cellObj) {
                                        if (cellObj.rule.type === "list")
                                            xlObj._setddlCell();
                                    }
                                    xlObj._isPaste = false;
                                }
                                else {
                                    xlObj.XLEdit._updateCellValue(currentCellIdx, "");
                                    if (!ej.isNullOrUndefined(container.sheets[sheetIdx][rowIdx]))
                                        delete container.sheets[sheetIdx][rowIdx][colIdx];
                                }
                            }
                            else { //paste values only
                                pval = xlObj.XLEdit._parseValue(cell[j], currentCellIdx);
                                if (pval.type == "time" || pval.type == "datetime") {
                                    fval = xlObj._dateToInt(pval.value);
                                    xlObj.XLEdit._updateCellValue(currentCellIdx, fval);
                                }
                                else
                                    xlObj.XLEdit._updateCellValue(currentCellIdx, pval.value);
                                if (cell[j].indexOf("=") > -1)
                                    xlObj.XLEdit._updateCellValue(currentCellIdx, currentCell.html()); //remove formula 
                            }
                            k++;
                            currCell.newObj = (!ej.isNullOrUndefined(container.sheets[sheetIdx][minRowIdx + i])) ? $.extend(true, {}, container.sheets[sheetIdx][minRowIdx + i][minColIdx + j]) : {};
                            if ((ej.isNullOrUndefined(currCell.newObj)))
                                currCell.newObj = {};
                            currCell.prevObj.cTypeObj && (currCell.prevObj.selIdxChange = xlObj._isSelIdxChange);
                            pasteCells.push(currCell);
                        }
                        if (!ej.isNullOrUndefined(currentCell)) {
                            xlObj._setRowHdrHeight(sheetIdx, xlObj._getCellIdx(currentCell[0]).rowIndex);
                            if (xlObj.model.allowFreezing && xlObj.getSheet(sheetIdx)._isFreezed)
                                xlObj.XLFreeze._refreshFRowResize(xlObj._getCellIdx(currentCell[0]).rowIndex);
                        }
                    }
                    xlObj._hasFormulaArray = false, xlObj._hasMultipleFormulaArray = false;
                    if (row.length < 1)
                        i = 1;
                    if (cutLen) {
                        this._isCut = isCut;
                        this._cutCells = [];
                        this._cData = "";
                    }
                    this._formulaArrayPaste();
                    if (this._isSpecial && isColor) { //paste - border, filtering, table                        
                        var table = this._copyBackup.table, tObj, tmgr = xlObj.getSheet(sheetIdx).tableManager, tabId;
                        range = xlObj.getRangeIndices(this._copyRange[1]);
                        for (m = 0, rLen = table.length; m < rLen; m++) {
                            tblRange = this._copyBackup.table[m].range;
                            tObj = $.extend(true, {}, this._copyBackup.table[m].tblObj);
                            if (this._copyBackup.copypaste)
                                tObj.name = "Table" + (xlObj._tableCnt);
                            xlObj._dupDetails = true;
                            xlObj.XLFormat.createTable(tObj, xlObj._getAlphaRange(this._copyRange[0], tblRange[0] + minRowIdx - range[0], tblRange[1] + minColIdx - range[1], minRowIdx -
                                range[0] + tblRange[2], minColIdx - range[1] + tblRange[3]));
                            xlObj._dupDetails = false;
                            tabId = this._isCut ? tObj.tblId : this.XLObj.getObjectLength(tmgr);
                            pastedTable.push(tmgr[tabId]);
                            pastedTable[m].id = tabId;
                            pastedTable[m].totalRow && xlObj.XLFormat._updateTotalRow(sheetIdx, pastedTable[m].id, table[0].tblObj.fnNumber, pastedTable[m].range, true);
                        }
                        pRange = [minRowIdx, minColIdx, (i + minRowIdx - 1), (j + minColIdx - 1)];
                        //xlObj.model.allowCellFormatting && xlObj.XLFormat.updateFormat(this._copyBackup["border"], pRange);             //commented due to border issues      
                        if (cutLen && this._copyBackup.filterRange.length > 0 && this._copyRange[0] === sheetIdx) {
                            var fltrRange = this._copyBackup.filterRange;
                            xlObj.XLFilter.clearFilter();
                            fltr = xlObj._generateHeaderText(fltrRange[1] + minColIdx - range[1] + 1) + (fltrRange[0] + minRowIdx - range[0] + 1) + ":" + xlObj._generateHeaderText(minColIdx - range[1] + fltrRange[3] + 1) + (minRowIdx - range[0] + fltrRange[2] + 1);
                            xlObj.XLFilter.filter(fltr);
                        }
                        details.pasteBorder.newBorder = xlObj.model.allowCellFormatting && xlObj.XLFormat.getHashCodeClassAsArray(pRange);
                        xlObj.setActiveSheetIndex(this._copyRange[0]);
                        details.cutBorder.newBorder = xlObj.model.allowCellFormatting && xlObj.XLFormat.getHashCodeClassAsArray(range);
                        xlObj.setActiveSheetIndex(sheetIdx);
                    }
                    details.pfat = { table: this._copyBackup.table, range: range, minRowIdx: minRowIdx, minColIdx: minColIdx, ptable: pastedTable };
                    details.pfilter = fltr;
                    details.pasteCells = pasteCells;
                    xlObj.XLSelection.selectRange(({ rowIndex: minRowIdx, colIndex: minColIdx }), ({ rowIndex: (i + minRowIdx - 1), colIndex: (j + minColIdx - 1) }));
                    xlObj.getSheet(sheetIdx)._startCell = ({ rowIndex: minRowIdx, colIndex: minColIdx });
                    xlObj.getSheet(sheetIdx)._endCell = ({ rowIndex: (i + minRowIdx - 1), colIndex: (j + minColIdx - 1) });
                    if (xlObj.model.allowAutoFill)
                        xlObj.XLDragFill.positionAutoFillElement();
                    details.sheetIndex = sheetIdx;
                    xlObj._setSheetFocus();
                    xlObj.model.showRibbon && xlObj.XLRibbon._updateRibbonIcons();
                    evtArgs = { sheetIndex: details.sheetIndex, pasteCells: details.pasteCells, reqType: details.reqType, isSpecial: details.isSpecial, cutCells: details.cutCells, pasteSheetIndex: details.pSheetIndex, isHighlightData: details.isHighlightData };
                    if (evtArgs.reqType === "cut-paste")
                        evtArgs.cutSheetIndex = details.cSheetIndex;
                    else
                        evtArgs.copySheetIndex = details.cSheetIndex;
                    if (!xlObj._isUndoRedo) {
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(evtArgs);
                    }
                    if (evtArgs.isHighlightData && !evtArgs.isSpecial) {
                        xlObj._pushHighlightData([evtArgs.pasteCells[0].rowIndex, evtArgs.pasteCells[0].colIndex, evtArgs.pasteCells[evtArgs.pasteCells.length - 1].rowIndex, evtArgs.pasteCells[evtArgs.pasteCells.length - 1].colIndex]);
                        if (this._highLightRange.length && args.operation != "hl-data") {
                            for (i = 0, len = this._highLightRange.length; i < len; i++)
                                xlObj.XLValidate.highlightInvalidData(this._highLightRange[i]);
                            this._highLightRange = [];
                        }
                    }
                    copyRowIdx = (details.cutCells.length < 1) ? minRowIdx : details.cutCells[0].rowIndex;
                    xlObj.XLScroll._getRowHeights(sheetIdx, (minRowIdx < copyRowIdx) ? (minRowIdx > 0) ? minRowIdx - 1 : 0 : (copyRowIdx > 0) ? copyRowIdx - 1 : 0);
                }
                xlObj._isPaste = false;
                this._isCut = false;
                xlObj.XLSelection._refreshBorder();
                xlObj.model.allowAutoFill && xlObj.XLDragFill.positionAutoFillElement();
                if (xlObj.getSheet(sheetIdx)._isFreezed)
                    xlObj.XLFreeze._refreshSelection();
            }
            else
                xlObj._showAlertDlg("Alert", "FullSheetCopyPasteAlert", "", 375);
            xlObj._isCopyPaste = false;
        },

        _formulaArrayPaste: function () {
            var pstCells, pstCellRnge, formula, b, xlObj = this.XLObj, range, sheetIdx = xlObj.getActiveSheetIndex(), formulaArrRange, copyRowDiff = 0, pasteRowDiff = 0, pasteColDiff = 0, copyColDiff = 0, nAlpha, newRnge, formulaRng, selRng, copyRangeKeys = xlObj.getObjectKeys(this._copyRnge),
                value2, cpyCells, prtctRange, tRange, pastCell, pasteRng, rowDiff, colDiff, formulaVal, fRange, rowIndex, colIndex;
            for (var a = 0, len = copyRangeKeys.length; a < len; a++) {
                cpyCells = this._copyRnge[copyRangeKeys[a]];
                var startCell = xlObj.getSheet(sheetIdx)._startCell, endCell = xlObj.getSheet(sheetIdx)._endCell, minRowIdx, minColIdx;
                minRowIdx = (startCell.rowIndex < endCell.rowIndex) ? startCell.rowIndex : endCell.rowIndex;
                minColIdx = (startCell.colIndex < endCell.colIndex) ? startCell.colIndex : endCell.colIndex
                prtctRange = xlObj.swapRange(xlObj.getRangeIndices(copyRangeKeys[a]));
                tRange = [minRowIdx, minColIdx, minRowIdx + (prtctRange[2] - prtctRange[0]), minColIdx + (prtctRange[3] - prtctRange[1])];
                pstCells = xlObj._getSelectedRange({ rowIndex: tRange[0], colIndex: tRange[1] }, { rowIndex: tRange[2], colIndex: tRange[3] });
                pstCellRnge = xlObj.getAlphaRange(pstCells[0].rowIndex, pstCells[0].colIndex, pstCells[pstCells.length - 1].rowIndex, pstCells[pstCells.length - 1].colIndex)
                for (b = 0; b < cpyCells.length; b++) {
                    xlObj._hasFormulaArray = true, xlObj._hasMultipleFormulaArray = true;
                    if (b == 0) {
                        range = copyRangeKeys[a];
                        selRng = xlObj.getRangeIndices(range);

                        formulaArrRange = xlObj.getSheet(sheetIdx).formulaRange[range];
                        formula = xlObj.XLDragFill._parseFormula(formulaArrRange);
                        newRnge = formula[0] + ":" + formula[formula.length - 1];
                        formulaRng = xlObj.getRangeIndices(newRnge);
                        if (!this._isCut) {
                            //Copy position Difference
                            if (formulaRng[0] < selRng[0])
                                copyRowDiff = selRng[0] - formulaRng[0];
                            else if (formulaRng[0] > selRng[0])
                                copyRowDiff = formulaRng[0] - selRng[0];
                            if (formulaRng[1] < selRng[1])
                                copyColDiff = selRng[1] - formulaRng[1];
                            else if (formulaRng[1] > selRng[1])
                                copyColDiff = formulaRng[1] - selRng[1];

                            //Paste positon Differnces
                            pastCell = xlObj._getAlphaRange(sheetIdx, pstCells[b].rowIndex, pstCells[b].colIndex, pstCells[b].rowIndex, pstCells[b].colIndex);
                            pasteRng = xlObj.getRangeIndices(pastCell);
                            if (formulaRng[0] < pasteRng[0])
                                pasteRowDiff = pasteRng[0] - formulaRng[0];
                            else if (formulaRng[0] > pasteRng[0])
                                pasteRowDiff = formulaRng[0] - pasteRng[0];
                            if (formulaRng[1] < pasteRng[1])
                                pasteColDiff = pasteRng[1] - formulaRng[1];
                            else if (formulaRng[1] > pasteRng[1])
                                pasteColDiff = formulaRng[1] - pasteRng[1];
                        }
                        rowDiff = pasteRowDiff - copyRowDiff;
                        colDiff = pasteColDiff - copyColDiff;

                        for (var c = 0; c < formula.length; c++) {
                            formulaVal = formula[c].trim();
                            if (xlObj._isCellReference(formulaVal)) {
                                fRange = xlObj.getRangeIndices(formulaVal);
                                rowIndex = fRange[0] + rowDiff;
                                colIndex = fRange[1] + colDiff;
                                nAlpha = xlObj._getAlphaRange(sheetIdx, rowIndex, colIndex, rowIndex, colIndex);
                                formula[c] = nAlpha;
                            }
                        }
                        value2 = "=" + formula.join("");
                        xlObj.getSheet(sheetIdx).formulaRange[pstCellRnge] = value2;
                        xlObj.XLEdit._updateCellValue({ rowIndex: pstCells[b].rowIndex, colIndex: pstCells[b].colIndex }, value2);
                    }
                    else {
                        xlObj.XLEdit._updateCellValue({ rowIndex: pstCells[b].rowIndex, colIndex: pstCells[b].colIndex }, value2);
                    }

                }

            }
            this._copyRnge = {};
        },
        _getUpdatedCellFormula: function (val, addr, curAddr) {
            var xlObj = this.XLObj, regx = /([A-Z].*?[0-9])/g, rowDiff = curAddr.rowIdx - addr.rowIndex, colDiff = curAddr.colIdx - addr.colIndex,
                addrs = xlObj.XLDragFill._parseFormula(val), i, len, sAdr, newCAdr, newRAdr;

            for (i = 0, len = addrs.length; i < len; i++) {
                if (addrs[i].match(regx)) {
                    sAdr = addrs[i].trim().match(/(\d+|\D+)/g);
                    newCAdr = xlObj._generateColCount(sAdr[0]) + colDiff;
                    newRAdr = parseInt(sAdr[1]) + rowDiff;
                    addrs[i] = newRAdr > 0 && newCAdr > 0 ? xlObj._generateHeaderText(newCAdr) + newRAdr.toString() : "#REF!";
                }
            }
            addrs = addrs.join('');
            return "=" + addrs;
        },

        _compareRange: function (range1, range2) {
            return (range1[0] <= range2[0] && range1[1] <= range2[1] && range1[2] >= range2[2] && range1[3] >= range2[3]);
        },
        _cutPasteBorder: function (startRange, endRange) {
            var k, pstIdx, colIdx, rowIdx, pstlen, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), bdrs = [], cCells = [], pstCells = [];
            if (!xlObj.isPasteValuesOnly)
                xlObj.XLFormat.removeStyle(endRange, { cellStyle: true, border: true, format: true, sheetIdx: sheetIdx });
            cCells = xlObj._getSelectedRange({ rowIndex: startRange[0], colIndex: startRange[1] }, { rowIndex: startRange[2], colIndex: startRange[3] });
            pstCells = xlObj._getSelectedRange({ rowIndex: endRange[0], colIndex: endRange[1] }, { rowIndex: endRange[2], colIndex: endRange[3] });
            for (k = 0, pstlen = pstCells.length; k < pstlen; k++) {
                pstIdx = pstCells[k];
                rowIdx = cCells[k].rowIndex;
                colIdx = cCells[k].colIndex;
                bdrs = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "borders", this._copyRange[0]);
                if (!xlObj.isUndefined(bdrs))
                    xlObj.XLFormat.applyBorder(bdrs, [pstIdx.rowIndex, pstIdx.colIndex, pstIdx.rowIndex, pstIdx.colIndex]);
            }
            xlObj.setActiveSheetIndex(this._copyRange[0]);
            xlObj.XLFormat.removeStyle(startRange, { cellStyle: true, border: true, format: true });
            xlObj.setActiveSheetIndex(sheetIdx);
        }

    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.comments = function (obj) {
        this.XLObj = obj;
        this._isCommentEdit = false;
        this._isShowAllComments = false;
        this._curCommentHCell = null;
    };

    ej.spreadsheetFeatures.comments.prototype = {

        setComment: function (range, data, showEditPanel, showUserName) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowComments || xlObj.model.isReadOnly || xlObj.model.isGridMode)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), args = { sheetIndex: sheetIdx, reqType: "comment", type: "actionBegin", action: "createcomment" };
            if (xlObj._trigActionBegin(args))
                return;
            var rng, isViewed = false, activeCell, cellIdx, rowIdx, colIdx, cmntData, activeCmnt, userName,
                sheet = xlObj.getSheet(sheetIdx), cmnt, selCell = [], details = { sheetIndex: sheetIdx, reqType: "comment" };
            if (xlObj.model.allowLockCell && sheet.isSheetProtected)
                return false;
            if (range) {
                rng = xlObj._getRangeArgs(range, "object");
                rowIdx = rng[0];
                colIdx = rng[1];
                cellIdx = { rowIndex: rowIdx, colIndex: colIdx };
            }
            else {
                if (!xlObj.model.allowSelection)
                    return;
                cellIdx = xlObj.getActiveCell(sheetIdx);
                rowIdx = cellIdx.rowIndex, colIdx = cellIdx.colIndex;
            }
            args = { reqType: "beforeEditComment", cellIndex: cellIdx, value: data, sheetIdx: sheetIdx, disable: false };
            if (xlObj._trigger("beforeEditComment", args))
                args.disable = true;
            data = args.value;
            if (xlObj._isCellProtected(rowIdx, colIdx, false))
                return;
            if (!xlObj.isUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, 'cellType'))) {
                xlObj._showAlertDlg("Alert", "CellTypeAlert", "CellTypeAlert", 372);
                return;
            }
            if (xlObj.model.showRibbon && (xlObj._isPaste ? !xlObj.XLClipboard._cutCells.length : true))
                xlObj._commentCount++;
            if (!xlObj._isRibbonClick) {
                details.action = "add";
                selCell.push(cellIdx);
                details.selectedCell = selCell;
                details.selectedCell[0].prevComment = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment");
            }
            if (!xlObj._isAutoWHMode && !xlObj.XLClipboard._copyCells.length && !sheet._isFreezed)
                xlObj.XLScroll._scrollSelectedPosition(sheetIdx, cellIdx);
            if (!(rowIdx in sheet._commentColl))
                sheet._commentColl[rowIdx] = {};
            sheet._commentColl[rowIdx][colIdx] = { isComment: true };
            showEditPanel = ej.isNullOrUndefined(showEditPanel) ? true : showEditPanel;
            showUserName = ej.isNullOrUndefined(showUserName) ? true : showUserName;
            userName = (xlObj.model.userName.length > 0 ? xlObj.model.userName : xlObj._getLocStr("UserName")) + ":\n";
            if (!ej.isNullOrUndefined(data)) {
                if (showUserName)
                    data = userName + data;
                xlObj.XLEdit._updateDataContainer(cellIdx, { dataObj: { comment: { value: data, isVisible: ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx)) ? showEditPanel : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx).isVisible } } });
            }
            else if (args.disable)
                xlObj.XLEdit._updateDataContainer(cellIdx, { dataObj: { comment: { value: userName, isVisible: ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx)) ? showEditPanel : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx).isVisible } } });
            cmntData = ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx)) ? (xlObj.model.userName.length > 0 ? xlObj.model.userName : xlObj._getLocStr("UserName")) + ":\n" : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx).value;
            if (xlObj.model.allowComments && !xlObj.XLEdit._isEdit && !xlObj._isSheetRename) {
                if (xlObj._isRowViewable(sheetIdx, rowIdx) && rowIdx < sheet._bottomRow.idx) {
                    activeCell = xlObj.getCell(rowIdx, colIdx);
                    activeCell.prepend(ej.buildTag("span.e-comment", ej.buildTag("span.e-celltoparrow")).append(ej.buildTag("textarea.e-comment-txtarea", cmntData, { "z-index": 10, "text-align": "left" }))).addClass("e-commentcell");
                    this._updateCmntArrowPos(activeCell);
                    activeCmnt = activeCell.find(".e-comment-txtarea");
                    this._updateCmtAreaPos(activeCell, activeCmnt);
                    activeCmnt.focus().setInputPos(activeCmnt.val().length);
                    isViewed = true;
                    if (args.disable)
                        activeCmnt[0].disabled = true;
                }
                if (!sheet._isImported || sheet._isLoaded) {
                    cmnt = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx);
                    if (!ej.isNullOrUndefined(cmnt))
                        cmnt.value = cmntData;
                }
                if (showEditPanel && isViewed) {
                    activeCmnt.focus();
                    if (this._curCommentHCell && !ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValueByElem(this._curCommentHCell, "comment")) && !xlObj.XLEdit.getPropertyValueByElem(this._curCommentHCell, "comment").isVisible) {
                        this._curCommentHCell.find(".e-comment-txtarea").hide();
                        this._curCommentHCell = null;
                    }
                    if (xlObj.model.allowDragAndDrop && !xlObj.XLDragDrop._isDragAndDropped)
                        this._updateCurrentCell(rowIdx, colIdx);
                    if (!args.disable) {
                        this._isCommentEdit = true;
                        if (xlObj.model.showRibbon)
                            xlObj.XLRibbon._disableRibbonIcons();
                    }
                    else
                        this._updateCmntRibIcons();
                }
                else if (isViewed) {
                    if (!this._isShowAllComments && !xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx).isVisible)
                        activeCmnt.hide();
                    if (xlObj.model.showRibbon && (!sheet._isImported || sheet._isLoaded) && xlObj.model.allowDragAndDrop && !xlObj.XLDragDrop._isDragAndDropped)
                        this._updateCmntRibIcons(xlObj.XLClipboard._isSpecial ? xlObj.getActiveCell() : { rowIndex: rowIdx, colIndex: colIdx });
                }
                if (!xlObj._isRibbonClick && !xlObj._isUndoRedo && !xlObj._hasComment && !xlObj._isExport && !xlObj._dupDetails) {
                    details.selectedCell[0].curComment = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment");
                    details.showUserName = showUserName;
                    details.showEditPanel = showEditPanel;
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            }
        },

        _updateCmtAreaPos: function (activeCell, cmtTxtArea) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), hScroll = xlObj._getContent(sheetIdx).find("#hscrollBar").offset(), vScroll = xlObj._getContent(sheetIdx).find("#vscrollBar").offset(), hdrOffset = xlObj._getJSSheetHeader(sheetIdx).offset(),
                txtOffset = cmtTxtArea.offset(), cHeight = cmtTxtArea.height(), cWidth = cmtTxtArea.width();
            if (xlObj.model.scrollSettings.allowScrolling) {
                if ((txtOffset.top + cHeight + 5) > hScroll.top && (txtOffset.left + cWidth) < vScroll.left)
                    cmtTxtArea.css({ top: -77 });
                else if ((txtOffset.left + cWidth) > vScroll.left && (txtOffset.top + cHeight + 5) > hScroll.top)
                    cmtTxtArea.css({ left: -136, top: -81 });
                else if ((txtOffset.top + cHeight) > hdrOffset.top && (txtOffset.left + cWidth) > vScroll.left)
                    cmtTxtArea.css({ left: -137, top: activeCell.height() + 8 });
            }
        },

        deleteComment: function (range, sheetIdx, skipHiddenRow, status) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowComments || xlObj.model.isReadOnly || xlObj.model.isGridMode)
                return;
            var activeShtIdx = sheetIdx || xlObj.getActiveSheetIndex(), args = { range: range, sheetIndex: activeShtIdx, reqType: ej.isNullOrUndefined(status) ? "comment" : "clear-comment", type: "actionBegin", action: ej.isNullOrUndefined(status) ? "delete" : "clear-comment" };
            if (xlObj._trigActionBegin(args))
                return;
            var rowIdx, colIdx, cmnt, cmntCells = [], selCell = [], activeCells, details = { sheetIndex: activeShtIdx, reqType: "comment", action: "delete", range: args.range };
            range = xlObj._getRangeArgs(args.range, "object");
            activeCells = xlObj._getSelectedCells(sheetIdx, range).selCells;
            for (var i = 0; i < activeCells.length; i++) {
                if (xlObj.XLEdit.getPropertyValue(activeCells[i].rowIndex, activeCells[i].colIndex, "comment", sheetIdx))
                    cmntCells.push(activeCells[i]);
            }
            if (xlObj.model.allowComments) {
                for (i = 0; i < activeCells.length; i++) {
                    rowIdx = activeCells[i].rowIndex;
                    colIdx = activeCells[i].colIndex;
                    cmnt = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx);
                    if (!ej.isNullOrUndefined(cmnt)) {
                        if (skipHiddenRow && xlObj._isHiddenRow(rowIdx)) {
                            activeCells.splice(i, 1);
                            continue;
                        }
                        if (xlObj.model.showRibbon && xlObj._commentCount)
                            xlObj._commentCount--;
                        selCell.push({ rowIndex: rowIdx, colIndex: colIdx, prevComment: cmnt, currComment: {} });
                        if (xlObj._isRowViewable(activeShtIdx, rowIdx))
                            xlObj.getCell(rowIdx, colIdx, activeShtIdx).removeClass("e-commentcell").find('.e-comment').remove();
                        if (xlObj.getSheet(activeShtIdx)._commentColl[rowIdx])
                            delete xlObj.getSheet(activeShtIdx)._commentColl[rowIdx][colIdx];
                        delete xlObj._dataContainer.sheets[activeShtIdx][rowIdx][colIdx]["comment"];
                    }
                }
                details.selectedCell = selCell;
                //Delete action
                if (xlObj.model.showRibbon && cmntCells.length && xlObj.model.allowDragAndDrop && !xlObj.XLDragDrop._isDragAndDropped)
                    xlObj.XLComment._updateCmntRibIcons();
                details.reqType = ej.isNullOrUndefined(status) ? "comment" : "clear-comment";
                if (!xlObj._isUndoRedo && !xlObj._dupDetails) {
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            }
        },

        editComment: function (target) {
            var xlObj = this.XLObj, cmntData;
            if (!xlObj.model.allowComments || xlObj.model.isReadOnly || xlObj.model.isGridMode)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), txtArea, args = { cellIndex: target, sheetIndex: sheetIdx, reqType: "edit-comment", type: "actionBegin", action: "editcomment" };
            if (xlObj._trigActionBegin(args))
                return;
            target = args.cellIndex;
            if (xlObj.model.allowLockCell && xlObj.getSheet(sheetIdx).isSheetProtected)
                return false;
            ej.isNullOrUndefined(target) && (target = xlObj.getActiveCell());
            cmntData = xlObj.XLEdit.getPropertyValue(target.rowIndex, target.colIndex, "comment", sheetIdx);
            args = { reqType: "beforeEditComment", cellIndex: target, value: cmntData.value, sheetIndex: sheetIdx, isDisable: false };
            if (xlObj._trigger("beforeEditComment", args))
                args.disable = true;
            cmntData.value = args.value;
            xlObj.XLEdit._updateDataContainer(target, { dataObj: { comment: { value: cmntData.value, isVisible: cmntData.isVisible } } });
            if (!xlObj.XLEdit._isEdit && !xlObj._isSheetRename) {
                if (xlObj.model.allowComments) {
                    if (!ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(target.rowIndex, target.colIndex, "comment"))) {
                        !xlObj._isAutoWHMode && xlObj.XLScroll._scrollSelectedPosition(sheetIdx, target);
                        if (xlObj._isRowViewable(sheetIdx, target.rowIndex)) {
                            txtArea = xlObj.getCell(target.rowIndex, target.colIndex).find(".e-comment-txtarea");
                            txtArea.text(args.data);
                            txtArea.css("display", "inline-table").focus().setInputPos(txtArea.text().length);
                        }
                        if (!args.disable)
                            this._isCommentEdit = true;
                    }
                }
                if (xlObj.model.showRibbon && !args.disable)
                    xlObj.XLRibbon._disableRibbonIcons();
            }
            var details = { cellIndex: target, value: cmntData.value, sheetIndex: sheetIdx, reqType: "edit-comment", type: "actionComplete", action: "editcomment" };
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        showHideComment: function (trgtCell) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowComments || xlObj.model.isReadOnly || xlObj.model.isGridMode)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), activeCell, cmnt, $target, isViewed = false, visibility = false;
            if (ej.isNullOrUndefined(trgtCell))
                activeCell = xlObj.getActiveCell();
            else
                activeCell = xlObj._getCellIdx(trgtCell[0]);
            cmnt = xlObj.XLEdit.getPropertyValue(activeCell.rowIndex, activeCell.colIndex, "comment");
            if (!ej.isNullOrUndefined(cmnt)) {
                if (xlObj._isRowViewable(sheetIdx, activeCell.rowIndex)) {
                    $target = xlObj.getCell(activeCell.rowIndex, activeCell.colIndex).find(".e-comment-txtarea");
                    isViewed = true;
                }
                if (cmnt.isVisible) {
                    isViewed && $target.hide();
                    visibility = false;
                }
                else {
                    isViewed && $target.css("display", "inline-table");
                    this._curCommentHCell = null;
                    visibility = true;
                }
            }
            if (!xlObj.isUndefined(visibility))
                cmnt.isVisible = visibility;
        },

        showAllComments: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowComments || xlObj.model.isGridMode)
                return;
            var rowKeys, colKeys, j, sheetIdx = xlObj.getActiveSheetIndex(), allComments, $getAllComments, isAvble, showToglBtObj = $("#" + xlObj._id + "_Ribbon_Review_Comments_ShowAllComments").data("ejToggleButton"), ribIconsIds = ["Review_Comments_PreviousComment", "Review_Comments_NextComment"], i;
            for (i = 1; i <= xlObj.model.sheetCount; i++) {
                allComments = xlObj.getSheet(i)._commentColl;
                rowKeys = xlObj.getObjectKeys(allComments);
                for (j = 0; j < rowKeys.length; j++) {
                    colKeys = xlObj.getObjectKeys(allComments[rowKeys[j]]);
                    for (var k = 0; k < colKeys.length; k++) {
                        if (xlObj._isRowViewable(sheetIdx, parseInt(rowKeys[j]))) {
                            $getAllComments = xlObj.getCell(parseInt(rowKeys[j]), parseInt(colKeys[k]), i).find(".e-comment-txtarea");
                            if (this._isShowAllComments)
                                $getAllComments.hide();
                            else
                                $getAllComments.css("display", "inline-table");
                        }
                        xlObj.XLEdit.getPropertyValue(rowKeys[j], colKeys[k], "comment", i).isVisible = !this._isShowAllComments;
                    }
                    if (j == 0)
                        isAvble = true;
                }
            }
            this._isShowAllComments = !this._isShowAllComments;
            if (xlObj.model.showRibbon && showToglBtObj && showToglBtObj.model.toggleState)
                xlObj.XLRibbon._disableButtons(ribIconsIds, "ejButton");
            else if (xlObj.model.showRibbon && isAvble)
                xlObj.XLRibbon._enableButtons(ribIconsIds, "ejButton");
        },

        findPrevComment: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowComments || xlObj.model.isReadOnly || xlObj.model.isGridMode)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), sheet, rowCount, colCount, rowIndex, colIndex, i, j, k, cell, insCmtEle = $("#" + xlObj._id + "_Ribbon_Review_Comments_NewComment"), commentPanel, tabIdx;
            for (i = sheetIdx; i > 0; i--) {
                sheet = xlObj.getSheet(i);
                if (!xlObj.getObjectLength(sheet._commentColl))
                    continue;
                if (i !== sheetIdx)
                    xlObj.gotoPage(i, false);
                if (xlObj.model.showRibbon) {
                    tabIdx = xlObj.XLRibbon._getTabIndex("review");
                    tabIdx && $("#" + xlObj._id + "_Ribbon").ejRibbon("option", "selectedItemIndex", tabIdx);
                }
                rowCount = sheet.rowCount - 1;
                colCount = sheet.colCount - 1;
                if (i !== sheetIdx)
                    this._updateCurrentCell(rowCount - 1, colCount - 1);
                rowIndex = sheet._activeCell.rowIndex;
                colIndex = sheet._activeCell.colIndex;
                for (j = rowIndex; j >= 0; j--) {
                    if (j !== rowIndex)
                        colIndex = colCount - 1;
                    for (k = colIndex; k >= 0; k--) {
                        if (xlObj.XLEdit.getPropertyValue(j, k, "comment", sheetIdx)) {
                            if (sheet._hiddenFreezeRows.indexOf(j) > -1 && sheet._isFreezed)
                                xlObj.XLSearch._freezeScroll(j, k, sheet);
                            else if (!xlObj._isRowViewable(sheetIdx, j))
                                xlObj._scrollContent({ y: xlObj._getRowOffsetTop(sheet, j) }, true);
                        }
                        if (xlObj._isRowViewable(sheetIdx, j)) {
                            cell = $(xlObj.getCell(j, k));
                            commentPanel = $(cell.find(".e-comment-txtarea"));
                            if (sheet._activeCell.rowIndex !== j && sheet._activeCell.colIndex !== k && !ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValueByElem(cell, "comment")) && xlObj.XLEdit.getPropertyValueByElem(cell, "comment").isVisible)
                                commentPanel.hide();
                            if (cell.hasClass("e-commentcell") && !commentPanel.is(":visible")) {
                                if (commentPanel.css("display", "inline-table").focus())
                                    this._updateCurrentCell(j, k);
                                this._updateCommentsBtns(insCmtEle);
                                xlObj._setSheetFocus();
                                return true;
                            }
                            if (!this._isShowAllComments && !this._isCommentEdit && cell.hasClass("e-commentcell") && !xlObj.XLEdit.getPropertyValueByElem(cell, "comment").isVisible)
                                commentPanel.hide();
                        }
                    }
                }
            }
            if (i === 0)
                xlObj._showAlertDlg("", "CommentFindEndAlert", "findPrevComment", 630);
        },

        _updateCommentsBtns: function (insCmtEle) {
            var xlObj = this.XLObj;
            if (xlObj.model.showRibbon) {
                xlObj.XLRibbon._enableButtons(["Review_Comments_DeleteComment", "Review_Comments_ShowHideComment"], "ejButton");
                insCmtEle.find(".e-icon").removeClass("e-ssr-newcmnt").addClass("e-ssr-editcmnt");
                insCmtEle.find(".e-btntxt").text(xlObj._getLocStr("EditComment"));
            }
        },

        findNextComment: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowComments || xlObj.model.isReadOnly || xlObj.model.isGridMode)
                return;
            var sheet, rowIndex, colIndex, rowCount, colCount, i, j, k, cell, commentPanel, tabIdx, isScrolled = false, sheetIdx = xlObj.getActiveSheetIndex(), insCmtEle = $("#" + xlObj._id + "_Ribbon_Review_Comments_NewComment");
            for (i = sheetIdx; i <= xlObj.model.sheetCount; i++) {
                sheet = xlObj.getSheet(i);
                if (!xlObj.getObjectLength(sheet._commentColl))
                    continue;
                if (i !== sheetIdx)
                    xlObj.gotoPage(i, false);
                if (xlObj.model.showRibbon) {
                    tabIdx = xlObj.XLRibbon._getTabIndex("review");
                    tabIdx && $("#" + xlObj._id + "_Ribbon").ejRibbon("option", "selectedItemIndex", tabIdx);
                }
                if (i !== sheetIdx)
                    this._updateCurrentCell(0, 0);
                rowIndex = sheet._activeCell.rowIndex;
                colIndex = sheet._activeCell.colIndex;
                rowCount = sheet.rowCount - 1;
                colCount = sheet.colCount - 1;
                for (j = rowIndex; j < rowCount; j++) {
                    if (j !== rowIndex)
                        colIndex = 0;
                    for (k = colIndex; k < colCount; k++) {
                        if (xlObj.XLEdit.getPropertyValue(j, k, "comment", sheetIdx)) {
                            if (sheet._isFreezed)
                                xlObj.XLSearch._freezeScroll(j, k, sheet);
                            else if (!xlObj._isRowViewable(sheetIdx, j))
                                xlObj._scrollContent({ y: xlObj._getRowOffsetTop(sheet, j) }, true);
                            isScrolled = !xlObj.getActiveCellElem();
                        }
                        if (xlObj._isRowViewable(sheetIdx, j)) {
                            cell = $(xlObj.getCell(j, k));
                            commentPanel = $(cell.find(".e-comment-txtarea"));
                            if (!isScrolled && xlObj.getActiveCellElem()[0] !== cell[0] && !ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValueByElem(cell, "comment")) && xlObj.XLEdit.getPropertyValueByElem(cell, "comment").isVisible)
                                commentPanel.hide();
                            if (cell.hasClass("e-commentcell") && !commentPanel.is(":visible")) {
                                commentPanel.css("display", "inline-table").focus();
                                this._updateCurrentCell(j, k);
                                this._updateCommentsBtns(insCmtEle);
                                xlObj._setSheetFocus();
                                return true;
                            }
                        }
                        if (!this._isShowAllComments && !this._isCommentEdit && cell.hasClass("e-commentcell") && !xlObj.XLEdit.getPropertyValueByElem(cell, "comment").isVisible)
                            commentPanel.hide();
                    }
                }
            }
            if (i === xlObj.model.sheetCount + 1)
                xlObj._showAlertDlg("", "CommentFindEndAlert", "findNextComment", 630);
        },

        _commentMouseMove: function (e) {
            var xlObj = this.XLObj, $target, commentPanel;
            $target = (e.target.tagName === "TD") ? $(e.target) : $(e.target).parent("td");
            if (!$target.length)
                return;
            commentPanel = $target.find(".e-comment-txtarea");
            if (!this._isCommentEdit) {
                if (!ej.isNullOrUndefined(this._curCommentHCell)) {
                    if ($target !== this._curCommentHCell) {
                        var cellData = xlObj.XLEdit.getPropertyValueByElem(this._curCommentHCell, "comment");
                        if (!ej.isNullOrUndefined(cellData) && !cellData.isVisible) {
                            this._curCommentHCell.find(".e-comment-txtarea").hide();
                            this._curCommentHCell = null;
                        }
                    }
                }
                if ($target[0].tagName === "TD" && $target.hasClass("e-commentcell")) {
                    commentPanel.css("display", "inline-table");
                    this._curCommentHCell = $target;
                }
            }
        },

        _commentMouseDownHandler: function (e) {
            var xlObj = this.XLObj, cellIdx = xlObj.getActiveCell(), sheetIdx = xlObj.getActiveSheetIndex();
            if (xlObj._isRowViewable(sheetIdx, cellIdx.rowIndex)) {
                var activeCell = xlObj.getCell(cellIdx.rowIndex, cellIdx.colIndex, sheetIdx), cellData, commentPanel = $(activeCell.find(".e-comment-txtarea"));
                if (activeCell.hasClass("e-commentcell") && commentPanel.get()[0] !== e.target) {
                    cellData = xlObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, "comment");
                    if (this._isCommentEdit)
                        this._updateCurCmntVal(cellIdx);
                    if (!this._isShowAllComments && !xlObj.isUndefined(cellData) && !cellData.isVisible)
                        commentPanel.hide();
                }
            }

            if (xlObj._hasClass(e.target, "e-comment-txtarea") && !e.target.disabled) {
                if ($(e.target).focus().css("z-index", 10))
                    this._isCommentEdit = true;
                this._updateCurrentCell($(e.target).parents("td").parent().index(), $(e.target).parents("td").index());
                if (xlObj.model.showRibbon)
                    xlObj.XLRibbon._disableRibbonIcons();
            }
        },

        _updateCmntRibIcons: function (trgtCell) {
            var comment, xlObj = this.XLObj, ribIconsIds = ["Review_Comments_ShowHideComment", "Review_Comments_DeleteComment"], activeSheet = xlObj.getActiveSheetIndex(),
                insCmtEle = $('#' + xlObj._id + '_Ribbon_Review_Comments_NewComment'),
                actCell = xlObj.getActiveCell(), sheet = xlObj.getSheet(activeSheet), selectedCells = sheet._selectedCells, selRange = sheet.selectedRange;
            trgtCell = (xlObj.model.allowDragAndDrop && !xlObj.XLDragDrop._isDragAndDropped) ? (trgtCell ? trgtCell : actCell) : { rowIndex: xlObj._dStartCell.rowIndex, colIndex: xlObj._dStartCell.colIndex };
            xlObj.XLRibbon._enableButtons(["Review_Comments_NewComment"], "ejButton");
            xlObj.XLRibbon._enableButtons(xlObj.XLRibbon._cmntTglBtnIds, "ejToggleButton");
            comment = xlObj.XLEdit.getPropertyValue(trgtCell.rowIndex, trgtCell.colIndex, "comment", activeSheet);
            if (comment) {
                xlObj.XLRibbon._enableButtons(ribIconsIds, "ejButton");
                insCmtEle.find(".e-icon").removeClass("e-ssr-newcmnt").addClass("e-ssr-editcmnt");
                insCmtEle.find(".e-btntxt").text(xlObj._getLocStr("EditComment"));
            }
            else {
                insCmtEle.find(".e-icon").removeClass("e-ssr-editcmnt").addClass("e-ssr-newcmnt");
                insCmtEle.find(".e-btntxt").text(xlObj._getLocStr("NewComment"));
                xlObj.XLRibbon._disableButtons(ribIconsIds, "ejButton");
            }
            if (this._isShowAllComments || xlObj._commentCount === 0)
                xlObj.XLRibbon._disableButtons(["Review_Comments_PreviousComment", "Review_Comments_NextComment"], "ejButton");
            else
                xlObj.XLRibbon._enableButtons(["Review_Comments_PreviousComment", "Review_Comments_NextComment"], "ejButton");
            if (selectedCells.length && xlObj.inRange(selRange, trgtCell.rowIndex, trgtCell.colIndex)) {
                if (xlObj.XLEdit._rangeHasProperty(selRange, "comment"))
                    xlObj.XLRibbon._enableButtons(["Review_Comments_DeleteComment"], "ejButton");
            }
        },

        _updateCurCmntVal: function (trgtCell, status) {
            status = ej.isNullOrUndefined(status) ? "" : status;
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), activeCell = ej.isNullOrUndefined(trgtCell) ? xlObj.getActiveCell() : trgtCell, commentPanel, selCell = [], cmntVal = "User Name:", isViewed = false;
            var details = { sheetIndex: sheetIdx, reqType: "comment" }, rowIdx = activeCell.rowIndex, colIdx = activeCell.colIndex;
            if (xlObj._isRowViewable(details.sheetIndex, rowIdx)) {
                commentPanel = xlObj.getCell(rowIdx, colIdx, sheetIdx).find(".e-comment-txtarea");
                isViewed = true;
                commentPanel.scrollTop(0);
            }
            selCell.push({ rowIndex: rowIdx, colIndex: colIdx });
            details.action = (ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment"))) ? "add" : "edit";
            details.selectedCell = selCell;
            details.selectedCell[0].prevComment = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment");
            isViewed && (cmntVal = commentPanel.css("z-index", 9).val());
            xlObj.XLEdit._updateDataContainer({ rowIndex: rowIdx, colIndex: colIdx }, { dataObj: { comment: { value: cmntVal, isVisible: xlObj.isUndefined(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment")) ? this._isShowAllComments : xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment").isVisible } } });
            if (isViewed && !this._isShowAllComments && !xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment").isVisible)
                commentPanel.hide();
            xlObj._setSheetFocus();
            this._isCommentEdit = false;
            if (xlObj.model.allowKeyboardNavigation)
                xlObj.XLCellNav._isNavigate = true;
            if (xlObj.model.showRibbon)
                xlObj.XLRibbon._enableRibbonIcons();
            xlObj.XLEdit._updateUsedRange(rowIdx, colIdx, sheetIdx);
            details.selectedCell[0].curComment = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment");
            if (!xlObj._isUndoRedo && status !== "paste") {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _updateCurrentCell: function (rIndex, cIndex, sheetIdx) {
            var xlObj = this.XLObj, cellObj = { rowIndex: rIndex, colIndex: cIndex };
            sheetIdx = sheetIdx ? sheetIdx : xlObj.model.activeSheetIndex;
            var shtModel = xlObj.getSheet(sheetIdx);
            shtModel._activeCell = cellObj;
            xlObj.model.allowSelection && xlObj.XLSelection.selectRange(cellObj, cellObj, sheetIdx);
            shtModel._startCell = shtModel._endCell = cellObj;
            if (xlObj.model.allowAutoFill)
                xlObj.XLDragFill.positionAutoFillElement();
        },

        _visibleCmntCnt: function (cell, isVisible) {
            cell.find(".e-comment")[isVisible ? "show" : "hide"]();
        },

        _updateCmntArrowPos: function (cells, sheetIdx, startCell) {
            var xlObj = this.XLObj; sheetIdx = xlObj._getSheetIndex(sheetIdx);
            var i, len, cell, cellInfo, cmntElem, activeCell, sheet = xlObj.getSheet(sheetIdx), commentCells = cells || xlObj._getContent(sheetIdx).find(".e-commentcell");
            startCell = startCell || {};
            if (xlObj.model.allowComments) {
                for (i = 0, len = commentCells.length; i < len; i++) {
                    activeCell = $(commentCells[i]);
                    cell = xlObj._getCellIdx(activeCell[0]);
                    if ((cell.rowIndex < startCell.rowIndex) || (cell.colIndex < startCell.colIndex))
                        continue;
                    cmntElem = activeCell.find(".e-comment");
                    if (xlObj._isInsdel) {
                        if (!(cell.rowIndex in sheet._commentColl))
                            sheet._commentColl[cell.rowIndex] = {};
                        sheet._commentColl[cell.rowIndex][cell.colIndex] = { isComment: true };
                    }
                    if (cmntElem.length) {
                        cellInfo = xlObj._getCellInfo(cell, sheetIdx);
                        if (sheet.columnsWidthCollection[cell.colIndex] < 5) { // 5 - comment arrow indicator width
                            cmntElem.hide();
                            continue;
                        }
                        if (cmntElem.is(":hidden"))
                            cmntElem.show();
                        cmntElem.css({ "top": cellInfo.top + "px", "left": (cellInfo.left + activeCell.width()) + "px" });
                    }
                }
            }
        },

        _updateCmntFrmCntnr: function (rowIdx, colIdx) {
            var xlObj = this.XLObj;
            if (xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment")) {
                if (xlObj._isRowViewable(null, colIdx))
                    if (xlObj.getCell(rowIdx, colIdx).hasClass("e-commentcell"))
                        this.deleteComment([rowIdx, colIdx, rowIdx, colIdx]);
                xlObj._dupDetails = true;
                this.setComment([rowIdx, colIdx, rowIdx, colIdx], null, false);
                xlObj._dupDetails = false;
            }
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.contextmenu = function (obj) {
        this.XLObj = obj;
        this._clrFltrEnable = false;
        this._isMenuOpened = false;
        this._uniqueClass = obj._id + "-cmenu";
        this._selColor = "";
        this._changedDataSource = false;
        this._modifyClick = false;
        this._oldCustomName = "";
        this._target = "";
        this._rowCellMenuDataMobile = [
            { id: "Cut", text: obj._getLocStr("Cut"), parentId: null, spriteCssClass: "e-icon e-ss-cut" },
            { id: "Copy", text: obj._getLocStr("Copy"), parentId: null, spriteCssClass: "e-icon e-ss-copy" },
            { id: "PasteSpecial", text: obj._getLocStr("Paste"), parentId: null, spriteCssClass: "e-icon e-ss-paste" },
            { id: "FormatCells", text: obj._getLocStr("FormatCells") + "...", parentId: null, spriteCssClass: "e-icon e-ss-formatcells" },
            { id: "BackgroundColor", text: obj._getLocStr("BackgroundColor"), parentId: null, spriteCssClass: "e-icon e-ss-backgroundcolor" },
            { id: "FontColor", text: obj._getLocStr("FontColor"), parentId: null, spriteCssClass: "e-icon e-ss-fontcolor" },
        ];
        this._headerMenuDataMobile = [
            { id: "Cut", text: obj._getLocStr("Cut"), parentId: null, spriteCssClass: "e-icon e-ss-cut" },
            { id: "Copy", text: obj._getLocStr("Copy"), parentId: null, spriteCssClass: "e-icon e-ss-copy" },
            { id: "PasteSpecial", text: obj._getLocStr("Paste"), parentId: null, spriteCssClass: "e-icon e-ss-paste" },
            { id: "Insert", text: obj._getLocStr("Insert"), parentId: null },
            { id: "Delete", text: obj._getLocStr("Delete"), parentId: null },
            { id: "Hide", text: obj._getLocStr("Hide"), parentId: null },
            { id: "Unhide", text: obj._getLocStr("Unhide"), parentId: null },
        ],

            this._rowCellMenuData = [
                { id: "Cut", text: obj._getLocStr("Cut"), parentId: null, spriteCssClass: "e-icon e-ss-cut" },
                { id: "Copy", text: obj._getLocStr("Copy"), parentId: null, spriteCssClass: "e-icon e-ss-copy" },
                { id: "Paste", text: obj._getLocStr("Paste"), parentId: null, spriteCssClass: "e-icon e-ss-paste" },
                { id: "PasteSpecial", text: obj._getLocStr("PasteSpecial"), parentId: "Paste" },
                { id: "PasteValues", text: obj._getLocStr("PasteValues"), parentId: "Paste" },
                { id: "Insert", text: obj._getLocStr("Insert") + "...", parentId: null },
                { id: "Delete", text: obj._getLocStr("Delete") + "...", parentId: null },
                { id: "Filter", text: obj._getLocStr("Filter"), parentId: null, spriteCssClass: "e-icon e-ss-filter" },
                { id: "ClearFilter", parentId: "Filter", text: obj._getLocStr("ClearFilter"), spriteCssClass: "e-icon e-ss-filternone" },
                { id: "FilterSelected", parentId: "Filter", text: obj._getLocStr("FilterSelected"), spriteCssClass: "e-icon e-ss-filter" },
                { id: "Sort", text: obj._getLocStr("Sort"), parentId: null, spriteCssClass: "e-icon e-ss-sortatoz" },
                { id: "SortAtoZ", parentId: "Sort", text: obj._getLocStr("SortAtoZ"), spriteCssClass: "e-icon e-ss-sortatoz" },
                { id: "SortZtoA", parentId: "Sort", text: obj._getLocStr("SortZtoA"), spriteCssClass: "e-icon e-ss-sortztoa" },
                { id: "PutCellColor", parentId: "Sort", text: obj._getLocStr("PutCellColor"), spriteCssClass: "" },
                { id: "PutFontColor", parentId: "Sort", text: obj._getLocStr("PutFontColor"), spriteCssClass: "" },
                { id: "ctxComment", parentId: null, text: obj._getLocStr("Comment") },
                { id: "ctxInsrtCmnt", text: obj._getLocStr("InsertComment"), parentId: "ctxComment", spriteCssClass: "e-icon e-ss-newcmnt" },
                { id: "ctxEditCmnt", text: obj._getLocStr("EditComment"), parentId: "ctxComment", spriteCssClass: "e-icon e-ss-editcmnt" },
                { id: "ctxDeleteCmnt", text: obj._getLocStr("DeleteComment"), parentId: "ctxComment", spriteCssClass: "e-icon e-ss-deletecmnt" },
                { id: "ctxShwHdCmnt", text: obj._getLocStr("ShowHide"), parentId: "ctxComment", spriteCssClass: "e-icon" },
                { id: "FormatCells", text: obj._getLocStr("FormatCells") + "...", parentId: null, spriteCssClass: "e-icon e-ss-formatcells" },
                { id: "CmHyperLink", text: obj._getLocStr("HyperLink"), parentId: null, spriteCssClass: "e-icon e-ss-hyperlink" },
                { id: "HyperLink", text: obj._getLocStr("HyperLink") + "...", parentId: "CmHyperLink", spriteCssClass: "e-icon e-ss-hyperlink" },
                { id: "EditLink", text: obj._getLocStr("EditLink") + "...", parentId: "CmHyperLink" },
                { id: "OpenLink", text: obj._getLocStr("OpenLink"), parentId: "CmHyperLink" },
                { id: "RemoveLink", text: obj._getLocStr("RemoveLink"), parentId: "CmHyperLink", spriteCssClass: "e-icon e-ss-removelink" },
                { id: "ClearContents", text: obj._getLocStr("ClearContents"), parentId: null, spriteCssClass: "e-icon e-ss-clear" }
            ];

        this._rowHeaderMenuData = this._columnHeaderMenuData = [
            { id: "Cut", text: obj._getLocStr("Cut"), parentId: null, spriteCssClass: "e-icon e-ss-cut" },
            { id: "Copy", text: obj._getLocStr("Copy"), parentId: null, spriteCssClass: "e-icon e-ss-copy" },
            { id: "Paste", text: obj._getLocStr("Paste"), parentId: null, spriteCssClass: "e-icon e-ss-paste" },
            { id: "PasteSpecial", text: obj._getLocStr("PasteSpecial"), parentId: "Paste" },
            { id: "PasteValues", text: obj._getLocStr("PasteValues"), parentId: "Paste" },
            { id: "Insert", text: obj._getLocStr("Insert"), parentId: null },
            { id: "Delete", text: obj._getLocStr("Delete"), parentId: null },
            { id: "ClearContents", text: obj._getLocStr("ClearContents"), parentId: null, spriteCssClass: "e-icon e-ss-clear" },
            { id: "Hide", text: obj._getLocStr("Hide"), parentId: null },
            { id: "Unhide", text: obj._getLocStr("Unhide"), parentId: null }
        ];

        this._footerMenuData = [
            { id: "InsertSheet", text: obj._getLocStr("InsertSheet"), parentId: null },
            { id: "DeleteSheet", text: obj._getLocStr("DeleteSheet"), parentId: null, spriteCssClass: "e-icon e-ss-delete" },
            { id: "RenameSheet", text: obj._getLocStr("RenameSheet"), parentId: null, spriteCssClass: "e-icon " },
            { id: "MoveorCopy", text: obj._getLocStr("MoveorCopy") + "...", parentId: null, spriteCssClass: "e-icon " },
            { id: "HideSheet", text: obj._getLocStr("HideSheet"), parentId: null, spriteCssClass: "e-icon " },
            { id: "UnhideSheet", text: obj._getLocStr("UnhideSheet"), parentId: null, spriteCssClass: "e-icon " },
            { id: "ProtectSheet", text: obj._getLocStr("Protectsheet"), parentId: null, spriteCssClass: "e-icon e-ss-cmenuprotect" }
        ];
        this._chartMenuData = [
            { id: "Cut", text: obj._getLocStr("Cut"), parentId: null, spriteCssClass: "e-icon e-ss-cut" },
            { id: "Copy", text: obj._getLocStr("Copy"), parentId: null, spriteCssClass: "e-icon e-ss-copy" },
            { id: "ChartType", text: obj._getLocStr("ChangeChartType") + "...", parentId: null },
            { id: "SelectData", text: obj._getLocStr("SelectData") + "...", parentId: null }
        ];
        this._imgMenuData = [
            { id: "Cut", text: obj._getLocStr("Cut"), parentId: null, spriteCssClass: "e-icon e-ss-cut" },
            { id: "Copy", text: obj._getLocStr("Copy"), parentId: null, spriteCssClass: "e-icon e-ss-copy" },
            { id: "ChangePicture", text: obj._getLocStr("ChangePicture"), parentId: null }
        ];
        this._pivotMenuData = [
            { id: "Refresh", text: obj._getLocStr("Refresh"), parentId: null, spriteCssClass: "e-icon e-ss-pivotrefresh" }
        ];
        this._cellStylesMenuData = [
            { id: "Modify", text: obj._getLocStr("Modify"), parentId: null },
            { id: "DeleteStyle", text: obj._getLocStr("Delete"), parentId: null },
            { id: "Apply", text: obj._getLocStr("Apply"), parentId: null }
        ];
        this._protectRowMenuIds = ["Insert", "Delete", "Filter", "ctxComment", "Sort", "LockCells", "CmHyperLink", "FormatCells", "ClearContents"];
        this._prtctHeaderIds = ["Insert", "Delete", "Hide", "Unhide", "ClearContents"];
        this._footerIds = ["InsertSheet", "DeleteSheet", "RenameSheet", "MoveorCopy", "HideSheet", "UnhideSheet"];
    };

    ej.Menu.prototype._calculateContextMenuPosition = function (e) {
        var menuId = this.element.get(0).id, spreadId = this.element.data("id"), xlObj = $("#" + spreadId).data('ejSpreadsheet'), locationX, locationY, totHeight;
        this.element.css({ "top": "", "left": "" });
        locationX = (e.clientX + this.element.width() < $(window).width()) ? e.pageX : e.pageX - this.element.width();
        totHeight = (xlObj && menuId.indexOf(spreadId + '_contextMenuFooter') > -1) ? xlObj.element.height() : $(window).height();
        locationY = (e.clientY + this.element.height() < totHeight) ? e.pageY : (e.clientY > this.element.height()) ? e.pageY - this.element.height() : totHeight - this.element.outerHeight();
        var bodyPos = $("body").css("position") != "static" ? $("body").offset() : { left: 0, top: 0 };
        locationX -= bodyPos.left, locationY -= bodyPos.top;
        return {
            X: locationX,
            Y: locationY
        };
    };

    ej.spreadsheetFeatures.contextmenu.prototype = {
        //Contextmenu
        _initContextMenu: function () {
            var createMenu = ej.buildTag("ul .e-spreadsheet e-" + this._uniqueClass, " ", { display: "none", width: "auto" }, { id: this.XLObj._id + "_contextMenuCell" });
            this._createMenu(createMenu, (this.XLObj._phoneMode || this.XLObj._tabMode) ? this._rowCellMenuDataMobile : this._rowCellMenuData, "#" + this.XLObj._id + " .e-spreadsheetcontentcontainer");
            createMenu = ej.buildTag("ul .e-spreadsheet e-" + this._uniqueClass, " ", { display: "none" }, { id: this.XLObj._id + "_contextMenuColumnHeader" });
            this._createMenu(createMenu, this._columnHeaderMenuData, "#" + this.XLObj._id + " .e-spreadsheetheader .e-headercontent");
            createMenu = ej.buildTag("ul .e-spreadsheet e-" + this._uniqueClass, " ", { display: "none" }, { id: this.XLObj._id + "_contextMenuRowHeader" });
            this._createMenu(createMenu, this._rowHeaderMenuData, "#" + this.XLObj._id + " .e-rowheadercontent");
            if (this.XLObj.getObjectLength(this.XLObj._dataContainer.customCellStyle) >= 1)
                this._createMenu(ej.buildTag("ul .e-spreadsheet e-" + this._uniqueClass, " ", { display: "none" }, { id: this.XLObj._id + "_contextMenuCellStyles" }), this._cellStylesMenuData, "  .e-cellstylecontent");
        },

        _initCMenuFooter: function () {
            var createMenu = ej.buildTag("ul .e-spreadsheet e-" + this._uniqueClass, " ", { display: "none" }, { id: this.XLObj._id + "_contextMenuFooter" });
            createMenu.data("id", this.XLObj._id);
            this._createMenu(createMenu, this._footerMenuData, "#" + this.XLObj._id + " .e-pagercontainer");
        },

        _createMenu: function (createMenu, data, target) {
            createMenu.ejMenu(
                {
                    fields: { dataSource: data, id: "id", parentId: "parentId", text: "text", spriteCssClass: "spriteCssClass" },
                    menuType: ej.MenuType.ContextMenu,
                    openOnClick: false,
                    beforeOpen: $.proxy(this._beforeOpen, this),
                    close: $.proxy(this._menuClose, this),
                    click: $.proxy(this._menuClick, this),
                    contextMenuTarget: target
                });
        },

        hideCMenu: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.enableContextMenu)
                return;
            $("#" + xlObj._id + "_contextMenuCell").data("ejMenu").element.hide();
            $("#" + xlObj._id + "_contextMenuColumnHeader").data("ejMenu").element.hide();
            $("#" + xlObj._id + "_contextMenuRowHeader").data("ejMenu").element.hide();
            $("#" + xlObj._id + "_contextMenuFooter").data("ejMenu").element.hide();
        },

        _getCMenuObj: function (target) {
            var xlObj = this.XLObj;
            switch (target) {
                case ej.Spreadsheet.ContextMenu.Cell:
                    return $("#" + xlObj._id + "_contextMenuCell").data("ejMenu");
                case ej.Spreadsheet.ContextMenu.RowHeader:
                    return $("#" + xlObj._id + "_contextMenuRowHeader").data("ejMenu");
                case ej.Spreadsheet.ContextMenu.ColumnHeader:
                    return $("#" + xlObj._id + "_contextMenuColumnHeader").data("ejMenu");
                case ej.Spreadsheet.ContextMenu.Footer:
                    return $("#" + xlObj._id + "_contextMenuFooter").data("ejMenu");
            }
        },

        addItem: function (target, itemColl, operation, itemIdx) {
            if (!target || this.XLObj.model.isReadOnly)
                return;
            var menuObj = this._getCMenuObj(target), isChangedDtSrc = false, dataSource, len, i, spliceIdx;
            dataSource = $.extend(true, [], menuObj.model.fields.dataSource);
            switch (operation) {
                case "insert":
                    $.merge(dataSource, itemColl);
                    isChangedDtSrc = true;
                    break;
                case "insertbefore":
                    len = itemColl.length, spliceIdx = (itemIdx - 1) || 0;
                    while (len > 0) {
                        dataSource.splice(spliceIdx, 0, itemColl[len - 1]);
                        len--;
                    }
                    isChangedDtSrc = true;
                    break;
                case "insertafter":
                    len = itemColl.length, i = 0, spliceIdx = itemIdx || dataSource.length;
                    while (i < len) {
                        dataSource.splice(spliceIdx, 0, itemColl[i]);
                        i++;
                        spliceIdx++;
                    }
                    isChangedDtSrc = true;
                    break;
            }

            if (isChangedDtSrc)
                this.changeDataSource(target, dataSource);
        },

        removeItem: function (target, idxColl) {
            if (!target || this.XLObj.model.isReadOnly)
                return;
            var menuObj = this._getCMenuObj(target), length, i, dataSource, newDataSource = [];
            dataSource = $.extend(true, [], menuObj.model.fields.dataSource);
            for (i = 0, length = dataSource.length; i < length; i++) {
                if (idxColl.indexOf(dataSource[i].id) == -1)
                    newDataSource.push(dataSource[i]);
            }
            this.changeDataSource(target, newDataSource);
        },

        enableItem: function (target, idxColl) {
            if (!target || this.XLObj.model.isReadOnly)
                return;
            var menuObj = this._getCMenuObj(target), i, length;
            if (idxColl && idxColl.length > 0)
                for (i = 0, length = idxColl.length; i < length; i++)
                    menuObj.enableItemByID(idxColl[i]);
            else
                menuObj.enable();
        },

        disableItem: function (target, idxColl) {
            if (!target || this.XLObj.model.isReadOnly)
                return;
            var menuObj = this._getCMenuObj(target), i, length;
            if (idxColl && idxColl.length > 0)
                for (i = 0, length = idxColl.length; i < length; i++)
                    menuObj.disableItemByID(idxColl[i]);
            else
                menuObj.disable();
        },

        hideItem: function (cMenuType, idxColl) {
            this._showHideItem(cMenuType, idxColl, "hide");
        },

        showItem: function (cMenuType, idxColl) {
            this._showHideItem(cMenuType, idxColl, "show");
        },

        _showHideItem: function (cMenuType, idxColl, option) {
            if (!cMenuType || this.XLObj.model.isReadOnly)
                return;
            var menuObj = this._getCMenuObj(cMenuType), i, elemId, len;
            if (idxColl && idxColl.length > 0)
                for (i = 0, len = idxColl.length; i < len; i++) {

                    elemId = idxColl[i];
                    if (option == "hide")
                        menuObj.hideItems(["#" + elemId]);
                    else
                        menuObj.showItems(["#" + elemId]);
                }
        },

        changeDataSource: function (target, data) {
            if (!target || this.XLObj.model.isReadOnly)
                return;
            if (data) {
                var menuObj = this._getCMenuObj(target);
                this._changedDataSource = true;
                switch (target) {
                    case ej.Spreadsheet.ContextMenu.Cell:
                        this._rowCellMenuDataMobile = this._rowCellMenuData = data;
                        break;
                    case ej.Spreadsheet.ContextMenu.RowHeader:
                        this._headerMenuDataMobile = this._rowHeaderMenuData = data;
                        break;
                    case ej.Spreadsheet.ContextMenu.ColumnHeader:
                        this._headerMenuDataMobile = this._columnHeaderMenuData = data;
                        break;
                    case ej.Spreadsheet.ContextMenu.Footer:
                        this._footerMenuData = data;
                        break;
                }
                menuObj && menuObj.option("fields", { dataSource: data });
            }
        },

        _updateContextMenuItems: function ($trgt) {
            var xlObj = this.XLObj, fltrIcon, dataSource;
            var text, trgt = $trgt[0], sheetIdx = xlObj.getActiveSheetIndex(), actSheet = xlObj.getSheet(sheetIdx), actCell = (!ej.isNullOrUndefined(xlObj.getActiveCellElem()) && xlObj.getActiveCellElem().length > 0) ? xlObj.getActiveCellElem() : $trgt, menuData = (xlObj._phoneMode || xlObj._tabMode) ? this._rowCellMenuDataMobile : this._rowCellMenuData, menuObj = $("#" + xlObj._id + "_contextMenuCell").data("ejMenu"), footMenuObj = $("#" + xlObj._id + "_contextMenuFooter").data("ejMenu"), actElem = xlObj.getActiveCell(sheetIdx), tabIdx, tabRange;
            if ($trgt.hasClass("e-rowcell") || $trgt.hasClass("e-hyperlinks")) {
                var insrtDt, sortData = [];
                var value = xlObj.XLEdit.getPropertyValue(actSheet._activeCell.rowIndex, actSheet._activeCell.colIndex), cellIndex = xlObj._getCellIdx(!xlObj._hasClass($trgt, "e-hyperlinks") ? trgt : $trgt.parents("td")[0]);
                this._isMenuOpened = true;
                if (xlObj.model.allowLockCell && actSheet.isSheetProtected && xlObj.XLEdit.getPropertyValue(cellIndex.rowIndex, cellIndex.colIndex, "isLocked", sheetIdx))
                    this._disableMenuOpt(this._protectRowMenuIds);
                else {
                    if ($trgt.hasClass("e-hyperlinks")) {
                        $trgt = $trgt.parents("td");
                        trgt = $trgt[0];
                    }
                    if (xlObj.model.allowHyperlink) {
                        this._enableMenuOpt(["CmHyperLink"]);
                        var data = xlObj.XLEdit.getPropertyValue(cellIndex.rowIndex, cellIndex.colIndex, "hyperlink", sheetIdx), hlItem = ["EditLink", "OpenLink", "RemoveLink"];
                        if (ej.isNullOrUndefined(data)) {
                            this._disableMenuOpt(hlItem);
                            this._enableMenuOpt(["HyperLink"]);
                        }
                        else {
                            this._enableMenuOpt(hlItem);
                            this._disableMenuOpt(["HyperLink"]);
                        }
                    }
                    else
                        this._disableMenuOpt(["CmHyperLink"]);
                    if (!xlObj.model.allowFiltering)
                        menuObj.disableItemByID("Filter");
                    else {
                        menuObj.enableItemByID("Filter");
                        tabRange = xlObj.model.sheets[sheetIdx].filterSettings.tableRange;
                        var isTable = xlObj.XLEdit.getPropertyValue(actElem.rowIndex, actElem.colIndex, "tableName"), tableId = (!ej.isNullOrUndefined(isTable)) ? parseInt(isTable.replace("e-table", "")) : -1;
                        if (tabRange.length > 0) {
                            for (var i = 0, n = tabRange.length; i < n; i++) {
                                if (tabRange[i].tableID === tableId) {
                                    tabIdx = i;
                                    break;
                                }
                            }
                            if (!ej.isNullOrUndefined(tabIdx) && actElem.rowIndex < tabRange[tabIdx].selectedRange.endRow + 1 && actElem.rowIndex > tabRange[tabIdx].selectedRange.startRow - 2)
                                if (actElem.colIndex < tabRange[tabIdx].multifilterIdx[tabRange[tabIdx].multifilterIdx.length - 1] + 1 && actElem.colIndex > tabRange[tabIdx].multifilterIdx[0] - 1) {
                                    fltrIcon = xlObj.getCell(tabRange[tabIdx].selectedRange.startRow - 1, actElem.colIndex, sheetIdx).find("span");
                                    if (fltrIcon.length && fltrIcon[0].className.indexOf("e-ssfiltered") > -1) {
                                        menuObj.enableItemByID("ClearFilter");
                                        this._clrFltrEnable = true;
                                    }
                                }
                        }
                        if (!this._clrFltrEnable)
                            menuObj.disableItemByID("ClearFilter");
                    }
                    if (xlObj.model.allowInsert && !xlObj._isPropExists([[cellIndex.rowIndex, 0, cellIndex.rowIndex,actSheet.usedRange.colIndex]], "isLocked", sheetIdx, true))
                        menuObj.enableItemByID("Insert");
                    else
                        menuObj.disableItemByID("Insert");
                    if (xlObj.model.allowDelete && !xlObj._isPropExists([[cellIndex.rowIndex, 0, cellIndex.rowIndex,actSheet.usedRange.colIndex]], "isLocked", sheetIdx, true))
                        menuObj.enableItemByID("Delete");
                    else
                        menuObj.disableItemByID("Delete");
                    if ((xlObj.XLClipboard._copyBackup.cells || xlObj.XLClipboard._copyBackup.elem) && !xlObj.model.isReadOnly) {
                        this._enableMenuOpt(["Paste"]);
                        (xlObj.isPasteValuesOnly) ? menuObj.disableItemByID("PasteSpecial") : menuObj.enableItemByID("PasteSpecial");
                    }
                    else
                        this._disableMenuOpt(["Paste"]);
                    if (xlObj.model.allowSorting)
                        this._enableMenuOpt(["Sort"]);
                    else
                        this._disableMenuOpt(["Sort"]);
                    if (xlObj.model.allowClear)
                        this._enableMenuOpt(["ClearContents"]);
                    else
                        this._disableMenuOpt(["ClearContents"]);
                    if (xlObj.model.allowCellFormatting)
                        this._enableMenuOpt(["FormatCells"]);
                    else
                        this._disableMenuOpt(["FormatCells"]);
                    if (!xlObj._phoneMode && !xlObj._tabMode) {
                        sortData = !ej.isNullOrUndefined(value) && $.isNumeric(value) ? [xlObj._getLocStr("SortSmallesttoLargest"), xlObj._getLocStr("SortLargesttoSmallest")] : (!ej.isNullOrUndefined(ej.parseDate(value)) ? [xlObj._getLocStr("SortOldesttoNewest"), xlObj._getLocStr("SortNewesttoOldest")] : [xlObj._getLocStr("SortAtoZ"), xlObj._getLocStr("SortZtoA")]);
                        //Comments
                        if (xlObj.model.allowComments) {
                            if (menuObj.element.find("#ctxComment").hasClass("e-disable-item"))
                                this._enableMenuOpt(["ctxComment"]);
                            var selectedCells = xlObj.getSheetElement(xlObj.getActiveSheetIndex()).find(".e-selected"), trgtCell = selectedCells.length > 1 ? actCell : $trgt;
                            if (trgtCell.hasClass("e-commentcell")) {
                                this._disableMenuOpt(["ctxInsrtCmnt"]);
                                if (xlObj.XLEdit.getPropertyValueByElem(trgtCell, "comment").isVisible) {
                                    insrtDt = $.extend(menuData[19], { text: xlObj._getLocStr("HideComment") });
                                    menuObj.remove(["#" + menuData[19].id]);
                                    menuObj.insert([insrtDt], "#" + menuData[15].id);
                                }
                                else {
                                    insrtDt = $.extend(menuData[19], { text: xlObj._getLocStr("ShowHide") });
                                    menuObj.remove(["#" + menuData[19].id]);
                                    menuObj.insert([insrtDt], "#" + menuData[15].id);
                                }
                                this._enableMenuOpt(["ctxEditCmnt", "ctxDeleteCmnt", "ctxShwHdCmnt"]);
                            }
                            else {
                                this._enableMenuOpt(["ctxInsrtCmnt"]);
                                this._disableMenuOpt(["ctxEditCmnt", "ctxDeleteCmnt", "ctxShwHdCmnt"]);
                            }
                            if (selectedCells.filter(trgt).length > 0 && selectedCells.filter(".e-commentcell").length > 0)
                                this._enableMenuOpt(["ctxDeleteCmnt"]);
                        }
                        else
                            this._disableMenuOpt(["ctxComment"]);
                        if (menuData[11].text !== sortData[0]) {
                            insrtDt = $.extend(menuData[11], { text: sortData[0], spriteCssClass: menuData[11].sprite });
                            menuObj.remove(["#" + menuData[11].id]);
                            menuObj.insertBefore([insrtDt], "#" + menuData[13].id);
                        }
                        if (menuData[12].text !== sortData[1]) {
                            insrtDt = $.extend(menuData[12], { text: sortData[1], spriteCssClass: menuData[12].sprite });
                            menuObj.remove(["#" + menuData[12].id]);
                            menuObj.insertBefore([insrtDt], "#" + menuData[13].id);
                        }
                    }

                    if (xlObj.model.showRibbon)
                        xlObj.XLRibbon._dirtySelect(xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-selected"));
                }
                if (xlObj.model.allowInsert)
                    footMenuObj.enableItemByID("InsertSheet");
                else
                    footMenuObj.disableItemByID("InsertSheet");
                if (xlObj.model.allowDelete)
                    footMenuObj.enableItemByID("DeleteSheet");
                else
                    footMenuObj.disableItemByID("DeleteSheet");
                if (xlObj.model.allowClipboard)
                    this._enableMenuOpt(["Cut", "Copy"]);
                else
                    this._disableMenuOpt(["Cut", "Copy"]);
                if ((xlObj.XLClipboard._copyBackup.cells || xlObj.XLClipboard._copyBackup.elem) && !xlObj.model.isReadOnly)
                    this._enableMenuOpt(["Paste"], cmenuId);
                else
                    this._disableMenuOpt(["Paste"], cmenuId);
            }
            else if ($trgt.hasClass("e-link")) {
                dataSource = footMenuObj.model.fields.dataSource.slice(0);
                if (xlObj._isSheetRename && !xlObj._updateSheetNames()) {
                    return;
                }
                if (xlObj.model.allowLockCell && actSheet.isSheetProtected)
                    text = xlObj._getLocStr("Unprotect");
                else
                    text = xlObj._getLocStr("Protectsheet");
                dataSource[6].text = text;
                footMenuObj.option("fields", { id: "id", dataSource: dataSource, parentId: "parentId" });
                this._isMenuOpened = true;
                if (xlObj._isCommentEdit)
                    xlObj.XLComment._updateCurCmntVal();
                if ($trgt.not("a.e-currentitem, a.e-PP, a.e-NP").hasClass("e-numericitem"))
                    xlObj.gotoPage($trgt.data("index"));
                if (!xlObj.model.exportSettings.password) {
                    if (xlObj._getSheetNames(false).length > 0)
                        footMenuObj.enableItemByID("UnhideSheet");
                    else
                        footMenuObj.disableItemByID("UnhideSheet");
                    if (xlObj._getSheetNames(true).length > 1) {
                        footMenuObj.enableItemByID("DeleteSheet");
                        footMenuObj.enableItemByID("HideSheet");
                        footMenuObj.enableItemByID("MoveorCopy");
                    }
                    else {
                        footMenuObj.disableItemByID("DeleteSheet");
                        footMenuObj.disableItemByID("HideSheet");
                        footMenuObj.disableItemByID("MoveorCopy");
                    }
                }
                else
                    this._disableMenuOpt(this._footerIds, "contextMenuFooter");
                if (xlObj.model.allowLockCell)
                    footMenuObj.enableItemByID("ProtectSheet");
                else
                    footMenuObj.disableItemByID("ProtectSheet");
            }
            else if ($trgt.hasClass("e-headercelldiv") || $trgt.hasClass("e-headercell") || $trgt.hasClass("e-rowheader")) {
                var cmenuId = $trgt.hasClass("e-rowheader") ? "contextMenuRowHeader" : "contextMenuColumnHeader";

                if (xlObj.model.allowClipboard)
                    this._enableMenuOpt(["Cut", "Copy"], cmenuId);
                else
                    this._disableMenuOpt(["Cut", "Copy"], cmenuId);
                if ((xlObj.XLClipboard._copyBackup.cells || xlObj.XLClipboard._copyBackup.elem) && !xlObj.model.isReadOnly)
                    this._enableMenuOpt(["Paste"], cmenuId);
                else
                    this._disableMenuOpt(["Paste"], cmenuId);
                if (xlObj.model.allowLockCell && xlObj._isPropExists([actSheet.selectedRange], "isLocked", sheetIdx, true))
                    this._disableMenuOpt(this._prtctHeaderIds, cmenuId);
                else {
                    if (xlObj.model.allowClear)
                        this._enableMenuOpt(["ClearContents"], cmenuId);
                    else
                        this._disableMenuOpt(["ClearContents"], cmenuId);
                    if (xlObj.model.allowInsert)
                        this._enableMenuOpt(["Insert"], cmenuId);
                    else
                        this._disableMenuOpt(["Insert"], cmenuId);
                    if (xlObj.model.allowDelete)
                        this._enableMenuOpt(["Delete"], cmenuId);
                    else
                        this._disableMenuOpt(["Delete"], cmenuId);
                    this._enableMenuOpt(["Hide", "Unhide"], cmenuId);
                }
                if (xlObj.model.showRibbon)
                    xlObj.XLRibbon._dirtySelect(xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-selected"));
            }
            if (xlObj.model.allowInsert && ej.isNullOrUndefined(xlObj.model.exportSettings.password) && !xlObj.model.isGridMode)
                this._enableMenuOpt(["InsertSheet", "MoveorCopy"], "contextMenuFooter");
            else
                this._disableMenuOpt(["InsertSheet", "MoveorCopy"], "contextMenuFooter");
            xlObj.model.exportSettings.password ? this._disableMenuOpt(["RenameSheet"]) : this._enableMenuOpt(["RenameSheet"])
            if (xlObj.model.allowDelete && xlObj._getSheetNames(true).length > 1)
                this._enableMenuOpt(["DeleteSheet"], "contextMenuFooter");
            else
                this._disableMenuOpt(["DeleteSheet"], "contextMenuFooter");
            if (xlObj.model.allowEditing)
                this._enableMenuOpt(["RenameSheet"], "contextMenuFooter");
            else
                this._disableMenuOpt(["RenameSheet"], "contextMenuFooter");
            if (xlObj.model.isReadOnly) {
                this._disableMenuOpt(["Cut", "Insert", "Delete", "ClearContents"], "contextMenuColumnHeader");
                this._disableMenuOpt(["Cut", "Insert", "Delete", "ClearContents"], "contextMenuRowHeader");
                this._disableMenuOpt(["Cut", "Insert", "Delete", "Filter", "Sort", "ctxComment", "FormatCells", "CmHyperLink", "ClearContents"], "contextMenuCell");
            }
            if (xlObj.model.isGridMode) {
                this.hideItem("cell", ["Insert", "Delete", "FormatCells", "ClearContents", "ctxComment"]);
                this.hideItem("rowheader", ["Hide", "Unhide", "ClearContents", "Paste"]);
                this.hideItem("footer", ["HideSheet", "DeleteSheet", "MoveorCopy", "InsertSheet", "UnhideSheet", "ProtectSheet"]);
                this.hideItem("columnheader", ["Insert", "Delete", "Hide", "Unhide", "ClearContents", "Paste", "Cut"]);
            }
        },

        _beforeOpen: function (args) {
            var xlObj = this.XLObj, xlResize = xlObj.XLResize;
            if (!xlObj.model.enableContextMenu || (args.events.type == "mousedown" && args.target.id.indexOf("_picture") > -1)) {
                args.cancel = true;
                return false;
            }
            if ($(args.target).hasClass("e-numericitem") && xlObj.model.isReadOnly) {
                args.cancel = true;
                return false;
            }
            if ($(args.target).hasClass("e-cellstylecell")) {
                if (!$(args.target).hasClass("e-customcellstyle")) {
                    args.cancel = true;
                    return false;
                }
                this._target = args.target.innerText;
            }
            if ($(args.target).hasClass("e-cellstylecontent")) {
                args.cancel = true;
                return false;
            }
            this._clrFltrEnable = false;
            this.hideCMenu();
            var colMenuObj = $("#" + xlObj._id + "_contextMenuColumnHeader").data("ejMenu"), rowMenuObj = $("#" + xlObj._id + "_contextMenuRowHeader").data("ejMenu"), trgt = args.target, evnt = { target: trgt }, $trgt = $(trgt), sheetIdx = xlObj.getActiveSheetIndex(), actSheet = xlObj.getSheet(sheetIdx),
                menuData = (xlObj._phoneMode || xlObj._tabMode) ? this._rowCellMenuDataMobile : this._rowCellMenuData, menuObj = $("#" + xlObj._id + "_contextMenuCell").data("ejMenu");
            if (xlObj.XLEdit._isEdit || (xlObj.model.allowComments && xlObj.XLComment._isCommentEdit) || $trgt.hasClass("e-filterspan") || (args.events.which === 1 && $trgt.hasClass("e-hyperlinks")) || $trgt.parents("div").hasClass("e-vscroll") || $trgt.parents("div").hasClass("e-hscroll") || ($(trgt.parentNode).hasClass("e-pagercontainer") && !$trgt.hasClass("e-link")) || (!ej.isNullOrUndefined(xlObj.XLResize) && xlObj.XLResize._resizeStart) || args.target.id.indexOf("Sheet_RenamePanel") > -1 || $trgt.parents().hasClass("e-grid") || $trgt.hasClass("e-autofill"))
                args.cancel = true;
            if (xlResize && xlResize._preventColResize($trgt.parent()[0].cellIndex, true) && $trgt.hasClass('e-headercelldiv'))
                args.cancel = true;
            if (xlResize && xlResize._preventRowResize(parseInt($trgt.parent().attr('idx')), true) && $trgt.hasClass('e-rowheader'))
                args.cancel = true;
            if ($trgt.hasClass("e-rowcell") || $trgt.hasClass("e-hyperlinks")) {
                var colHdr = xlObj._getJSSheetHeader(sheetIdx).find('th'), rowHdr = xlObj._getJSSheetRowHeader(sheetIdx).find('td');
                if (!ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValueByElem(xlObj.getCell(actSheet._activeCell.rowIndex, actSheet._activeCell.colIndex), "range"))) {
                    var rangeInfo = xlObj.model.sheets[sheetIdx].rangeSettings[xlObj.XLEdit.getPropertyValueByElem(xlObj.getCell(actSheet._activeCell.rowIndex, actSheet._activeCell.colIndex), "range")];
                    menuObj.option("fields", { dataSource: rangeInfo.contextMenuSettings.dataSource, id: "id", parentId: "parentId", text: "text", spriteCssClass: "spriteCssClass" });
                    menuObj.option("width", rangeInfo.contextMenuSettings.width);
                    menuObj.option("height", rangeInfo.contextMenuSettings.height);
                }
                else if ($(colHdr[$trgt.index()]).hasClass('e-colselected') || $(rowHdr[$trgt.parent().index()]).hasClass("e-rowselected")) {
                    menuData = $(colHdr[$trgt.index()]).hasClass('e-colselected') ? this._columnHeaderMenuData : this._rowHeaderMenuData;
                    if (JSON.stringify(menuData) !== JSON.stringify(args.model.fields.dataSource) && this._changedDataSource)
                        menuObj.option("fields", { dataSource: menuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "spriteCssClass" });
                }
                else {
                    if (JSON.stringify(menuData) !== JSON.stringify(args.model.fields.dataSource))
                        menuObj.option("fields", { dataSource: menuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "spriteCssClass" });
                }
            }
            else if ($trgt.hasClass("e-ss-imgvisual") || $trgt.hasClass("e-ss-object") || $trgt.closest("div").hasClass("e-ss-object")) {
                this._isMenuOpened = true;
                if (xlObj.XLShape._shapeType === "chart") {
                    var chartMenuData = $.extend(true, [], this._chartMenuData), cid = document.getElementById(xlObj._id + "_chart").value, dataVal = xlObj.XLChart._getShapeObj(cid, "chart");
                    menuData = this.XLObj.model.showRibbon ? (dataVal.isChartSeries ? chartMenuData.splice(0, 3) : this._chartMenuData) : chartMenuData.splice(0, 2);
                }
                else
                    menuData = this._imgMenuData;
                if (JSON.stringify(menuData) !== JSON.stringify(args.model.fields.dataSource))
                    menuObj.option("fields", { dataSource: menuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "spriteCssClass" });
            }
            else if ($trgt.hasClass("e-ss-pivot") || $trgt.closest("div").hasClass("e-ss-pivot")) {
                menuData = this._pivotMenuData;
                if (JSON.stringify(menuData) !== JSON.stringify(args.model.fields.dataSource))
                    menuObj.option("fields", { dataSource: menuData, id: "id", parentId: "parentId", text: "text", spriteCssClass: "spriteCssClass" });
            }
            else if ($trgt.hasClass("e-headercelldiv") || $trgt.hasClass("e-headercell") || $trgt.hasClass("e-rowheader")) {
                if (xlObj._phoneMode || xlObj._tabMode) {
                    colMenuObj.option("fields", { dataSource: this._headerMenuDataMobile });
                    rowMenuObj.option("fields", { dataSource: this._headerMenuDataMobile });
                }
                else if (this._changedDataSource) {
                    colMenuObj.option("fields", { dataSource: this._columnHeaderMenuData });
                    rowMenuObj.option("fields", { dataSource: this._rowHeaderMenuData });
                }
            }
            if (!this._changedDataSource)
                this._updateContextMenuItems($trgt);
            if (xlObj._trigger("beforeOpen", evnt))
                return false;
            if (args.cancel)
                this._isMenuOpened = false;
        },

        _menuClick: function (args) {
            if (this.XLObj._trigger("contextMenuClick", args))
                return false;
            this._processCMenu(args.ID, args.events.element);
        },

        _menuClose: function () {
            this._isMenuOpened = false;
        },

        _processCMenu: function (key, elem) {
            var cid, dataVal, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), stCellIdx, enCellIdx,
                sheet = xlObj.getSheet(sheetIdx), actElem, columnName, selCols, selRows, selCells = sheet._selectedCells;
            switch (key) {
                case "Cut":
                    xlObj.XLClipboard.cut();
                    break;
                case "Copy":
                    xlObj.XLClipboard.copy();
                    break;
                case "PasteSpecial":
                case "PasteValues":
                    xlObj.XLClipboard._isSpecial = !(key === "PasteValues");
                    xlObj.XLClipboard.paste();
                    break;
                case "Insert":
                    xlObj._insDelStatus = "insert";
                    if (sheet._isColSelected) {
                        selCols = xlObj._getJSSheetHeader(sheetIdx).find(".e-colhighlight");
                        xlObj.insertEntireColumn(selCols[0].cellIndex, selCols[selCols.length - 1].cellIndex);
                    }
                    else if (sheet._isRowSelected) {
                        selRows = xlObj._getJSSheetRowHeader(sheetIdx).find(".e-rowhighlight");
                        stCellIdx = xlObj._getCellIdx(selRows[0]);
                        enCellIdx = xlObj._getCellIdx(selRows[selRows.length - 1]);
                        xlObj.insertEntireRow(stCellIdx.rowIndex, enCellIdx.rowIndex);
                    }
                    else
                        xlObj._showDialog(xlObj._id + "_Ribbon_Others_Cells_InsertCellOptions");
                    break;
                case "Delete":
                    selCols = $(xlObj._getJSSheetHeader(sheetIdx).find("tr")[0]).find(".e-colselected");
                    selRows = $(xlObj.getRows(sheetIdx)[0]).find(".e-rowselected");
                    if (elem.parentElement.id.indexOf("ColumnHeader") > -1 || sheet._isColSelected) {
                        selCols = xlObj._getJSSheetHeader(sheetIdx).find(".e-colhighlight");
                        xlObj.deleteEntireColumn(selCols[0].cellIndex, selCols[selCols.length - 1].cellIndex, []);
                    }
                    else if (elem.parentElement.id.indexOf("RowHeader") > -1 || sheet._isRowSelected) {
                        selRows = xlObj._getJSSheetRowHeader(sheetIdx).find(".e-rowhighlight");
                        stCellIdx = xlObj._getCellIdx(selRows[0]);
                        enCellIdx = xlObj._getCellIdx(selRows[selRows.length - 1]);
                        xlObj.deleteEntireRow(stCellIdx.rowIndex, enCellIdx.rowIndex, []);
                    }
                    else
                        xlObj._showDialog(xlObj._id + "_Ribbon_Others_Cells_DeleteCellOptions");
                    break;
                case "FilterSelected":
                    xlObj._showDialog(xlObj._id + "_Ribbon_Data_SortFilter_Filter");
                    xlObj.XLFilter.filterByActiveCell();
                    this._clrFltrEnable = false;
                    break;
                case "ClearFilter":
                    actElem = xlObj.getActiveCell(sheetIdx);
                    var tabName = xlObj.XLEdit.getPropertyValue(actElem.rowIndex, actElem.colIndex, "tableName"), tabId;
                    tabId = (!ej.isNullOrUndefined(tabName)) ? parseInt(tabName.replace("e-table", "")) : -1;
                    if (tabId > -1) {
                        columnName = xlObj.model.sheets[sheetIdx].columns[actElem.colIndex].field;
                        xlObj.XLFilter._clearFilterColumn(columnName, "", "", "", "", "", tabId);
                        delete xlObj._excelFilter._predicates[sheetIdx][columnName];
                    }
                    else
                        xlObj.XLFilter.clearFilter("apply");
                    this._clrFltrEnable = false;
                    break;
                case "SortAtoZ":
                case "SortZtoA":
                case "SortSmallesttoLargest":
                case "SortLargesttoSmallest":
                case "SortOldesttoNewest":
                case "SortNewesttoOldest":
                case "PutCellColor":
                case "PutFontColor":
                    if (xlObj.model.allowSorting)
                        xlObj.XLSort._sortHandler(key);
                    break;
                case "ClearContents":
                    xlObj._isTrigCellSave = true;
                    var range = xlObj.model.sheets[sheetIdx].selectedRange;
                    xlObj.clearContents(xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[2], range[3]));
                    break;
                case "InsertSheet":
                    xlObj.insertSheet();
                    break;
                case "DeleteSheet":
                    xlObj.deleteSheet(sheetIdx, true);
                    break;
                case "RenameSheet":
                    xlObj._renameSheet();
                    break;
                case "MoveorCopy":
                    xlObj._showDialog(xlObj._id + "_MoveorCopy");
                    break;
                case "Hide":
                    sheet._isColSelected && xlObj._hideColumn(selCells[0].colIndex, selCells[selCells.length - 1].colIndex);
                    sheet._isRowSelected && xlObj._hideRow(selCells[0].rowIndex, selCells[selCells.length - 1].rowIndex, "isRHide");
                    break;
                case "Unhide":
                    sheet._isColSelected && xlObj._showColumn(selCells[0].colIndex, selCells[selCells.length - 1].colIndex);
                    sheet._isRowSelected && xlObj._showRow(selCells[0].rowIndex, selCells[selCells.length - 1].rowIndex, "isRHide");
                    break;
                case "HyperLink":
                case "EditLink":
                    xlObj._showDialog(xlObj._id + "_Ribbon_Insert_Links_Hyperlink");
                    break;
                case "RemoveLink":
                    xlObj._removeHyperlink();
                    break;
                case "OpenLink":
                    xlObj._openLink();
                    break;
                case "ctxInsrtCmnt":
                    xlObj._dupDetails = true;
                    xlObj.XLComment.setComment();
                    xlObj._dupDetails = false;
                    break;
                case "ctxEditCmnt":
                    xlObj.XLComment.editComment();
                    break;
                case "ctxDeleteCmnt":
                    xlObj.XLComment.deleteComment();
                    break;
                case "ctxShwHdCmnt":
                    xlObj.XLComment.showHideComment();
                    break;
                case "ChangePicture":
                    xlObj._uploadImage = true;
                    xlObj.XLShape._changePicture = true;
                    xlObj.element.find("#" + xlObj._id + "_file .e-uploadinput").click();
                    break;
                case "ChartType":
                    xlObj._showDialog(xlObj._id + "_Ribbon_ChartDesign_Type_ChangeChartType");
                    xlObj.XLRibbon._refreshChartTypeDlg();
                    break;
                case "SelectData":
                    xlObj._showDialog(xlObj._id + "_Ribbon_ChartDesign_Data_SelectData");
                    cid = document.getElementById(xlObj._id + "_chart").value;
                    dataVal = xlObj.XLChart._getShapeObj(cid, "chart");
                    if (!dataVal.isChartSeries) {
                        $("#" + xlObj._id + "_crxaxis").val(dataVal.xRange ? xlObj._getAlphaRange(sheetIdx, dataVal.xRange[0], dataVal.xRange[1], dataVal.xRange[2], dataVal.xRange[3]) : "");
                        $("#" + xlObj._id + "_cryaxis").val(dataVal.yRange ? xlObj._getAlphaRange(sheetIdx, dataVal.yRange[0], dataVal.yRange[1], dataVal.yRange[2], dataVal.yRange[3]) : "");
                        $("#" + xlObj._id + "_crlaxis").val(dataVal.lRange ? xlObj._getAlphaRange(sheetIdx, dataVal.lRange[0], dataVal.lRange[1], dataVal.lRange[2], dataVal.lRange[3]) : "");
                        xlObj._selectDataval = { xRange: $("#" + xlObj._id + "_crxaxis").val(), yRange: $("#" + xlObj._id + "_cryaxis").val(), lRange: $("#" + xlObj._id + "_crlaxis").val() };
                        $("#" + xlObj._id + "_chartrangedlg").ejDialog("open");
                    }
                    break;
                case "HideSheet":
                    xlObj.hideSheet();
                    break;
                case "UnhideSheet":
                    xlObj._showDialog(xlObj._id + "_UnhideSheet");
                    break;
                case "ProtectSheet":
                    xlObj.protectSheet(!sheet.isSheetProtected);
                    break;
                case "FormatCells":
                    xlObj._showDialog(xlObj._id + "_FormatCells");
                    break;
                case "Refresh":
                    xlObj.XLPivot.refreshDataSource();
                    break;
                case "BackgroundColor":
                    $("#" + this.XLObj._id + "_colordlg").ejDialog("open");
                    this._selColor = { action: "bg-color", color: "" };
                    break;
                case "FontColor":
                    $("#" + this.XLObj._id + "_colordlg").ejDialog("open");
                    this._selColor = { action: "color", color: "" };
                    break;
                case "Modify":
                    this._modifyClick = true;
                    xlObj._showDialog(this.XLObj._id + "_CustomCellDialog");
                    this._oldCustomName = $("#" + this.XLObj._id + "_StyleName").val();
                    break;
                case "DeleteStyle":
                    xlObj.XLFormat.deleteCustomStyle(this._target);
                    break;
                case "Apply":
                    xlObj.XLFormat.applyCustomCellStyle(this._target);
                    break;
            }
        },

        _disableMenuOpt: function (idCollection, cMenuId) {
            var cName = cMenuId || "contextMenuCell", menuObj = $("#" + this.XLObj._id + "_" + cName).data("ejMenu");
            if (menuObj)
                for (var i = 0, len = idCollection.length; i < len; i++)
                    menuObj.disableItemByID(idCollection[i]);
        },

        _enableMenuOpt: function (idCollection, cMenuId) {
            var cName = cMenuId || "contextMenuCell", menuObj = $("#" + this.XLObj._id + "_" + cName).data("ejMenu");
            if (menuObj)
                for (var i = 0, len = idCollection.length; i < len; i++)
                    menuObj.enableItemByID(idCollection[i]);
        },

        _initColorDialog: function () {
            var xlObj = this.XLObj, dlgId = xlObj._id + "_colordlg";
            if ($("#" + dlgId).length)
                return;
            var $dlg = ej.buildTag("div#" + dlgId + ".e-colordlg e-" + xlObj._id + "-dlg ", "", { display: "none" }), contentdiv = ej.buildTag("div#" + dlgId + "_dlgcontent .e-colordlgcontent"), cpinput = ej.buildTag("input#" + dlgId + "_cpicker"), confirmbtndiv = ej.buildTag("div#" + dlgId + "_condiv .e-dlg-btnctnr"),
                okButton = ej.buildTag("input#" + this._id + "_dialog_Ok"), canButton = ej.buildTag("input#" + this._id + "_dialog_Can", "", { "margin-left": 10 }), btncontentdiv = ej.buildTag("div#" + dlgId + "_dlgbtncontent .e-dlg-btnfields");
            contentdiv.append(cpinput);
            $dlg.append(contentdiv);
            xlObj.element.append($dlg);
            $dlg.ejDialog({ showOnInit: false, enableModal: true, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("ColorPicker"), width: "240", height: "auto", minHeight: 0, cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg" });
            $("#" + dlgId + "_cpicker").ejColorPicker({ value: "#278787", modelType: "palette", presetType: "basic", cssClass: "e-ss-colorpicker e-ss-menuclrpkr", select: $.proxy(this._cpClickHandler, this), showApplyCancel: false });
            $("#" + dlgId + "_cpickerWrapper").hide();
            contentdiv.append($("#" + dlgId + "_cpicker_popup").css("display", "block"));
            okButton.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._colorOkClick, this), enabled: true });
            canButton.ejButton({ text: xlObj._getLocStr("Cancel"), showRoundedCorner: true, width: 60, click: ej.proxy(this._colorCanClick, this) });
            btncontentdiv.append(confirmbtndiv.append(okButton, canButton));
            $dlg.append(btncontentdiv);
        },

        _cpClickHandler: function (args) {
            this._selColor.color = args.value;
        },

        _colorOkClick: function () {
            var xlObj = this.XLObj;
            xlObj.XLFormat.format({ "style": (this._selColor.action === "bg-color") ? { "background-color": this._selColor.color } : { "color": this._selColor.color } });
            xlObj._setSheetFocus();
            $("#" + xlObj._id + "_colordlg").ejDialog("close");
        },

        _colorCanClick: function () {
            $("#" + this.XLObj._id + "_colordlg").ejDialog("close");
        }
    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.sorting = function (obj) {
        this.XLObj = obj;
        this._isSortByFilter = false;
    };

    ej.spreadsheetFeatures.sorting.prototype = {
        _sortHandler: function (args) {
            var i, ctype1, ctype2, val1, val2, direction, tname, tableId, rIdx, cIdx, alphRange, format, color = {},
                columnName = "", range = {}, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                details = { sheetIndex: sheetIdx, reqType: "sorting", type: "actionBegin", action: args };
            if (xlObj._trigActionBegin(details))
                return;
            var sheet = xlObj.getSheet(sheetIdx), cell = sheet._selectedCells, stRowIdx;
            columnName = sheet.columns[sheet._activeCell.colIndex].field;
            this._isSortByFilter = false;
            if (args != "PutCellColor" && args != "PutFontColor") {
                if (!xlObj.model.allowSorting || !sheet._selectedCells.length)
                    return;
                (cell.length === 1) && xlObj.selectAll(false);
                direction = (args === "Ribbon_SortZtoA" || args === "SortZtoA") ? ej.sortOrder.Descending : ej.sortOrder.Ascending;
                tname = xlObj.XLEdit.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "tableName", sheetIdx) || "";
                tableId = xlObj._getTableID(tname);
                if (!ej.isNullOrUndefined(tableId)) {
                    range = sheet.tableManager[tableId].range.slice(0);
                    range[0]++;
                }
                else {
                    range = sheet.selectedRange.slice(0), rIdx = range[0], cIdx = range[1];
                    if (rIdx === range[2])
                        return;
                    val1 = xlObj.XLEdit.getPropertyValue(rIdx, cIdx);
                    for (i = rIdx + 1; i <= range[2]; i++) {
                        if (!xlObj._isHiddenRow(i)) {
                            val2 = xlObj.XLEdit.getPropertyValue(i, cIdx);
                            break;
                        }
                    }
                    ctype1 = xlObj.isNumber(val1) ? ej.Spreadsheet.CellType.Number : ej.Spreadsheet.CellType.String;
                    ctype2 = xlObj.isNumber(val2) ? ej.Spreadsheet.CellType.Number : ej.Spreadsheet.CellType.String;
                    if (!xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "merge") && !xlObj.XLEdit.getPropertyValue(i, cIdx, "merge"))
                        if (!xlObj.XLEdit.getPropertyValue(range[0], range[1], "calcValue"))
                            if (ctype1 != ctype2 || (xlObj.XLEdit.getPropertyValue(range[0], range[1], "wrap")) || xlObj.XLEdit.getPropertyValue(range[0], range[1], "isFilterHeader"))
                                range[0]++;
                }
                this.sortByRange(range, columnName, direction);
            }
            else {
                stRowIdx = (cell.length === 1) ? this._selectSortRange(sheetIdx, cell[0]) : sheet._startCell.rowIndex;
                alphRange = xlObj._getAlphaRange(sheetIdx, stRowIdx, cell[0].colIndex, (cell.length === 1) ? cell[0].rowIndex : sheet._endCell.rowIndex, cell[0].colIndex);
                format = xlObj.XLEdit.getPropertyValue(sheet._activeCell.rowIndex, sheet._activeCell.colIndex, "formats");
                if (!xlObj.isUndefined(format)) {
                    format["background-color"] && (color["background-color"] = format["background-color"].toLowerCase());
                    format["color"] && (color["color"] = format["color"].toLowerCase());
                    this.sortByColor(args, color, alphRange);
                }
            }
            if (cell.length === 1) {
                xlObj.XLSelection.selectRange(cell[0], cell[0], sheetIdx)
                sheet._startCell = sheet._endCell = cell[0];
                xlObj.model.allowAutoFill && xlObj.XLDragFill.positionAutoFillElement();
            }
            details = { sheetIndex: sheetIdx, reqType: "sorting", type: "actionComplete", action: args, operation: "sorting", range: range };
            xlObj._trigActionComplete(details);
        },

        _selectSortRange: function (sheetIdx, activeCell) {
            var xlObj = this.XLObj, tableRange = xlObj.getSheet(sheetIdx).filterSettings.tableRange;
            for (var i = 0, len = tableRange.length; i < len; i++)
                if ((tableRange[i].multifilterIdx.indexOf(activeCell.colIndex) > -1) && (activeCell.rowIndex > tableRange[i].startRow - 1) && (activeCell.rowIndex < tableRange[i].endRow + 1))
                    return tableRange[i].startRow;
            xlObj.selectAll();
            return xlObj.getSheet(sheetIdx)._selectedCells[0].rowIndex;
        },

        sortByColor: function (operation, color, range) {
            var xlObj = this.XLObj;
            range = xlObj._getRangeArgs(range, "object");
            if (!xlObj.model.allowSorting || this._sortRangeAlert(range) || xlObj.model.isReadOnly)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), sortObj = { oprType: operation }, startRowIndex, endRowIndex, sheet = xlObj.getSheet(sheetIdx), columnName;
            columnName = sheet.columns[range[1]].field;
            if (!ej.isNullOrUndefined(color)) {
                if (operation === "PutCellColor") {
                    if (color["background-color"])
                        color = color["background-color"];
                    sortObj.operation = "sortbgcolor";
                    sortObj.bgcolor = color;
                }
                else {
                    if (color["color"])
                        color = color["color"];
                    sortObj.operation = "sortfgcolor";
                    sortObj.fgcolor = color;
                }
                sortObj.requestType = sortObj.action = "sortbycolor";
                sortObj.sortColumn = columnName;
                sortObj.selRange = { startCell: { "rowIndex": range[0], "colIndex": range[1] }, endCell: { "rowIndex": range[2], "colIndex": range[3] } };
                sortObj.rangeData = xlObj.getRangeDataAsObject(sortObj.selRange.startCell, sortObj.selRange.endCell, true)[0];
                sortObj.sortRange = range;
                startRowIndex = range[0]; //this._getSortColorRange({ "rowIndex": range[0], "colIndex": range[1] });
                if (!ej.isNullOrUndefined(startRowIndex)) {
                    endRowIndex = xlObj.XLFilter._createSelection(sheetIdx, range[2], range[1], []).endRowIndex;
                    startRowIndex = (operation === "PutCellColor" || operation === "PutFontColor") ? startRowIndex : startRowIndex;
                    sortObj.range = xlObj.model.sheets[sheetIdx]._selectedRange = { startRow: startRowIndex, endRow: endRowIndex, dataSourceIndexes: [] };
                    xlObj._processBindings(sortObj);
                }
            }
        },

        _getSortColorRange: function (activeCell) {
            var xlObj = this.XLObj, actElem = xlObj.getCell(activeCell.rowIndex, activeCell.colIndex), addSort = false, k, j;
            var startRowIndex = 0, prevText = false, rowIndex = activeCell.rowIndex, colIndex = activeCell.colIndex;
            if (actElem.text().length < 1) {
                //Active Element is Empty in the Top
                for (j = rowIndex; j < (rowIndex + 2); j++) {
                    actElem = xlObj.getCell(j, colIndex);
                    if (actElem.is(":visible") && actElem.text().length > 0) {
                        addSort = true;
                        startRowIndex = j;
                        break;
                    }
                }

                //Active Element is Empty in the Bottom
                if (!addSort) {
                    for (j = rowIndex; j > (rowIndex - 2); j--) {
                        if (j > -1) {
                            actElem = xlObj.getCell(j, colIndex);
                            if (actElem.text().length === 0) {
                                if (j > 0) {
                                    actElem = xlObj.getCell(j - 1, colIndex);
                                    actElem.text().length == 0 && (prevText = true);
                                }
                            }
                        }
                    }
                    if (!prevText) {
                        for (j = rowIndex - 2; j > 0; j--) {
                            actElem = xlObj.getCell(j, colIndex);
                            if (actElem.is(":visible") && actElem.text().length === 0) {
                                k = j + 1;
                                addSort = true;
                                startRowIndex = k;
                                break;
                            }
                        }
                    }
                }
            } else {
                //Active Element is Middle of the Column
                for (j = rowIndex; j >= 0; j--) {
                    actElem = xlObj.getCell(j, colIndex);
                    if (actElem.is(":visible") && actElem.text().length === 0) {
                        k = j + 1;
                        addSort = true;
                        startRowIndex = k;
                        break;
                    }
                    if (!addSort && j == 0) {
                        startRowIndex = j;
                        addSort = true;
                    }
                }
            }
            if (!addSort) {
                //display an alert message to select the cell which is having a value
                xlObj._showAlertDlg("Alert", "Alert", null, 630);
            } else
                return startRowIndex;
        },

        _sortRangeAlert: function (range) {
            var xlObj = this.XLObj;
            var cKeys, mRange, sheetIdx = sheetIdx ? sheetIdx : xlObj.getActiveSheetIndex(), mergeObj, mCells = xlObj.getSheet(sheetIdx)._mergeColl,
                rKeys = xlObj.getObjectKeys(mCells);
            range = xlObj._getRangeArgs(range, "object");
            for (var i = 0, rLen = rKeys.length; i < rLen; i++) {
                cKeys = xlObj.getObjectKeys(mCells[rKeys[i]]);
                for (var j = 0, jlen = cKeys.length; j < jlen; j++) {
                    mergeObj = xlObj._dataContainer.sheets[sheetIdx][rKeys[i]][cKeys[j]]["merge"];
                    mRange = xlObj.getRangeIndices(mergeObj.mRange)
                    if ((range[0] <= mRange[0] && range[2] >= mRange[2]) || (range[0] >= mRange[0] && range[2] < mRange[2])) {
                        xlObj._showAlertDlg("Alert", "MergeSortAlert", '', 380);
                        return true;
                    }
                }
            }
            if (xlObj.XLEdit._rangeHasProperty(range, 'calcValue')) {
                xlObj._showAlertDlg("Alert", "FormulaSortAlert", '', 315);
                return true;
            }
            return false;
        },

        sortByRange: function (range, columnName, direction) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowSorting || xlObj.model.isReadOnly)
                return;
            var len, sheetIdx = xlObj.getActiveSheetIndex(), i = 0, rangeData = [], args = {}, filterIcon = [], filterIcons,
                alpRange, fltrRng, colSelected = xlObj._getJSSheetHeader(sheetIdx).find(".e-colselected").length;
            if (!xlObj.model.allowSorting)
                return;
            range = xlObj._getRangeArgs(range, "object");
            if (this._sortRangeAlert(range))
                return true;
            if (this._isSortByFilter && colSelected < 1) {
                fltrRng = this._isSortByFilter ? range[0] - 1 : range[0];
                alpRange = xlObj._getAlphaRange(sheetIdx, fltrRng, range[1], fltrRng + 1, range[3]);
                filterIcons = xlObj._getAlphaRangeCells(alpRange).find(".e-filterspan");
                len = filterIcons.length;
                while (i < len) {
                    filterIcon.push({ colIndex: filterIcons[i].parentNode.cellIndex, rowIndex: filterIcons.eq(i).parents("tr").index() });
                    i++;
                }
                if (filterIcons.length)
                    range[0] = this._isSortByFilter ? range[0] : range[0] + 1;
            }
            rangeData = xlObj.getRangeDataAsObject({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, true)[0];
            args.requestType = args.reqType = ej.Spreadsheet.Actions.Sorting;
            args.range = range;
            args.columnName = columnName;
            args.rangeData = rangeData;
            args.action = "sorting";
            args.sortDirection = direction;
            args.filterIcon = filterIcon;
            args.isSortByFilter = this._isSortByFilter;
            args.colSelected = colSelected;
            args.isHightlightData = false;
            xlObj._processBindings(args);
            if (colSelected && this._isSortByFilter)
                xlObj.XLFilter._changeSortIcon({ rowIndex: range[0] - 1, colIndex: range[1] }, direction);
            return false;
        },

        _sortComplete: function (args) {
            var xlObj = this.XLObj, range = args.range, data = this._swapSortedDatas(args), swappedData = data[1];
            xlObj._dupDetails = true;
            args.rangeData = data[0];
            if (xlObj.model.allowComments)
                xlObj.XLComment.deleteComment(range, null, true, "comment");
            xlObj._removeHyperlink(null, null, true, range);
            xlObj._isSort = true;
            xlObj.clearRangeData(range, ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "comment", "hyperlink", "format"], null, true);
            if (xlObj.model.allowCellFormatting)
                xlObj.XLFormat.removeStyle(range, { cellStyle: true, tableStyle: true, format: true, skipHiddenRow: true });
            xlObj.XLEdit.updateCellWithContainer(swappedData, range, null, true);
            xlObj._isSort = false;
            xlObj.refreshOverflow([range[0], range[1], range[2], range[3]], xlObj.getActiveSheetIndex());
            this._refreshRowHeight(range, swappedData);
            xlObj._dupDetails = false;
        },

        _refreshRowHeight: function (range, swappedData) {
            var rowIdx, idx, i = 0, j = 0, xlObj = this.XLObj, sheetIdx = xlObj._getSheetIndex(), sheet = xlObj.getSheet(sheetIdx), trContent = xlObj._getJSSheetContent(sheetIdx).find(".e-content"), rHContent = xlObj._getJSSheetRowHeaderContent(sheetIdx);
            while (range[0] + i <= range[2]) {
                rowIdx = range[0] + i;
                idx = (i - j) * ((range[3] - range[1]) + 1); // first cell Idx in each row, excluding hidden row
                while (sheet.hideRowsCollection.indexOf(rowIdx) > -1 || sheet._hiddenFreezeRows.indexOf(rowIdx) > -1 && rowIdx < range[2])
                    rowIdx++ && i++ && j++;
                if (!xlObj.model.scrollSettings.allowVirtualScrolling && swappedData[idx]) {
                    trContent.find("tr:eq(" + rowIdx + ")").height(swappedData[idx].rheight);
                    rHContent.find("tr:eq(" + rowIdx + ")").height(swappedData[idx].rheight);
                }
                if (swappedData[idx])
                    sheet.rowsHeightCollection[rowIdx] = swappedData[idx].rheight;
                i++;
            }
            xlObj.XLScroll._getRowHeights(sheetIdx, rowIdx);
            if (xlObj.model.scrollSettings.allowVirtualScrolling)
                xlObj.refreshContent(sheetIdx);
            if (sheet._isFreezed)
                xlObj.XLFreeze._refreshFreezeRowDiv();
        },

        _swapSortedDatas: function (args) {
            var text, idx, j, rowIdx, i = 0, k = 0, l = 0, oldInst = [], total = [], arr = [], sheet = this.XLObj.getSheet(), viewData = args.model.currentViewData,
                vlen = viewData.length, colIdx = this.XLObj._generateColCount(args.columnName) - 1, olen,
                range = args.range, tCols = (range[3] - range[1]) + 1, ccIdx = colIdx - range[1],
                oldData = this.XLObj.getRangeData({ range: range, property: ["value", "value2", "type", "formatStr", "formats", "decimalPlaces", "thousandSeparator", "range", "format", "comment", "hyperlink", "rule"], skipHiddenRow: true });
            while (range[0] + k <= range[2]) {
                rowIdx = range[0] + k;
                idx = (k - l) * ((range[3] - range[1]) + 1);// first cell Idx in each row, excluding hidden row
                while ((sheet.hideRowsCollection.indexOf(rowIdx) > -1 || sheet._hiddenFreezeRows.indexOf(rowIdx) > -1) && rowIdx < range[2])
                    rowIdx++ && k++ && l++;
                if (oldData[idx])
                    oldData[idx].rheight = sheet.rowsHeightCollection[rowIdx];
                k++;
            }
            $.extend(true, oldInst, oldData);
            total.push(oldInst);
            while (i < vlen) {
                text = viewData[i][args.columnName];
                j = ccIdx;
                olen = oldData.length;
                while (j < olen) {
                    if (oldData[j].value === text) {
                        idx = this._getMinIdx(j, tCols);
                        arr = arr.concat(oldData.splice(idx, tCols));
                        break;
                    }
                    j += tCols;
                }
                i++;
            }
            total.push(arr);
            return total;
        },

        _getMinIdx: function (ccIdx, tCols) {
            var i, j;
            i = j = tCols;
            if (ccIdx < tCols)
                return 0;
            while (i <= ccIdx) {
                j += tCols;
                if (j > ccIdx)
                    return i;
                i += tCols;
            }
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.dragAndDrop = function (obj) {
        this.XLObj = obj;
        this._isDragAndDropStart = false;
        this._dragAndDropCell = { rowIndex: 0, colIndex: 0 };
        this._isDragAndDropped = false;
        this._allowDragAndDrop = false;
        this._target = null;
        this._cellIdx = {};
    };

    ej.spreadsheetFeatures.dragAndDrop.prototype = {
        moveRangeTo: function (sourcerange, destinationrange) {
            this._moveRangeTo(sourcerange, destinationrange);
        },

        _moveRangeTo: function (sourcerange, destinationrange, property) {
            var xlObj = this.XLObj;
            if (!xlObj.model.allowDragAndDrop || xlObj.model.isReadOnly || !xlObj.model.allowEditing)
                return;
            var sheetIdx, sheet, data, details, format, dStartCell, dEndCell, sourcecformatrule, destinationcformatrule, trule, range, isTable,
                sourceRowHt = [], destRowHt = [], prevDestRowHt = [], isFilter;
            sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx);
            sourcerange = xlObj.swapRange(xlObj._toIntrnlRange(sourcerange, sheetIdx));
            destinationrange = xlObj.swapRange(xlObj._toIntrnlRange(destinationrange, sheetIdx));
            destinationrange[2] = destinationrange[0] + (sourcerange[2] - sourcerange[0]);
            destinationrange[3] = destinationrange[1] + (sourcerange[3] - sourcerange[1]);
            dStartCell = { rowIndex: destinationrange[0], colIndex: destinationrange[1] };
            dEndCell = { rowIndex: destinationrange[2], colIndex: destinationrange[3] };
            property = property || ["value", "value2", "type", "formatStr", "decimalPlaces", "thousandSeparator", "range", "format", "border", "borders", "comment", "hyperlink", "picture", "cFormatRule", "rule", "chart", "isLocked", "wrap", "formats", "tformats", "tborders", "isFilterHeader", "filterState", "isFilterVisible", "tableName"];
            data = xlObj.getRangeData({ range: sourcerange, property: property });
            if (xlObj.model.allowCellFormatting)
                format = xlObj.XLFormat.getHashCodeClassAsArray(sourcerange);
            if (xlObj.model.allowConditionalFormats)
                sourcecformatrule = xlObj.XLEdit.getPropertyValue(sourcerange[0], sourcerange[1], "cFormatRule");
            if (!xlObj.isUndefined(sourcecformatrule) && sourcecformatrule.length > 0) {
                trule = sourcecformatrule[0].split("_");
                sourcecformatrule = { action: trule[0], inputs: [trule[2], trule[3]], color: trule[4], range: trule[5] };
            }
            for (var i = sourcerange[0]; i <= sourcerange[2]; i++) {
                sourceRowHt.push({ rowIndex: i, height: sheet.rowsHeightCollection[i] });
                for (var j = sourcerange[1]; j <= sourcerange[3]; j++)
                    if (xlObj.XLEdit.getPropertyValue(i, j, 'wrap'))
                        xlObj.setWrapText("unwrap", xlObj._getAlphaRange(sheetIdx, i, j, i, j));
            }
            details = {
                sheetIndex: sheetIdx,
                reqType: "reorder-cells",
                sourceData: $.extend(true, [], data),
                sourceRange: sourcerange,
                destinationRange: destinationrange,
                sourceFormat: format,
                destinationFormat: xlObj.model.allowCellFormatting && xlObj.XLFormat.getHashCodeClassAsArray(destinationrange),
                destinationData: xlObj.getRangeData({ range: destinationrange }),
                sourceCFormat: sourcecformatrule,
                sourceHeight: sourceRowHt,
                property: property
            };
            if (xlObj.XLRibbon._isDirtySelect) {
                xlObj._showAlertDlg("Alert", "DragAlert", null, 440);
                xlObj.performSelection(sourcerange);
                return;
            }
            else {
                isTable = xlObj._checkTableRange(xlObj._getAlphaRange(sheetIdx, sourcerange[0], sourcerange[1], sourcerange[2], sourcerange[3]));
                isFilter = xlObj._checkFilterRange(xlObj._getAlphaRange(sheetIdx, sourcerange[0], sourcerange[1], sourcerange[2], sourcerange[3]));
                xlObj._dupDetails = true;
                if (isTable.status === 'full') {
                    details.tblObj = isTable.tableObj;
                    details.tblObj.tblId = isTable.tblId;
                    details.tblObj.header = true;
                    xlObj.XLFormat.removeTable(isTable.tblId);
                    xlObj.XLFormat.removeStyle(isTable.range);
                }
                else if (isFilter.status === "full") {
                    details.tRange = isFilter.tRange;
                    xlObj.XLFilter.clearFilter("remove");
                }
                else if (isTable.status === 'partial' || isFilter.status === "partial" || xlObj.XLRibbon._isFilterSelect.isFiltered) {
                    xlObj._showAlertDlg("Alert", "DragAlert", null, 440);
                    xlObj.performSelection(sourcerange);
                    return;
                }
                if (xlObj.model.allowComments)
                    xlObj.XLComment.deleteComment();
                xlObj._ddCellSave = true;
                xlObj.clearRangeData(sourcerange, property);
                xlObj.clearRangeData(destinationrange, property);
                if (!ej.isNullOrUndefined(xlObj._ddlCell)) {
                    xlObj.element.find("#" + xlObj._id + "ddl").ejDropDownList("hidePopup");
                    xlObj.element.find("#" + xlObj._id + "ddlspan").remove();
                    xlObj._ddlCell = null;
                }
                if (xlObj.model.allowCellFormatting && !xlObj.XLRibbon._isDirtySelect) {
                    xlObj.XLFormat.removeStyle(sourcerange);
                    xlObj.XLFormat.removeStyle(destinationrange, { cellStyle: true, format: true, border: true });
                }
                if (xlObj.model.allowConditionalFormats)
                    xlObj.XLCFormat.clearCF(sourcerange, true);
                data[0].cFormatRule = [];
                if (details.tblObj) {
                    details.tblObj.destrange = xlObj._getAlphaRange(sheetIdx, destinationrange[0], destinationrange[1], destinationrange[2], destinationrange[3]);
                    xlObj.XLClipboard._isCut = true;
                    xlObj.XLFormat.createTable(details.tblObj, details.tblObj.destrange);
                    xlObj.XLClipboard._isCut = false;
                }
                this._dragDefineName(sourcerange, destinationrange, sheetIdx);
                var k = 0, rowHtColl = $.extend(true, [], sheet.rowsHeightCollection);
                for (i = destinationrange[0]; i <= destinationrange[2]; i++) {
                    prevDestRowHt.push({ rowIndex: i, height: rowHtColl[i] })
                    destRowHt.push({ rowIndex: xlObj._getRowIdx(i), height: rowHtColl[i] > 20 ? rowHtColl[i] : sourceRowHt[k].height });
                    k++;
                }
                xlObj.updateData(data, destinationrange);
                xlObj._ddCellSave = false;
                if (isFilter.tRange) {
                    xlObj.XLFilter.filter(xlObj._getAlphaRange(sheetIdx, destinationrange[0], destinationrange[1], destinationrange[2], destinationrange[3]));
                    xlObj._dupDetails = false;
                }
                (details.tblObj && details.tblObj.totalRow) && xlObj.XLFormat._updateTotalRow(sheetIdx, details.tblObj.tblId, details.tblObj.fnNumber, destinationrange, false);
                if (xlObj.model.allowCellFormatting)
                    xlObj.XLFormat.updateFormat(format, destinationrange);
                if (xlObj.model.allowConditionalFormats && !xlObj.isUndefined(trule)) {
                    range = xlObj._getAlphaRange(1, destinationrange[0], destinationrange[1], destinationrange[2], destinationrange[3]);
                    destinationcformatrule = { action: trule[0], inputs: [trule[2], trule[3]], color: trule[4], range: range };
                    details.destinationCFormat = destinationcformatrule;
                    xlObj.XLCFormat.setCFRule(destinationcformatrule);
                }
                xlObj.setHeightToRows(destRowHt);
                details.destHeight = destRowHt;
                details.prevDestRowHt = prevDestRowHt;
                xlObj.setActiveCell(dStartCell.rowIndex, dStartCell.colIndex);
                if (xlObj.model.allowSelection) {
                    if (!dStartCell.rowIndex && dEndCell.rowIndex === sheet.rowCount - 1)
                        xlObj.XLSelection.selectColumns(dStartCell.colIndex, dEndCell.colIndex);
                    else if (!dStartCell.colIndex && dEndCell.colIndex === sheet.colCount - 1)
                        xlObj.XLSelection.selectRows(dStartCell.rowIndex, dEndCell.rowIndex);
                    else
                        xlObj.XLSelection.selectRange(dStartCell, dEndCell);
                    if (sheet._isFreezed)
                        xlObj.XLFreeze._refreshSelection();
                }
                xlObj._dupDetails = false;
                if (!xlObj._isUndoRedo && xlObj.XLFormat && !xlObj.XLFormat._isFAT) {
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            }
        },

        _dragDefineName: function (sourcerange, destinationrange, sheetIdx) {
            var calcDpdntCells, obj, xlObj = this.XLObj, nmgr = xlObj.model.nameManager, nmLength = nmgr.length, selectedCells = xlObj._getSelectedCells(sheetIdx, sourcerange).selCells, name, rng, formulaCol, len, sheet = xlObj.getSheet(sheetIdx),
                destSelectedCells = xlObj._getSelectedCells(sheetIdx, destinationrange).selCells, isnmgr, rowIdx, colIdx, nmRangeObj, calcObj = xlObj._calcEngine, depntCellRange, namedRange, dept;
            if (nmLength) {
                for (var i = 0; i < nmLength; i++) {
                    nmRangeObj = xlObj._getRangeArgs(xlObj.XLRibbon._getAddrFromDollarAddr(nmgr[i].refersto)[1], "object");
                    if (xlObj.XLClipboard._compareRange(sourcerange, nmRangeObj)) {
                        for (var k = 0; k < selectedCells.length; k++) {
                            if (selectedCells[k].rowIndex == nmRangeObj[0] && selectedCells[k].colIndex == nmRangeObj[3]) {
                                rowIdx = destSelectedCells[k].rowIndex;
                                colIdx = destSelectedCells[k].colIndex;
                                calcDpdntCells = calcObj.getDependentCells().items;
                                obj = Object.keys(calcDpdntCells)[i];
                                if (obj) {
                                    depntCellRange = obj.split("!")[2];
                                    namedRange = xlObj._getRangeArgs(nmRangeObj, "string");
                                    if (depntCellRange == namedRange)
                                        nmgr[i].refersto = xlObj._getDollarAlphaRange([rowIdx, colIdx, rowIdx, colIdx]);
                                    dept = calcObj.getDependentCells().remove('!0!' + depntCellRange);
                                    name = obj.replace(namedRange, xlObj._getRangeArgs([rowIdx, colIdx, rowIdx, colIdx], "string"));
                                    calcObj.getDependentCells().add(name, dept);
                                    isnmgr = true;
                                }
                            }
                        }
                    }
                }
                len = Object.keys(sheet._formulaCollection).length;
                if (len) {
                    for (var j = 0; j < len; j++) {
                        if (isnmgr && dept[j]) {
                            rng = xlObj._getRangeArgs(dept[j].split("!")[2], "object");
                            formulaCol = sheet._formulaCollection[rng[0]][rng[1]];
                            formulaCol._formulaValue = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx);
                            formulaCol._parsedFormula = name;
                            calcObj.getNamedRanges().items[formulaCol._formulaText.split("=")[1].toUpperCase()] = name;
                        }
                    }
                }
            }
        },

        _dMouseHover: function (e) {
            var cellIdx, isLeft, isTop, isRight, isBottom, post, xy, x, y, target = e.target, xlObj = this.XLObj,
                sheetIdx = xlObj.getActiveSheetIndex(), range = xlObj.getSheet(sheetIdx).selectedRange;
            if (xlObj._hasClass(target, "e-rowcell"))
                cellIdx = xlObj._getCellIdx(target);
            if (cellIdx && xlObj.inRange(range, cellIdx.rowIndex, cellIdx.colIndex) && (cellIdx.rowIndex === range[0] || cellIdx.rowIndex === range[2] || cellIdx.colIndex === range[1] || cellIdx.colIndex === range[3]) && !xlObj._isTouchEvt) {
                post = e.target.getBoundingClientRect();
                xy = xlObj._setXY(e);
                x = xy[0];
                y = xy[1];
                isLeft = x - xlObj.getFocusLeftElem().offset().left;
                isLeft = isLeft >= 0 && isLeft <= 5;
                isTop = y - xlObj.getFocusTopElem()[0].getBoundingClientRect().top;
                isTop = isTop >= 0 && isTop <= 5;
                isRight = xlObj.getFocusRightElem().offset().left - x;
                isRight = isRight >= 0 && isRight <= 5;
                isBottom = xlObj.getFocusBottomElem()[0].getBoundingClientRect().top - y;
                isBottom = isBottom >= 0 && isBottom <= 5;
                if ((isLeft && x <= post.left + 5 && x >= post.left)/*left*/ || (isTop && y <= post.top + 5 && y >= post.top)/*top*/ || (isRight && x >= post.right - 5 && x <= post.right)/*right*/ || (isBottom && y >= post.bottom - 5 && y <= post.bottom)/*bottom*/) {
                    xlObj.addClass(target, 'e-cursormove');
                    this._isDragAndDropStart = true;
                    return;
                }
            }
            if (this._isDragAndDropStart && !xlObj._isTouchEvt) {
                xlObj._getContent(sheetIdx).find(".e-cursormove").removeClass("e-cursormove");
                this._isDragAndDropStart = false;
            }
        },

        _dragtouch: function (x, y) {
            var isLeft, isTop, isRight, isBottom, xlObj = this.XLObj;
            isLeft = x - xlObj.getFocusLeftElem().offset().left;
            isTop = y - xlObj.getFocusTopElem().offset().top;
            isRight = xlObj.getFocusRightElem().offset().left - x;
            isBottom = xlObj.getFocusBottomElem().offset().top - y;
            if (isLeft >= -10 && isLeft <= 10 || isTop >= -5 && isTop <= 0 || isRight >= -10 && isRight <= 10 || isBottom >= -5 && isBottom <= 0)
                this._isDragAndDropStart = true;
            else
                this._isDragAndDropStart = false;
        },

        _dMouseDown: function (e) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly || !xlObj.model.allowEditing)
                return;
            var range, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx);
            e.preventDefault();
            e.stopImmediatePropagation();
            range = xlObj.swapRange([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex]);
            (e.target.nodeName === "TD") && (this._dragAndDropCell = xlObj._getCellIdx(e.target));
            xlObj._dStartCell = { rowIndex: range[0], colIndex: range[1] };
            xlObj._dEndCell = { rowIndex: range[2], colIndex: range[3] };
            if (xlObj._trigger('dragStart', { sheetIndex: sheetIdx, target: e.target, currentCell: this._dragAndDropCell, dragAndDropRange: { startCell: sheet._startCell, endCell: sheet._endCell } }))
                return;
            this._allowDragAndDrop = true;
        },

        _dMouseMove: function (e) {
            if (this._allowDragAndDrop) {
                var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), target = e.target, cellIdx = xlObj._getCellIdx(target), touchEnd;
                if (xlObj._isTouchEvt) {
                    touchEnd = xlObj._getOriginalEvt(e);
                    target = document.elementFromPoint(touchEnd.clientX, touchEnd.clientY);
                    if (target.parentNode && target.parentNode.attributes.getNamedItem("data-idx"))
                        cellIdx = xlObj._getCellIdx(target);
                }
                if (xlObj._trigger("drag", { sheetIndex: sheetIdx, target: target, currentCell: cellIdx, dragAndDropRange: { startCell: sheet._startCell, endCell: sheet._endCell } }))
                    return;
                if (xlObj._isFrozen(sheet.frozenRows) && this._isDragAndDropped && sheet._frozenRows - 1 < sheet._ftopRowIdx && sheet._startCell.rowIndex > sheet._frozenRows - 1 && cellIdx.rowIndex < sheet._frozenRows - 1)
                    cellIdx.rowIndex = sheet._ftopRowIdx;
                if (xlObj._isFrozen(sheet.frozenColumns) && this._isDragAndDropped && sheet._frozenColumns - 1 < sheet._fleftColIdx && sheet._startCell.colIndex > sheet._frozenColumns - 1 && cellIdx.colIndex < sheet._frozenColumns - 1)
                    cellIdx.colIndex = sheet._fleftColIdx;
                this._cellIdx = cellIdx;
                xlObj.XLSelection._focusBorder(sheet._startCell, sheet._endCell, xlObj._thinBorder);
                this._updateDCells(cellIdx);
                if (sheet._isFreezed)
                    this._refreshFocusRange();
                else
                    xlObj.XLSelection._focusRange(xlObj._dStartCell, xlObj._dEndCell, xlObj._autofillBorder);
            }
            else if (!this.XLObj._isTouchEvt)
                this._dMouseHover(e);
        },

        _refreshFocusRange: function () {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(), eCIdx = xlObj._dEndCell.colIndex, eRIdx = xlObj._dEndCell.rowIndex, sCIdx = xlObj._dStartCell.colIndex, sRIdx = xlObj._dStartCell.rowIndex;
            if (sheet._frozenRows - 1 < sheet._ftopRowIdx) {
                if (sheet._startCell.rowIndex < sheet._frozenRows - 1) {
                    if (eRIdx >= sheet._frozenRows - 1) {
                        if (eRIdx < sheet._ftopRowIdx)
                            eRIdx = sheet._frozenRows - 2;
                        else if (eRIdx > sheet._ftopRowIdx && sRIdx < sheet._ftopRowIdx)
                            sRIdx = sheet._ftopRowIdx;
                    }
                }
                else
                    sRIdx = (sRIdx < sheet._ftopRowIdx && sRIdx > sheet._frozenRows - 1) ? sheet._ftopRowIdx : xlObj._dStartCell.rowIndex;
            }
            if (sheet._frozenColumns - 1 < sheet._fleftColIdx) {
                if (sheet._startCell.colIndex < sheet._frozenColumns - 1) {
                    if (eCIdx >= sheet._frozenColumns - 1) {
                        if (eCIdx < sheet._fleftColIdx)
                            eCIdx = sheet._frozenColumns - 2;
                        else if (eCIdx > sheet._fleftColIdx && sCIdx < sheet._fleftColIdx)
                            sCIdx = sheet._fleftColIdx;
                    }
                }
                else
                    sCIdx = (sCIdx < sheet._fleftColIdx && sCIdx > sheet._frozenColumns - 1) ? sheet._fleftColIdx : xlObj._dStartCell.colIndex;
            }
            xlObj.XLSelection._focusRange({ rowIndex: sRIdx, colIndex: sCIdx }, { rowIndex: eRIdx, colIndex: eCIdx }, xlObj._autofillBorder);
        },

        _dMouseUp: function (e) {
            if (this._isDragAndDropped) {
                var xlObj = this.XLObj, prfmDragDrop = true, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), vscroll = $("#vscrollBar").data('ejScrollBar'), hscroll = $("#hscrollBar").data('ejScrollBar'),
                    preventDrop = false, range = [xlObj._dStartCell.rowIndex, xlObj._dStartCell.colIndex, xlObj._dEndCell.rowIndex, xlObj._dEndCell.colIndex], startCell = { rowIndex: -1, colIndex: -1 },
                    args = { sheetIndex: sheetIdx, isAlert: false, target: e.target, currCell: this._dragAndDropCell, dragAndDropRange: { startCell: sheet._startCell, endCell: sheet._endCell } },
                    thinBorder = xlObj._arrayAsString(xlObj._thinBorder);
                if (xlObj.model.scrollSettings.allowScrolling && (xlObj._dEndCell.rowIndex > sheet.rowCount)) {
                    for (var i = 0, len = (xlObj._dEndCell.rowIndex - xlObj._dStartCell.rowIndex); i < len; i++) {
                        xlObj.XLScroll._createNewRow(sheetIdx, -1, -1, "insert");
                    }
                    vscroll._scrollData.step = 1;
                    vscroll.scroll(sheet._scrollTop + ((xlObj._dEndCell.rowIndex - xlObj._dStartCell.rowIndex) * sheet.rowHeight));
                }
                if (xlObj._dEndCell.colIndex > sheet.colCount) {
                    for (i = 0, len = (xlObj._dEndCell.colIndex - xlObj._dStartCell.colIndex); i < len; i++) {
                        xlObj.XLScroll._createNewColumn(sheetIdx, startCell, startCell, "insert");
                    }
                    hscroll._scrollData.step = 1;
                    hscroll.scroll(sheet._scrollLeft + ((xlObj._dEndCell.colIndex - xlObj._dStartCell.colIndex) * sheet.columnWidth));
                }
                this._target = e.target;
                if (xlObj._isUniqueRange(sheet.selectedRange, xlObj.swapRange(range)))
                    this._preventDrop(sheet);
                else {
                    if (xlObj.model.allowLockCell && sheet.isSheetProtected) {
                        if (xlObj._isPropExists([range, sheet.selectedRange], "isLocked", sheetIdx))
                            prfmDragDrop = false;
                    }
                    if (prfmDragDrop && xlObj._isPropExists([range, sheet.selectedRange], "isReadOnly", sheetIdx))
                        prfmDragDrop = false;
                    if (!prfmDragDrop) {
                        this._preventDrop(sheet);
                        xlObj.XLSelection._clearBorder(thinBorder);
                        this._allowDragAndDrop = this._isDragAndDropStart = this._isDragAndDropped = false;
                        return;
                    }
                    preventDrop = xlObj._trigger("beforeDrop", args);
                    if (!args.isAlert && !preventDrop && xlObj._rangeHasData(range))
                        xlObj._showAlertDlg("", "DropAlert", "Drop", 498);
                    else if (!xlObj._rangeHasData(range)) {
                        this.moveRangeTo([sheet._startCell.rowIndex, sheet._startCell.colIndex, sheet._endCell.rowIndex, sheet._endCell.colIndex], [xlObj._dStartCell.rowIndex, xlObj._dStartCell.colIndex, xlObj._dEndCell.rowIndex, xlObj._dEndCell.colIndex]);
                        sheet._startCell = xlObj._dStartCell;
                        sheet._endCell = xlObj._dEndCell;
                        if (sheet._isFreezed)
                            xlObj.XLFreeze._refreshSelection();
                    }
                    else
                        this._preventDrop(sheet);
                }
                xlObj.XLSelection._clearBorder(thinBorder);
                if (xlObj.model.allowAutoFill)
                    xlObj.XLDragFill.positionAutoFillElement();
            }
            this._allowDragAndDrop = this._isDragAndDropStart = this._isDragAndDropped = false;
        },
        _scrollHover: function (e) {
            var pix, interval, trgtIdx, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), dColIdx = this._cellIdx.colIndex, dRowIdx = this._cellIdx.rowIndex,
                scrollObj = xlObj.XLScroll, vScroll = scrollObj._vScroller(sheetIdx), hScroll = scrollObj._hScroller(sheetIdx);
            if ($(e.target).parents('.e-vscrollbar').length > 0) {
                interval = setInterval(function () {
                    pix = sheet._scrollLeft + (xlObj._isFrozen(sheet.frozenColumns) ? sheet.columnsWidthCollection[sheet._fleftColIdx] : sheet.columnWidth);
                    hScroll._scrollData.step = 1;
                    hScroll.scroll(pix);
                    xlObj.XLSelection._focusBorder(sheet._startCell, sheet._endCell, xlObj._thinBorder);
                    xlObj.XLDragDrop._updateDCells({ rowIndex: dRowIdx, colIndex: sheet._rightCol.idx - 1 });
                    xlObj.XLSelection._focusRange(xlObj._dStartCell, xlObj._dEndCell, xlObj._autofillBorder);
                    return;
                }, 200);
            }
            else if (e.target.className.indexOf('e-rowheader') > -1) {
                interval = setInterval(function () {
                    pix = sheet._scrollLeft - sheet.columnWidth;
                    hScroll._scrollData.step = -1;
                    if (pix > -1)
                        hScroll.scroll(pix);
                    else
                        hScroll.scroll(0);
                    xlObj.XLSelection._focusBorder(sheet._startCell, sheet._endCell, xlObj._thinBorder);
                    xlObj.XLDragDrop._updateDCells({ rowIndex: dRowIdx, colIndex: sheet._leftCol.idx });
                    xlObj.XLSelection._focusRange(xlObj._dStartCell, xlObj._dEndCell, xlObj._autofillBorder);
                    return;
                }, 200);
            }
            else if ($(e.target).parents('.e-spreadsheetfooter').length > 0 || e.target.className.indexOf('e-spreadsheetfooter') > -1 || $(e.target).parents('.e-hscrollbar').length > 0) {
                interval = setInterval(function () {
                    if (xlObj.model.scrollSettings.allowVirtualScrolling)
                        sheet._isVirtualEndReached ? vScroll.scroll(sheet._scrollTop) : vScroll.scroll(sheet._scrollTop + (xlObj._isFrozen(sheet.frozenRows) ? sheet.rowsHeightCollection[sheet._ftopRowIdx] : sheet.rowHeight));
                    else {
                        vScroll._scrollData.step = 1;
                        vScroll.scroll(sheet._scrollTop + (xlObj._isFrozen(sheet.frozenRows) ? sheet.rowsHeightCollection[sheet._ftopRowIdx] : sheet.rowHeight));
                    }
                    xlObj.XLSelection._focusBorder(sheet._startCell, sheet._endCell, xlObj._thinBorder);
                    xlObj.XLDragDrop._updateDCells({ rowIndex: sheet._bottomRow.idx - 1, colIndex: dColIdx });
                    xlObj.XLSelection._focusRange(xlObj._dStartCell, xlObj._dEndCell, xlObj._autofillBorder);
                    return;
                }, 200);
            }
            else if (e.target.className.indexOf('e-headercell') > -1) {
                interval = setInterval(function () {
                    pix = sheet._scrollTop - sheet.rowHeight;
                    vScroll._scrollData.step = -1;
                    (pix > -1) ? vScroll.scroll(pix) : vScroll.scroll(0);
                    xlObj.XLSelection._focusBorder(sheet._startCell, sheet._endCell, xlObj._thinBorder);
                    xlObj.XLDragDrop._updateDCells({ rowIndex: sheet._topRow.idx, colIndex: dColIdx });
                    xlObj.XLSelection._focusRange(xlObj._dStartCell, xlObj._dEndCell, xlObj._autofillBorder);
                    return;
                }, 200);
            }
            else if (e.target.className.indexOf("e-rowcell") > -1) {
                trgtIdx = xlObj._getCellIdx(e.target);
                if ((xlObj._isFrozen(sheet.frozenRows) && trgtIdx.rowIndex < sheet._frozenRows - 1) && sheet._startCell.rowIndex >= sheet._frozenRows - 1) {
                    interval = setInterval(function () {
                        if (xlObj._dStartCell.rowIndex > sheet._ftopRowIdx || !xlObj.XLDragDrop._isDragAndDropped || sheet._frozenRows - 1 === sheet._ftopRowIdx) {
                            if (xlObj._dStartCell.colIndex > sheet._fleftColIdx || !xlObj.XLDragDrop._isDragAndDropped || sheet._frozenColumns - 1 === sheet._fleftColIdx)
                                clearInterval(interval);
                            return;
                        }
                        pix = sheet._scrollTop - sheet.rowHeight;
                        vScroll._scrollData.step = -1;
                        (pix > -1) ? vScroll.scroll(pix) : vScroll.scroll(0);
                        xlObj.XLSelection._focusBorder(sheet._startCell, sheet._endCell, xlObj._thinBorder);
                        xlObj.XLDragDrop._updateDCells({ rowIndex: sheet._ftopRowIdx, colIndex: xlObj.XLDragDrop._cellIdx.colIndex });
                        xlObj.XLSelection._focusRange(xlObj._dStartCell, xlObj._dEndCell, xlObj._autofillBorder);
                        xlObj.XLDragDrop._refreshFocusRange();
                        return;
                    }, 200);
                }
                if ((xlObj._isFrozen(sheet.frozenColumns) && trgtIdx.colIndex < sheet._frozenColumns - 1) && sheet._startCell.colIndex >= sheet._frozenColumns - 1) {
                    interval = setInterval(function () {
                        if (xlObj._dStartCell.colIndex > sheet._fleftColIdx || !xlObj.XLDragDrop._isDragAndDropped || sheet._frozenColumns - 1 === sheet._fleftColIdx) {
                            if (xlObj._dStartCell.rowIndex > sheet._ftopRowIdx || !xlObj.XLDragDrop._isDragAndDropped || sheet._frozenRows - 1 === sheet._ftopRowIdx)
                                clearInterval(interval);
                            return;
                        }
                        pix = sheet._scrollLeft - sheet.columnWidth;
                        hScroll._scrollData.step = -1;
                        (pix > -1) ? hScroll.scroll(pix) : hScroll.scroll(0);
                        xlObj.XLSelection._focusBorder(sheet._startCell, sheet._endCell, xlObj._thinBorder);
                        xlObj.XLDragDrop._updateDCells({ rowIndex: xlObj.XLDragDrop._cellIdx.rowIndex, colIndex: sheet._fleftColIdx });
                        xlObj.XLSelection._focusRange(xlObj._dStartCell, xlObj._dEndCell, xlObj._autofillBorder);
                        xlObj.XLDragDrop._refreshFocusRange();
                        return;
                    }, 200);
                }
            }
            if (xlObj._browserDetails.name === "msie" && xlObj._browserDetails.version === "8.0") {
                e.target.attachEvent("onmouseleave", function () {
                    clearInterval(interval);
                    return;
                });
                document.attachEvent("onmouseleave", function () {
                    clearInterval(interval);
                    return;
                });
                e.target.attachEvent("onmouseup", function () {
                    clearInterval(interval);
                    return;
                });
            }
            else {
                e.target.addEventListener("mouseleave", function () {
                    clearInterval(interval);
                    return;
                });
                document.addEventListener("mouseleave", function () {
                    clearInterval(interval);
                    return;
                });
                e.target.addEventListener("mouseup", function () {
                    clearInterval(interval);
                    xlObj.XLDragDrop._dMouseUp(e);
                    return;
                });
            }
        },
        _preventDrop: function (sheet) {
            var xlObj = this.XLObj;
            xlObj.XLSelection._focusRange(sheet._startCell, sheet._endCell, xlObj._selectionBorder);
            xlObj._dStartCell = sheet._startCell;
            xlObj._dEndCell = sheet._endCell;
        },

        _updateDCells: function (cellIdx) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx),
                isRange = xlObj.isRange(sheet.selectedRange);
            if (!(sheet._isColSelected && xlObj.inRange(sheet.selectedRange, 0, sheet._startCell.colIndex))) {
                if (cellIdx.rowIndex < this._dragAndDropCell.rowIndex && xlObj._dStartCell.rowIndex) {
                    xlObj._dStartCell.rowIndex = xlObj._dStartCell.rowIndex - (this._dragAndDropCell.rowIndex - cellIdx.rowIndex);
                    xlObj._dEndCell.rowIndex = isRange ? xlObj._dEndCell.rowIndex - (this._dragAndDropCell.rowIndex - cellIdx.rowIndex) : xlObj._dStartCell.rowIndex;
                }
                else if (cellIdx.rowIndex > this._dragAndDropCell.rowIndex) {
                    xlObj._dStartCell.rowIndex = xlObj._dStartCell.rowIndex + (cellIdx.rowIndex - this._dragAndDropCell.rowIndex);
                    xlObj._dEndCell.rowIndex = isRange ? xlObj._dEndCell.rowIndex + (cellIdx.rowIndex - this._dragAndDropCell.rowIndex) : xlObj._dStartCell.rowIndex;
                }
            }
            if (!(sheet._isRowSelected && xlObj.inRange(sheet.selectedRange, sheet._startCell.rowIndex, 0))) {
                if (cellIdx.colIndex < this._dragAndDropCell.colIndex && xlObj._dStartCell.colIndex) {
                    xlObj._dStartCell.colIndex = xlObj._dStartCell.colIndex - (this._dragAndDropCell.colIndex - cellIdx.colIndex);
                    xlObj._dEndCell.colIndex = isRange ? xlObj._dEndCell.colIndex - (this._dragAndDropCell.colIndex - cellIdx.colIndex) : xlObj._dStartCell.colIndex;
                }
                else if (cellIdx.colIndex > this._dragAndDropCell.colIndex) {
                    xlObj._dStartCell.colIndex = xlObj._dStartCell.colIndex + (cellIdx.colIndex - this._dragAndDropCell.colIndex);
                    xlObj._dEndCell.colIndex = isRange ? xlObj._dEndCell.colIndex + (cellIdx.colIndex - this._dragAndDropCell.colIndex) : xlObj._dStartCell.colIndex;
                }
            }
            this._dragAndDropCell = cellIdx;
            this._isDragAndDropped = true;
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.exporting = function (obj) {
        this.XLObj = obj;
        this._exportType = "";
    };

    ej.spreadsheetFeatures.exporting.prototype = {
        //Exporting        
        "export": function (type, fileName) {
            var xlObj = this.XLObj;
            if (!xlObj.model.exportSettings.allowExporting || xlObj.model.isReadOnly)
                return;
            if (ej.isNullOrUndefined(fileName))
                fileName = "Sample";
            var expSettings = xlObj.model.exportSettings, attr, form, inputAttr, input, url, expObj, serverEvent, args, clientArgs, evtArgs, param;
            if (type === ej.Spreadsheet.exportType.Excel)
                url = expSettings.excelUrl;
            else if (type === ej.Spreadsheet.exportType.Csv)
                url = expSettings.csvUrl;
            else
                url = expSettings.pdfUrl;
            expObj = this.getExportProps();
            evtArgs = { exportType: type, url: url, customParams: {} };
            serverEvent = ej.raiseWebFormsServerEvents ? type.toLowerCase() + "Exporting" : "";
            if (ej.raiseWebFormsServerEvents && xlObj.model.serverEvents && xlObj.model.serverEvents.indexOf(serverEvent) > -1) {
                args = { model: $.extend(true, {}, xlObj.model), originalEventType: serverEvent };
                clientArgs = { sheetModel: expObj.model, sheetData: expObj.data, fileName: fileName, password: expSettings.password ? expSettings.password : "" };
                if (xlObj._trigger("onExport", evtArgs))
                    return;
                if (xlObj.getObjectLength(evtArgs.customParams))
                    $.extend(clientArgs, evtArgs.customParams)
                ej.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
                setTimeout(function () {
                    ej.isOnWebForms = true;
                }, 1000);
            }
            else {
                if (ej.isNullOrUndefined(url)) {
                    xlObj._showAlertDlg("Alert", "ImportExportUrl", "", 266);
                    return;
                }
                if (!expSettings.allowExporting || xlObj.isUndefined(url))
                    return;
                if (xlObj._trigger("onExport", evtArgs))
                    return;
                url = evtArgs.url;
                attr = { action: url, method: "post" };
                form = ej.buildTag("form", "", null, attr);
                inputAttr = { name: "sheetData", type: "hidden", value: expObj.data };
                input = ej.buildTag("input", "", null, inputAttr);
                form.append(input);
                inputAttr = { name: "sheetModel", type: "hidden", value: expObj.model };
                input = ej.buildTag("input", "", null, inputAttr);
                form.append(input);
                inputAttr = { name: "fileName", type: "hidden", value: fileName };
                input = ej.buildTag("input", "", null, inputAttr);
                form.append(input);
                inputAttr = { name: "Password", type: "hidden", value: expSettings.password };
                input = ej.buildTag("input", "", null, inputAttr);
                form.append(input);
                for (param in evtArgs.customParams) {
                    inputAttr = { name: param, type: "hidden", value: evtArgs.customParams[param] };
                    input = ej.buildTag("input", "", null, inputAttr);
                    form.append(input);
                }
                $("body").append(form);
                form.submit();
            }
        },

        _getRequriedProp: function (model) {
             var xlObj = this.XLObj, modelClone = {}, i, j, len, arr = ["sheetCount", "activeSheetIndex", "nameManager", "exportSettings"], content, actSheet, cloneSheet, sheetsLen;
            for (i = 0, len = arr.length; i < len; i++) {
                modelClone[arr[i]] = model[arr[i]];
            }
            if (xlObj.model.allowCellFormatting && xlObj.getObjectLength(xlObj.XLFormat._customFontFamily) > 0)
                modelClone["customFontFamily"] = xlObj.XLFormat._customFontFamily;
            if (xlObj._isDefaultLocked)
                modelClone["ExcelLikeLockedCells"] = true;
            actSheet = model.sheets;
            modelClone["sheets"] = [];
            if (xlObj._calcEngine.getCalculatingSuspended())
                modelClone["IsManualCalculation"] = true;
             if (xlObj.model.exportSettings.enableFormulaCalculation)
                modelClone.exportSettings["EnableFormulaCalculation"] = true;
            arr = ["paperSettings","_activeCell", "_endCell", "_startCell", "colCount", "columnsWidthCollection", "rowsHeightCollection", "rowCount", "frozenColumns", "frozenRows", "usedRange", "dataAttribute", "filterSettings", "tableManager", "sheetInfo", "hideColsCollection", "hideRowsCollection", "showGridlines", "showHeadings", "isSheetProtected", "shapeMngr", "chart", "pivotMngr", "topLeftCell", "paneTopLeftCell", "formulaRange"];
            for (i = 0, sheetsLen = actSheet.length; i < sheetsLen; i++) {
                modelClone["sheets"][i] = {};
                cloneSheet = modelClone["sheets"][i];
                content = actSheet[i];
                for (j = 0, len = arr.length; j < len; j++) {
                    cloneSheet[arr[j]] = content[arr[j]];
                }
            }
            return modelClone;
        },
        getExportProps: function () {
            var xlObj = this.XLObj, i, j, k, len, slen, chartObj, modelClone, series;
            xlObj._isExport = true;
            this._renderAll();
            xlObj._isExport = false;
            var contClone = $.extend(true, {}, xlObj._dataContainer), model = {}, objKeys = [];
            var key, pivotObj, chart = {}, range, seriesRange, sRange;
            xlObj._refreshHashCode(contClone.hashCode);
            model = JSON.parse(JSON.stringify(xlObj.model));
            for (i = 1; i < model.sheets.length; i++) {
                chart = {};
                $.extend(true, chart, model.sheets[i].shapeMngr.chart);
                objKeys = xlObj.getObjectKeys(chart);
                model.sheets[i].shapeMngr.chart = {};
                for (j = 0, len = objKeys.length; j < len; j++) {
                    key = chart[objKeys[j]].id;
                    chartObj = $("#" + key).data("ejChart");
                    if (chartObj) {
                        chartObj.model.event = null;
                        modelClone = JSON.parse(JSON.stringify(chartObj.model));
                        series = modelClone.series;
                        for (k = 0, slen = series.length; k < slen; k++) {
                            delete series[k].dataSource;
                            delete series[k].query;
                            series[k].fill = jQuery.type(series[k].fill) == "array" ? series[k].fill[0].color : series[k].fill;
                        }
                        modelClone.dataSheetIdx = chart[key].dataSheetIdx;
                        model.sheets[i].shapeMngr.chart[key] = modelClone;
                        if (!chart[key].isChartSeries) {
                            range = chart[key]["range"];
                            model.sheets[i].shapeMngr.chart[key]["range"] = xlObj._generateHeaderText(range[1] + 1) + (range[0] + 1) + ":" + xlObj._generateHeaderText(range[3] + 1) + (range[2] + 1);
                        }
                        else {
                            seriesRange = chart[key]["seriesRange"];
                            model.sheets[i].shapeMngr.chart[key]["seriesRange"] = seriesRange;
                            for (var n = 0; n < seriesRange.length; n++) {
                                sRange = model.sheets[i].shapeMngr.chart[key]["seriesRange"][n];
                                sRange["xRange"] = seriesRange[n]["xRange"];
                                sRange["yRange"] = seriesRange[n]["yRange"];
                                sRange["lRange"] = seriesRange[n]["lRange"];
                            }
                        }
                        model.sheets[i].shapeMngr.chart[key]["top"] = chart[key]["top"];
                        model.sheets[i].shapeMngr.chart[key]["left"] = chart[key]["left"];
                        model.sheets[i].shapeMngr.chart[key]["height"] = chart[key]["height"];
                        model.sheets[i].shapeMngr.chart[key]["width"] = chart[key]["width"];
                        model.sheets[i].shapeMngr.chart[key]["isRowColSwitched"] = chart[key]["isRowColSwitched"];
                    }
                }
                objKeys = xlObj.getObjectKeys(model.sheets[i].pivotMngr.pivot);
                for (j = 0, len = objKeys.length; j < len; j++) {
                    key = objKeys[j];
                    pivotObj = $("#" + key).data("ejPivotGrid");
                    if (pivotObj) {
                        model.sheets[i].pivotMngr.pivot[key]["rows"] = pivotObj.getOlapReport().rows;
                        model.sheets[i].pivotMngr.pivot[key]["columns"] = pivotObj.getOlapReport().columns;
                        model.sheets[i].pivotMngr.pivot[key]["filters"] = pivotObj.getOlapReport().filters;
                        model.sheets[i].pivotMngr.pivot[key]["values"] = pivotObj.getOlapReport().values;
                    }
                }
            }
            model.sheets.shift();
            return { model: JSON.stringify(this._getRequriedProp(model)), data: JSON.stringify(contClone) };
        },

        _renderAll: function () {
            var i, j, sheet, range, xlObj = this.XLObj, sheets = xlObj.getSheets(), actSheetIdx = xlObj.getActiveSheetIndex();
            for (i = 1; i < sheets.length; i++) {
                sheet = sheets[i];
                if (xlObj.model.importSettings.allowSheetOnDemand && sheet._isImported && !sheet._isRequested)
                    xlObj._importSheet(i, false);
                if (!sheet._isLoaded)
                    xlObj.gotoPage(i);
                if (xlObj.model.scrollSettings.allowVirtualScrolling && !sheet._isImported && sheet._hasDataSrc) {
                    for (j = 1; j <= sheet._virtualBlockCnt; j++) {
                        if (sheet._virtualDataLoadedBlks.indexOf(j) === -1) {
                            sheet._virtualDataLoadedBlks.push(j);
                            range = this._getRange(j, i);
                            xlObj._refreshDataSrc(range, i);
                            xlObj._refreshCellData(range, i);
                        }
                    }
                }
            }
            xlObj.hideWaitingPopUp();
            xlObj.gotoPage(actSheetIdx);
        },

        _getRange: function (i, sheetIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), range = [0, 0, 0, sheet.colCount - 1];
            range[0] = (sheet._virtualBlockRowCnt * (i - 1));
            range[2] = (sheet._virtualBlockRowCnt * i) - 1;
            return range;
        },

        _exportFileNameDlg: function () {
            var xlObj = this.XLObj, $dlg, $label, $saveBtn, $canBtn, $btndiv, $div;
            $dlg = ej.buildTag("div", "", "", { id: xlObj._id + "_ExportFileNameDialog" });
            $btndiv = ej.buildTag("div.e-dlg-btnfields");
            $div = ej.buildTag("div.e-dlg-btnctnr");
            $label = "<div class= 'e-dlgctndiv'><table><tr class= 'e-dlgtd-fields'><td><label>" + xlObj._getLocStr("FileName") + ":</label></td><td><form id='" + xlObj._id + "_Form_xlFileName' onsubmit='return false'><input id ='" + xlObj._id + "_xlFileName' type ='text' value = 'Sample' class = 'ejinputtext'/></form></td></tr></table></div>";
            $dlg.append($label);
            $saveBtn = ej.buildTag("input", "", "", { type: "submit" });
            $canBtn = ej.buildTag("input");
            $saveBtn.ejButton({ text: xlObj._getLocStr("Save"), showRoundedCorner: true, width: 60, click: ej.proxy(this._dlgSave, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._dlgCancel, xlObj), showRoundedCorner: true, width: 60 });
            $btndiv.append($div.append($saveBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({
                enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("SaveFile"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg", close: ej.proxy(this._dlgCancel, xlObj), open: ej.proxy(function () {
                    var fileNameElm = $("#" + xlObj._id + "_xlFileName");
                    fileNameElm.focus().setInputPos(fileNameElm.val().length).select();
                })
            });
            xlObj.XLRibbon._dialogValidate("_xlFileName");
        },

        _dlgSave: function () {
            var xlObj = this.XLObj, id = xlObj._id;
            if ($("#" + id + "_Form_xlFileName").valid()) {
                this["export"](ej.Spreadsheet.exportType[this._exportType], $("#" + id + "_xlFileName").val());
                $("#" + id + "_ExportFileNameDialog").ejDialog("close");
            }
        },

        _dlgCancel: function () {
            $("#" + this._id + "_ExportFileNameDialog").ejDialog("close");
        }

    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.findnreplace = function (obj) {
        this.XLObj = obj;
        this._findCount = 0;
        this._isApplied = false;
        this.caseSen = {
            "true": function (a) { return a.toString(); },
            "false": function (a) { return a.toString().toLowerCase(); }
        };
        this.isEMatch = {
            "true": function (a, b) {
                return a == b;
            },
            "false": function (a, b) {
                if (a.length && !b.length)
                    return;
                return a.indexOf(b) > -1;
            }
        };
    };

    ej.spreadsheetFeatures.findnreplace.prototype = {
        //Find and Replace       

        replaceAllBySheet: function (findData, replaceData, isCSen, isEMatch) {
            if (!this.XLObj.model.allowSearching || !this.XLObj.model.allowEditing || this.XLObj.model.isReadOnly)
                return;
            this._replaceAllData(findData, replaceData, isCSen, isEMatch, "value", "sheet");
        },

        replaceAllByBook: function (findData, replaceData, isCSen, isEMatch) {
            if (!this.XLObj.model.allowSearching || !this.XLObj.model.allowEditing || this.XLObj.model.isReadOnly)
                return;
            this._replaceAllData(findData, replaceData, isCSen, isEMatch, "value", "workbook");
        },

        findNext: function (value, options, sIndex) {
            ej.isNullOrUndefined(sIndex) && (sIndex = this.XLObj.getActiveSheetIndex());
            this._findNext(value, sIndex, options.isCSen, options.isEMatch, options.type, options.mode, options.searchBy);
        },

        findPrevious: function (value, options, sIndex) {
            ej.isNullOrUndefined(sIndex) && (sIndex = this.XLObj.getActiveSheetIndex());
            this._findPrev(value, sIndex, options.isCSen, options.isEMatch, options.type, options.mode, options.searchBy);
        },

        _findNext: function (input, sIndex, isCSen, isEMatch, type, mode, searchBy) {
            var i, j, s, k, tmp, selCells, cell, rowIdx, usedRange, len, rfrshcIdx, rfrshrIdx, colIdx, rowCount, colCount, evtArgs,
                matched, tmpSIndex, isFinded, fRange = [], searchRows = searchBy === "rows",
                xlObj = this.XLObj, isFindSelected = false, sheetIdx = sIndex ? sIndex : xlObj.getActiveSheetIndex(),
                actSheet = xlObj.getSheet(sheetIdx), actCell = actSheet._activeCell, args = {
                    sheetIndex: sIndex,
                    value: input,
                    isCaseSensitive: isCSen,
                    isEntireMatch: isEMatch,
                    searchBy: searchBy,
                    mode: mode,
                    findType: type,
                    reqType: "findNext"
                };
            evtArgs = { sheetIndex: args.sheetIndex, value: args.value, isCaseSensitive: args.isCaseSensitive, isEntireMatch: args.isEntireMatch, searchBy: args.searchBy, mode: args.mode, findType: args.findType, reqType: args.reqType };
            if (!xlObj._intrnlReq && xlObj._trigActionBegin(evtArgs))
                return true;
            if (xlObj.model.allowEditing && xlObj.XLEdit._isEdit)
                xlObj.XLEdit.saveCell();
            input = args.value;
            sIndex = args.sheetIndex;
            isCSen = args.isCaseSensitive;
            isEMatch = args.isEntireMatch;
            type = args.findType; mode = args.mode;
            searchBy = args.searchBy;
            selCells = actSheet._selectedCells;
            len = selCells.length;
            usedRange = actSheet.usedRange;
            if (len === 1 || mode === "workbook")
                fRange = [actCell.rowIndex, actCell.colIndex, usedRange.rowIndex + 1, usedRange.colIndex + 1];
            else {
                isFindSelected = true;
                cell = selCells[len - 1];
                fRange = [actCell.rowIndex, actCell.colIndex, cell.rowIndex + 1, cell.colIndex + 1];
            }
            rowIdx = fRange[0], colIdx = fRange[1], rowCount = fRange[2], colCount = fRange[3];
            if (!searchRows) {
                tmp = rowIdx;
                rowIdx = colIdx;
                colIdx = tmp;
                tmp = rowCount;
                rowCount = colCount;
                colCount = tmp;
            }
            if (mode === "sheet") {
                for (i = rowIdx; i < rowCount; i++) {
                    if (i !== rowIdx) {
                        cell = selCells[0];
                        colIdx = isFindSelected ? (searchRows ? cell.colIndex : cell.rowIndex) : 0;
                    }
                    for (j = colIdx; j < colCount; j++) {
                        matched = this._compareValues(searchRows ? i : j, searchRows ? j : i, sheetIdx, input, isCSen, isEMatch, type);
                        if (matched) {
                            if (!(i === rowIdx && j === colIdx)) {
                                this._updateSelection(searchRows ? i : j, searchRows ? j : i);
                                this._findCount++;
                                args = { sheetIdx: sIndex, reqType: "findNext", activeCell: xlObj.getActiveCellElem(), type: "actionComplete", action: "find-next" };
                                if (xlObj._trigActionComplete(args))
                                    return;
                                return true;
                            }
                        }
                    }
                }
            }
            else {
                for (s = sheetIdx, k = xlObj.model.sheetCount; s <= k; s++) {
                    usedRange = xlObj.model.sheets[s].usedRange;
                    if (s !== sheetIdx) {
                        colIdx = 0;
                        rowIdx = 0;
                        rowCount = searchRows ? usedRange.rowIndex : usedRange.colIndex;
                        colCount = searchRows ? usedRange.colIndex : usedRange.rowIndex;
                    }
                    for (i = rowIdx; i < rowCount + 1; i++) {
                        if (i !== rowIdx)
                            colIdx = 0;
                        for (j = colIdx; j < colCount + 1; j++) {
                            matched = this._compareValues(searchRows ? i : j, searchRows ? j : i, s, input, isCSen, isEMatch, type);
                            if (matched) {
                                if (!(s === sheetIdx && i === rowIdx && j === colIdx)) {
                                    this._updateSelection(searchRows ? i : j, searchRows ? j : i, s);
                                    this._findCount++;
                                    xlObj._intrnlReq = false;
                                    args = { reqType: "findNext", activeCell: xlObj.getActiveCellElem() };
                                    if (xlObj._trigActionComplete(args))
                                        return;
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            if (!this._findCount) {
                rfrshcIdx = 0, rfrshrIdx = 0;
                tmpSIndex = (mode === "sheet") ? sheetIdx : 1;
                if (isFindSelected) {
                    cell = selCells[0];
                    rfrshrIdx = selCells[0].rowIndex, rfrshcIdx = selCells[0].colIndex;
                }
                this._updateSelection(rfrshrIdx, rfrshcIdx, tmpSIndex);
                this._findCount++;
                if (this._compareValues(rfrshrIdx, rfrshcIdx, tmpSIndex, input, isCSen, isEMatch, type))
                    return true;
                else {
                    xlObj._intrnlReq = true;
                    isFinded = this._findNext(input, tmpSIndex, isCSen, isEMatch, type, mode, searchBy);
                    return isFinded;
                }

            }
            return false;
        },

        _findPrev: function (input, sIndex, isCSen, isEMatch, type, mode, searchBy) {
            var i, j, s, matched, tmpSIndex, isFinded, cell, selCells, len, rfrshcIdx, rfrshrIdx, rowIdx, colIdx, rowCount, evtArgs,
                colCount, isFindSelected = false, fRange = [], tmpRIdx = 0, tmpCIdx = 0, searchRows = searchBy === "rows", tmp,
                xlObj = this.XLObj, sheetIdx = sIndex ? sIndex : xlObj.getActiveSheetIndex(),
                actSheet = xlObj.getSheet(sheetIdx), usedRange = actSheet.usedRange,
                actCell = actSheet._activeCell, args = {
                    sheetIndex: sIndex,
                    value: input,
                    isCaseSensitive: isCSen,
                    isEntireMatch: isEMatch,
                    searchBy: searchBy,
                    mode: mode,
                    findType: type,
                    reqType: "findPrevious",
                    action: "find-prev",
                    type: "actionBegin"
                };
            evtArgs = { sheetIndex: args.sheetIndex, value: args.value, isCaseSensitive: args.isCaseSensitive, isEntireMatch: args.isEntireMatch, searchBy: args.searchBy, mode: args.mode, findType: args.findType, reqType: args.reqType };
            if (xlObj._trigActionBegin(evtArgs))
                return true;
            if (xlObj.model.allowEditing && xlObj.XLEdit._isEdit)
                xlObj.XLEdit.saveCell();
            input = args.value;
            sIndex = args.sheetIndex;
            isCSen = args.isCaseSensitive;
            isEMatch = args.isEntireMatch;
            type = args.findType;
            mode = args.mode;
            searchBy = args.searchBy;
            selCells = actSheet._selectedCells;
            len = selCells.length;
            if (len === 1 || mode === "workbook")
                fRange = [actCell.rowIndex, actCell.colIndex, usedRange.rowIndex + 1, usedRange.colIndex + 1];
            else {
                cell = selCells[len - 1];
                fRange = [actCell.rowIndex, actCell.colIndex, cell.rowIndex, cell.colIndex];
                isFindSelected = true;
            }
            rowIdx = fRange[0], colIdx = fRange[1], rowCount = fRange[2], colCount = fRange[3];
            if (!searchRows) {
                tmp = rowIdx;
                rowIdx = colIdx;
                colIdx = tmp;
                tmp = rowCount;
                rowCount = colCount;
                colCount = tmp;
            }
            if (mode === "sheet") {
                if (isFindSelected) {
                    cell = selCells[0];
                    tmpRIdx = searchRows ? cell.rowIndex : cell.colIndex, tmpCIdx = searchRows ? cell.colIndex : cell.rowIndex;
                }
                for (i = rowIdx; i >= tmpRIdx; i--) {
                    if (i !== rowIdx)
                        colIdx = colCount;
                    for (j = colIdx; j >= tmpCIdx; j--) {
                        matched = this._compareValues(searchRows ? i : j, searchRows ? j : i, sheetIdx, input, isCSen, isEMatch, type);
                        if (matched) {
                            if (!(i === rowIdx && j === colIdx)) {
                                this._updateSelection(searchRows ? i : j, searchRows ? j : i);
                                this._findCount++;
                                args = { sheetIdx: sIndex, reqType: "findPrevious", activeCell: xlObj.getActiveCellElem(), type: "actionComplete", action: "find-prev" };
                                if (xlObj._trigActionComplete(args))
                                    return;
                                return true;
                            }
                        }
                    }
                }
            }
            else {
                for (s = sheetIdx; s >= 1; s--) {
                    usedRange = xlObj.model.sheets[s].usedRange;
                    if (s !== sheetIdx) {
                        rowCount = searchRows ? usedRange.rowIndex : usedRange.colIndex;
                        colCount = searchRows ? usedRange.colIndex : usedRange.rowIndex;
                        colIdx = colCount;
                        rowIdx = rowCount;
                    }
                    for (i = rowIdx; i >= 0; i--) {
                        if (i !== rowIdx)
                            colIdx = colCount + 1;
                        for (j = colIdx; j >= 0; j--) {
                            matched = this._compareValues(searchRows ? i : j, searchRows ? j : i, s, input, isCSen, isEMatch, type);
                            if (matched) {
                                if (!(s === sheetIdx && i === rowIdx && j === colIdx)) {
                                    this._updateSelection(searchRows ? i : j, searchRows ? j : i, s);
                                    this._findCount++;
                                    args = { reqType: "findPrevious", activeCell: xlObj.getActiveCellElem() };
                                    if (xlObj._trigActionComplete(args))
                                        return;
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            if (!this._findCount) {
                tmpSIndex = (mode === "sheet") ? sheetIdx : xlObj.model.sheetCount;
                rfrshrIdx = xlObj.model.sheets[tmpSIndex].usedRange.rowIndex, rfrshcIdx = xlObj.model.sheets[tmpSIndex].usedRange.colIndex;
                if (isFindSelected) {
                    cell = selCells[len - 1];
                    rfrshrIdx = cell.rowIndex, rfrshcIdx = cell.colIndex;
                }
                this._updateSelection(rfrshrIdx, rfrshcIdx, tmpSIndex);
                this._findCount++;
                if (this._compareValues(rfrshrIdx, rfrshcIdx, tmpSIndex, input, isCSen, isEMatch, type))
                    return true;
                else {
                    isFinded = this._findPrev(input, tmpSIndex, isCSen, isEMatch, type, mode, searchBy);
                    return isFinded;
                }
            }
            return false;
        },

        _compareValues: function (rowIdx, colIdx, sheetIdx, input, isCSen, isEMatch, type) {
            var xlObj = this.XLObj, value = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, null, sheetIdx) ? xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, null, sheetIdx).toString() : "";
            var isFormula = xlObj.isFormula(value) || (type === "formula" && value === "=");
            var isDateTime = xlObj._isDateTime(xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value", sheetIdx));
            if (type === "value")
                if (isDateTime)
                    value = value ? this.caseSen[isCSen](xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "value2", sheetIdx)) : "";
                else
                    value = value && !isFormula ? this.caseSen[isCSen](value) : "";
            else if (type === "formula") {
                value = isFormula ? this.caseSen[isCSen](value) : "";
            }
            else
                value = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx) ? this.caseSen[isCSen](xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "comment", sheetIdx).value) : "";
            input = this.caseSen[isCSen](input);
            return (this.isEMatch[isEMatch](value, input));
        },

        _replace: function (cell, sIndex, input1, input2, isCSen) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex();
            if (xlObj.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, "isLocked", sheetIdx))
                return false;
            var value = xlObj.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, null, sIndex) ? xlObj.XLEdit.getPropertyValue(cell.rowIndex, cell.colIndex, null, sIndex).toString() : "", regx = new RegExp(input1.toString().replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "ig"),
                newData = (value !== "" && input1 !== "") ? (isCSen ? value.replace(input1, input2) : value.replace(regx, input2)) : input2;
            if (!(sIndex === sheetIdx))
                xlObj.gotoPage(sIndex);
            xlObj.XLEdit._updateCellValue(cell, newData);
        },

        _replaceData: function (input1, input2, sIndex, isCSen, isEMatch, type, direction, mode, searchBy) {
            var details, prop, xlObj = this.XLObj, sheetIdx = sIndex ? sIndex : xlObj.model.activeSheetIndex, actSheet = xlObj.getSheet(sheetIdx), rowIdx = actSheet._activeCell.rowIndex, colIdx = actSheet._activeCell.colIndex, isFinded, args = { sheetIndex: sheetIdx, reqType: "find-replace", action: "replace", type: "actionBegin" };
            if (!xlObj.model.allowEditing)
                return false;
            if (xlObj._trigActionBegin(args))
                return;
            if (xlObj.model.allowLockCell && xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "isLocked", sheetIdx)) {
                xlObj._popUplockCellAlert();
                return;
            }
            if (xlObj.model.allowEditing && xlObj.XLEdit._isEdit)
                xlObj.XLEdit.saveCell();
            if (this._compareValues(rowIdx, colIdx, sheetIdx, input1, isCSen, isEMatch, type)) {
                prop = (type === "formula") ? "value" : "value2";
                details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "replace", rowIndex: rowIdx, colIndex: colIdx, sIndex: sIndex };
                details.prevData = { value: xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, prop) };
                this._replace({ rowIndex: rowIdx, colIndex: colIdx }, sIndex, input1, input2, isCSen);
                details.newData = { value: xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, prop) };
                this._findCount = 0;
                isFinded = direction === "up" ? this._findPrev(input1, sheetIdx, isCSen, isEMatch, type, mode, searchBy) : this._findNext(input1, sheetIdx, isCSen, isEMatch, type, mode, searchBy);
                if (!isFinded)
                    this._updateSelection(rowIdx, colIdx, sheetIdx);
                if (!xlObj._isUndoRedo) {
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            }
            else
                xlObj._showAlertDlg("Alert", "ReplaceNotFound", "");

        },

        _replaceAllData: function (input1, input2, isCSen, isEMatch, type, sType) {
            var details, prop, cellInfo, selCells = [], skipCount = 0, sheetProtected = false, curSheet, xlObj = this.XLObj, sheetCount = xlObj.model.sheetCount, sheetIdx = xlObj.model.activeSheetIndex, actSheet = xlObj.getSheet(sheetIdx), usedRange = actSheet.usedRange, rowIdx = actSheet._activeCell.rowIndex, colIdx = actSheet._activeCell.colIndex, i, j, s, m, n, count = 0, args = { sheetIndex: sheetIdx, reqType: "find-replace", action: "replaceAll", isCSen: isCSen, isEMatch: isEMatch };
            if (xlObj._trigActionBegin(args))
                return;
            details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "replaceAll", isCSen: isCSen, isEMatch: isEMatch };
            prop = (type === "formula") ? "value" : "value2";
            if (!xlObj.model.allowEditing)
                return false;
            xlObj._dupDetails = true;
            if (xlObj.model.allowEditing && xlObj.XLEdit._isEdit)
                xlObj.XLEdit.saveCell();
            if (sType === "sheet") {
                if (xlObj.model.allowLockCell && actSheet.isSheetProtected)
                    sheetProtected = true;
                else {
                    for (i = 0, m = usedRange.rowIndex + 1; i < m; i++) {
                        for (j = 0, n = usedRange.colIndex + 1; j < n; j++)
                            if (this._compareValues(i, j, sheetIdx, input1, isCSen, isEMatch, type)) {
                                cellInfo = { rowIndex: i, colIndex: j, prevData: { value: xlObj.XLEdit.getPropertyValue(i, j, prop) }, sheetIndex: sheetIdx };
                                this._replace({ rowIndex: i, colIndex: j }, sheetIdx, input1, input2, isCSen);
                                count++;
                                cellInfo.newData = { value: xlObj.XLEdit.getPropertyValue(i, j, prop) };
                                selCells.push(cellInfo);
                            }
                    }
                }
            }
            else {
                for (s = 1; s <= sheetCount; s++) {
                    curSheet = xlObj.model.sheets[s];
                    if (xlObj.model.allowLockCell && curSheet.isSheetProtected) {
                        skipCount++;
                        continue;
                    }
                    usedRange = curSheet.usedRange;
                    for (i = 0, m = usedRange.rowIndex + 1; i < m; i++) {
                        for (j = 0, n = usedRange.colIndex + 1; j < n; j++)
                            if (this._compareValues(i, j, s, input1, isCSen, isEMatch, type)) {
                                cellInfo = { rowIndex: i, colIndex: j, prevData: { value: xlObj.XLEdit.getPropertyValue(i, j, prop, s) }, sheetIndex: s };
                                this._replace({ rowIndex: i, colIndex: j }, s, input1, input2, isCSen);
                                count++;
                                cellInfo.newData = { value: xlObj.XLEdit.getPropertyValue(i, j, prop) };
                                selCells.push(cellInfo);
                            }
                    }
                }
            }
            if (sheetProtected || skipCount === sheetCount) {
                xlObj._popUplockCellAlert();
                return;
            }
            xlObj._dupDetails = false;
            details.selectedCell = selCells;
            this._updateSelection(rowIdx, colIdx);
            if (!xlObj._isUndoRedo) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
            xlObj.hideWaitingPopUp();
            var alertText = xlObj._getLocStr("ReplaceData").split("/");
            alertText = "T-" + alertText[0] + count + " " + alertText[1];
            $("#" + xlObj._id + "_FRDialog").ejDialog("close");
            xlObj._showAlertDlg("Alert", alertText, "", 325);
        },

        _updateSelection: function (rowIdx, colIdx, sIndex) {
            var cellIdx = { rowIndex: rowIdx, colIndex: colIdx }, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx);
            if (!sIndex)
                sIndex = sheetIdx;
            if (sIndex && sIndex !== sheetIdx)
                xlObj.gotoPage(sIndex, false);
            if (xlObj.getSheetElement(sheetIdx).find(".e-selected:visible").length < 2 || !xlObj.inRange(sheet.selectedRange, rowIdx, colIdx)) {
                xlObj.setActiveCell(cellIdx.rowIndex, cellIdx.colIndex, sIndex);
                xlObj.XLSelection.selectRange(cellIdx, cellIdx);
                sheet._startCell = cellIdx;
                sheet._endCell = cellIdx;
            }
            else {
                xlObj.XLCellNav._updateActiveCell(rowIdx, colIdx);
            }
            if (xlObj.model.scrollSettings.allowScrolling)
                if (xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))
                    this._freezeScroll(cellIdx.rowIndex, cellIdx.colIndex, sheet);
                else
                    xlObj.XLScroll._scrollSelectedPosition(sIndex, xlObj.getActiveCell(sIndex));
            if (xlObj.model.allowAutoFill)
                xlObj.XLDragFill.positionAutoFillElement();
        },

        //GoTo
        _getSelRangeDetails: function (selected) {
            var rowIdx = selected[selected.length - 1].rowIndex - selected[0].rowIndex, colIdx = selected[selected.length - 1].colIndex - selected[0].colIndex;
            var startRow = selected[0].rowIndex, startCol = selected[0].colIndex;
            return [rowIdx, colIdx, startRow, startCol];
        },

        goTo: function (range) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            xlObj._showDialog(xlObj._id + "_Ribbon_Others_Editing_FindSelect");
            if (range.startsWith("="))
                range = range.split("=")[1];
            var isApply, lbObj, rangeCells, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), startCell, endCell, txt = xlObj._getDollarAlphaRange(sheet.selectedRange);
            var temp = xlObj.XLRibbon._getAddrFromDollarAddr(range);
            range = temp[1];
            temp[0] && xlObj.gotoPage(temp[0], false);
            range = xlObj.getRangeIndices(range), rangeCells = xlObj._getSelectedRange({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] });
            startCell = rangeCells[0];
            endCell = rangeCells[rangeCells.length - 1];
            xlObj.setActiveCell(startCell.rowIndex, startCell.colIndex);
            xlObj.model.allowSelection && xlObj.XLSelection.selectRange(startCell, endCell);
            if (xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))
                this._freezeScroll(startCell.rowIndex, startCell.colIndex, sheet);
            else
                xlObj.XLScroll._scrollSelectedPosition(xlObj.getActiveSheetIndex(), startCell);
            xlObj.XLDragFill && xlObj.XLDragFill.positionAutoFillElement();
            sheet._startCell = startCell;
            sheet._endCell = endCell;
            xlObj._setSheetFocus();
            isApply = $.grep(xlObj.XLRibbon._addrList, function (e) {
                return e.value === txt;
            });
            if (isApply.length < 1) {
                xlObj.XLRibbon._addrList.push({ value: txt, text: txt });
                lbObj = $("#" + xlObj._id + "_GotoAddr").data("ejListBox");
                xlObj.XLRibbon._addrList = JSON.parse(JSON.stringify(xlObj.XLRibbon._addrList));
                lbObj.model.dataSource = xlObj.XLRibbon._addrList;
                lbObj.option("fields", { dataSource: xlObj.XLRibbon._addrList });
            }
        },

        goToSpecial: function (type, options) {
            this._applyGoToRule(type, options.isNumber, options.isText, options.isLogical, options.isError);
        },

        _applyGoToRule: function (type, isNumber, isText, isLogical, isError) {
            var xlObj = this.XLObj;
            xlObj.showWaitingPopUp();
            switch (type) {
                case "blanks":
                    this._applyGotoBlanks();
                    break;
                case "formulas":
                    this._applyGotoFormulas(isNumber, isText, isLogical, isError);
                    break;
                case "comments":
                    this._applyGotoComments();
                    break;
                case "datavalidation":
                    this._applyGotoValidation();
                    break;
                case "cformat":
                    this._applyGotoCFormat();
                    break;
                case "lastcell":
                    var sheetIdx = xlObj.getActiveSheetIndex(), usedRange = xlObj.model.sheets[sheetIdx].usedRange;
                    xlObj.XLSelection.selectRange({ rowIndex: usedRange.rowIndex, colIndex: usedRange.colIndex }, { rowIndex: usedRange.rowIndex, colIndex: usedRange.colIndex });
                    this._updateSelection(usedRange.rowIndex, usedRange.colIndex, sheetIdx);
                    break;
                case "constants":
                    this._applyGotoConstants(isNumber, isText, isLogical, isError);
                    break;
                case "rowdiff":
                    this._applyGotoRowDiff();
                    break;
                case "coldiff":
                    this._applyGotoColDiff();
                    break;
                case "visiblecells":
                    break;
            }
            xlObj.hideWaitingPopUp();
        },

        _applyGotoBlanks: function () {
            var i, j, cell, lastcell, goToLen, rIdx, cIdx, isViewed = false, selCells = [], temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                usedRange = xlObj.model.sheets[sheetIdx].usedRange, value, rowIdx = usedRange.rowIndex, colIdx = usedRange.colIndex,
                sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0,
                details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "blanks" };
            if (xlObj._trigActionBegin(details))
                return;
            sheet._goToCollection = { multiple: false, selected: [] };
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
            }
            for (i = 0; i <= rowIdx; i++) {
                for (j = 0; j <= colIdx; j++) {
                    rIdx = i + startRow, cIdx = j + startCol;
                    value = xlObj.XLEdit.getPropertyValue(rIdx, cIdx) ? xlObj.XLEdit.getPropertyValue(rIdx, cIdx).toString() : "";
                    if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                        cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                        isViewed = true;
                    }
                    if (!value.length) {
                        selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                        if (xlObj.model.scrollSettings.allowVirtualScrolling)
                            sheet._goToCollection.selected.push(rIdx + ":" + cIdx);
                        if (isViewed) {
                            cell.addClass("e-selected");
                            lastcell = [rIdx, cIdx];
                        }
                    } else {
                        if (isViewed)
                            cell.removeClass("e-selected");
                    }
                }
                isViewed = false;
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _applyGotoComments: function () {
            var i, j, cell, lastcell, goToLen, rIdx, cIdx, isViewed = false, selCells = [], temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), usedRange = xlObj.getSheet(sheetIdx).usedRange,
                value, rowIdx = usedRange.rowIndex, colIdx = usedRange.colIndex, sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0;
            var details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "comments" };
            if (xlObj._trigActionBegin(details))
                return;
            sheet._goToCollection = { multiple: false, selected: [] };
            this._isApplied = false;
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
            }
            for (i = 0; i <= rowIdx; i++) {
                for (j = 0; j <= colIdx; j++) {
                    rIdx = i + startRow, cIdx = j + startCol;
                    value = xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "comment");
                    if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                        cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                        isViewed = true;
                    }
                    if (!ej.isNullOrUndefined(value)) {
                        selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                        if (xlObj.model.scrollSettings.allowVirtualScrolling)
                            sheet._goToCollection.selected.push(rIdx + ":" + cIdx);
                        if (isViewed) {
                            cell.addClass("e-selected");
                            this._isApplied = true;
                            lastcell = [rIdx, cIdx];
                        }
                    } else {
                        if (isViewed)
                            cell.removeClass("e-selected");
                    }
                }
                isViewed = false;
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            if (!this._isApplied && !goToLen)
                xlObj._showAlertDlg("Alert", "NoCellFound", "", 200);
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo && this._isApplied) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _applyGotoFormulas: function (isNumber, isText, isLogical, isError) {
            var i, j, cell, rIdx, cIdx, lastcell, goToLen, isViewed = false, selCells = [], temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                value, value2, isFormula, usedRange = xlObj.model.sheets[sheetIdx].usedRange, rowIdx = usedRange.rowIndex,
                colIdx = usedRange.colIndex, sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0,
                details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "formulas" };
            if (xlObj._trigActionBegin(details))
                return;
            sheet._goToCollection = { multiple: false, selected: [] };
            this._isApplied = false;
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
            }
            for (i = 0; i <= rowIdx; i++) {
                for (j = 0; j <= colIdx; j++) {
                    rIdx = i + startRow, cIdx = j + startCol;
                    value = !ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rIdx, cIdx)) ? xlObj.XLEdit.getPropertyValue(rIdx, j + startCol).toString() : "";
                    value2 = !ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "value2")) ? xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "value2").toString() : "";
                    isFormula = value.charAt(0) === "=" && typeof value2 === "string";
                    if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                        cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                        isViewed = true;
                    }
                    if (isFormula && ((isNumber && ($.isNumeric(value2))) || (isText && (!(value2.toLowerCase() === "true" || value2.toLowerCase() === "false") && !$.isNumeric(value2) && !(value2.length !== 0 && (value2.indexOf("#") === 0 && value2.lastIndexOf("?") === value2.length - 1) && value2.length > 0))) || (isLogical && (value2.toLowerCase() === "true" || value2.toLowerCase() === "false")) || (isError && value2.length !== 0 && (xlObj._calcEngine.getErrorStrings().indexOf(value2) > -1)))) {
                        selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                        if (xlObj.model.scrollSettings.allowVirtualScrolling)
                            sheet._goToCollection.selected.push(rIdx + ":" + cIdx);
                        if (isViewed) {
                            cell.addClass("e-selected");
                            this._isApplied = true;
                            lastcell = [rIdx, cIdx];
                        }
                    } else {
                        if (isViewed)
                            cell.removeClass("e-selected");
                    }
                }
                isViewed = false;
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            if (!this._isApplied && !goToLen)
                xlObj._showAlertDlg("Alert", "NoCellFound", "", 200);
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo && this._isApplied) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _applyGotoValidation: function () {
            var i, j, cell, rIdx, cIdx, lastcell, goToLen, isViewed = false, selCells = [], temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                usedRange = xlObj.model.sheets[sheetIdx].usedRange, value, rowIdx = usedRange.rowIndex, colIdx = usedRange.colIndex,
                sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0,
                details = { sheetIndex: sheetIdx, reqType: "find-replace", action: "validations" };
            if (xlObj._trigActionBegin(details))
                return;
            this._isApplied = false;
            sheet._goToCollection = { multiple: false, selected: [] };
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
            }
            for (i = 0; i <= rowIdx; i++) {
                for (j = 0; j <= colIdx; j++) {
                    rIdx = i + startRow, cIdx = j + startCol;
                    value = xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "rule");
                    if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                        cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                        isViewed = true;
                    }
                    if (!ej.isNullOrUndefined(value)) {
                        selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                        if (xlObj.model.scrollSettings.allowVirtualScrolling)
                            sheet._goToCollection.selected.push(rIdx + ":" + cIdx);
                        if (isViewed) {
                            cell.addClass("e-selected");
                            this._isApplied = true;
                            lastcell = [rIdx, cIdx];
                        }
                    } else {
                        if (isViewed)
                            cell.removeClass("e-selected");
                    }
                }
                isViewed = false;
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            if (!this._isApplied && !goToLen)
                xlObj._showAlertDlg("Alert", "NoCellFound", "", 200);
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo && this._isApplied) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _applyGotoCFormat: function () {
            var i, j, cell, rIdx, cIdx, lastcell, goToLen, isViewed = false, selCells = [], temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                usedRange = xlObj.model.sheets[sheetIdx].usedRange, value, rowIdx = usedRange.rowIndex, colIdx = usedRange.colIndex,
                sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0,
                details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "conditions" };
            if (xlObj._trigActionBegin(details))
                return;
            this._isApplied = false;
            sheet._goToCollection = { multiple: false, selected: [] };
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
            }
            for (i = 0; i <= rowIdx; i++) {
                for (j = 0; j <= colIdx; j++) {
                    rIdx = i + startRow, cIdx = j + startCol;
                    value = xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "cFormatRule");
                    if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                        cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                        isViewed = true;
                    }
                    if (!ej.isNullOrUndefined(value) && value.length) {
                        selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                        if (xlObj.model.scrollSettings.allowVirtualScrolling)
                            sheet._goToCollection.selected.push(rIdx + ":" + cIdx);
                        if (isViewed) {
                            cell.addClass("e-selected");
                            this._isApplied = true;
                            lastcell = [rIdx, cIdx];
                        }
                    } else {
                        if (isViewed)
                            cell.removeClass("e-selected");
                    }
                }
                isViewed = false;
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            if (!this._isApplied && !goToLen)
                xlObj._showAlertDlg("Alert", "NoCellFound", "", 200);
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo && this._isApplied) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _applyGotoConstants: function (isNumber, isText, isLogical, isError) {
            var i, j, cell, rIdx, cIdx, lastcell, goToLen, isViewed = false, selCells = [], isFormula, temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                value, value2, usedRange = xlObj.model.sheets[sheetIdx].usedRange, rowIdx = usedRange.rowIndex, colIdx = usedRange.colIndex,
                sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0;
            this._isApplied = false;
            sheet._goToCollection = { multiple: false, selected: [] };
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
            }
            for (i = 0; i <= rowIdx; i++) {
                for (j = 0; j <= colIdx; j++) {
                    rIdx = i + startRow, cIdx = j + startCol;
                    value = ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rIdx, cIdx)) ? "" : xlObj.XLEdit.getPropertyValue(rIdx, cIdx).toString();
                    value2 = ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "value2")) ? "" : xlObj.XLEdit.getPropertyValue(rIdx, cIdx, "value2").toString();
                    isFormula = value.charAt(0) === "=" && typeof value2 === "string";
                    if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                        cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                        isViewed = true;
                    }
                    if (!isFormula && ((isNumber && ($.isNumeric(value))) || (isText && (!(value.toLowerCase() === "true" || value.toLowerCase() === "false") && !$.isNumeric(value) && value.length > 0)) || (isLogical && (value.toLowerCase() === "true" || value.toLowerCase() === "false") || (isError && value2.length !== 0 && (value2.indexOf("#") === 0))))) {
                        selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                        if (xlObj.model.scrollSettings.allowVirtualScrolling)
                            sheet._goToCollection.selected.push(rIdx + ":" + cIdx);

                        if (isViewed) {
                            cell.addClass("e-selected");
                            this._isApplied = true;
                            lastcell = [rIdx, cIdx];
                        }
                    } else {
                        if (isViewed)
                            cell.removeClass("e-selected");
                    }
                }
                isViewed = false;
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            if (!this._isApplied && !goToLen)
                xlObj._showAlertDlg("Alert", "NoCellFound", "", 200);
        },

        _applyGotoColDiff: function () {
            var i, j, cell, cIdx, rIdx, lastcell, goToLen, isViewed = false, selCells = [], temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                usedRange = xlObj.model.sheets[sheetIdx].usedRange, value, rowIdx = usedRange.rowIndex, colIdx = usedRange.colIndex,
                sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0,
                details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "coldiff" }, result;
            if (xlObj._trigActionBegin(details))
                return;
            this._isApplied = false;
            sheet._goToCollection = { multiple: false, selected: [] };
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
                for (i = 0; i <= colIdx; i++) {
                    cIdx = i + startCol;
                    result = xlObj.XLEdit.getPropertyValue(startRow, cIdx) ? xlObj.XLEdit.getPropertyValue(startRow, cIdx).toString() : "";
                    for (j = 0; j <= rowIdx; j++) {
                        rIdx = j + startRow;
                        value = xlObj.XLEdit.getPropertyValue(rIdx, cIdx) ? xlObj.XLEdit.getPropertyValue(rIdx, cIdx).toString() : "";
                        if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                            cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                            isViewed = true;
                        }
                        if (value === result) {
                            if (isViewed)
                                cell.removeClass("e-selected");
                        }
                        else {
                            selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                            if (xlObj.model.scrollSettings.allowVirtualScrolling)
                                sheet._goToCollection.selected.push(rIdx + ":" + cIdx);
                            if (isViewed) {
                                cell.addClass("e-selected");
                                this._isApplied = true;
                                lastcell = [rIdx, cIdx];
                            }
                        }
                    }
                    isViewed = false;
                }
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            if (!this._isApplied && !goToLen)
                xlObj._showAlertDlg("Alert", "NoCellFound", "", 200);
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo && this._isApplied) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },
        _applyGotoRowDiff: function () {
            var i, j, cell, lastcell, goToLen, rIdx, cIdx, isViewed = false, selCells = [], temp, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(),
                usedRange = xlObj.model.sheets[sheetIdx].usedRange, value, rowIdx = usedRange.rowIndex, colIdx = usedRange.colIndex,
                sheet = xlObj.getSheet(sheetIdx), selected = sheet._selectedCells, startRow = 0, startCol = 0, result,
                details = { sheetIndex: sheetIdx, reqType: "find-replace", operation: "rowdiff" };
            if (xlObj._trigActionBegin(details))
                return;
            this._isApplied = false;
            sheet._goToCollection = { multiple: false, selected: [] };
            if (selected.length > 1) {
                temp = this._getSelRangeDetails(selected);
                rowIdx = temp[0];
                colIdx = temp[1];
                startRow = temp[2];
                startCol = temp[3];
                sheet._goToCollection.multiple = true;
                for (i = 0; i <= rowIdx; i++) {
                    rIdx = i + startRow;
                    result = xlObj.XLEdit.getPropertyValue(rIdx, startCol) ? xlObj.XLEdit.getPropertyValue(rIdx, startCol).toString() : "";
                    for (j = 0; j <= colIdx; j++) {
                        cIdx = j + startCol;
                        value = xlObj.XLEdit.getPropertyValue(rIdx, cIdx) ? xlObj.XLEdit.getPropertyValue(rIdx, cIdx).toString() : "";
                        if (xlObj._isRowViewable(sheetIdx, rIdx)) {
                            cell = xlObj.getCell(rIdx, cIdx, sheetIdx);
                            isViewed = true;
                        }
                        if (value === result) {
                            if (isViewed)
                                cell.removeClass("e-selected");
                        }
                        else {
                            selCells.push({ rowIndex: rIdx, colIndex: cIdx, isApply: true });
                            if (xlObj.model.scrollSettings.allowVirtualScrolling)
                                sheet._goToCollection.selected.push(rIdx + ":" + cIdx);
                            if (isViewed) {
                                cell.addClass("e-selected");
                                this._isApplied = true;
                                lastcell = [rIdx, cIdx];
                            }
                        }
                    }
                    isViewed = false;
                }
            }
            goToLen = sheet._goToCollection.selected.length;
            if ((xlObj._isFrozen(sheet.frozenRows) || xlObj._isFrozen(sheet.frozenColumns))) {
                if (goToLen)
                    lastcell = sheet._goToCollection.selected[goToLen - 1].split(":");
                if (lastcell && lastcell.length)
                    this._freezeScroll(lastcell[0], lastcell[1], sheet);
            }
            if (!this._isApplied && !goToLen)
                xlObj._showAlertDlg("Alert", "NoCellFound", "", 200);
            details.selectedCell = selCells;
            if (!xlObj._isUndoRedo && this._isApplied) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },
        _freezeScroll: function (rowIdx, colIdx, sheet) { // To scroll last found cell when rows and columns are freezed
            var diff, xlObj = this.XLObj;
            diff = xlObj._getIdxWithOffset(rowIdx, colIdx, false, ["freeze"]);
            if (sheet._ftopRowIdx > rowIdx || rowIdx > sheet._bottomRow.idx)
                xlObj._scrollContent({ y: (diff.yOffset - sheet._frozenHeight) + 1 }, true);
            if (sheet._fleftColIdx > colIdx || colIdx > sheet._rightCol.idx)
                xlObj._scrollContent({ x: ((diff.xOffset) - sheet._frozenWidth) + 1 }, true);
        }
    };
})(jQuery, Syncfusion);

$.fn.setInputPos = function (start, end) {
    if (!end) end = start;
    if ($(this).is(":visible")) {
        return this.each(function () {
            if (this.setSelectionRange) {
                this.focus();
                this.setSelectionRange(start, end);
            } else if (this.createTextRange) {
                var range = this.createTextRange();
                range.collapse(true);
                range.moveEnd("character", end);
                range.moveStart("character", start);
                range.select();
            }
        });
    }
};;
(function ($, ej, undefined) {
    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.formatCellDialog = function (obj) {
        this.XLObj = obj;
        this._categories = [
            { value: "General", text: obj._getLocStr("LGeneral") }, { value: "Number", text: obj._getLocStr("NumberTab") }, { value: "Currency", text: obj._getLocStr("LCurrency") }, { value: "Accounting", text: obj._getLocStr("LAccounting") },
            { value: "Date", text: obj._getLocStr("LDate") }, { value: "Time", text: obj._getLocStr("LTime") }, { value: "Percentage", text: obj._getLocStr("LPercentage") }, { value: "Fraction", text: obj._getLocStr("LFraction") }, { value: "Scientific", text: obj._getLocStr("LScientific") }, { value: "Text", text: obj._getLocStr("LText") }, { value: "Custom", text: obj._getLocStr("LCustom") }
        ];
        this._effects = [{ value: "underline", text: "underline" }, { value: "line-through", text: "line-through" }, { value: "linethrough-underline", text: "line-through underline" }];
        this._selValue = "General";
    };

    ej.spreadsheetFeatures.formatCellDialog.prototype = {
        //Render Format Cell dialog
        _renderCellFrmtDlg: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, dlgId = xlId + "_formatdlg", $dlg, $tab, $ctnr, $ul, $NumberTag, $FontTag, $li, $li1, $btndiv, $btnctnr, $okBtn, $canBtn;
            $dlg = ej.buildTag("div#" + dlgId);
            $tab = ej.buildTag("div#" + dlgId + "_formattab");
            $ctnr = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
            //create tab Content
            $ul = ej.buildTag("ul .e-ul");
            $NumberTag = ej.buildTag("a", xlObj._getLocStr("NumberTab"), {}, { href: "#" + dlgId + "_number" });
            $li = ej.buildTag("li", $NumberTag);
            $FontTag = ej.buildTag("a", xlObj._getLocStr("FontTab"), {}, { href: "#" + dlgId + "_font" });
            $li1 = ej.buildTag("li", $FontTag);
            //extend other tabs here
            $ul.append($li);
            $ul.append($li1);
            $tab.append($ul);
            $ctnr.append($tab);
            //create button content
            $btndiv = ej.buildTag("div.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + dlgId + "_okbtn");
            $canBtn = ej.buildTag("input#" + dlgId + "_cantn");
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._dlgCFOk, this), cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), showRoundedCorner: true, width: 60, click: ej.proxy(this._dlgCFCancel, this) });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            //element for maintain data's(font-family, size, color, bgcolor,..etc)
            $ctnr.append(ej.buildTag("div#" + dlgId + "_format_dataMnger", "", { display: "none" }));
            xlObj.element.append($dlg.append($ctnr, $btndiv));
            //control rendering
            $tab.ejTab({ width: "100%", height: "auto", cssClass: "e-ss-dlgtab", allowKeyboardNavigation: false, itemActive: ej.proxy(this._numberTabChange, this) });
            $("#" + xlObj._id + "_formatdlg_format_dataMnger").data("style", { "font-family": "Calibri", "font-weight": "normal", "font-style": "normal", "font-size": "11pt", "text-decoration": "none", "color": "#333333" });
            this._renderNumberTab();
            this._renderFontTab();
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("Formatcells"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-ss-mattab e-ss-fcdlg e-" + xlObj._id + "-dlg", open: function () { $("#" + xlObj._id + "_formatdlg_okbtn").focus(); } });

        },

        _renderNumberTab: function () {
            var $div, xlObj = this.XLObj, numbertabId = xlObj._id + "_fdlg_nTab", categories = this._categories, dateTypes, customList, timeTypes, $chkelem, $tdlbl,
                $inputelem, $subTable, $subtr, $subtd, $listDate, $listTime, $inputelem1, $customList, $custDelBtn, $custBtndiv, infodiv;
            dateTypes = [
                { text: "Wednesday, March 14, 2012", value: "{0:dddd, MMMM dd, yyyy}" }, { text: "3/14/2012", value: "{0:M/d/yyyy}" },
                { text: "March 03", value: "{0:MMMM dd}" }, { text: "2012 March", value: "{0:yyyy MMMM}" },
                { text: "3/14/12 1:30 PM", value: "{0:dd/MM/yyyy h:mm tt}" }
            ];
            customList = [
                { text: "0", type: "default" }, { text: "0.00", type: "default" }, { text: "#,##0", type: "default" }, { text: "#,##00.00", type: "default" },
                { text: "0%", type: "default" }, { text: "0.00%", type: "default" }, { text: "MM/dd/yyyy", type: "default" }, { text: "d-MMM", type: "default" },
                { text: "h:mm", type: "default" }, { text: "mm:ss", type: "default" }
            ];
            timeTypes = [
                { text: "1:30:55 PM", value: "{0:h:mm:ss tt}" }, { text: "1:30 PM", value: "{0:h:mm tt}" },
                { text: "13:30:55", value: "{0:H:mm:ss}" }, { text: "1:30", value: "{0:hh:mm}" }
            ];
            var $maindiv = ej.buildTag("div.e-ss-maindiv"), $top = ej.buildTag("div.e-ss-topdiv", "", { display: "table", width: "100%" }), $center = ej.buildTag("div.e-ss-centerdiv", "", { display: "table", width: "100%" }), $left = ej.buildTag("div.e-ss-lefttopdiv", ""), $right = ej.buildTag("div.e-ss-righttopdiv", "", "");
            $tdlbl = ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("FormatSample"));
            $right.append($tdlbl);
            $top.append($left, $right);
            $left = ej.buildTag("div.e-ss-leftdiv", ""), $right = ej.buildTag("div.e-ss-rightdiv", "", { "float": "left" })
            $inputelem = ej.buildTag("input#" + numbertabId + "_sinput.ejinputtext", "", {}, { disabled: "disabled" });
            $right.append($inputelem);
            $div = ej.buildTag("div#div" + numbertabId, "");

            //Decimal places prop
            $subTable = ej.buildTag("table", "", { "white-space": "normal" });
            $subtr = ej.buildTag("tr#" + numbertabId + "_decimal.e-fdlg-num-options");
            $subtd = ej.buildTag("td", ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("DecimalPlacesTxt")), "", { width: "103px" });
            $subTable.append($subtr.append($subtd));
            $subtr = ej.buildTag("tr#" + numbertabId + "_decimaldrop.e-fdlg-num-options");
            $subtd = ej.buildTag("td");
            $inputelem = ej.buildTag("input#" + numbertabId + "_decimalplace", "");
            $right.append($div.append($subTable.append($subtr.append($subtd.append($inputelem)))));
            //Thousand separator prop
            $subtr = ej.buildTag("tr#" + numbertabId + "_tseparator.e-fdlg-num-options");
            $subtd = ej.buildTag("td", "", "", { colspan: "2" });
            $chkelem = ej.buildTag("input#" + numbertabId + "_kseptr");
            $subTable.append($subtr.append($subtd.append($chkelem)));
            //Date types prop
            $subtr = ej.buildTag("tr#" + numbertabId + "_dtypes.e-fdlg-num-options");
            $subtd = ej.buildTag("td", ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("Type")));
            $listDate = ej.buildTag("ul#" + numbertabId + "_datetypes");
            $subTable.append($subtr.append($subtd.append($listDate)));
            //Time types prop
            $subtr = ej.buildTag("tr#" + numbertabId + "_ttypes.e-fdlg-num-options");
            $subtd = ej.buildTag("td", ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("Type")));
            $listTime = ej.buildTag("ul#" + numbertabId + "_timetypes");
            $subTable.append($subtr.append($subtd.append($listTime)));
            //Custom type prop
            $subtr = ej.buildTag("tr#" + numbertabId + "_custom.e-fdlg-num-options");
            $subtd = ej.buildTag("td", ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("Type")));
            $inputelem1 = ej.buildTag("input#" + numbertabId + "_custominput.ejinputtext");
            $customList = ej.buildTag("ul#" + numbertabId + "_customtypes");
            $custDelBtn = ej.buildTag("button#" + numbertabId + "_delBtn", xlObj._getLocStr("Delete"), {}, { type: "button" });
            $custBtndiv = ej.buildTag("div", $custDelBtn);
            $subTable.append($subtr.append($subtd.append($inputelem1, $customList, $custBtndiv)));
            xlObj._on($inputelem1, "keydown", this._validateCustomFormat);
            //Format type description elem
            infodiv = ej.buildTag("div#" + numbertabId + "_typeinfo.e-ss-fcgdiv", "", {});
            $right.append($div);
            $center.append($left, $right);
            $("#" + xlObj._id + "_formatdlg_number").append($maindiv.append($top, $center, infodiv));
            $subTable.find('.e-fdlg-num-options').hide();
            this._createNumList(categories, $left);
            //control creations
            $inputelem.ejNumericTextbox({
                name: "numeric",
                value: 2,
                height: 27,
                width: "100%",
                minValue: 0,
                maxValue: 30,
                change: $.proxy(this._refreshFrmtPropChanges, this)
            });
            $chkelem.ejCheckBox({ change: $.proxy(this._refreshFrmtPropChanges, this) });
            $chkelem.parent().append(ej.buildTag("label.e-dlg-fields", xlObj._getLocStr("ThousandSeparatorTxt"), { "margin-left": 6 }));
            $listDate.ejListBox({
                selectedItemIndex: "0",
                dataSource: dateTypes,
                fields: { text: "text", value: "value" },
                width: "100%",
                height: "120",
                selected: $.proxy(this._refreshFrmtPropChanges, this)
            });
            $listTime.ejListBox({
                selectedItemIndex: "0",
                dataSource: timeTypes,
                fields: { text: "text", value: "value" },
                width: "100%",
                height: "120",
                selected: $.proxy(this._refreshFrmtPropChanges, this)
            });
            $customList.ejListBox({
                selectedItemIndex: "0",
                dataSource: customList,
                fields: { text: "text", value: "value" },
                width: "100%",
                height: "100",
                selected: $.proxy(this._refreshFrmtPropChanges, this)
            });
            $("#" + numbertabId + "_datetypes_container").addClass("e-ss-datetypes");
            $("#" + numbertabId + "_timetypes_container").addClass("e-ss-timetypes");
            $("#" + numbertabId + "_customtypes_container").addClass("e-ss-customtypes");
            /// add calendar pattern
            for (var i = 0; i < 4; i++) {
                var frmtStr = customList[i + 6].text, type = (i > 2) ? ej.Spreadsheet.CellType.Date : ej.Spreadsheet.CellType.Time;
                xlObj.XLFormat.addCustomFormatSpecifier(null, frmtStr, type);
            }
            $custDelBtn.ejButton({ showRoundedCorner: true, width: 60, click: $.proxy(this._customFormatDelete, this) });
        },

        _initFormatCellDlg: function () {
            var xlObj = this.XLObj, tabObj;
            if (!xlObj.model.allowCellFormatting)
                return false;
            $("#" + xlObj._id + "_formatdlg").ejDialog("open");
            $("#" + xlObj._id + "_formatdlg_format_dataMnger").data("style", { "font-family": "Calibri", "font-weight": "normal", "font-style": "normal", "font-size": "11pt", "text-decoration": "none", "color": "#333333" });
            $("#" + xlObj._id + "_formatdlg_format_dataMnger").removeData("NumFormat");
            this._updateFormtdata();
            tabObj = $("#" + xlObj._id + "_formatdlg_formattab").data("ejTab");
            tabObj && tabObj._refresh();
            // $("#" + xlObj._id + "_formatdlg_format_dataMnger").removeData();

        },

        _createFontStyleList: function () {
            var xlObj = this.XLObj, fontTabId = xlObj._id + "_fdlg_fonttab", $drpdiv = ej.buildTag("div.e-ss-drpfontdiv"),
                $familyDiv = ej.buildTag("div .e-ss-stylediv"), $styleDiv = ej.buildTag("div .e-ss-stylediv"), $sizeDiv = ej.buildTag("div .e-ss-stylediv"), $effectsDiv = ej.buildTag("div .e-ss-stylediv"),
                $listFamily = ej.buildTag("input#" + fontTabId + "_family"), $previewLabel = ej.buildTag("label", xlObj._getLocStr("Preview"), "", { id: fontTabId + "_previewlabel" }),
                $inputelem = ej.buildTag("input#" + fontTabId + "_sinput2.ejinputtext", "", { height: "75px", "text-align": "center" }, { disabled: "disabled", value: "AaBbCcYyZz" }),
                $listStyle = ej.buildTag("input#" + fontTabId + "_style"), $NormalFont = ej.buildTag("div#" + fontTabId + "_normalfont2", "", { "padding-left": "10px" }), $bottomRight = ej.buildTag("div .e-ss-colordiv", "", { "padding-right": "0px" }),
                $listSize = ej.buildTag("input#" + fontTabId + "_size"), $bottom = ej.buildTag("div .e-ss-stylediv"), $bottom2 = ej.buildTag("div .e-ss-fontcntdiv"), $bottomleft = ej.buildTag("div .e-ss-colordiv"), $bottomMid = ej.buildTag("div .e-ss-colordiv"), $colorLabel = ej.buildTag("label", xlObj._getLocStr("Color"), "", { id: fontTabId + "_colorlabel" }),
                $fillLabel = ej.buildTag("label", xlObj._getLocStr("BackgroundColor"), "", { id: fontTabId + "_filllabel" }), $colorBox = ej.buildTag("input#" + fontTabId + "_color"),
                $fillColorBox = ej.buildTag("input#" + fontTabId + "_fillcolor"),
                $listEffects = ej.buildTag("input#" + fontTabId + "_effects");
            $familyDiv.append($listFamily);
            $styleDiv.append($listStyle);
            $sizeDiv.append($listSize);
            $effectsDiv.append($listEffects);
            $bottomleft.append($fillLabel, $fillColorBox);
            $bottomMid.append($colorLabel, $colorBox);
            $bottomRight.append(ej.buildTag("label", xlObj._getLocStr("NormalFont")), $NormalFont);
            $bottom.append($bottomleft, $bottomMid, $bottomRight);
            $bottom2.append($previewLabel, $inputelem);
            $drpdiv.append($familyDiv, $styleDiv, $sizeDiv, $effectsDiv, $bottom, $bottom2);
            $listFamily.ejDropDownList({
                dataSource: xlObj.XLRibbon._fontFamily, width: "100%",
                select: $.proxy(this._onFontFamilySelect, this), selectedItemIndex: 6
            });
            $listStyle.ejDropDownList({
                dataSource: xlObj.XLRibbon._fontStyle, width: "100%",
                select: $.proxy(this._onFontStyleSelect, this), selectedItemIndex: 0
            });
            $listSize.ejDropDownList({
                dataSource: xlObj.XLRibbon._fontSize, width: "100%",
                select: $.proxy(this._onFontSizeSelect, this), selectedItemIndex: 3
            });
            $listEffects.ejDropDownList({
                dataSource: this._effects,
                width: "100%",
                watermarkText: "None",
                select: $.proxy(this._onFontEffectSelect, this),
            });
            $colorBox.ejColorPicker({ value: "#333333", modelType: "palette", showSwitcher: false, cssClass: "e-ss-colorpicker", open: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_color"), change: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_color"), select: $.proxy(this._selectCPHandler, this, "fdlg_fonttab_color") });
            $fillColorBox.ejColorPicker({ value: "#FFFFFF", modelType: "palette", showSwitcher: false, cssClass: "e-ss-colorpicker", open: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_fillcolor"), change: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_fillcolor"), select: $.proxy(this._selectCPHandler, this, "fdlg_fonttab_fillcolor") });
            $NormalFont.ejCheckBox({ size: "small", change: $.proxy(this._changeNormalFont, this) });
            $("#" + xlObj._id + "_formatdlg_font").prepend($drpdiv);
        },


        _renderFontTab: function () {
            var xlObj = this.XLObj, fontTabId = xlObj._id + "_fdlg_fonttab", $maindiv = ej.buildTag("div.e-ss-fontmaindiv"),
                $top = ej.buildTag("div .e-ss-fontcntdiv"), $leftTop = ej.buildTag("div .e-ss-fontstylediv"), $rightTop = ej.buildTag("div .e-ss-fontstylediv"),
                $middleTop = ej.buildTag("div .e-ss-fontstylediv"),
                $familyLabel = ej.buildTag("label", xlObj._getLocStr("FontFamily"), "", { id: fontTabId + "_familylabel" }),
                $styleLabel = ej.buildTag("label", xlObj._getLocStr("FontStyle"), "", { id: fontTabId + "_stylelabel" }),
                $sizeLabel = ej.buildTag("label", xlObj._getLocStr("FontSize"), "", { id: fontTabId + "_sizelabel" });
            $leftTop.append($familyLabel);
            $middleTop.append($styleLabel);
            $rightTop.append($sizeLabel);
            $top.append($leftTop, $middleTop, $rightTop);
            // middle contents
            var $center = ej.buildTag("div .e-ss-fontcntdiv", "", { width: "103%" }), $centerLeft = ej.buildTag("div .e-ss-fontstylediv"), $centerRight = ej.buildTag("div .e-ss-fontstylediv", "", { "margin-right": "0px" }),
                $centerMid = ej.buildTag("div .e-ss-fontstylediv"),
                $listFamilyUl = ej.buildTag("ul#" + fontTabId + "_familylist"),
                $listStyleUl = ej.buildTag("ul#" + fontTabId + "_stylelist"),
                $listSizeUl = ej.buildTag("ul#" + fontTabId + "_sizelist"),
                $listFamilyBox = ej.buildTag("input#" + fontTabId + "_familytext .ejinputtext", "", { width: "150px" }, { value: "Calibri" }),
                $listStyleBox = ej.buildTag("input#" + fontTabId + "_styletext .ejinputtext", "", { width: "150px" }, { value: "Normal" }),
                $listSizeBox = ej.buildTag("input#" + fontTabId + "_sizetext .ejinputtext", "", { width: "150px" }, { value: 11 });
            $centerLeft.append($listFamilyBox, $listFamilyUl);
            $centerMid.append($listStyleBox, $listStyleUl);
            $centerRight.append($listSizeBox, $listSizeUl);
            $listFamilyUl.ejListBox({
                selectedItemIndex: "6", width: "150px", height: "150px", dataSource: xlObj.XLRibbon._fontFamily,
                fields: { text: "text", value: "value" }, select: $.proxy(this._onFontFamilySelect, this),
                allowMultiSelection: false
            });
            $listStyleUl.ejListBox({
                selectedItemIndex: "0", width: "150px", height: "150px", dataSource: xlObj.XLRibbon._fontStyle,
                fields: { text: "text", value: "value" }, select: $.proxy(this._onFontStyleSelect, this),
                allowMultiSelection: false
            });
            $listSizeUl.ejListBox({
                selectedItemIndex: "3", width: "150px", height: "150px", dataSource: xlObj.XLRibbon._fontSize,
                fields: { text: "text", value: "value" }, select: $.proxy(this._onFontSizeSelect, this),
                allowMultiSelection: false
            });
            $center.append($centerLeft, $centerMid, $centerRight);
            /// color effects
            var $bottom1 = ej.buildTag("div .e-ss-fontcntdiv"), $bottomLeft = ej.buildTag("div .e-ss-fontstylediv"), $bottomRight = ej.buildTag("div .e-ss-fontnrmldiv"),
                $bottomMid = ej.buildTag("div .e-ss-fontcdiv"),
                $bottomMid1 = ej.buildTag("div .e-ss-fontcdiv"),
                $effectsLabel = ej.buildTag("label", xlObj._getLocStr("Effects"), "", { id: fontTabId + "_effectslabel" }),
                $colorLabel = ej.buildTag("label", xlObj._getLocStr("Color"), "", { id: fontTabId + "_colorlabel" }),
                $fillLabel = ej.buildTag("label", xlObj._getLocStr("BackgroundColor"), "", { id: fontTabId + "_filllabel" }),
                $listEffectsBox = ej.buildTag("input#" + fontTabId + "_effectstext .ejinputtext"),
                $colorBox = ej.buildTag("input#" + fontTabId + "_colortext .ejinputtext", ""),
                $fillColorBox = ej.buildTag("input#" + fontTabId + "_fillcolortext .ejinputtext", ""),
                $NormalFont = ej.buildTag("label#" + fontTabId + "_normalfont", "", { "padding-left": "10px" });
            $bottomLeft.append($effectsLabel, $listEffectsBox);
            $bottomMid.append($colorLabel, $colorBox);
            $bottomMid1.append($fillLabel, $fillColorBox);
            $bottomRight.append(ej.buildTag("label", xlObj._getLocStr("NormalFont"), "", { id: fontTabId + "_fillcolorlabel" }), $NormalFont);
            $bottom1.append($bottomLeft, $bottomMid, $bottomMid1, $bottomRight);
            $listEffectsBox.ejDropDownList({
                dataSource: this._effects,
                watermarkText: "None",
                select: $.proxy(this._onFontEffectSelect, this),
                width: "150px",
            });
            $NormalFont.ejCheckBox({ size: "small", change: $.proxy(this._changeNormalFont, this) });
            $colorBox.ejColorPicker({ value: "#333333", modelType: "palette", showSwitcher: false, cssClass: "e-ss-colorpicker", open: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_colortext"), change: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_colortext") });
            $fillColorBox.ejColorPicker({ value: "#FFFFFF", modelType: "palette", showSwitcher: false, cssClass: "e-ss-colorpicker", open: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_fillcolortext"), change: $.proxy(this._ChangeCPHandler, this, "fdlg_fonttab_fillcolortext") });
            var $bottom2 = ej.buildTag("div .e-ss-fontcntdiv", "", { width: "20px" }), $previewLabel = ej.buildTag("label", xlObj._getLocStr("Preview"), "", { id: fontTabId + "_previewlabel" }),
                $inputelem = ej.buildTag("input#" + fontTabId + "_sinput.ejinputtext", "", { height: "80px", width: "480px", "padding-top": "10px", "text-align": "center" }, { disabled: "disabled", value: "AaBbCcYyZz" });
            $bottom2.append($previewLabel, $inputelem);
            $("#" + xlObj._id + "_formatdlg_font").append($maindiv.append($top, $center, $bottom1, $bottom2));
            this._createFontStyleList();
        },

        _updateFormtdata: function () {
            var xlObj = this.XLObj, actCell = xlObj.getActiveCell(), numlObj = $("#" + xlObj._id + "_fdlg_nTab_list").data("ejListBox"), decimalTxtbox = $("#" + xlObj._id + "_fdlg_nTab_decimalplace").data("ejNumericTextbox"),
                datetype = $("#" + xlObj._id + "_fdlg_nTab_datetypes").data("ejListBox"), timetype = $("#" + xlObj._id + "_fdlg_nTab_timetypes").data("ejListBox"), numddlObj = $("#" + xlObj._id + "_fdlg_nTab_input").data("ejDropDownList"),
                customList = $("#" + xlObj._id + "_fdlg_nTab_customtypes").data("ejListBox"), cellData, decimalPlaces, separator, type, dTypeIdx, tTypeIdx, dataSrc, frmtStr, cTypeIdx, familyObj = $("#" + xlObj._id + "_fdlg_fonttab_familylist").data("ejListBox"),
                styelObj = $("#" + xlObj._id + "_fdlg_fonttab_stylelist").data("ejListBox"), sizelObj = $("#" + xlObj._id + "_fdlg_fonttab_sizelist").data("ejListBox"),
                effectObj = $("#" + xlObj._id + "_fdlg_fonttab_effectstext").data("ejDropDownList"), fontClObj = $("#" + xlObj._id + "_fdlg_fonttab_colortext").data("ejColorPicker"),
                fillClObj = $("#" + xlObj._id + "_fdlg_fonttab_fillcolortext").data("ejColorPicker");
            numlObj && numlObj._refreshScroller();
            cellData = xlObj.getRangeData({ range: [actCell.rowIndex, actCell.colIndex, actCell.rowIndex, actCell.colIndex] })[0];
            decimalPlaces = "decimalPlaces" in cellData ? cellData.decimalPlaces : 2;
            separator = "thousandSeparator" in cellData ? cellData.thousandSeparator : false;
            type = "type" in cellData ? cellData.type.indexOf("date") > -1 ? "date" : cellData.type : "general";
            if ("formatStr" in cellData) {
                dTypeIdx = datetype.getIndexByValue(cellData.formatStr);
                tTypeIdx = timetype.getIndexByValue(cellData.formatStr);
                if (xlObj.isUndefined(dTypeIdx) && xlObj.isUndefined(tTypeIdx) && ["date"].indexOf(type) > -1) {
                    dataSrc = customList.model.dataSource;
                    frmtStr = cellData.formatStr.replace(/^\{0\:|\}$/g, "");
                    if (!xlObj._isValueAlreadyExist(dataSrc, "text", frmtStr)) {
                        dataSrc.push({ text: frmtStr, type: "custom" });
                        customList._setModel({ dataSource: dataSrc });
                    }
                    cTypeIdx = customList.getIndexByText(frmtStr);
                    type = "custom";
                }
            }
            else
                dTypeIdx = tTypeIdx = 0;
            numlObj && numlObj.selectItemByValue($.camelCase("-" + type));
            datetype.selectItemByIndex(dTypeIdx > -1 ? dTypeIdx : 0);
            timetype.selectItemByIndex(tTypeIdx > -1 ? tTypeIdx : 0);
            customList.selectItemByIndex(cTypeIdx > -1 ? cTypeIdx : 0);
            if (type === "string") {
                numlObj.selectItemByIndex(10);
                customList.selectItemByText(cellData.formatStr);
            }
            if ("formats" in cellData) {
                if (!ej.isNullOrUndefined(cellData.formats["font-size"]))
                    sizelObj.selectItemByText(cellData.formats["font-size"].split("pt")[0]);
                else
                    sizelObj.selectItemByText("11");
                if (ej.isNullOrUndefined(cellData.formats["font-style"]) && ej.isNullOrUndefined(cellData.formats["font-weight"]))
                    styelObj.selectItemByText("Normal");
                if (!ej.isNullOrUndefined(cellData.formats["font-style"] && ej.isNullOrUndefined(cellData.formats["font-weight"])))
                    styelObj.selectItemByText(cellData.formats["font-style"].capitalizeFirstString());
                if (!ej.isNullOrUndefined(cellData.formats["font-weight"] && ej.isNullOrUndefined(cellData.formats["font-style"])))
                    styelObj.selectItemByText(cellData.formats["font-weight"].capitalizeFirstString());
                if (!ej.isNullOrUndefined(cellData.formats["font-style"]) && !ej.isNullOrUndefined(cellData.formats["font-weight"]))
                    styelObj.selectItemByText("Bold Italic");
                if (!ej.isNullOrUndefined(cellData.formats["font-family"]))
                    familyObj.selectItemByText(cellData.formats["font-family"].replace(/\w\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); }));
                else
                    familyObj.selectItemByText("Calibri");
                if (!ej.isNullOrUndefined(cellData.formats["text-decoration"]))
                    effectObj.selectItemByText(cellData.formats["text-decoration"])
                else
                    effectObj.clearText();
                if (!ej.isNullOrUndefined(cellData.formats["color"]))
                    fontClObj.setValue(cellData.formats["color"]);
                else
                    fontClObj.setValue("#333333");
                if (!ej.isNullOrUndefined(cellData.formats["background-color"]))
                    fillClObj.setValue(cellData.formats["background-color"]);
                else
                    fillClObj.setValue("#FFFFFF");
            }
            else
                this._changeNormalFont({ isChecked: true });
            decimalTxtbox.option("value", decimalPlaces);
            $("#" + xlObj._id + "_fdlg_nTab_kseptr").ejCheckBox({ checked: separator });
            this._onNumFormatSelect({ value: numlObj ? numlObj.model.value : numddlObj.model.value });
        },

        _onNumFormatSelect: function (args) {
            var xlObj = this.XLObj, optId = "#" + xlObj._id + "_fdlg_nTab_", infoLbl = $("#" + xlObj._id + "_fdlg_nTab_typeinfo"), formattedText, value = args.value;
            $("#" + xlObj._id + "_formatdlg_number").find(".e-fdlg-num-options").hide();
            switch (value) {
                case "Number":
                    if (xlObj.model.formatSettings.allowDecimalPlaces)
                        $(optId + "decimal, " + optId + "tseparator, " + optId + "decimaldrop").show();
                    break;
                case "Currency":
                case "Accounting":
                case "Percentage":
                case "Scientific":
                    $(optId + "decimal").show();
                    $(optId + "decimaldrop").show();
                    break;
                case "Date":
                    $(optId + "dtypes").show();
                    $("#" + xlObj._id + "_fdlg_nTab_datetypes").data("ejListBox")._refreshScroller();
                    break;
                case "Time":
                    $(optId + "ttypes").show();
                    $("#" + xlObj._id + "_fdlg_nTab_timetypes").data("ejListBox")._refreshScroller();
                    break;
                case "Custom":
                    $(optId + "custom").show();
                    $("#" + xlObj._id + "_fdlg_nTab_customtypes").data("ejListBox")._refreshScroller();
                    break;
            }
            formattedText = this._getFormattedText(value);
            $("#" + xlObj._id + "_fdlg_nTab_decimalplace").data("ejNumericTextbox").option("maxValue", value === "Scientific" ? 20 : 30);
            $("#" + xlObj._id + "_fdlg_nTab_sinput").val(formattedText);
            infoLbl.text(xlObj._getLocStr(value));
            this._selValue = value
        },

        _getFormattedText: function (type) {
            var formatStr, isSeparator, value, cValue, formatObj, decimal = 0, xlObj = this.XLObj, actCell = xlObj.getActiveCell(), decimalTxtbox = $("#" + xlObj._id + "_fdlg_nTab_decimalplace").data("ejNumericTextbox"), datetype = $("#" + xlObj._id + "_fdlg_nTab_datetypes").data("ejListBox"),
                formattype = { Number: "0:N", Currency: "0:C", Accounting: "0:C", Percentage: "0:P", Scientific: "0:N" }, timetype = $("#" + xlObj._id + "_fdlg_nTab_timetypes").data("ejListBox"), cellType = ej.Spreadsheet.CellType, cellFormat = ej.Spreadsheet.CellFormat,
                customList = $("#" + xlObj._id + "_fdlg_nTab_customtypes").data("ejListBox");
            if (xlObj.model.formatSettings.allowDecimalPlaces)
                decimal = decimalTxtbox.getValue();
            value = xlObj.XLEdit.getPropertyValue(actCell.rowIndex, actCell.colIndex) || "";
            isSeparator = $("#" + xlObj._id + "_fdlg_nTab_kseptr").ejCheckBox("checked");
            switch (type) {
                case "Number":
                case "Currency":
                case "Accounting":
                case "Percentage":
                    formatStr = "{" + formattype[type] + decimal + "}";
                    if (xlObj._isDateTime(value))
                        value = xlObj._dateToInt(value);
                    value = xlObj.XLFormat._format(value, xlObj.XLFormat._getFormatObj({ formatStr: formatStr, thousandSeparator: isSeparator, type: cellType[type], decimalPlaces: decimal }));
                    break;
                case "Date":
                    formatStr = datetype.getSelectedItems()[0].value;
                    type = formatStr === cellFormat["longdate"] ? "longdate" : formatStr === cellFormat["shortdate"] ? "shortdate" : "date";
                    value = xlObj.XLFormat._format(value, xlObj.XLFormat._getFormatObj({ formatStr: formatStr, type: type }));
                    break;
                case "Time":
                    formatStr = timetype.getSelectedItems()[0].value;
                    value = xlObj.XLFormat._format(value, xlObj.XLFormat._getFormatObj({ formatStr: formatStr, type: cellType[type] }));
                    decimal = 0;
                    break;
                case "Scientific":
                    formatStr = "{" + formattype[type] + decimal + "}";
                    if (xlObj._isDateTime(value))
                        value = xlObj._dateToInt(value);
                    value = xlObj.XLFormat._format(value, xlObj.XLFormat._getFormatObj({ formatStr: formatStr, thousandSeparator: isSeparator, type: cellType[type], decimalPlaces: decimal }));
                    break;
                case "Fraction":
                    if (xlObj._isDateTime(value))
                        value = xlObj._dateToInt(value);
                    value = xlObj.toFraction(value);
                    if (value)
                        value = ej.isNullOrUndefined(value.numerator) ? value.integer : value.integer + " " + value.numerator + "/" + value.denominator;
                    break;
                case "General":
                case "Text":
                    if (xlObj._isDateTime(value))
                        value = xlObj._dateToInt(value);
                    break;
                case "Custom":
                    cValue = customList.getSelectedItems()[0].text;
                    formatObj = xlObj.XLFormat.customFormatParser(cValue);
                    $("#" + xlObj._id + "_fdlg_nTab_custominput").val(cValue);
                    value = xlObj.XLFormat._format(value, formatObj);
                    if (customList.getSelectedItems()[0].index > -1)
                        $("#" + xlObj._id + "_fdlg_nTab_delBtn").data("ejButton")._setModel({ enabled: customList.model.dataSource[customList.getSelectedItems()[0].index].type === "custom" });
                    break;
            }
            $("#" + xlObj._id + "_formatdlg_format_dataMnger").data("NumFormat", type === "Custom" ? formatObj : { type: type.toLowerCase(), decimalPlaces: decimal, thousandSeparator: isSeparator, formatStr: formatStr });
            return value;
        },

        _numberTabChange: function () {
            var xlObj = this.XLObj, numlObj = $("#" + xlObj._id + "_fdlg_nTab_list").data("ejListBox"), familyObj = $("#" + xlObj._id + "_fdlg_fonttab_familylist").data("ejListBox"),
                styelObj = $("#" + xlObj._id + "_fdlg_fonttab_stylelist").data("ejListBox"), sizelObj = $("#" + xlObj._id + "_fdlg_fonttab_sizelist").data("ejListBox");
            numlObj && numlObj._refreshScroller();
            styelObj && styelObj._refreshScroller();
            sizelObj && sizelObj._refreshScroller();
            familyObj && familyObj._refreshScroller();
        },

        _refreshFrmtPropChanges: function () {
            var xlObj = this.XLObj, formattedText;
            formattedText = this._getFormattedText(this._selValue);
            $("#" + xlObj._id + "_fdlg_nTab_sinput").val(formattedText);
        },

        _dlgCFCancel: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_formatdlg").ejDialog("close");
            xlObj.model.showRibbon && xlObj.XLRibbon._updateRibbonIcons();
            xlObj._setSheetFocus();
        },

        _dlgCFOk: function (args) {
            var xlObj = this.XLObj
            if (xlObj.XLFormat._styleDlgClick) {
                $("#" + xlObj._id + "_formatdlg").ejDialog("close");
                xlObj._setSheetFocus();
                return;
            }
            var dataMngr = $("#" + xlObj._id + "_formatdlg_format_dataMnger").data();
            if (args && this._selValue === "Custom" && this._validateCustomFormat())
                return;
            if (xlObj.getObjectLength(dataMngr)) {
                if (xlObj.getObjectLength(dataMngr.NumFormat)) {
                    dataMngr.NumFormat.style = dataMngr.style;
                    xlObj.XLFormat.format(dataMngr.NumFormat);
                }
                else
                    xlObj.XLFormat.format(dataMngr);
            }
            xlObj.model.showRibbon && xlObj.XLRibbon._updateRibbonIcons();
            $("#" + xlObj._id + "_formatdlg").ejDialog("close");
            xlObj._setSheetFocus();
        },

        _customFormatDelete: function () {
            var lbInst = $("#" + this.XLObj._id + "_fdlg_nTab_customtypes").data("ejListBox"), dataSrc = lbInst.model.dataSource;
            dataSrc.splice(lbInst.model.selectedItemIndex, 1);
            lbInst._setModel({ dataSource: dataSrc });
            lbInst.selectItemByIndex(0);
            this._refreshFrmtPropChanges();
        },

        _validateCustomFormat: function (e) {
            var xlObj = e ? this : this.XLObj, lbInst, dataSrc, alertDlg, text = $("#" + xlObj._id + "_fdlg_nTab_custominput").val(), format = xlObj.XLFormat.customFormatParser(text);
            if (e && e.keyCode !== 13)
                return;
            if (xlObj.getObjectLength(format)) {
                lbInst = $("#" + xlObj._id + "_fdlg_nTab_customtypes").data("ejListBox");
                dataSrc = lbInst.model.dataSource;
                if (!xlObj._isValueAlreadyExist(dataSrc, "text", text)) {
                    dataSrc.push({ text: text, type: "custom" });
                    lbInst._setModel({ dataSource: dataSrc });
                }
                $("#" + xlObj._id + "_formatdlg_format_dataMnger").data("NumFormat", format);
                e && xlObj.XLCellFrmtDlg._dlgCFOk();
            }
            else {
                alertDlg = $("#" + xlObj._id + "_alertdlg");
                xlObj._renderAlertDlgContent(alertDlg, "Alert", xlObj._getLocStr("CustomFormatAlert"));
                alertDlg.ejDialog("open");
                return true;
            }
        },

        _onFontFamilySelect: function (args) {
            var xlObj = this.XLObj, text = args.text;
            $("#" + xlObj._id + "_fdlg_fonttab_familytext")[0].value = text;
            $("#" + xlObj._id + "_fdlg_fonttab_sinput")[0].style.fontFamily = text;
            $("#" + xlObj._id + "_fdlg_fonttab_sinput2")[0].style.fontFamily = text;
            $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-family"] = text;
            if (text != "Calibri") {
                $("#" + xlObj._id + "_fdlg_fonttab_normalfont").ejCheckBox({ checked: false });
                $("#" + xlObj._id + "_fdlg_fonttab_normalfont2").ejCheckBox({ checked: false });
            }
        },

        _changeNormalFont: function (args) {
            if (args && args.isChecked) {
                var xlObj = this.XLObj, familyObj = $("#" + xlObj._id + "_fdlg_fonttab_familylist").data("ejListBox"), styelObj = $("#" + xlObj._id + "_fdlg_fonttab_stylelist").data("ejListBox"), sizelObj = $("#" + xlObj._id + "_fdlg_fonttab_sizelist").data("ejListBox"),
                    effectObj = $("#" + xlObj._id + "_fdlg_fonttab_effectstext").data("ejDropDownList"), fontClObj = $("#" + xlObj._id + "_fdlg_fonttab_colortext").data("ejColorPicker"), fillClObj = $("#" + xlObj._id + "_fdlg_fonttab_fillcolortext").data("ejColorPicker"),
                    familyObj2 = $("#" + xlObj._id + "_fdlg_fonttab_family").data("ejDropDownList"), styelObj2 = $("#" + xlObj._id + "_fdlg_fonttab_style").data("ejDropDownList"), sizelObj2 = $("#" + xlObj._id + "_fdlg_fonttab_size").data("ejDropDownList"),
                    effectObj2 = $("#" + xlObj._id + "_fdlg_fonttab_effects").data("ejDropDownList"), fontClObj2 = $("#" + xlObj._id + "_fdlg_fonttab_color").data("ejColorPicker"), fillClObj2 = $("#" + xlObj._id + "_fdlg_fonttab_fillcolor").data("ejColorPicker");
                sizelObj.selectItemByText("11"); styelObj.selectItemByText("Normal"); familyObj.selectItemByText("Calibri"); effectObj.clearText(); sizelObj2.selectItemByText("11"); styelObj2.selectItemByText("Normal");
                familyObj2.selectItemByText("Calibri"); effectObj2.clearText(); fillClObj2.setValue("#FFFFFF"); fontClObj2.setValue("#333333");
                $("#" + xlObj._id + "_fdlg_fonttab_sinput")[0].style.textDecoration = "none";
                $("#" + xlObj._id + "_fdlg_fonttab_sinput2")[0].style.textDecoration = "none";
                fillClObj.setValue("#FFFFFF"); fontClObj.setValue("#333333");
            }
        },

        _onFontStyleSelect: function (args) {
            var xlObj = this.XLObj, text = args.text, inputElem = $("#" + xlObj._id + "_fdlg_fonttab_sinput")[0], inputElem2 = $("#" + xlObj._id + "_fdlg_fonttab_sinput2")[0],
                chkObj = $("#" + xlObj._id + "_fdlg_fonttab_normalfont").data("ejCheckBox"), chkObj1 = $("#" + xlObj._id + "_fdlg_fonttab_normalfont2").data("ejCheckBox");
            $("#" + xlObj._id + "_fdlg_fonttab_styletext")[0].value = text;
            switch (text) {
                case "Bold":
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-weight"] = text;
                    inputElem.style.fontWeight = text;
                    inputElem.style.removeProperty("font-style");
                    inputElem2.style.fontWeight = text;
                    inputElem2.style.removeProperty("font-style");
                    chkObj.option({ checked: false });
                    chkObj1.option({ checked: false });
                    break;
                case "Italic":
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-style"] = text;
                    inputElem.style.fontStyle = text;
                    inputElem.style.removeProperty("font-weight");
                    inputElem2.style.fontStyle = text;
                    inputElem2.style.removeProperty("font-weight");
                    chkObj.option({ checked: false });
                    chkObj1.option({ checked: false });
                    break;
                case "Bold Italic":
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-weight"] = "Bold";
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-style"] = "Italic";
                    inputElem.style.fontStyle = "Italic";
                    inputElem.style.fontWeight = "Bold";
                    inputElem2.style.fontStyle = "Italic";
                    inputElem2.style.fontWeight = "Bold";
                    chkObj.option({ checked: false });
                    chkObj1.option({ checked: false });
                    break;
                case "Normal":
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-weight"] = "normal";
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-style"] = "normal";
                    inputElem.style.removeProperty("font-weight");
                    inputElem.style.removeProperty("font-style");
                    inputElem2.style.removeProperty("font-weight");
                    inputElem2.style.removeProperty("font-style");
            }
        },

        _onFontSizeSelect: function (args) {
            var xlObj = this.XLObj, text = args.text;
            $("#" + xlObj._id + "_fdlg_fonttab_sizetext")[0].value = text;
            $("#" + xlObj._id + "_fdlg_fonttab_sinput")[0].style.fontSize = text + "pt";
            $("#" + xlObj._id + "_fdlg_fonttab_sinput2")[0].style.fontSize = text + "pt";
            $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["font-size"] = text + "pt";
            if (text != "11") {
                $("#" + xlObj._id + "_fdlg_fonttab_normalfont").ejCheckBox({ checked: false });
                $("#" + xlObj._id + "_fdlg_fonttab_normalfont2").ejCheckBox({ checked: false });
            }
        },

        _onFontEffectSelect: function (args) {
            var xlObj = this.XLObj, text = args.text;
            $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["text-decoration"] = text;
            $("#" + xlObj._id + "_fdlg_fonttab_sinput")[0].style.textDecoration = text;
            $("#" + xlObj._id + "_fdlg_fonttab_sinput2")[0].style.textDecoration = text;
            if (text != "None") {
                $("#" + xlObj._id + "_fdlg_fonttab_normalfont").ejCheckBox({ checked: false });
                $("#" + xlObj._id + "_fdlg_fonttab_normalfont2").ejCheckBox({ checked: false });
            }
        },

        _ChangeCPHandler: function (name, args) {
            var xlObj = this.XLObj;
            if (args.type === "open") {
                $("#" + xlObj._id + "_" + name + "_popup").find(".e-buttons, .e-button").hide();
                $("#" + xlObj._id + "_" + name + "_popup").focus();
            }
            else if (args.type === "change") {
                var cpObj = $("#" + xlObj._id + "_" + name).data("ejColorPicker");
                if (name === "fdlg_fonttab_fillcolortext" || name === "fdlg_fonttab_fillcolor") {
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["background-color"] = args.value;
                    $("#" + xlObj._id + "_fdlg_fonttab_sinput").css("background-color", args.value);
                    $("#" + xlObj._id + "_fdlg_fonttab_sinput2").css("background-color", args.value);
                    if (args.value != "#FFFFFF") {
                        $("#" + xlObj._id + "_fdlg_fonttab_normalfont").ejCheckBox({ checked: false });
                        $("#" + xlObj._id + "_fdlg_fonttab_normalfont2").ejCheckBox({ checked: false });
                    }
                }
                else if (name === "fdlg_fonttab_colortext" || name === "fdlg_fonttab_color") {
                    $("#" + xlObj._id + "_formatdlg_format_dataMnger").data().style["color"] = args.value;
                    $("#" + xlObj._id + "_fdlg_fonttab_sinput").css("color", args.value);
                    $("#" + xlObj._id + "_fdlg_fonttab_sinput2").css("color", args.value);
                    if (args.value != "#333333") {
                        $("#" + xlObj._id + "_fdlg_fonttab_normalfont").ejCheckBox({ checked: false });
                        $("#" + xlObj._id + "_fdlg_fonttab_normalfont2").ejCheckBox({ checked: false });
                    }
                }
                if (cpObj) {
                    cpObj.hide();
                    xlObj._dupDetails = true;
                    cpObj.setValue(args.value);
                    xlObj._dupDetails = false;
                }
            }
        },

        _createNumList: function (categories, $left) {
            var xlObj = this.XLObj, numbertabId = xlObj._id + "_fdlg_nTab", $tdlbl, $ddlInput, $listUl, $drpdiv = ej.buildTag("div.e-ss-drpdiv");
            $ddlInput = ej.buildTag("input#" + numbertabId + "_input");
            $drpdiv.append($ddlInput)
            $("#" + xlObj._id + "_formatdlg_number").prepend($drpdiv);
            $ddlInput.ejDropDownList({ dataSource: categories, cssClass: "e-ss-num-format", width: "100%", fields: { id: "value", text: "text", value: "text" }, select: $.proxy(this._onNumFormatSelect, this), selectedItemIndex: 0 });

            $tdlbl = ej.buildTag("label#" + numbertabId + "_clabel.e-dlg-fields", xlObj._getLocStr("Category"));
            xlObj.element.find(".e-ss-lefttopdiv").append($tdlbl);
            $listUl = ej.buildTag("ul#" + numbertabId + "_list");
            $left.append($listUl);
            $listUl.ejListBox({
                selectedItemIndex: "0", width: "120", height: "250", dataSource: categories,
                fields: { text: "text", value: "value" }, select: $.proxy(this._onNumFormatSelect, this),
                allowMultiSelection: false
            });
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.shape = function (obj) {
        this.XLObj = obj;
        this._imgX = 0;
        this._imgY = 0;
        this._imgOffsetleft = 0;
        this._imgOffsetTop = 0;
        this._shapeType = "img";
        this._shapeROStart = false;
        this._shapeRSStart = false;
        this._imgRSWStart = false;
        this._imgRSEStart = false;
        this._imgRSNStart = false;
        this._imgRSSStart = false;
        this._changePicture = false;
        this._picCellIdx = {};
        this._insertShape = false;
        this._isRowGreater = false;
    };

    ej.spreadsheetFeatures.shape.prototype = {
        _insertPicture: function (e) {
            var xlObj = this.XLObj, imgData = xlObj._browserDetails.name === "msie" && parseInt(xlObj._browserDetails.version) < 10 ? e.responseText : e.xhr.response;
            if (imgData.startsWith("Invalid"))
                xlObj._showAlertDlg("Alert", "ImageValAlert");
            else {
                var sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), left, top;
                if (this._changePicture)
                    this.changePicture(null, imgData);
                else {
                    var activeCell = xlObj.getActiveCell(), picSettings = xlObj.model.pictureSettings;
                    var height = picSettings.height, width = picSettings.width;
                    left = sheet._colWidthCollection[activeCell.colIndex];
                    top = sheet._rowHeightCollection[activeCell.rowIndex];
                    this._insertShape = true;
                    this._createPicture(sheetIdx, activeCell, imgData, top, left, width, height);
                }
            }
        },
        changePicture: function (pictureId, url) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), imgElem, left, top, cellIdx, shapeMngr, shapeObj, details;
            imgElem = pictureId ? $('#' + pictureId).get(0) : xlObj.getSheetElement(sheetIdx).find(".e-ss-activeimg").get(0);
            left = imgElem.offsetLeft;
            top = imgElem.offsetTop;
            cellIdx = this._getCellIndexFromOffset(top, left);
            shapeMngr = sheet.shapeMngr;
            $(imgElem).css('background-image', "url('" + url + "')");
            shapeObj = shapeMngr.picture[imgElem.id];
            details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "picture", action: "changepicture", id: $(imgElem).attr("id"), cell: cellIdx, prev: { img: shapeMngr.sharedPics[shapeObj.data], data: shapeObj.data, pcIdx: imgElem.id }, cur: { img: url, pcIdx: imgElem.id } };
            if (shapeMngr.sharedPics.indexOf(url) === -1)
                shapeMngr.sharedPics.push(url);
            shapeObj.data = shapeMngr.sharedPics.indexOf(url);
            details.cur.data = shapeObj.data;
            this._changePicture = false;
            xlObj._setSheetFocus();
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },
        setPicture: function (range, url, width, height, top, left) {
            var xlObj = this.XLObj, rowIdx, colIdx;
            if (!xlObj.model.pictureSettings.allowPictures || xlObj.model.isReadOnly)
                return;
            range = xlObj._getRangeArgs(range, "object");
            rowIdx = range[0];
            colIdx = range[1];
            if (xlObj.model.allowLockCell && xlObj._isCellProtected(rowIdx, colIdx, false))
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), activeCell, picSettings = xlObj.model.pictureSettings;
            height = height ? height : picSettings.height;
            width = width ? width : picSettings.width;
            if (xlObj._isRowViewable(sheetIdx, rowIdx)) {
                activeCell = xlObj.getCell(rowIdx, colIdx)[0];
                top = top ? top : activeCell.offsetTop;
                left = left ? left : activeCell.offsetLeft;
            }
            else {
                top = top ? top : 0;
                left = left ? left : 0;
            }
            return this._createPicture(sheetIdx, { rowIndex: rowIdx, colIndex: colIdx }, url, top, left, width, height);
        },

        resetPicture: function (pictureId, action) {
            var xlObj = this.XLObj, elem, regx, details, imgStyle
            elem = pictureId ? $('#' + pictureId) : xlObj.element.find(".e-ss-activeimg"), regx = new RegExp("\\b" + "e-shapebdr" + ".*?\\b", "g");
            details = { sheetIndex: xlObj.getActiveSheetIndex(), reqType: "shape", shapeType: "picture", action: "resetpicture", id: $(elem).attr("id"), actionType: action };
            xlObj._dupDetails = true;
            if (!ej.isNullOrUndefined(elem[0].className.match(regx))) {
                imgStyle = xlObj.XLShape._getImgStyleFromHashCode(elem[0].className.match(regx)[0]);
            }
            details.prev = imgStyle ? { bcolor: imgStyle["border-color"], bstyle: imgStyle["border-style"], bwidth: imgStyle["border-width"] } : {};
            elem[0].className = elem[0].className.replace(regx, "");
            details.cur = { bcolor: elem.css("border-color"), bstyle: elem.css("border-style"), bwidth: elem.css("border-width") };
            if (action != "resetpicture") {
                details.prev.width = elem.css("width");
                details.prev.height = elem.css("height");
                elem.css({ width: xlObj.model.pictureSettings.width, height: xlObj.model.pictureSettings.height });
                details.cur.width = elem.css("width");
                details.cur.height = elem.css("height");
                xlObj.XLShape._updateShapeObj(elem[0]);
                xlObj._hasClass(elem[0], 'e-ss-activeimg') && xlObj.XLRibbon._formatTabUpdate();
            }
            xlObj._dupDetails = false;
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        _createPicture: function (sheetIdx, activeCell, imgData, top, left, width, height, cnt, bcolor, bstyle, bwidth, pic) {
            bcolor = bcolor ? bcolor : "transparent";
            bstyle = bstyle ? bstyle : "solid";
            bwidth = bwidth ? bwidth : "1px";
            var xlObj = this.XLObj, evtArgs, sheet = xlObj.getSheet(sheetIdx), args = {
                sheetIndex: sheetIdx, targetCell: activeCell, top: top, left: left,
                width: width, height: height, bcolor: bcolor, bstyle: bstyle, bwidth: bwidth, reqType: "picture", add: "add"
            }, id;
            evtArgs = { sheetIndex: args.sheetIndex, targetCell: args.targetCell, top: args.top, left: args.left, width: args.width, height: args.height, bcolor: args.bcolor, bstyle: args.bstyle, bwidth: args.bwidth, reqType: "picture", action: "add" };
            if (xlObj._trigActionBegin(evtArgs))
                return;
            !sheet._isImported && (this._insertShape = true);
            top = args.top;
            left = args.left;
            width = args.width;
            height = args.height;
            cnt = ej.isNullOrUndefined(cnt) ? (xlObj.model.allowCharts && xlObj.XLChart._shapeCnt) : cnt;
            xlObj._isExport && (pic.cnt = cnt);
            id = xlObj._id + "_picture" + cnt;
            var details;
            activeCell = this._getCellIndexFromOffset(top, left, sheetIdx);
            var rowIdx = activeCell.rowIndex, colIdx = activeCell.colIndex;
            if (!xlObj._isUndoRedo && xlObj.model.allowCharts)
                xlObj.XLChart._shapeCnt++;
            this._updateShapeMngr(activeCell, { "picture": { data: imgData, id: id, height: height, width: width, left: left, top: top, rowIndex: rowIdx, colIndex: colIdx, bwidth: bwidth, bcolor: bcolor, bstyle: bstyle } }, "picture");
            if (!xlObj._isExport)
                this._refreshPictureElement({ top: top, left: left, width: width, height: height, bcolor: bcolor, bstyle: bstyle, bwidth: bwidth, imgData: imgData, cnt: cnt, sheetIdx: sheetIdx });
            xlObj._setSheetFocus();
            if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo && !xlObj._isPaste && !xlObj.XLClipboard._isShape && !xlObj._isExport) {
                details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "picture", action: "create", id: id, actCell: activeCell, img: imgData, cnt: cnt };
                details.position = { top: top, left: left, height: height, width: width };
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details)
            }
            xlObj.model.showRibbon && xlObj.XLRibbon._formatTabUpdate();
            return id;
        },

        _refreshPictureElement: function (cellObj) {
            var xlObj = this.XLObj, $elem;
            xlObj._getJSSheetContent(cellObj.sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").append(ej.buildTag("div.e-ss-object e-ss-image", "", "", { id: xlObj._id + "_picture" + cellObj.cnt }));
            $elem = $("#" + xlObj._id + "_picture" + cellObj.cnt);
            $elem.data("parentID", xlObj._id);
            $elem.css({ 'background-image': "url('" + cellObj.imgData + "')", height: cellObj.height, width: cellObj.width, left: cellObj.left, top: cellObj.top });
            var borderCss = cellObj.bwidth + " " + cellObj.bstyle + " " + cellObj.bcolor;
            var hashCode = this._getImgBorderHashCode({ "border-color": cellObj.bcolor, "border-style": cellObj.bstyle, "border-width": cellObj.bwidth });
            if (xlObj.model.allowCellFormatting)
                xlObj.XLFormat._writeCssRules(hashCode, xlObj.XLFormat._getCssPropertyAsString({ "border": { "left": borderCss, "right": borderCss, "top": borderCss, "bottom": borderCss } }));
            $elem.addClass(hashCode);
            this._selectImg($elem);
        },

        _shapeMouseDown: function (e) {
            e.preventDefault();
            var xlObj = this.XLObj, actElemId = document.activeElement.id;
            if (xlObj._isTouchEvt)
                this._imgMouseMove(e);
            if (actElemId.indexOf("PictureHeight") > -1 || actElemId.indexOf("PictureWidth") > -1)
                xlObj._setSheetFocus();
            var prop, id = e.target.id, $trgt = $(e.target), imgElem = $trgt.get(0), left = imgElem.offsetLeft, top = imgElem.offsetTop, xy = xlObj._setXY(e);
            this._selectImg($trgt);
            this._picCellIdx = this._getCellIndexFromOffset(top, left);
            this._imgOffsetleft = left;
            this._imgOffsetTop = top;
            this._imgX = xy[0];
            this._imgY = xy[1];
            this._shapeType = id.indexOf("chart") > -1 ? "chart" : "img";
            this._shapeROStart = true;
            if ($trgt.css("cursor") === "move")
                this._shapeROStart = true;
            else if ($trgt.css("cursor") === "col-resize" || $trgt.css("cursor") === "row-resize") {
                this._shapeRSStart = true;
                xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-imgvisual").css({ left: left, top: top, height: $trgt.height(), width: $trgt.width() });
            }
            if (this._shapeType === "chart") {
                prop = xlObj.XLChart._getShapeObj(id, this._shapeType);
                if (xlObj.getActiveSheetIndex() === prop.dataSheetIdx && !prop.isChartSeries)
                    xlObj.XLChart._focusChartRange(prop.xAxis.range, prop.yAxis.range, prop.legend.range);
            }
            if (xlObj.model.enableContextMenu && xlObj.XLCMenu._isMenuOpened)
                xlObj.XLCMenu.hideCMenu();
        },

        _imgKeyDown: function (e) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), $trgt = xlObj._getContent(sheetIdx).find(".e-ss-activeimg"), imgElem = $trgt.get(0);
            var left = imgElem.offsetLeft, top = imgElem.offsetTop, height, width;
            this._shapeType = $trgt[0].id.indexOf("chart") > -1 ? "chart" : "img";
            if ($trgt[0].id.indexOf("_S"))
                this._shapeType = "sparkline";
            this._picCellIdx = this._getCellIndexFromOffset(top, left);
            if (!e.shiftKey && !e.ctrlKey) {
                switch (e.keyCode) {
                    case 39:
                        //right
                        e.preventDefault();
                        $trgt.css({ left: left + 2 });
                        this._updateShapeObj(imgElem);
                        break;
                    case 37:
                        //left
                        e.preventDefault();
                        if (left > 1)
                            $trgt.css({ left: left - 2 });
                        this._updateShapeObj(imgElem);
                        break;
                    case 38:
                        //up
                        e.preventDefault();
                        if (top > 1)
                            $trgt.css({ top: top - 2 });
                        this._updateShapeObj(imgElem);
                        break;
                    case 40:
                        //down
                        e.preventDefault();
                        $trgt.css({ top: top + 2 });
                        this._updateShapeObj(imgElem);
                        break;
                }
                this._onKeyscrollShape(sheetIdx, $trgt, e);
            } else if (e.shiftKey && !e.ctrlKey) {
                if (e.keyCode === 39 || e.keyCode === 38) { //right or up
                    e.preventDefault();
                    height = $trgt.height() + 2;
                    width = $trgt.width() + 2;
                    if (height < 400 && width < 600)
                        $trgt.css({ width: width, height: height });
                    this._updateShapeObj(imgElem);
                    xlObj.XLRibbon._formatTabUpdate();
                } else if (e.keyCode === 37 || e.keyCode === 40) { //left or down
                    e.preventDefault();
                    height = $trgt.height() - 2;
                    width = $trgt.width() - 2;
                    if (height > 40 && width > 60)
                        $trgt.css({ width: width, height: height });
                    this._updateShapeObj(imgElem);
                    xlObj.XLRibbon._formatTabUpdate();
                }
            }
            if (e.keyCode === 46) { //delete
                e.preventDefault();
                var changed = false;
                if (xlObj.XLClipboard._isShape) {
                    xlObj.XLClipboard._isShape = false;
                    changed = true;
                }
                this._deleteShape(sheetIdx, $trgt);
                (changed) && (xlObj.XLClipboard._isShape = true);
            }
        },

        _shapeMouseUp: function (e) {
            var xlObj = this.XLObj, args = {};
            if (xlObj._isExport)
                return;
            var cellIdx, touchend, chart = "chart", details, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), $content = xlObj._getContent(sheetIdx), $actImg = $content.find(".e-ss-activeimg"), $visualImg = $content.find(".e-ss-imgvisual");
            var $trgt = $(e.target), imgElem = $trgt.get(0);
            if ($trgt.hasClass("e-ss-picture") || $trgt[0].id.indexOf(xlObj._id + "_picture") > -1)
                if (xlObj.model.showRibbon)
                    xlObj.XLRibbon._formatTabUpdate();
            if ((imgElem.localName === "svg" || imgElem.localName === "rect" || imgElem.localName === "path" || imgElem.localName === "circle") && imgElem && imgElem.id.indexOf("chart") < 0)
                imgElem = $(imgElem).closest("div.e-sparkline")[0];
            else if ($(imgElem).hasClass("e-sparkline"))
                imgElem = imgElem;
            if (imgElem && imgElem.id.indexOf(chart) > -1 && imgElem.id.indexOf("Ribbon") < 0)
                imgElem = (imgElem.id.indexOf('_svg') > -1) ? ($(imgElem).parents(".e-ss-object").get(0)) : imgElem;
            ($actImg.length < 1) && (this._shapeROStart = false);
            if (!(imgElem.id.indexOf("sparkline") > -1) && !(imgElem.className.indexOf('e-ss-imgvisual') > -1) && !(imgElem.className.indexOf('e-ss-object') > -1)) {
                if (this._shapeROStart)
                    imgElem = $actImg[0];
                if (this._shapeRSStart)
                    imgElem = $visualImg[0];
            }
            if (this._shapeROStart) {
                if (xlObj._isTouchEvt) {
                    touchend = xlObj._getOriginalEvt(e);
                    imgElem = document.elementFromPoint(touchend.clientX, touchend.clientY);
                }
                if (!xlObj._isUndoRedo) {
                    if (parseInt($actImg.css("top")) !== imgElem.offsetTop || parseInt($actImg.css("left")) !== imgElem.offsetLeft) {
                        details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", action: "edit", actionType: "reorder", id: $($actImg).attr("id"), visualImg: $visualImg, trgt: $trgt };
                        details.prev = { top: parseInt($actImg.css("top")), left: parseInt($actImg.css("left")), height: parseInt($actImg.css("height")), width: parseInt($actImg.css("width")) };
                        details.cur = { top: imgElem.offsetTop, left: imgElem.offsetLeft, height: $trgt.height(), width: $trgt.width() };
                        if ($actImg[0].id.indexOf(chart) > -1) {
                            cellIdx = xlObj._getIdxWithOffset(details.cur.top, details.cur.left, true);
                            sheet.shapeMngr[chart][$actImg[0].id]["rowIndex"] = cellIdx.rowIdx;
                            sheet.shapeMngr[chart][$actImg[0].id]["colIndex"] = cellIdx.colIdx;
                        }
                        if (xlObj._checkIndicesInContainer(sheetIdx, this._picCellIdx.rowIndex, this._picCellIdx.colIndex)) {
                            details.obj = $.extend(true, {}, xlObj._dataContainer.sheets[sheetIdx][this._picCellIdx.rowIndex][this._picCellIdx.colIndex]);
                            xlObj._completeAction(details);
                            xlObj._trigActionComplete(details);
                        }
                    }
                }
                $actImg.css({ left: imgElem.offsetLeft, top: imgElem.offsetTop });
                this._updateShapeObj(imgElem);
                $visualImg.removeClass("e-ss-picture").hide();
            } else if (this._shapeRSStart) {
                if (!xlObj._isUndoRedo) {
                    if (xlObj._isTouchEvt)
                        imgElem = $visualImg[0];
                    if (imgElem.className.indexOf("e-ss-imgvisual") < 0 && $visualImg.length > 0)
                        (this._shapeROStart) && (imgElem = $visualImg[0]);
                    $trgt = $(imgElem);
                    if ((parseInt($actImg.css("height")) !== $trgt.height() || parseInt($actImg.css("width")) !== $trgt.width()) && xlObj._checkIndicesInContainer(sheetIdx, this._picCellIdx.rowIndex, this._picCellIdx.colIndex)) {
                        details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", action: "edit", actionType: "resize", id: $($actImg).attr("id"), visualImg: $visualImg, trgt: $trgt };
                        details.prev = { top: parseInt($actImg.css("top")), left: parseInt($actImg.css("left")), height: parseInt($actImg.css("height")), width: parseInt($actImg.css("width")) };
                        details.cur = { top: imgElem.offsetTop, left: imgElem.offsetLeft, height: $trgt.height(), width: $trgt.width() };
                        details.obj = $.extend(true, {}, xlObj._dataContainer.sheets[sheetIdx][this._picCellIdx.rowIndex][this._picCellIdx.colIndex]);
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                }
                if (details)
                    $actImg.css({ left: imgElem.offsetLeft, top: imgElem.offsetTop, height: $trgt.height(), width: $trgt.width() });
                this._updateShapeObj(imgElem);
                $visualImg.removeClass("e-ss-picture").hide();
                if (this._shapeType === "img" && xlObj.model.showRibbon)
                    xlObj.XLRibbon._formatTabUpdate();
                if (this._shapeType === chart) {
                    xlObj.XLChart.resizeChart($actImg.attr("id"), $trgt.height(), $trgt.width());
                    if (xlObj.model.showRibbon)
                        xlObj.XLRibbon._chartDesignTabUpdate($("#" + $actImg.attr("id")));
                }
                args.event = e;
                args.target = e.target;
                if (details && details.cur && details.prev) {
                    args.newHeight = details.cur.height;
                    args.newWidth = details.cur.width;
                    args.oldHeight = details.prev.height;
                    args.oldWidth = details.prev.width;
                }
                args.reqType = imgElem.id.indexOf(chart) > -1 ? "chart-resize" : "picture-resize";
                if (this.XLObj._trigger("resizeEnd", args)) {
                    this._refreshImgResizing();
                    this._shapeRSStart = false;
                    return;
                }
            }
            this._refreshImgResizing();
            this._shapeROStart = this._shapeRSStart = false;
        },

        _imgMouseMove: function (e) {
            var xlObj = this.XLObj, args = {};
            if (xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activeimg").length) {
                e.preventDefault();
                var sheetIdx = xlObj.getActiveSheetIndex(), $content = xlObj._getContent(sheetIdx), $actImg = $content.find(".e-ss-activeimg"), $visualImg = $content.find(".e-ss-imgvisual");
                var imgElem = $actImg.get(0), location = imgElem.getBoundingClientRect(), xy = xlObj._setXY(e), x = xy[0], y = xy[1], extra, left, top;
                if (this._shapeROStart) {
                    if (this.XLObj._trigger("dragShape", e))
                        return false;
                    $visualImg.show();
                    if (imgElem.id.indexOf("picture") > -1)
                        $visualImg.addClass("e-ss-picture");
                    left = x - (this._imgX - this._imgOffsetleft);
                    top = y - (this._imgY - this._imgOffsetTop);
                    if (left > -1 && top > -1)
                        $visualImg.css({ left: left, top: top, height: $actImg.height(), width: $actImg.width() });
                    //this._scrollShape(sheetIdx, $visualImg, x, y); // shape resize in scrolling - consider it later
                } else {
                    var width = $visualImg.width(), height = $visualImg.height(), offsetWidth = imgElem.offsetWidth, offsetHeight = imgElem.offsetHeight,
                        vCont = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"), hScroll = $content.find(".e-hscrollbar").data("ejScrollBar"), vScroll = $content.find(".e-vscrollbar").data("ejScrollBar");
                    if (this._shapeRSStart) {
                        args.event = e;
                        args.target = e.target;
                        args.height = $actImg.height();
                        args.width = $actImg.width();
                        args.reqType = imgElem.id.indexOf("chart") > -1 ? "chart-resize" : "picture-resize";
                        if (this.XLObj._trigger("resizeStart", args)) {
                            this._shapeRSStart = false;
                            return;
                        }
                        $visualImg.show();
                        if (imgElem.id.indexOf("picture") > -1)
                            $visualImg.addClass("e-ss-picture");
                        if ($actImg.css("cursor") === "col-resize" || $actImg.css("cursor") === "row-resize") {
                            switch (true) {
                                case this._imgRSWStart:
                                    extra = this._imgX - x;
                                    left = $visualImg[0].offsetLeft - extra;
                                    if (left > -1) {
                                        $visualImg.css({ width: width + extra, left: left });
                                        this._imgX = x;
                                    }
                                    break;
                                case this._imgRSEStart:
                                    extra = this._imgX - x;
                                    if (xlObj.model.scrollSettings.allowScrolling && (width - extra + $visualImg[0].offsetLeft + 5) < (vCont.width() + hScroll.value())) {
                                        $visualImg.css({ width: width - extra });
                                        this._imgX = x;
                                    }
                                    break;
                                case this._imgRSNStart:
                                    extra = this._imgY - y;
                                    top = $visualImg[0].offsetTop - extra;
                                    if (top > -1) {
                                        $visualImg.css({ height: height + extra, top: top });
                                        this._imgY = y;
                                    }
                                    break;
                                case this._imgRSSStart:
                                    extra = this._imgY - y;
                                    if (xlObj.model.scrollSettings.allowScrolling && (height - extra + $visualImg[0].offsetTop + 5) < (vCont.height() + vScroll.value())) {
                                        $visualImg.css({ height: height - extra });
                                        this._imgY = y;
                                    }
                                    break;
                            }
                        }
                        // this._scrollShape(sheetIdx, $visualImg, x, y); // shape resize in scrolling - consider it later
                    } else {
                        this._refreshImgResizing();
                        if ((x <= (location.left + (xlObj._isTouchEvt ? 20 : 4))) && (x >= location.left)) {
                            $actImg.addClass("e-ss-imgcresize");
                            this._imgRSWStart = true;
                        } else if ((x <= (location.left + offsetWidth)) && (x >= location.left + offsetWidth - (xlObj._isTouchEvt ? 20 : 4))) {
                            $actImg.addClass("e-ss-imgcresize");
                            this._imgRSEStart = true;
                        } else {
                            $content.find(".e-ss-imgcresize").removeClass("e-ss-imgcresize");
                        }

                        if ((y <= (location.top + (xlObj._isTouchEvt ? 20 : 4))) && (y >= location.top)) {
                            $actImg.addClass("e-ss-imgrresize");
                            this._imgRSNStart = true;
                        } else if ((y <= (location.top + offsetHeight)) && (y >= location.top + offsetHeight - (xlObj._isTouchEvt ? 20 : 4))) {
                            $actImg.addClass("e-ss-imgrresize");
                            this._imgRSSStart = true;
                        } else {
                            $content.find(".e-ss-imgrresize").removeClass("e-ss-imgrresize");
                        }
                    }
                }
            }
        },

        _deleteShape: function (sheetIdx, $trgt) {
            var selCell, xlObj = this.XLObj, cellIdx = $trgt[0].id.indexOf("_S") > -1 ? { rowIndex: $trgt[0].id.replace(xlObj._id, "").split("_")[3], colIndex: $trgt[0].id.replace(xlObj._id, "").split("_")[4] } : this._picCellIdx, container = xlObj._dataContainer, sheet = xlObj.getSheet(sheetIdx), shapeMngr = sheet.shapeMngr, cellObj = container.sheets[sheetIdx][cellIdx.rowIndex][cellIdx.colIndex], details;
            var xlId = $trgt.data("parentID"), shapeId = $trgt[0].id.indexOf("_S") > -1 ? $trgt[0].id : $trgt.get(0).id.replace(xlId + "_", ""), shapeType = $trgt[0].id.indexOf("_S") > -1 ? 'sparkline' : shapeId.replace(/[0-9]/g, ''), imgElem = $trgt.get(0), objIdx, shapeObj = $trgt[0].id.indexOf("_S") > -1 ? shapeMngr[shapeType][$trgt[0].id] : shapeMngr[shapeType][cellObj[shapeType][0]];
            if (!xlObj._isUndoRedo)
                if (!xlObj._isPaste && !xlObj.XLClipboard._isShape) {
                    details = { sheetIndex: sheetIdx, id: imgElem.id, picIndex: imgElem.id, reqType: "shape", shapeType: shapeType, action: "remove", options: shapeObj, range: shapeObj.range, img: shapeMngr.sharedPics[shapeObj.data], bcolor: shapeObj.bcolor, bstyle: shapeObj.bstyle, bwidth: shapeObj.bwidth };
                    details.actCell = { rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex };
                    details.position = { height: shapeObj.height, width: shapeObj.width, top: shapeObj.top, left: shapeObj.left };
                    details.cnt = shapeId.replace(/[a-z]/g, '');
                    xlObj._completeAction(details);
                    xlObj._trigActionComplete(details);
                }
            cellObj[shapeType].some(function (obj, i) {
                if (imgElem.id === shapeMngr[shapeType][cellObj[shapeType][i]].id) {
                    objIdx = i;
                    return true;
                }
                return false;
            });
            if (Object.keys(cellObj).length < 2 && cellObj[shapeType].length < 2) {
                delete container.sheets[sheetIdx][cellIdx.rowIndex][cellIdx.colIndex];
                if (xlObj.getObjectLength(container.sheets[sheetIdx][cellIdx.rowIndex]) < 1)
                    delete container.sheets[sheetIdx][cellIdx.rowIndex]
            }
            else if (cellObj[shapeType].length < 2)
                delete cellObj[shapeType];
            else
                cellObj[shapeType].splice(objIdx, 1);
            delete shapeMngr[shapeType][imgElem.id];
            selCell = { rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex };
            if (sheetIdx === xlObj._getSheetIndex()) { // check for cut paste sheet to sheet
                xlObj.setActiveCell(cellIdx.rowIndex, cellIdx.colIndex);
                xlObj.performSelection(selCell, selCell);
            }
            $trgt.remove();
            if (xlObj.model.allowFormulaBar)
                xlObj.updateFormulaBar();
            if (xlObj.model.showRibbon) {
                if (shapeType === "picture")
                    xlObj.XLRibbon._toggleFormatTab();
                else
                    xlObj.XLRibbon._toggleChartDesignTab();
            }
            if (sheet._isChartBorderDrawn)
                xlObj.XLChart._clearChartRange(xlObj._arrayAsString(xlObj._chartBorder));
        },

        _selectImg: function (elem) {
            this.XLObj._getContent(this.XLObj.getActiveSheetIndex()).find(".e-ss-activeimg").removeClass("e-ss-activeimg");
            elem.addClass("e-ss-activeimg");
            this.XLObj.XLSelection._cleanUp(true);
            if (this.XLObj.model.allowFormulaBar)
                this.XLObj.updateFormulaBar();
        },

        _refreshImgResizing: function () {
            this._imgRSEStart = false;
            this._imgRSWStart = false;
            this._imgRSNStart = false;
            this._imgRSSStart = false;
        },

        _getShapePropeties: function (cellIdx, id, type) {
            var i, data = this.XLObj.XLEdit.getPropertyValue(cellIdx.rowIndex, cellIdx.colIndex, type);
            while (i in data) {
                if (data[i].id === id)
                    return data[i];
                else
                    return;
            }
        },

        _updateShapeMngr: function (cell, shapeObj, type, shtIdx) {
            var shapeIdx, obj = {}, xlObj = this.XLObj, sheetIdx = shtIdx || xlObj.getActiveSheetIndex(),
                shapeMngr = xlObj.getSheet(sheetIdx).shapeMngr, shape = shapeMngr[type];
            shape[shapeObj[type].id] = ($.extend(true, {}, shapeObj[type]));
            if (type === "picture") {
                if (shapeMngr.sharedPics.indexOf(shapeObj[type].data) < 0)
                    shapeMngr.sharedPics.push(shapeObj[type].data);
                shapeIdx = shapeMngr.sharedPics.indexOf(shapeObj[type].data);
                shape[shapeObj[type].id].data = shapeIdx;
            }
            if (xlObj._isPaste || this._insertShape || xlObj.XLClipboard._isShape || xlObj.isImport || xlObj.model.isImport || !xlObj.getSheet(sheetIdx)._isUpdated) {
                obj[type] = shapeObj[type].id;
                xlObj.XLEdit._updateDataContainer(cell, { dataObj: obj, sheetIdx: sheetIdx });
                this._insertShape = false;
            }
        },

        _updateShapeObj: function (imgElem) {
            var oldElem, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), container = xlObj._dataContainer, shapeObj, cellObj;
            var chart = "chart", type = this._shapeType === "img" ? "picture" : chart, cellIdx, imgElemId;
            var sheet = xlObj.getSheet(sheetIdx), shapeMngr = sheet.shapeMngr, cellPicIdx, cObj = {}, actImg = xlObj._getContent(sheetIdx).find(".e-ss-activeimg");
            if ((imgElem.id.indexOf("Column") > -1) || (imgElem.id.indexOf("Line") > -1) || (imgElem.id.indexOf("Winloss") > -1)) {
                imgElemId = imgElem.id.replace(xlObj._id, "");
                cellIdx = { rowIndex: parseInt(imgElemId.split("_")[3]), colIndex: parseInt(imgElemId.split("_")[4]) };
                type = "sparkline";
            }
            else
                cellIdx = this._picCellIdx;
            if (!xlObj.getObjectLength(this._picCellIdx))
                cellIdx = this._picCellIdx = this._getCellIndexFromOffset(imgElem.offsetTop, imgElem.offsetLeft);
            oldElem = actImg.length ? actImg : xlObj._getContent(sheetIdx).find('#' + imgElem.id);
            cellObj = container.sheets[sheetIdx][cellIdx.rowIndex][cellIdx.colIndex];
            if (!cellObj || !cellObj[type])
                return;
            shapeObj = shapeMngr[type][oldElem[0].id];
            cellObj[type].some(function (obj, i) {
                if (oldElem[0].id === shapeMngr[type][cellObj[type][i]].id) {
                    cellPicIdx = i;
                    return true;
                }
                return false;
            });
            if (ej.isNullOrUndefined(cellPicIdx))
                return;
            cObj[type] = cellObj[type][cellPicIdx];
            if (xlObj.getObjectLength(cellObj) < 2 && cellObj[type].length < 2)
                delete container.sheets[sheetIdx][cellIdx.rowIndex][cellIdx.colIndex];
            else if (cellObj[type].length < 2)
                delete container.sheets[sheetIdx][cellIdx.rowIndex][cellIdx.colIndex][type];
            else
                container.sheets[sheetIdx][cellIdx.rowIndex][cellIdx.colIndex][type].splice(cellPicIdx, 1);
            if ((imgElem.id.indexOf("Column") > -1) || (imgElem.id.indexOf("Line") > -1) || (imgElem.id.indexOf("Winloss") > -1)) {
                imgElemId = imgElem.id.replace(xlObj._id, "");
                this._picCellIdx = cellIdx = { rowIndex: parseInt(imgElemId.split("_")[3]), colIndex: parseInt(imgElemId.split("_")[4]) };
            }
            else
                this._picCellIdx = cellIdx = this._getCellIndexFromOffset(imgElem.offsetTop, imgElem.offsetLeft);
            if (shapeObj.shapeType != "sparkline") {
                shapeObj.height = oldElem.height();
                shapeObj.width = oldElem.width();
            }
            shapeObj.left = (sheet._isFreezed && xlObj._isFrozen(xlObj.getFrozenColumns())) ? xlObj.XLFreeze._getFreezeHidenDim() + oldElem[0].offsetLeft : oldElem[0].offsetLeft;
            shapeObj.top = (sheet._isFreezed && xlObj._isFrozen(xlObj.getFrozenRows())) ? xlObj.XLFreeze._getFreezeHidenDim(true) + oldElem[0].offsetTop : oldElem[0].offsetTop;
            shapeObj.rowIndex = cellIdx.rowIndex;
            shapeObj.colIndex = cellIdx.colIndex;
            xlObj.XLEdit._updateDataContainer({ rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex }, { dataObj: cObj });
        },

        changePictureBorder: function (pictureId, width, style, color) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), imgElem = $('#' + pictureId)[0], left = imgElem.offsetLeft, top = imgElem.offsetTop, details;
            var cellIdx = this._getCellIndexFromOffset(top, left), shapeMngr = xlObj.getSheet(sheetIdx).shapeMngr, shapeObj, picIdx, regx = new RegExp("\\b" + "e-shapebdr" + ".*?\\b", "g");
            shapeObj = shapeMngr.picture[imgElem.id];
            details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "picture", action: "border", id: $(xlObj.getSheetElement(sheetIdx).find(".e-ss-activeimg")).attr("id"), prevClass: ej.isNullOrUndefined(imgElem.className.match(regx)) ? imgElem.className : imgElem.className.match(regx)[0], picIdx: picIdx, cellIdx: cellIdx };
            var borderCss = width + " " + style + " " + color;
            var hashCode = this._getImgBorderHashCode({ "border-color": color, "border-style": style, "border-width": width });
            if (xlObj.model.allowCellFormatting)
                xlObj.XLFormat._writeCssRules(hashCode, xlObj.XLFormat._getCssPropertyAsString({ "border": { "left": borderCss, "right": borderCss, "top": borderCss, "bottom": borderCss } }));
            shapeObj.bcolor = color;
            shapeObj.bstyle = style;
            shapeObj.bwidth = width;
            if (imgElem.className.match(regx))
                imgElem.className = imgElem.className.replace(regx, "");
            $(imgElem).addClass(hashCode);
            details.curClass = hashCode;
            details.borderProp = this._getImgStyleFromHashCode(hashCode);
            if (!xlObj._dupDetails && !xlObj._isUndoRedo) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _getCellIndexFromOffset: function (top, left, sheetIdx, isOverflow) {
            var i, len, value = 0, obj = {}, rHght, xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj._getSheetIndex(sheetIdx));
            if (!ej.isNullOrUndefined(top)) {
                obj.rowIndex = xlObj._getMinRowIdx(sheet);
                for (i = 0, len = sheet._rowHeightCollection.length; i < len; i++) {
                    rHght = sheet._rowHeightCollection[i];
                    value = xlObj.isUndefined(rHght) ? (value + xlObj.model.rowHeight) : rHght;
                    if (value > top) {
                        obj.rowIndex = i - 1;
                        break;
                    }
                    if (i == (len - 1))
                        len++;
                }
            }
            if (!ej.isNullOrUndefined(left)) {
                obj.colIndex = 0;
                for (i = 0, value = 0, len = sheet.columnsWidthCollection.length; i < len; i++) {
                    value += (sheet.columnsWidthCollection[i] === 0 && isOverflow) ? sheet.hideColsCollection[i] : sheet.columnsWidthCollection[i];
                    if (value > left) {
                        obj.colIndex = i;
                        break;
                    }
                }
            }
            return obj;
        },

        _getImgBorderHashCode: function (style) {
            var xlObj = this.XLObj, code = "";
            "border-width" in style && (code = parseInt(style["border-width"]) + "N");
            if (xlObj.model.allowCellFormatting && "border-style" in style)
                code = (code + xlObj.XLFormat._getStyleCode("BorderStyle", style["border-style"]) + "N");
            "border-color" in style && (code = code + style["border-color"].replace("#", ""));
            return "e-shapebdr" + code;
        },

        _getImgStyleFromHashCode: function (code) {
            var style = {}, bStyle = ["", "solid", "dashed", "dotted"];
            code = code || "";
            code = code.replace("e-shapebdr", "").split("N");
            if (code.length > 1) {
                style["border-width"] = code[0] + "px";
                style["border-style"] = bStyle[code[1]];
                style["border-color"] = "#" + code[2];
            }
            return style;
        },

        _scrollShape: function (sheetIdx, $visualImg, x, y) {
            var status = { position: "none", action: "none" }, xlObj = this.XLObj, $content = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content");
            if (((parseInt($visualImg.css('width')) + ($visualImg.offset().left - xlObj._getContent(sheetIdx).find(".e-content").offset().left)) > xlObj._getContent(sheetIdx).find(".e-content").width()) && (this._imgX <= x))
                status = { position: "horizontal", action: "Increment" };
            else if (($visualImg.offset().left - $content.offset().left) <= 0)
                status = { position: "horizontal", action: "Decrement" };
            else if (((parseInt($visualImg.css('height')) + ($visualImg.offset().top - xlObj._getContent(sheetIdx).find(".e-content").offset().top)) > xlObj._getContent(sheetIdx).find(".e-content").height()) && (this._imgY <= y))
                status = { position: "vertical", action: "Increment" };
            else if (($visualImg.offset().top - $content.offset().top) <= 0)
                status = { position: "vertical", action: "Decrement" };
            xlObj.XLSelection._scrollCalculation(sheetIdx, $visualImg.get(0), status);
        },

        _onKeyscrollShape: function (sheetIdx, $trgt, key) {
            var xlObj = this.XLObj, content = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"), hScroll = xlObj._getContent(sheetIdx).find("#hscrollBar").ejScrollBar("instance"), vScroll = xlObj._getContent(sheetIdx).find("#vscrollBar").ejScrollBar("instance");
            if (content.offset().top + content[0].offsetHeight <= ($trgt.offset().top + $trgt[0].offsetHeight) && (key.keyCode === 40 || (key.keyCode === 13 && !key.shiftKey)))
                vScroll.scroll(vScroll.value() + 2, true);
            else if ((($trgt.offset().top - xlObj.model.sheets[sheetIdx]._frozenHeight) <= content.offset().top) && (key.keyCode === 38 || (key.keyCode === 13 && key.shiftKey))) {
                if (vScroll.value() - 2 >= 0)
                    vScroll.scroll(vScroll.value() - 2, true);
            }
            if (content[0].offsetWidth <= ($trgt.offset().left + $trgt[0].offsetWidth) && (key.keyCode === 39 || (key.keyCode === 9 && !key.shiftKey)))
                hScroll.scroll(hScroll.value() + 2, true);
            else if ((($trgt.offset().left - xlObj.model.sheets[sheetIdx]._frozenWidth) <= content.offset().left) && (key.keyCode === 37 || (key.keyCode === 9 && key.shiftKey))) {
                if (hScroll.value() - 2 >= 0)
                    hScroll.scroll(hScroll.value() - 2, true);
            }
        },

        _refreshShapePosOnResize: function (changeIdx, newVal, isColResize, sheetIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), chartMngr = sheet.shapeMngr.chart, picMngr = sheet.shapeMngr.picture, diff, shapeElem, shapeObj, key;
            if (!xlObj.getObjectLength(picMngr) && !xlObj.getObjectLength(chartMngr))
                return false;
            diff = newVal - (isColResize ? sheet.columnsWidthCollection[changeIdx] : sheet.rowsHeightCollection[changeIdx]);
            //Picture update
            for (key in picMngr) {
                shapeObj = picMngr[key];
                if (isColResize) {
                    if (changeIdx < shapeObj.colIndex) {
                        shapeObj.left += diff;
                        shapeElem = xlObj.getSheetElement(sheetIdx).find("#" + shapeObj.id);
                        if (shapeElem.length)
                            shapeElem.css({ left: shapeObj.left });
                    }
                }
                else {
                    if (changeIdx < shapeObj.rowIndex) {
                        shapeObj.top += diff;
                        shapeElem = xlObj.getSheetElement(sheetIdx).find("#" + shapeObj.id);
                        if (shapeElem.length)
                            shapeElem.css({ top: shapeObj.top });
                    }
                }
            }
            //Chart update
            for (key in chartMngr) {
                shapeObj = chartMngr[key];
                if (isColResize) {
                    if (changeIdx < shapeObj.colIndex) {
                        shapeObj.left += diff;
                        shapeElem = xlObj.getSheetElement(sheetIdx).find("#" + shapeObj.id);
                        if (shapeElem.length)
                            shapeElem.css({ left: shapeObj.left });
                    }
                }
                else {
                    if (changeIdx < shapeObj.rowIndex) {
                        shapeObj.top += diff;
                        shapeElem = xlObj.getSheetElement(sheetIdx).find("#" + shapeObj.id);
                        if (shapeElem.length)
                            shapeElem.css({ top: shapeObj.top });
                    }
                }
            }
        },

        _refreshChartdataInsDel: function (val, count, startIdx, sIdx, canChartRefresh) {
            var i, xRange, yRange, lRange, xlObj = this.XLObj, sheet = xlObj.getSheet(sIdx), chartMngr = sheet.shapeMngr.chart, action = val.status, seriesRange = [], key, cObj, cRange, diff, rDiff, cDiff;
            this._isRowGreater = false;
            if (!canChartRefresh) {
                for (i = 0; i < count; i++) {
                    diff = action.indexOf("insert") > -1 ? (action.indexOf("Column") > -1 ? sheet.columnsWidthCollection[startIdx + i] : sheet.rowsHeightCollection[startIdx + i]) * 2 : 0;
                    this._refreshShapePosOnResize(startIdx + i, diff, action.indexOf("Column") > -1, sIdx);
                }
                if (xlObj.isUndefined(canChartRefresh))
                    canChartRefresh = true;
            }
            if (canChartRefresh) {
                for (key in chartMngr) {
                    cObj = chartMngr[key];
                    cRange = cObj.range;
                    xRange = cObj.isRowColSwitched ? cObj.lRange : cObj.xRange;
                    yRange = cObj.yRange;
                    lRange = cObj.isRowColSwitched ? cObj.xRange : cObj.lRange;
                    switch (action) {
                        case "insertColumn":
                            if (cRange) {
                                rDiff = cRange[2] - cRange[0];
                                cDiff = cRange[3] - cRange[1];
                                if (rDiff > cDiff) {
                                    this._isRowGreater = true;
                                }
                            }
                            if (xlObj._isUndo) {
                                !ej.isNullOrUndefined(val.prevChartDetails) && xlObj.XLChart.refreshChart(val.prevChartDetails.id, val.prevChartDetails);
                            } else if (!xlObj._isUndo && xlObj._isUndoRedo) {
                                !ej.isNullOrUndefined(val.curChartDetails) && xlObj.XLChart.refreshChart(val.curChartDetails.id, val.curChartDetails);
                            } else if (cRange && (startIdx <= cRange[1]) && !cObj.isChartSeries) {
                                xlObj._prevChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, isRowColSwitched: cObj.isRowColSwitched });
                                cRange[1] += count;
                                cRange[3] += count;
                                cObj.range = cRange;
                                xlObj.XLChart.refreshChart(cObj.id, { range: cObj.range });
                                xlObj._curChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, isRowColSwitched: cObj.isRowColSwitched });
                            }
                            else if (!this._isRowGreater && xlObj._inColumn(cRange, startIdx) && !cObj.isChartSeries) {
                                cObj.seriesRange = null;
                                xlObj._prevChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, isRowColSwitched: cObj.isRowColSwitched });
                                if (startIdx < yRange[1] || startIdx < xRange[1]) {
                                    cRange[1] += count;
                                    cRange[3] += count;
                                    cObj.range = cRange;
                                    cObj.isChartSeries = false;
                                    xlObj.XLChart.refreshChart(cObj.id, { range: cObj.range, isChartSeries: cObj.isChartSeries });
                                }
                                else if (startIdx > yRange[1] && startIdx <= yRange[3]) {
                                    cRange[3] += count;
                                    cObj.range = cRange;
                                    cObj.isChartSeries = false;
                                    xlObj.XLChart.refreshChart(cObj.id, { range: cObj.range, isChartSeries: cObj.isChartSeries });
                                }
                                else if (startIdx <= yRange[1]) {
                                    yRange[1] += count;
                                    yRange[3] += count;
                                    xRange[1] += count;
                                    xRange[3] += count;
                                    cObj.range = null;
                                    cObj.xRange = null;
                                    cObj.yRange = null;
                                    cObj.lRange = null;
                                    cObj.isChartSeries = true;
                                    cObj.isRowColSwitched = false;
                                    cObj.seriesRange = [{ xRange: [xRange[0], xRange[1], xRange[2], xRange[3]], yRange: [yRange[0], yRange[1], yRange[2], yRange[3]], lRange: [lRange[0], lRange[1], lRange[2], lRange[3]] }];
                                    cObj.seriesRange = this._constructSeriesRange(cObj, this._isRowGreater);
                                    xlObj.XLChart._refreshChart(cObj);
                                }
                                xlObj._curChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, isRowColSwitched: cObj.isRowColSwitched });
                            } else if (this._isRowGreater || cObj.seriesRange.length) {
                                xlObj._prevChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isRowColSwitched: cObj.isRowColSwitched });
                                if (ej.isNullOrUndefined(cObj.seriesRange) || cObj.seriesRange.length == 0) {
                                    seriesRange = this._constructSeriesRange(cObj, this._isRowGreater);
                                }
                                cObj.seriesRange = this._isInSeriesRange(cObj, seriesRange.length != 0 ? seriesRange : cObj.seriesRange, startIdx, count, action);
                                seriesRange = [];
                                cObj.range = null;
                                cObj.xRange = null;
                                cObj.yRange = null;
                                cObj.lRange = null;
                                cObj.isChartSeries = true;
                                xlObj.XLChart._refreshChart(cObj);
                                xlObj._curChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, isRowColSwitched: cObj.isRowColSwitched });
                            }
                            break;
                        case "deleteColumn":
                            xlObj._prevChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isRowColSwitched: cObj.isRowColSwitched });
                            if (xlObj._isUndo) {
                                !ej.isNullOrUndefined(val.prevChartDetails) && xlObj.XLChart.refreshChart(val.prevChartDetails.id, val.prevChartDetails);
                            } else if (!xlObj._isUndo && xlObj._isUndoRedo) {
                                !ej.isNullOrUndefined(val.curChartDetails) && xlObj.XLChart.refreshChart(val.curChartDetails.id, val.curChartDetails);
                            } else if (cRange) {
                                if (startIdx < cRange[1]) {
                                    cRange[1] -= count;
                                    cRange[3] -= count;
                                } else if (startIdx > cRange[1] && startIdx <= cRange[3]) {
                                    cRange[3] -= count;
                                } else if (startIdx == cRange[1]) {
                                    cRange[3] -= count;
                                }
                                cObj.range = cRange;
                                xlObj.XLChart.refreshChart(cObj.id, cObj);
                            } else if (cObj.seriesRange.length) {
                                cObj.seriesRange = this._isInSeriesRange(cObj, cObj.seriesRange, startIdx, count, action);
                                xlObj.XLChart._refreshChart(cObj);
                            }
                            xlObj._curChartDetails = $.extend(true, {}, { id: cObj.id, range: cObj.range, xRange: cObj.xRange, yRange: cObj.yRange, lRange: cObj.lRange, isChartSeries: cObj.isChartSeries, seriesRange: cObj.seriesRange, isRowColSwitched: cObj.isRowColSwitched });
                            break;
                        case "insertRow":
                        case "deleteRow":
                            if (!ej.isNullOrUndefined(cRange) && startIdx <= cRange[0]) {
                                if (action == "insertRow") {
                                    cRange[0] += count;
                                    cRange[2] += count;
                                }
                                else {
                                    cRange[0] -= count;
                                    cRange[2] -= count;
                                }
                                xlObj.XLChart.refreshChart(cObj.id, { range: cRange });
                            }
                            else if (xlObj._inRow(cObj.range, startIdx))
                                xlObj.XLChart.refreshChart(cObj.id, { range: cRange });
                            break;
                    }
                }
            }
        },
        _constructSeriesRange: function (cObj, isRowGreater) {
            var i = 0, xlObj = this.XLObj, xRangeSeries, yRangeSeries, lRangeSeries, seriesRange = [], lRangeArray = [], yRangeArray = [], sRange = cObj.seriesRange, xRange, yRange, lRange,
                lDiff, ydiff, seriesLen, yinitialRange, linitialRange;
            xRange = !ej.isNullOrUndefined(cObj.xRange) ? cObj.xRange : (!ej.isNullOrUndefined(sRange) && !ej.isNullOrUndefined(sRange[0]) && !ej.isNullOrUndefined(sRange[0].xRange)) ? sRange[0].xRange : null;
            yRange = !ej.isNullOrUndefined(cObj.yRange) ? cObj.yRange : (!ej.isNullOrUndefined(sRange) && !ej.isNullOrUndefined(sRange[0]) && !ej.isNullOrUndefined(sRange[0].yRange)) ? sRange[0].yRange : null;
            lRange = !ej.isNullOrUndefined(cObj.lRange) ? cObj.lRange : (!ej.isNullOrUndefined(sRange) && !ej.isNullOrUndefined(sRange[0]) && !ej.isNullOrUndefined(sRange[0].lRange)) ? sRange[0].lRange : null;
            if (!ej.isNullOrUndefined(lRange)) {
                lDiff = lRange[3] - lRange[1];
                linitialRange = [lRange[0], lRange[1], lRange[2], (lRange[3] - lDiff)]
            }
            if (!ej.isNullOrUndefined(yRange)) {
                ydiff = yRange[3] - yRange[1];
                seriesLen = ydiff;
                yinitialRange = [yRange[0], yRange[1], yRange[2], (yRange[3] - ydiff)];
            }
            if (!isRowGreater) {
                lDiff = (lRange[2] - lRange[0]);
                ydiff = (yRange[2] - yRange[0]);
                seriesLen = ydiff;
                linitialRange = [lRange[0], lRange[1], (lRange[2] - lDiff), lRange[3]];
                yinitialRange = [yRange[0], yRange[1], (yRange[2] - ydiff), yRange[3]];
            }
            seriesRange = [];
            while (i <= seriesLen) {
                if (isRowGreater) {
                    yRangeSeries = xlObj.getAlphaRange(yinitialRange[0], yinitialRange[1]++, yinitialRange[2], yinitialRange[3]++);
                    yRangeArray.push(yRangeSeries);
                    lRangeSeries = xlObj.getAlphaRange(linitialRange[0], linitialRange[1]++, linitialRange[2], linitialRange[3]++);
                    lRangeArray.push(lRangeSeries);
                } else {
                    yRangeSeries = xlObj.getAlphaRange(yinitialRange[0]++, yinitialRange[1], yinitialRange[2]++, yinitialRange[3]);
                    yRangeArray.push(yRangeSeries);
                    lRangeSeries = xlObj.getAlphaRange(linitialRange[0]++, linitialRange[1], linitialRange[2]++, linitialRange[3]);
                    lRangeArray.push(lRangeSeries);
                }
                xRangeSeries = !ej.isNullOrUndefined(xRange) ? xlObj.getAlphaRange(xRange[0], xRange[1], xRange[2], xRange[3]) : null;
                yRangeSeries = yRangeArray[i];
                lRangeSeries = lRangeArray[i];
                seriesRange.push({ xRange: xRangeSeries, yRange: yRangeSeries, lRange: lRangeSeries });
                i++;
            }
            return seriesRange;
        },
        _isInSeriesRange: function (cObj, seriesRange, startIdx, count, action) {
            var xlObj = this.XLObj, isInsertColumn = (action == 'insertColumn'),
            xRange, yRange, lRange;
            cObj.seriesRange = []
            for (var i = 0; i < seriesRange.length; i++) {
                xRange = ej.isNullOrUndefined(seriesRange[i].xRange) ? [] : xlObj.getRangeIndices(seriesRange[i].xRange);
                yRange = ej.isNullOrUndefined(seriesRange[i].yRange) ? [] : xlObj.getRangeIndices(seriesRange[i].yRange);
                lRange = ej.isNullOrUndefined(seriesRange[i].lRange) ? [] : xlObj.getRangeIndices(seriesRange[i].lRange);
                if (startIdx <= xRange[1]) {
                    xRange[1] = isInsertColumn ? xRange[1] + count : xRange[1] - count;
                    xRange[3] = isInsertColumn ? xRange[3] + count : xRange[3] - count;
                } else if (startIdx > xRange[1] && startIdx <= xRange[3]) {
                    xRange[3] = isInsertColumn ? xRange[3] + count : xRange[3] - count;
                }
                if (startIdx <= yRange[1]) {
                    yRange[1] = isInsertColumn ? yRange[1] + count : yRange[1] - count;
                    yRange[3] = isInsertColumn ? yRange[3] + count : yRange[3] - count;
                } else if (startIdx > yRange[1] && startIdx <= yRange[3]) {
                    yRange[3] = isInsertColumn ? yRange[3] + count : yRange[3] - count;
                }
                if (startIdx <= lRange[1]) {
                    lRange[1] = isInsertColumn ? lRange[1] + count : lRange[1] - count;
                    lRange[3] = isInsertColumn ? lRange[3] + count : lRange[3] - count;
                } else if (startIdx > lRange[1] && startIdx <= lRange[3]) {
                    lRange[3] = isInsertColumn ? lRange[3] + count : lRange[3] - count;
                }
                cObj.seriesRange.push({ xRange: xRange.length == 0 ? null : xlObj.getAlphaRange(xRange[0], xRange[1], xRange[2], xRange[3]), yRange: yRange.length == 0 ? null : xlObj.getAlphaRange(yRange[0], yRange[1], yRange[2], yRange[3]), lRange: lRange.length == 0 ? null : xlObj.getAlphaRange(lRange[0], lRange[1], lRange[2], lRange[3]) });
            }
            return cObj.seriesRange;
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.chart = function (obj) {
        this.XLObj = obj;
        this._shapeCnt = 1;
		this._isNumber = false;
		this._isString = false;
    };

    ej.spreadsheetFeatures.chart.prototype = {
        createChart: function (range, options) {
            var xlObj = this.XLObj;
			this._isNumber = false;
			this._isString = false;
            if (!xlObj.model.allowCharts || (xlObj.getSheet()._isLoaded && xlObj.model.isReadOnly))
                return;
            var i, id, position, seriesRange, isChartSeries, sArr, rDiff, cDiff, sheetIdx = xlObj._getSheetIndex(options.sheetIdx), args = { sheetIndex: sheetIdx, reqType: "shape", type: "actionBegin", shapeType: "chart", action: "create", options: options, range: range, id: options.id, position: { top: options.top, left: options.left }, operation: "create", seriesRange: options.seriesRange, isChartSeries: options.isChartSeries };
            if (xlObj._trigActionBegin(args))
                return;
            options = args.options; range = args.range; id = args.id; position = args.position; seriesRange = args.seriesRange, isChartSeries = args.isChartSeries;
            options = options || {};
            var cnt, chartElem, chartOptions, details, cellIdx, cellInfo, chartModel, chartRange, type = "chart",
                sheet = xlObj.getSheet(sheetIdx), sId, isRowLesser = false;
            if (xlObj._isUndoRedo) {
                sId = options.id.split("_");
                cnt = sId[sId.length - 1].replace(/[a-z]/g, '');
            }
            if (!options.isChartSeries)
                options.isChartSeries = (options.series && range == null);
            if (!options.isChartSeries)
                range = xlObj._getRangeArgs(range, "object");
            if (!ej.isNullOrUndefined(options.top) && !ej.isNullOrUndefined(options.left))
                options.activeCell = xlObj.XLShape._getCellIndexFromOffset(options.top, options.left);
            if (!options.activeCell)
                options.activeCell = sheet._activeCell;
            if ((!xlObj.isRange(range) || !options.activeCell) && !options.isChartSeries)
                return;
            cellInfo = xlObj._getCellInfo(options.activeCell);
            options.id = cnt ? xlObj._id + "_" + type + cnt : xlObj._id + "_" + type + this._shapeCnt;
            options.type = options.type ? options.type : "column";
            options.animation = options.animation ? options.animation : false;
            if (!options.isChartSeries)
                options.range = range;
            options.dataSheetIdx = options.dataSheetIdx ? options.dataSheetIdx : sheetIdx;
            options.height = options.height ? options.height : xlObj.model.chartSettings.height;
            options.width = options.width ? options.width : xlObj.model.chartSettings.width;
            options.top = options.top ? options.top : cellInfo.top + 2;
            options.left = options.left ? options.left : cellInfo.left + 2;
            if (options.range) {
                rDiff = options.range[2] - options.range[0];
                cDiff = options.range[3] - options.range[1];
                if (rDiff < cDiff) {
                    isRowLesser = true;
                }
            }
            options.isRowColSwitched = isRowLesser ? true : options.isRowColSwitched ? options.isRowColSwitched : false;
            cellIdx = xlObj._getIdxWithOffset(options.top, options.left, true);
            options.rowIndex = cellIdx.rowIdx;
            options.colIndex = cellIdx.colIdx;
            options.isResponsive = false;
            options.canResize = false;
            if (!options.isChartSeries) {
                if (xlObj.isUndefined(options.xRange)) {
                    chartRange = this._processChartRange(range, options.dataSheetIdx, options);
                    options.xRange = chartRange.xRange;
                    options.yRange = chartRange.yRange;
                    options.lRange = chartRange.lRange;
                }
                chartOptions = this._processChartSeries(options);
                if (options.series && (xlObj.XLClipboard._copyCells.length || xlObj.XLClipboard._cutCells.length))
                    chartOptions["series"] = options.series;
            }
            if (options.isChartSeries) {
                if (xlObj.isUndefined(options.series)) {
                    chartOptions = this._processChartSeries(options);
                    options.series = chartOptions.series;
                }
                else if (options.seriesRange.length > 0) {
                    sArr = this._processSeriesValues(options).series;
                    for (i = 0; i < sArr.length; i++)
                        options.series[i].points = sArr[i].points;
                }
            }
            if (!options.isChartSeries) {
                if ((xlObj.getActiveSheetIndex() === options.dataSheetIdx))
                    this._focusChartRange(chartOptions.xRange, chartOptions.yRange, chartOptions.lRange);
            }
            chartElem = this._renderBaseElem(type, options.top, options.left, cnt);
            chartElem.ejChart(this._processChartOptions(options, options.isChartSeries ? null : chartOptions.series));
            this._afterChartRefresh();
            chartModel = chartElem.ejChart("model");
            if (options.isChartSeries)
				options.series = chartModel.series;
            options.theme = chartModel.theme;
            chartModel.primaryXAxis.range = chartModel.primaryXAxis.actualRange;
            chartModel.primaryYAxis.range = chartModel.primaryYAxis.actualRange;
            options.title = { text: chartModel.title.text.length ? chartModel.title.text : "", align: chartModel.title.textAlignment, font: chartModel.title.font };
            options.xAxis = { min: chartModel.primaryXAxis.range.min, max: chartModel.primaryXAxis.range.max, interval: chartModel.primaryXAxis.range.interval, title: { text: chartModel.primaryXAxis.title.text.length ? chartModel.primaryXAxis.title.text : "" }, range: !options.isChartSeries ? chartOptions.xRange : null };
            options.yAxis = { min: chartModel.primaryYAxis.range.min, max: chartModel.primaryYAxis.range.max, interval: chartModel.primaryYAxis.range.interval, title: { text: chartModel.primaryYAxis.title.text.length ? chartModel.primaryYAxis.title.text : "" }, range: !options.isChartSeries ? chartOptions.yRange : null };
            options.legend = { visible: chartModel.legend.visible, range: !options.isChartSeries ? chartOptions.lRange : null, position: chartModel.legend.position };
            !sheet._isImported && (xlObj.XLShape._insertShape = true);
            xlObj.XLShape._updateShapeMngr(options.activeCell, { chart: options }, "chart");
            xlObj.element.append('<input id=' + xlObj._id + '_chart type="text" style="display:none;"/>');
            if (options.theme.indexOf("dark") > -1)
                chartElem.addClass('e-ss-charttheme');
            if (xlObj.model.showRibbon && !options.hideTab)
                xlObj.XLRibbon._chartDesignTabUpdate(chartElem);
            xlObj._on(chartElem, ej.eventType.mouseDown, xlObj._mouseDownHandler);
            xlObj._on(chartElem, ej.eventType.mouseMove, xlObj._mouseMove);
            chartElem.height(chartElem.height() - 5); // SVG parent div increases height of 5px.
            xlObj._setSheetFocus();
            if (!xlObj._isSheetNavigate && (!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo && !xlObj._isPaste && !xlObj.XLClipboard._isShape) {
                details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", action: "create", options: options, range: options.range, id: options.id, position: { top: options.top, left: options.left }, operation: "create", seriesRange: options.seriesRange, isChartSeries: options.isChartSeries };
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);

            }
            return options.id;
        },
        resizeChart: function (id, height, width) {
            var obj = {}, elem = $("#" + id), cModel = elem.ejChart("model"), xlObj = this.XLObj, formulaBar;
            if (xlObj.model.isReadOnly)
                return;
            if (elem.length) {
                (!ej.isNullOrUndefined(height) && height > 180) ? obj.height = height.toString() : obj.height = "180";
                (!ej.isNullOrUndefined(width) && width > 180) ? obj.width = width.toString() : obj.width = "180";
                if (xlObj.model.allowFormulaBar)
                    formulaBar = xlObj.element.find('.e-formulabar')[0];
                formulaBar && (formulaBar.style.display = "none");
                elem.ejChart("option", { size: obj });
                formulaBar && (formulaBar.style.display = "block");
                xlObj.XLRibbon._setShapeWidthHeight({ height: cModel.size.height, width: cModel.size.width, shapeType: "chart" });
            }
        },

        refreshChart: function (id, options) {// can update type, enable3D, marker, range and theme in chart           
            var xlObj = this.XLObj;
            if (!xlObj.model.allowCharts || xlObj.model.isReadOnly)
                return;
            var i, marker = "marker", cProp = this._getShapeObj(id, "chart"), cOptions, cElem = xlObj.element.find("#" + id), cObj = cElem.data("ejChart"), chartRange, range;
            if (cProp) {
                for (i in options)
                    cProp[i] = options[i];
                if (options.type) {
                    options.commonSeriesOptions = { type: options.type };
                    delete options.type;
                }
                if (marker in options) {
                    if (options.commonSeriesOptions)
                        options.commonSeriesOptions.marker = { visible: options.marker.visible };
                    else
                        options.commonSeriesOptions = { marker: options.marker };
                    delete options[marker];
                }
                if (options.range) {
                    cObj.model.series.length = 0;
                    if ((options.range[0].xRange || options.range[0].yRange || options.range[0].lRange)) {
                        options.range[0].lRange = ej.isNullOrUndefined(options.range[0].lRange) ? "" : options.range[0].lRange;
                        cProp.isChartSeries = true;
                        cProp.seriesRange = options.range;
                        cOptions = this._processSeriesValues(cProp);
                    }
                    else {
                        cObj.model.series.length = 0;
                        range = xlObj._getRangeArgs(options.range, "object");
                        chartRange = this._processChartRange(range, cProp.dataSheetIdx, cProp);
                        cProp.isChartSeries = false;
                        cProp.xRange = chartRange.xRange;
                        cProp.yRange = chartRange.yRange;
                        cProp.lRange = chartRange.lRange;
                        cProp.legend.range = chartRange.lRange;
                        cOptions = this._processChartSeries(cProp);
                        options.xRange = chartRange.xRange;
                        options.yRange = chartRange.yRange;
                        options.lRange = chartRange.lRange;
                        this._focusChartRange(chartRange.xRange, chartRange.yRange, chartRange.lRange);
                    }
                    cProp.xAxis.range = (cProp.isChartSeries) ? null : chartRange.xRange;
                    cProp.yAxis.range = (cProp.isChartSeries) ? null : chartRange.yRange;
                    options.series = cOptions.series;
                } else if (options.seriesRange) {
                    cProp.seriesRange = options.seriesRange;
                    cOptions = this._processSeriesValues(cProp);
                }
                $("#" + id).ejChart("option", options);
                if ("left" in options || "top" in options) {
                    xlObj.XLShape._shapeType = "chart";
                    cElem.css({ left: cProp.left, top: cProp.top });
                    xlObj.XLShape._picCellIdx = { rowIndex: cProp.rowIndex, colIndex: cProp.colIndex };
                    xlObj.XLShape._selectImg(cElem);
                    xlObj.XLShape._updateShapeObj(cElem[0]);
                    xlObj.XLShape._shapeType = "img";
                }
            }
        },

        _processChartOptions: function (options, chartOptions) {
            var xVisiblity, yVisiblity, opt = { commonSeriesOptions: { type: options.type, enableAnimation: options.animation }, series: chartOptions == null ? options.series : chartOptions, canResize: options.canResize, size: { height: options.height.toString(), width: options.width.toString() }, enableRotation: false, depth: 100, wallSize: 2, tilt: 0, rotation: 34, perspectiveAngle: 90, sideBySideSeriesPlacement: true };
            if (options.series) {
                for (var i = 0, len = options.series.length; i < len; i++) {
                    if (!ej.isNullOrUndefined(opt.series[i]))
                        opt.series[i]["trendlines"] = options.series[i].trendlines;
                }
            }
            xVisiblity = yVisiblity = false;
            if (options.enable3D)
                opt.enable3D = true;
            if (options.marker)
                opt.commonSeriesOptions.marker = options.marker;
            if (options.theme)
                opt.theme = options.theme;
            opt.title = options.title || {};
            if (this.XLObj.getObjectLength(opt.title) > 0) {
                opt.title.textAlignment = options.title.align;
                delete opt.title.align;
            }
            opt.legend = options.legend || {};
            if (options.xAxis && options.xAxis.minorGridLines)
                xVisiblity = options.xAxis.minorGridLines.visible;
            if (options.yAxis && options.yAxis.minorGridLines)
                yVisiblity = options.yAxis.minorGridLines.visible;
            opt.primaryYAxis = options.primaryYAxis || { labelFormat: this._chartYAxisFormat(options.yRange), minorTicksPerInterval: 5, minorGridLines: { visible: yVisiblity }, minorTickLines: { visible: false } };
            opt.primaryXAxis = options.primaryXAxis || { labelFormat: this._chartYAxisFormat(options.xRange), minorTicksPerInterval: 5, minorGridLines: { visible: xVisiblity }, minorTickLines: { visible: false }, labelIntersectAction: 'wrapByWord' };
			if (this._isNumber && this._isString) {
				opt.primaryXAxis.valueType = "category";
			}
			return opt;
        },

        _chartYAxisFormat: function (range) {
            if (ej.isNullOrUndefined(range))
                return;
            var xlObj = this.XLObj, type, currencySymbol = ej.globalize.preferredCulture().numberFormat.currency.symbol;
            type = xlObj.XLEdit.getPropertyValue(range[0], range[1], "type");
            if (type === "accounting")
                return currencySymbol + " {value}";
            else if (type === "currency")
                return currencySymbol + "{value}";
            else if (type === "percentage")
                return "{value}%";
            else
                return "{value}";
        },

        _processChartRange: function (range, dataSheetIdx, opt) {
            var xlObj = this.XLObj, xRange, yRange, lRange, trVal, blVal, tlVal, minr = range[0], minc = range[1], isStringSeries = false,
                maxr = range[2], maxc = range[3], isSingleRow = minr === maxr, isSingleCol = minc === maxc;
            trVal = xlObj.XLEdit.getPropertyValue(minr, maxc, "value2", dataSheetIdx);
            trVal = xlObj.XLEdit._parseValue(trVal).value;
            blVal = xlObj.XLEdit.getPropertyValue(maxr, minc, "value2", dataSheetIdx);
            blVal = xlObj.XLEdit._parseValue(blVal).value;
            tlVal = xlObj.XLEdit.getPropertyValue(minr, minc, "value2", dataSheetIdx);
            tlVal = xlObj.XLEdit._parseValue(tlVal).value;
            if (!xlObj.isNumber(blVal) || !tlVal)
                isStringSeries = true;
            if (xlObj.isUndefined(tlVal) && !isSingleRow && !isSingleCol || (opt.type == "scatter" && range[3] - range[1] == 1)) {
                xRange = [minr + 1, minc, maxr, minc];
                yRange = [minr + 1, minc + 1, maxr, maxc];
                lRange = [minr, minc + 1, minr, maxc];
            }
            else if ((!ej.isNullOrUndefined(blVal) && isStringSeries && !isSingleRow && !isSingleCol)) {
                if (!ej.isNullOrUndefined(trVal) && (!xlObj.isNumber(trVal) || !tlVal)) {
                    xRange = [minr + 1, minc, maxr, minc];
                    yRange = [minr + 1, minc + 1, maxr, maxc];
                    lRange = [minr, minc + 1, minr, maxc];
                }
                else {
                    xRange = [minr, minc, maxr, minc];
                    yRange = [minr, minc + 1, maxr, maxc];
                }
            }
            else {
                yRange = [minr, minc, maxr, maxc];
                if ((!ej.isNullOrUndefined(trVal) && !xlObj.isNumber(trVal) && !xlObj._isDateTime(trVal))) {
                    lRange = [minr, minc, minr, maxc];
                    yRange[0] = yRange[0] + 1;
                }
                else if (ej.isNullOrUndefined(tlVal) && (isSingleRow || isSingleCol)) {
                    lRange = [minr, minc, minr, maxc];
                    if (isSingleRow) {
                        yRange[1] = yRange[1] + 1;
                        lRange[3] = lRange[1];
                    }
                    else
                        yRange[0] = yRange[0] + 1;
                }
            }
            return { xRange: xRange, yRange: yRange, lRange: lRange };
        },

        _processChartSeries: function (options) {
            options = options || {};
            var xlObj = this.XLObj, val, len, xRange = options.xRange, yRange = options.yRange, lRange = options.lRange, xValue, yValue,
                lValue, diff, rDiff, cDiff, pArr, pObj, j, inc, i = 0, yInc = 0, sArr = [], tArr = ["value2"], dtVal;
            if (options.isChartSeries)
                sArr = this._processSeriesValues(options).series;
            else {
                yValue = xlObj.getRangeData({ range: yRange, sheetIdx: options.dataSheetIdx, skipFormula: true });
                rDiff = (yRange[2] - yRange[0]) + 1;
                cDiff = (yRange[3] - yRange[1]) + 1;
                if (options.isRowColSwitched) {
                    xValue = lRange ? xlObj._toArrayData(xlObj.getRangeData({ range: lRange, property: tArr, sheetIdx: options.dataSheetIdx })) : this._getVirtualXValues(cDiff + 1);
                    if (xRange)
                        lValue = xlObj._toArrayData(xlObj.getRangeData({ range: xRange, property: tArr, sheetIdx: options.dataSheetIdx }));
                    diff = rDiff;
                }
                else {
                    xValue = xRange ? xlObj._toArrayData(xlObj.getRangeData({ range: xRange, property: tArr, sheetIdx: options.dataSheetIdx })) : this._getVirtualXValues(rDiff + 1);
                    if (lRange)
                        lValue = xlObj._toArrayData(xlObj.getRangeData({ range: lRange, property: tArr, sheetIdx: options.dataSheetIdx }));
                    diff = cDiff;
                }
                len = xValue.length;
                inc = options.isRowColSwitched ? 1 : diff;
                while (i < diff) {
                    j = 0;
                    pArr = [];
                    yInc = options.isRowColSwitched ? yInc : i;
                    while (j < len) {
						if (yValue[yInc]) {
							val = yValue[yInc].value;
							if(xlObj.isFormula(val))
							{	
								val =  yValue[yInc].value2;
								if (yValue[yInc].type === "percentage")
									val = xlObj.XLEdit._parseValue(val).value / 100; 	
								if (yValue[yInc].type === "currency" || yValue[yInc].type === "accounting")
									val = xlObj.XLEdit._parseValue(val).value;  
							}
							if (xlObj.isNumber(val))
								val = Number(val);
							else {
								dtVal = xlObj._dateToInt(val);
								val = isNaN(dtVal) ? 0 : dtVal;
							}
							pArr.push({ x: xValue[j], y: val }); // Number(val) - numbers returned as string while import
						}
						if(xlObj.isNumber(xValue[j])) {
							this._isNumber = true;
						} else {
							this._isString = true;
						}
                        yInc += inc;
                        j++;
                    }
                    pObj = { points: pArr };
                    if (options.type === "doughnut") {
                        pObj.explode = options.explode;
                        pObj.enableAnimation = options.enableAnimation;
                    }
                    if (lValue)
                        pObj.name = lValue[i];
                    sArr.push(pObj);
                    i++;
                }
            }
            return { series: sArr, xRange: options.isChartSeries ? null : options.isRowColSwitched ? lRange : xRange, yRange: options.isChartSeries ? null : yRange, lRange: options.isChartSeries ? null : options.isRowColSwitched ? xRange : lRange };
        },
        _processSeriesValues: function (options) {
            var i, h, k, m, n, l, plen, points, xrange, xValues, yrange, yValues, lrange, lValues, pArr, xlObj = this.XLObj, chartrange = options.seriesRange, len = chartrange.length, sArr = [], chartProp = [], pObj = {}, yVal, dtVal;
            for (i = 0; i < len; i++) {
                chartProp[i] = { xValues: [], yValues: [], lValues: [] };
                xrange = chartrange[i].xRange;
                if (!ej.isNullOrUndefined(xrange)) {
                    xValues = this._processRangeValues(xrange, options.dataSheetIdx);
                    for (var p = 0; p < xValues.length; p++) {
                        if (xValues[p] instanceof Date)
                            xValues[p] = xValues[p].toLocaleDateString(ej.cultureObject.name);
                        chartProp[i].xValues[p] = xValues[p];
                    }
                } else {
                    plen = !ej.isNullOrUndefined(chartrange[i].points) ? chartrange[i].points.length : options.series[i].points.length;
                    points = !ej.isNullOrUndefined(chartrange[i].points) ? chartrange[i].points : options.series[i].points;
                    for (l = 0; l < plen; l++) {
                        chartProp[i].xValues[l] = points[l].x;
                    }
                }
                yrange = chartrange[i].yRange;
                if (!ej.isNullOrUndefined(yrange)) {
                    yValues = this._processRangeValues(yrange, options.dataSheetIdx);
                    for (var s = 0; s < yValues.length; s++) {
                        yVal = yValues[s];
                        if (xlObj.isNumber(yVal))
                            yVal = Number(yVal);
                        else {
                            dtVal = xlObj._dateToInt(yVal);
                            yVal = isNaN(dtVal) ? 0 : dtVal;
                        }
                        chartProp[i].yValues[s] = yVal;
                    }
                } else {
                    plen = !ej.isNullOrUndefined(chartrange[i].points) ? chartrange[i].points.length : options.series[i].points.length;
                    points = !ej.isNullOrUndefined(chartrange[i].points) ? chartrange[i].points : options.series[i].points;
                    for (n = 0; n < plen; n++) {
                        chartProp[i].yValues[n] = points[n].y;
                    }
                }
                lrange = chartrange[i].lRange;
                if (!ej.isNullOrUndefined(lrange)) {
                    lValues = this._processRangeValues(lrange, options.dataSheetIdx);
                    for (var r = 0; r < lValues.length; r++) {
                        if (lValues[r] instanceof Date)
                            lValues[r] = lValues[r].toLocaleDateString(ej.cultureObject.name);
                        chartProp[i].lValues[r] = lValues[r];
                    }
                }
                else
                    chartProp[i].lValues[0] = !ej.isNullOrUndefined(chartrange[i].name) ? chartrange[i].name : options.series[i].name;
            }
            m = 0;
            while (m < len) {
                k = 0;
                pArr = [];
                while (k < chartProp[m].xValues.length) {
                    pArr.push({ x: xlObj.isNumber(chartProp[m].xValues[k]) ? chartProp[m].xValues[k] : (new Date(chartProp[m].xValues[k]).toString() !== "Invalid Date") ? chartProp[m].xValues[k] : 0, y: xlObj.isNumber(chartProp[m].yValues[k]) ? Number(chartProp[m].yValues[k]) : 0 });
                    k++;
                }
                pObj = { points: pArr };
                h = 0;
                while (h < chartProp[m].lValues.length) {
                    pObj.name = chartProp[m].lValues[h];
                    h++;
                }
                sArr.push(pObj);
                m++;
            }
            return { series: sArr };
        },

        _processRangeValues: function (range, dataSheetIdx) {
            var xlObj = this.XLObj, values, ranges, value;
            if (range.indexOf(":") >= 0)
                values = xlObj.getRangeData({ range: range, property: ["value"], sheetIdx: dataSheetIdx, valueOnly: true, skipFormula: true });
            else if (range.indexOf(",") >= 0) {
                ranges = range.split(",");
                values = [];
                for (var x = 0; x < ranges.length; x++) {
                    value = xlObj.getRangeData({ range: ranges[x], property: ["value"], sheetIdx: dataSheetIdx, valueOnly: true, skipFormula: true });
                    values.push(value);
                }
            }
            else
                values = xlObj.getRangeData({ range: range, property: ["value"], sheetIdx: dataSheetIdx, valueOnly: true, skipFormula: true });
			if (values.toString().indexOf(',') > -1) {
				values = values.toString().split(',');
			}
            return values;
        },

        _getVirtualXValues: function (limit) {
            var i = 1, arr = [];
            while (i < limit) {
                arr.push(i.toString());
                i++;
            }
            return arr;
        },

        _focusChartRange: function (xRange, yRange, lRange) {
            var xlObj = this.XLObj, border = xlObj._chartBorder;
            this._clearChartRange(xlObj._arrayAsString(border));
            if (lRange)
                xlObj.XLSelection._focusBorder({ rowIndex: lRange[0], colIndex: lRange[1] }, { rowIndex: lRange[2], colIndex: lRange[3] }, border[0]);
            if (xRange)
                xlObj.XLSelection._focusBorder({ rowIndex: xRange[0], colIndex: xRange[1] }, { rowIndex: xRange[2], colIndex: xRange[3] }, border[1]);
            xlObj.XLSelection._focusBorder({ rowIndex: yRange[0], colIndex: yRange[1] }, { rowIndex: yRange[2], colIndex: yRange[3] }, border[2]);
            xlObj.getSheet(xlObj.getActiveSheetIndex())._isChartBorderDrawn = true;
        },

        _clearChartRange: function (classes) {
            var xlObj = this.XLObj;
            xlObj.XLSelection._clearBorder(classes);
            xlObj.getSheet(xlObj.getActiveSheetIndex())._isChartBorderDrawn = false;
        },

        _renderBaseElem: function (type, top, left, cnt) {
            cnt = ej.isNullOrUndefined(cnt) ? this._shapeCnt : cnt;
            var xlObj = this.XLObj, div = $("<div id='" + xlObj._id + "_" + type + cnt + "' class='e-ss-object' style='top:" + top + "px;left:" + left + "px; min-height:180px; min-width:180px' ></div>");
            div.data("parentID", xlObj._id);
            xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-content").first().append(div);
            xlObj.XLShape._selectImg(div);
            if (!xlObj._isUndoRedo)
                this._shapeCnt++;
            return div;
        },

        _refreshChartElements: function (rowIdx, colIdx, sheetIdx) { // if rowIdx not passed then whole column consider and viceversa for colIdx
            var charts, i, chartProp, xlObj = this.XLObj, j = 1, cnt = xlObj.model.sheetCount + 1;
            while (j < cnt) {
                charts = xlObj.getSheet(j).shapeMngr.chart;
                i = xlObj.getObjectLength(charts);
                if (i) {
                    while (i--) {
                        chartProp = charts[xlObj.getObjectKeys(charts)[i]];
                        if (chartProp.dataSheetIdx === sheetIdx && (this.XLObj.inRange(chartProp.range, rowIdx, colIdx) || this.XLObj._inRow(chartProp.range, rowIdx) || this.XLObj._inColumn(chartProp.range, colIdx) || this.XLObj.XLChart._isSeriesRange(chartProp, rowIdx, colIdx)))
                            this._refreshChart(chartProp);
                    }
                }
                j++;
            }
        },
        _isSeriesRange: function (chartProp, rowIdx, colIdx) {
            var seriesRange, isSeriesRange, isXRange, isYRange, isZRange;
            if (chartProp.seriesRange) {
                for (var k = 0; k < chartProp.seriesRange.length; k++) {
                    seriesRange = chartProp.seriesRange[k];
                    if (seriesRange.xRange)
                        isXRange = this._isChartSeriesRange(seriesRange.xRange, rowIdx, colIdx);
                    if (seriesRange.yRange)
                        isYRange = this._isChartSeriesRange(seriesRange.yRange, rowIdx, colIdx);
                    if (seriesRange.lRange)
                        isZRange = this._isChartSeriesRange(seriesRange.lRange, rowIdx, colIdx);
                    isSeriesRange = isXRange || isYRange || isZRange;
                    if (isSeriesRange)
                        return isSeriesRange;
                }
            }
            return false;
        },

        _isChartSeriesRange: function (seriesRange, rowIdx, colIdx) {
            var xlObj = this.XLObj, range, ranges, splitRange;
            if (seriesRange.indexOf(":") >= 0) {
                range = xlObj._getRangeArgs(seriesRange);
                if (xlObj.inRange(range, rowIdx, colIdx))
                    return true;
            }
            else if (seriesRange.indexOf(",") >= 0) {
                ranges = seriesRange.split(",");
                for (var x = 0; x < ranges.length; x++) {
                    splitRange = xlObj._getRangeArgs(ranges[x]);
                    if (xlObj.inRange(splitRange, rowIdx, colIdx))
                        return true;
                }
            }
            else {
                range = xlObj._getRangeArgs(seriesRange);
                if (xlObj.inRange(range, rowIdx, colIdx))
                    return true;
            }
            return false;
        },
        _refreshChart: function (chartProp) {
            if ($("#" + chartProp.id).length !== 0) {
                var xlObj = this.XLObj, formulaBar, cObj = $("#" + chartProp.id).data("ejChart"), obj = { xRange: chartProp.xRange, yRange: chartProp.yRange, lRange: chartProp.lRange, isRowColSwitched: chartProp.isRowColSwitched, dataSheetIdx: chartProp.dataSheetIdx, seriesRange: chartProp.seriesRange, isChartSeries: chartProp.isChartSeries, series: chartProp.series }, cOptions;
                cObj.model.series.length = 0;
                cOptions = this._processChartSeries(obj);
				if (obj.series) {
					for (var i = 0, len = obj.series.length; i < len; i++) {
						if (!ej.isNullOrUndefined(obj.series[i]))
							cOptions.series[i]["trendlines"] = obj.series[i].trendlines;
					}
				}
                if (xlObj.model.allowFormulaBar)
                    formulaBar = xlObj.element.find('.e-formulabar')[0];
                formulaBar && (formulaBar.style.display = "none");
                cObj.model.primaryXAxis.range.min = cObj.model.primaryXAxis.range.max = cObj.model.primaryXAxis.range.interval = null;
                cObj.model.primaryYAxis.range.min = cObj.model.primaryYAxis.range.max = cObj.model.primaryYAxis.range.interval = null;
                cObj.option({ series: cOptions.series, primaryXAxis: { labelFormat: this._chartYAxisFormat(chartProp.xRange) }, primaryYAxis: { labelFormat: this._chartYAxisFormat(chartProp.yRange) } });
                cObj.model.primaryXAxis.range = cObj.model.primaryXAxis.actualRange;
                cObj.model.primaryYAxis.range = cObj.model.primaryYAxis.actualRange;
                formulaBar && (formulaBar.style.display = "block");
            }
        },

        switchRowColumn: function (chartId) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var args = { sheetIndex: xlObj.getActiveSheetIndex(), reqType: "shape", type: "actionBegin", shapeType: "chart", action: "srcolumn", chartId: chartId, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex };
            if (xlObj._trigActionBegin(args))
                return;
            chartId = args.chartId;
            var chOptions, obj, cid = chartId || document.getElementById(xlObj._id + "_chart").value, cObj = $("#" + cid).ejChart("instance"), dataVal = xlObj.XLChart._getShapeObj(cid, "chart"), details = { sheetIndex: xlObj.getActiveSheetIndex(), reqType: "shape", shapeType: "chart", action: "srcolumn", cid: cid, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex };
            if (dataVal.isChartSeries)
                return;
            cObj.model.series.length = 0;
            dataVal.isRowColSwitched = !dataVal.isRowColSwitched;
            obj = { xRange: dataVal.xRange, yRange: dataVal.yRange, lRange: dataVal.lRange, isRowColSwitched: dataVal.isRowColSwitched, dataSheetIdx: dataVal.dataSheetIdx };
            chOptions = xlObj.XLChart._processChartSeries(obj);
            cObj.option({ series: chOptions.series });
            xlObj.getActiveSheetIndex() === dataVal.dataSheetIdx && xlObj.XLChart._focusChartRange(chOptions.xRange, chOptions.yRange, chOptions.lRange);
            dataVal.xAxis.range = chOptions.xRange;
            dataVal.yAxis.range = chOptions.yRange;
            dataVal.legend.range = chOptions.lRange;
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        updateChartElement: function (chartId, value, title) {
            var xlObj = this.XLObj;
            if (xlObj.model.isReadOnly)
                return;
            var sheetIdx = xlObj.getActiveSheetIndex(), args = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", type: "actionBegin", action: "updatechartelem", chartId: chartId, value: value, title: title, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex };
            if (xlObj._trigActionBegin(args))
                return;
            chartId = args.chartId, value = args.value;
            xlObj._showDialog(xlObj._id + "_chartname");
            var formulaBar, cid = chartId || document.getElementById(xlObj._id + "_chart").value, series, cObj = $("#" + cid).ejChart("instance"), i,
                details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", cid: cid, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex }, dataVal = xlObj.getSheet(sheetIdx).shapeMngr.chart[xlObj.XLEdit.getPropertyValue(xlObj.XLShape._picCellIdx.rowIndex, xlObj.XLShape._picCellIdx.colIndex, 'chart')[0]];
            title ? (args = { model: { text: xlObj._getLocStr('Ok') } }) : (title = "");
            if (xlObj.model.allowFormulaBar)
                formulaBar = xlObj.element.find('.e-formulabar')[0];
            formulaBar && (formulaBar.style.display = "none");
            switch (value) {
                case "PHAxis":
                    details.visibility = !(cObj.model.primaryXAxis.visible);
                    cObj.option("primaryXAxis", { visible: details.visibility });
                    dataVal.xAxis.visible = details.visibility;
                    details.action = details.operation = value;
                    break;
                case "PVAxis":
                    details.visibility = !(cObj.model.primaryYAxis.visible);
                    cObj.option("primaryYAxis", { visible: details.visibility });
                    dataVal.yAxis.visible = details.visibility;
                    details.action = details.operation = value;
                    break;
                case "PHAxisTitle":
                    xlObj._cOpt.prev = { text: dataVal.xAxis.title.text };
                    if (cObj.model.primaryXAxis.title.text.length != 0) {
                        cObj.option("primaryXAxis", { title: { text: "" } });
                        dataVal.xAxis.title.text = "";
                        details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", operation: "PHAxisTitle", action: "PX", cid: cid, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex, prev: { text: xlObj._cOpt.prev.text }, cur: { text: "" } };
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                    else {
                        xlObj._hasTitle = "PX";
                        document.getElementById(xlObj._id + '_chartname').value = dataVal.xAxis.title.text;
                        if (title.length < 1) {
                            $('#' + xlObj._id + '_chartnamedlg').ejDialog("open");
                            $("#" + xlObj._id + '_chartname').focus().setInputPos(dataVal.xAxis.title.text.length);
                        }
                        else
                            xlObj.XLRibbon._chartNameDlgBtnClick(args, title, "PHAxisTitle");
                        xlObj._cOpt = { prevText: dataVal.title.text, prevAlign: cObj.model.title.textAlignment, curAlign: cObj.model.title.textAlignment };
                    }
                    break;
                case "PVAxisTitle":
                    xlObj._cOpt.prev = { text: dataVal.yAxis.title.text };
                    if (cObj.model.primaryYAxis.title.text.length != 0) {
                        cObj.option("primaryYAxis", { title: { text: "" } });
                        dataVal.yAxis.title.text = "";
                        details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", operation: "PVAxisTitle", action: "PY", cid: cid, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex, prev: { text: xlObj._cOpt.prev.text }, cur: { text: "" } };
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                    else {
                        xlObj._hasTitle = "PY";
                        document.getElementById(xlObj._id + '_chartname').value = dataVal.yAxis.title.text;
                        if (title.length < 1) {
                            $('#' + xlObj._id + '_chartnamedlg').ejDialog("open");
                            $("#" + xlObj._id + '_chartname').focus().setInputPos(dataVal.yAxis.title.text.length);
                        }
                        else
                            xlObj.XLRibbon._chartNameDlgBtnClick(args, title, "PVAxisTitle");
                        xlObj._cOpt = { prevText: dataVal.title.text, prevAlign: cObj.model.title.textAlignment, curAlign: cObj.model.title.textAlignment };
                    }
                    break;
                case "CTNone":
                case "CTnone":
                    xlObj._cOpt.prev = { text: dataVal.title.text };
                    if (cObj.model.title.text.length) {
                        cObj.option("title", { text: "" });
                        dataVal.title.text = "";
                        details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", action: "CT", operation: "CTNone", cid: cid, rowIndex: xlObj.XLShape._picCellIdx.rowIndex, colIndex: xlObj.XLShape._picCellIdx.colIndex, prev: { text: xlObj._cOpt.prev.text }, cur: { text: "" } };
                        xlObj._completeAction(details);
                        xlObj._trigActionComplete(details);
                    }
                    break;
                case "CTCenter":
                case "CTcenter":
                    xlObj._hasTitle = "CT";
                    xlObj._cOpt = { prevText: cObj.model.title.text, prevAlign: cObj.model.title.textAlignment };
                    document.getElementById(xlObj._id + '_chartname').value = dataVal.title.text;
                    if (title.length < 1) {
                        $('#' + xlObj._id + '_chartnamedlg').ejDialog("open");
                        $("#" + xlObj._id + '_chartname').focus().setInputPos(dataVal.title.text.length);
                    }
                    else
                        xlObj.XLRibbon._chartNameDlgBtnClick(args, title, "CTCenter");
                    cObj.option("title", { textAlignment: "center" });
                    xlObj._cOpt.curAlign = cObj.model.title.textAlignment;
                    dataVal.title.align = "center";
                    break;
                case "CTFar":
                case "CTfar":
                    xlObj._hasTitle = "CT";
                    xlObj._cOpt = { prevText: cObj.model.title.text, prevAlign: cObj.model.title.textAlignment };
                    document.getElementById(xlObj._id + '_chartname').value = dataVal.title.text;
                    if (title.length < 1) {
                        $('#' + xlObj._id + '_chartnamedlg').ejDialog("open");
                        $("#" + xlObj._id + '_chartname').focus().setInputPos(dataVal.title.text.length);
                    }
                    else
                        xlObj.XLRibbon._chartNameDlgBtnClick(args, title, "CTFar");
                    cObj.option("title", { textAlignment: "far" });
                    xlObj._cOpt.curAlign = cObj.model.title.textAlignment;
                    dataVal.title.align = "far";
                    break;
                case "CTNear":
                case "CTnear":
                    xlObj._hasTitle = "CT";
                    xlObj._cOpt = { prevText: cObj.model.title.text, prevAlign: cObj.model.title.textAlignment };
                    document.getElementById(xlObj._id + '_chartname').value = dataVal.title.text;
                    if (title.length < 1) {
                        $('#' + xlObj._id + '_chartnamedlg').ejDialog("open");
                        $("#" + xlObj._id + '_chartname').focus().setInputPos(dataVal.title.text.length);
                    }
                    else
                        xlObj.XLRibbon._chartNameDlgBtnClick(args, title, "CTNear");
                    cObj.option("title", { textAlignment: "near" });
                    xlObj._cOpt.curAlign = cObj.model.title.textAlignment;
                    dataVal.title.align = "near";
                    break;
                case "DLNone":
                    series = [];
                    details.action = "DL";
                    details.operation = "DLNone";
                    details.prev = { series: $.extend(true, [], cObj.model.series) };
                    for (i = 0; i < cObj.model.series.length; i++)
                        series.push({ marker: { dataLabel: { visible: false, verticalTextAlignment: "far", textPosition: "top" } } });
                    cObj.option({ series: series });
                    details.cur = { series: $.extend(true, [], cObj.model.series) };
                    dataVal.dataLabel = { visible: false };
                    dataVal.series = cObj.model.series;
                    break;
                case "DLCenter":
                    series = [];
                    details.action = "DL";
                    details.operation = "DLCenter";
                    details.prev = { series: $.extend(true, [], cObj.model.series) };
                    for (i = 0; i < cObj.model.series.length; i++)
                        series.push({ marker: { dataLabel: { visible: true, verticalTextAlignment: "center", textPosition: "middle", offset: { y: 0 } } } });
                    cObj.option({ series: series });
                    details.cur = { series: $.extend(true, [], cObj.model.series) };
                    dataVal.dataLabel = { visible: true, vAlign: "center", tPosn: "middle" };
                    dataVal.series = cObj.model.series;
                    break;
                case "DLIBase":
                    series = [];
                    details.action = "DL";
                    details.operation = "DLIBase";
                    details.prev = { series: $.extend(true, [], cObj.model.series) };
                    for (i = 0; i < cObj.model.series.length; i++)
                        series.push({ marker: { dataLabel: { visible: true, verticalTextAlignment: "far", textPosition: "bottom", offset: { y: 0 } } } });
                    cObj.option({ series: series });
                    details.cur = { series: $.extend(true, [], cObj.model.series) };
                    dataVal.dataLabel = { visible: true, vAlign: "far", tPosn: "bottom" };
                    dataVal.series = cObj.model.series;
                    break;
                case "DLIEnd":
                    series = [];
                    details.action = "DL";
                    details.operation = "DLIEnd";
                    details.prev = { series: $.extend(true, [], cObj.model.series) };
                    for (i = 0; i < cObj.model.series.length; i++)
                        series.push({ marker: { dataLabel: { visible: true, verticalTextAlignment: "near", textPosition: "top", offset: { y: -10 } } } });
                    cObj.option({ series: series });
                    details.cur = { series: $.extend(true, [], cObj.model.series) };
                    dataVal.dataLabel = { visible: true, vAlign: "near", tPosn: "top" };
                    dataVal.series = cObj.model.series;
                    break;
                case "DLOEnd":
                    series = [];
                    details.action = "DL";
                    details.operation = "DLOEnd";
                    details.prev = { series: $.extend(true, [], cObj.model.series) };
                    for (i = 0; i < cObj.model.series.length; i++)
                        series.push({ marker: { dataLabel: { visible: true, verticalTextAlignment: "near", textPosition: "top", offset: { y: 0 } } } });
                    cObj.option({ series: series });
                    details.cur = { series: $.extend(true, [], cObj.model.series) };
                    dataVal.dataLabel = { visible: true, vAlign: "near", tPosn: "top" };
                    dataVal.series = cObj.model.series;
                    break;
                case "PMajorH":
                    details.visibility = !(cObj.model.primaryYAxis.majorGridLines.visible);
                    cObj.option("primaryYAxis", { majorGridLines: { visible: details.visibility } });
                    dataVal.yAxis.majorGridLines = { visible: details.visibility };
                    details.action = details.operation = value;
                    break;
                case "PMajorV":
                    details.visibility = !(cObj.model.primaryXAxis.majorGridLines.visible);
                    cObj.option("primaryXAxis", { majorGridLines: { visible: details.visibility } });
                    dataVal.xAxis.majorGridLines = { visible: details.visibility };
                    details.action = details.operation = value;
                    break;
                case "PMinorH":
                    details.visibility = !(cObj.model.primaryYAxis.minorGridLines.visible);
                    cObj.option("primaryYAxis", { minorGridLines: { visible: details.visibility }, minorTicksPerInterval: 5, minorTickLines: { visible: details.visibility } });
                    dataVal.yAxis.minorGridLines = { visible: details.visibility };
                    details.action = details.operation = value;
                    break;
                case "PMinorV":
                    details.visibility = !(cObj.model.primaryXAxis.minorGridLines.visible);
                    cObj.option("primaryXAxis", { minorGridLines: { visible: details.visibility }, minorTicksPerInterval: 5, minorTickLines: { visible: details.visibility } });
                    dataVal.xAxis.minorGridLines = { visible: details.visibility };
                    details.action = details.operation = value;
                    break;
                case "LNone":
                    details.visibility = false;
                    cObj.option("legend", { visible: details.visibility });
                    dataVal.legend.visible = details.visibility;
                    details.action = value;
                    details.operation = "LNone";
                    break;
                case "LLeft":
                    details.prev = { position: cObj.model.legend.position };
                    cObj.option("legend", { position: "left", visible: true });
                    dataVal.legend.position = "left";
                    details.cur = { position: cObj.model.legend.position };
                    details.action = "Legend";
                    details.operation = "LLeft";
                    break;
                case "LRight":
                    details.prev = { position: cObj.model.legend.position };
                    cObj.option("legend", { position: "right", visible: true });
                    dataVal.legend.position = "right";
                    details.cur = { position: cObj.model.legend.position };
                    details.action = "Legend";
                    details.operation = "LRight";
                    break;
                case "LBottom":
                    details.prev = { position: cObj.model.legend.position };
                    cObj.option("legend", { position: "bottom", visible: true });
                    dataVal.legend.position = "bottom";
                    details.cur = { position: cObj.model.legend.position };
                    details.action = "Legend";
                    details.operation = "LBottom";
                    break;
                case "LTop":
                    details.prev = { position: cObj.model.legend.position };
                    cObj.option("legend", { position: "top" });
                    dataVal.legend.position = "top";
                    details.cur = { position: cObj.model.legend.position };
                    details.action = "Legend";
                    details.operation = "LTop";
                    break;
            }
            formulaBar && (formulaBar.style.display = "block");
            if (!ej.isNullOrUndefined(details.action)) {
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        changeTheme: function (chartId, theme) {
            var xlObj = this.XLObj, details;
            chartId = chartId || xlObj.element.find("#" + xlObj._id + "_chart").val();
            details = { sheetIndex: xlObj.getActiveSheetIndex(), reqType: "shape", action: "chartTheme", chartId: chartId };
            details.prev = { theme: $("#" + chartId).data("ejChart").model.theme };
            theme && (theme.indexOf("dark") > -1) ? ($("#" + chartId).addClass('e-ss-charttheme')) : ($("#" + chartId).removeClass('e-ss-charttheme'));
            xlObj.XLChart.refreshChart(chartId, { theme: theme });
            details.cur = { theme: theme };
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        changeType: function (chartId, option) {
            var xlObj = this.XLObj, chartObj = $('#' + chartId).data('ejChart'), details = { sheetIndex: xlObj.getActiveSheetIndex(), reqType: "shape", shapeType: "chart", action: "chartType", chartId: chartId };
            details.prev = { chartType: chartObj.model.series[0].type, enable3D: chartObj.model.enable3D, marker: chartObj.model.series[0].marker.visible };
            xlObj.XLChart.refreshChart(chartId, option);
            details.cur = { chartType: chartObj.model.series[0].type, enable3D: chartObj.model.enable3D, marker: chartObj.model.series[0].marker.visible };
            $("#" + xlObj._id + "_charttypedlg").ejDialog("close");
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        _getShapeObj: function (id, type) {
            var xlObj = this.XLObj, shapeMngr = xlObj.getSheet(xlObj.getActiveSheetIndex()).shapeMngr[type], i = xlObj.getObjectLength(shapeMngr);
            if (i)
                return shapeMngr[id];
        },

        _validateChartRange: function (range, xRange, yRange, lRange) {
            var xlObj = this.XLObj;
            if (!yRange)
                return { msg: xlObj._getLocStr("YAxisMissing") };
            if (!(xlObj.inRange(range, yRange[0], yRange[1]) || xlObj.inRange(range, yRange[2], yRange[3])))
                return { msg: xlObj._getLocStr("InvalidYAxis") };
            if (xRange) {
                if (!(xlObj.inRange(range, xRange[0], xRange[1]) || xlObj.inRange(range, range[2], range[3])))
                    return { msg: xlObj._getLocStr("InvalidXAxis") };
                else if (xRange[3] - xRange[1] !== 0)
                    return { msg: xlObj._getLocStr("InvalidXAxisColumns") };
            }
            if (lRange && !(xlObj.inRange(range, lRange[0], lRange[1]) || xlObj.inRange(range, lRange[2], lRange[3])))
                return { msg: xlObj._getLocStr("InvalidLegend") };
            return { status: true };
        },

        _renderChartRangeDialog: function () {
            var xlObj = this.XLObj, opt = { width: "25%", showRoundedCorner: true, click: $.proxy(this._chartRangeDlgBtnClick, this) }, htmlElem = $("<div id='" + xlObj._id + "_chartrangedlg'><div class='e-dlgctndiv e-dlg-fields'><table cellpadding='0' cellspacing='0'><tr class='e-dlgtd-fields'><td>" + xlObj._getLocStr("XAxisRange") + "</td><td><input type='text' class='ejinputtext' id='" + xlObj._id + "_crxaxis'/></td></tr><tr class='e-dlgtd-fields'><td>" + xlObj._getLocStr("YAxisRange") + "</td><td><input type='text' class='ejinputtext' id='" + xlObj._id + "_cryaxis' /></td></tr><tr class='e-dlgtd-fields'><td>" + xlObj._getLocStr("LegendRange") + "</td><td><input type='text' class='ejinputtext' id='" + xlObj._id + "_crlaxis'/></td></tr></table></div><div class='e-dlg-btnfields' ><div class='e-dlg-btnctnr'><button id='" + xlObj._id + "_crok' >" + xlObj._getLocStr("Ok") + "</button><button id='" + xlObj._id + "_crcancel'>" + xlObj._getLocStr("Cancel") + "</button></div></div></div>");
            xlObj.element.append(htmlElem);
            htmlElem.ejDialog({
                width: 310,
                height: "auto",
                enableResize: false,
                showOnInit: false,
                enableModal: true,
                cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg e-ss-chartrange",
                title: xlObj._getLocStr("ChartRange")
            });
            $("#" + xlObj._id + "_crok").ejButton(opt);
            $("#" + xlObj._id + "_crok").ejButton("option", "cssClass", "e-ss-okbtn");
            $("#" + xlObj._id + "_crcancel").ejButton(opt);
        },

        _chartRangeDlgBtnClick: function (args) {
            var cid, xRange, yRange, lRange, canDlgClose = true, xlObj = this.XLObj;
            if (args.model.text === xlObj._getLocStr("Ok")) {
                cid = document.getElementById(xlObj._id + "_chart").value;
                xRange = $("#" + xlObj._id + "_crxaxis").val();
                yRange = $("#" + xlObj._id + "_cryaxis").val();
                lRange = $("#" + xlObj._id + "_crlaxis").val();
                this.changeDataRange(cid, xRange, yRange, lRange);
            }
            if (canDlgClose)
                $("#" + xlObj._id + "_chartrangedlg").ejDialog("close");

        },

        changeDataRange: function (cid, xRange, yRange, lRange) {
            var resp, chartData, xlObj = this.XLObj, xIdx, yIdx, lIdx, sheetIdx = xlObj._getSheetIndex(xlObj.getActiveSheetIndex()), sheet = xlObj.getSheet(sheetIdx), details, selectData, canDlgClose = true,
            chartData = this._getShapeObj(cid, "chart");
            if (xRange.length)
                xIdx = xlObj.getRangeIndices(xRange);
            if (yRange.length)
                yIdx = xlObj.getRangeIndices(yRange);
            if (lRange.length)
                lIdx = xlObj.getRangeIndices(lRange);
            selectData = { xRange: xRange, yRange: yRange, lRange: lRange };
            resp = this._validateChartRange(chartData.range, xIdx, yIdx, lIdx);
            if (resp.status) {
                chartData.xRange = xIdx;
                chartData.yRange = yIdx;
                chartData.lRange = lIdx;
                this._refreshChart(chartData);
                var cModel = $("#" + cid).ejChart("model");
                chartData.xAxis = { min: cModel.primaryXAxis.range.min, max: cModel.primaryXAxis.range.max, interval: cModel.primaryXAxis.range.interval, title: { text: cModel.primaryXAxis.title.text.length ? cModel.primaryXAxis.title.text : "" }, range: xIdx };
                chartData.yAxis = { min: cModel.primaryYAxis.range.min, max: cModel.primaryYAxis.range.max, interval: cModel.primaryYAxis.range.interval, title: { text: cModel.primaryYAxis.title.text.length ? cModel.primaryYAxis.title.text : "" }, range: yIdx };
                chartData.legend = { visible: cModel.legend.visible, range: lIdx };
                if (xlObj.getActiveSheetIndex() === chartData.dataSheetIdx)
                    this._focusChartRange(xIdx, yIdx, lIdx);
            }
            else {
                canDlgClose = false;
                xlObj._showAlertDlg("Alert", "T-" + resp.msg, "", 400);
            }
            if ((!sheet._isImported || sheet._isLoaded) && !xlObj._isUndoRedo && !xlObj._isExport) {
                details = { sheetIndex: sheetIdx, reqType: "shape", shapeType: "chart", action: "selectData", id: cid, prev: xlObj._selectDataval, cur: selectData };
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
            }
        },

        _afterChartRefresh: function () {
            var xlObj = this.XLObj, formulaBar;
            if (xlObj.model.allowFormulaBar) {
                formulaBar = xlObj.element.find('.e-formulabar')[0];
                formulaBar.style.display = "none";
                formulaBar.style.display = "";
            }
        }
    };
})(jQuery, Syncfusion);;
/// <reference path="ej.spreadsheet.print.js" />
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.print = function (obj) {
        this.XLObj = obj;
        this._printHeight = 950;
        this._pageHeight = 970;
        this._pageWidth = 750;
        this._marginTop = 30;
        this._marginBottom = 150;
        this._printRowLabels = false;
        this._isPrintSelection = false;
        this._stRow = 0;
        this._stColumn = 0;
        this.shpIndex = [];
        this.shpObj = [];
        this.shpPicObj = [];
    };
    ej.spreadsheetFeatures.print.prototype = {
        //Printing Feature
        _printSetting: function (value) {
            this.XLObj.model.pageSize = value;
            switch (value) {
                case ej.Spreadsheet.pageSize.A4:
                    this._printHeight = 950;
                    this._pageHeight = 970;
                    this._pageWidth = 750;
                    this._marginTop = 30;
                    this._marginBottom = 150;
                    break;
                case ej.Spreadsheet.pageSize.A3:
                    this._printHeight = 1350;
                    this._pageHeight = 1330;
                    this._pageWidth = 860;
                    this._marginTop = 30;
                    this._marginBottom = 150;
                    break;
                case ej.Spreadsheet.pageSize.Letter:
                    this._printHeight = 1040;
                    this._pageHeight = 920;
                    this._pageWidth = 860;
                    this._marginTop = 30;
                    this._marginBottom = 60;
                    break;
            }
        },

        printSelection: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.printSettings.allowPrinting || xlObj.model.isReadOnly)
                return;
            if (xlObj.model.printSettings.allowPageSize) {
                var j, len, rangeData, sheetIdx = xlObj.getActiveSheetIndex(), selectedCells = xlObj.getSheet(sheetIdx)._selectedCells, startCell = selectedCells[0], endCell = selectedCells[selectedCells.length - 1],
                    cellCount = endCell.colIndex - startCell.colIndex, selTable = ej.buildTag("table.e-table"), colgroup = ej.buildTag("colgroup"), col = xlObj._getContent(sheetIdx).find("col"), printDiv = ej.buildTag("div#printDiv.e-spreadsheet e-js", null, { border: "none" });
                xlObj._refreshTemplates(sheetIdx, true, startCell.colIndex, (startCell.colIndex + cellCount + 1));
                xlObj._isPrint = true;
                for (j = startCell.colIndex; j < endCell.colIndex; j++)
                    $(col[j].outerHTML).attr("id", "cc").appendTo(colgroup);
                rangeData = xlObj.getRangeData({ range: [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex], property: ["value", "value2", "format", "border", "type", "isFilterHide", "isRHide", "isFHide", "isMHide", "merge", "hRow", "wrap", "overflow", "align", "hyperlink", "cFormatRule", "rule"], sheetIdx: sheetIdx, withRowIdx: true });
                selTable.html(xlObj._renderData(rangeData, sheetIdx, startCell.colIndex, cellCount + 1, true));
                colgroup.insertBefore(selTable.find('tbody'));
                this._stRow = startCell.rowIndex;
                this._stCol = startCell.colIndex;
                this._isPrintSelection = true;
                xlObj._isPrint = false;
                if (this._printRowLabels)
                    this._calculateTabCount();
                else
                    this._constructSheet(printDiv, sheetIdx, selTable, selTable[0].rows);
                xlObj._refreshTemplates(sheetIdx, true);
            }
            else {
                selectedCells = xlObj.getSheet(sheetIdx)._selectedCells;
                startCell = selectedCells[0]; endCell = selectedCells[selectedCells.length - 1];
                var i, links, link, stylesLink = [], chartPicElem = xlObj.element.find(".e-ss-activeimg").clone();
                if (selectedCells.length)
                    this._flatPrint([startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex]);
                else if (chartPicElem.length) {
                    links = $("head").find("link").add("style");
                    for (i = 0, len = links.length; i < len; i++) {
                        link = links[i].href || "";
                        if ((links[i].tagName === "STYLE" && (links[i].id.indexOf(xlObj._id + "_sshide") > -1 || links[i].id.indexOf(xlObj._id + "_sscustomformat") > -1)) || link.indexOf("ej.pivotintegration.css") > -1 || link.indexOf("ej.widgets.core") > -1 || link.indexOf("ej.web.all") > -1 || link.indexOf("ej.theme") > -1) {
                            stylesLink.push(links[i]);
                        }
                    }
                    this.print(ej.buildTag("div#printDiv.e-spreadsheet e-js", chartPicElem.css({ top: 0, left: 0 }), { border: "none" }), stylesLink);
                }
            }
        },

        printSheet: function () {
            var xlObj = this.XLObj;
            if (!xlObj.model.printSettings.allowPrinting || xlObj.model.isReadOnly)
                return;
            if (xlObj.model.printSettings.allowPageSize) {
                var j, jLen, rangeData, printDiv = ej.buildTag("div#printDiv"), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), colWtColl = sheet.columnsWidthCollection,
                    col = xlObj._getContent(sheetIdx).find("col"), selTable = ej.buildTag("table"), colgroup = ej.buildTag("colgroup");
                xlObj._refreshTemplates(sheetIdx, true, 0, sheet.usedRange.colIndex + 1);
                xlObj._isPrint = true;
                for (j = 0, jLen = colWtColl.length; j < jLen; j++)
                    $(col[j].outerHTML).attr("id", "cc").appendTo(colgroup);
                rangeData = xlObj.getRangeData({ range: [0, 0, sheet.usedRange.rowIndex, sheet.usedRange.colIndex], property: ["value", "value2", "format", "border", "type", "isFilterHide", "isRHide", "isFHide", "isMHide", "merge", "hRow", "wrap", "overflow", "align", "hyperlink", "cFormatRule", "rule"], sheetIdx: sheetIdx, withRowIdx: true });
                selTable.html(xlObj._renderData(rangeData, sheetIdx, 0, sheet.usedRange.colIndex + 1, true));
                colgroup.insertBefore(selTable.find('tbody'));
                if (this._printRowLabels)
                    this._calculateTabCount();
                else
                    this._constructSheet(printDiv, sheetIdx, selTable, selTable[0].rows);
                xlObj._isPrint = false;
                xlObj._refreshTemplates(sheetIdx, true);
            }
            else
                this._flatPrint();
        },

        _flatPrint: function (range) {
            var len, xlObj = this.XLObj, i, j, sIdx = 0, printCntElem, totWidth = 0, diffLeft, top, left, diffTop, rangeData, printDiv = ej.buildTag("div#printDiv.e-spreadsheet e-js", null, { border: "none" }), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), colWtColl = sheet.columnsWidthCollection,
                jLen = sheet.usedRange.colIndex, col = xlObj._getContent(sheetIdx).find("col"), selTable = ej.buildTag("table.e-table"), colgroup = ej.buildTag("colgroup"), links = $("head").find("link").add("style"), stylesLink = [], chartPicElems = xlObj.element.find(".e-ss-object, .e-ss-pivot").clone(), link, inlineStyle = "", hRowCol = sheet.hideRowsCollection;
            xlObj._refreshTemplates(sheetIdx, true, 0, sheet.usedRange.colIndex + 1);
            xlObj._isPrint = true;
            if (range) { //for print selection
                sIdx = range[1];
                jLen = range[3];
            }
            for (j = sIdx; j <= jLen; j++) {
                $(col[j].outerHTML).attr("id", "cc").appendTo(colgroup);
                totWidth += colWtColl[j];
                if (colWtColl[j] === 0)
                    inlineStyle += "td.e-rowcell:nth-of-type(" + (j + 1) + "){display: none}";
            }
            printDiv.width(totWidth);
            rangeData = xlObj.getRangeData({ range: range ? range : [0, 0, sheet.usedRange.rowIndex, sheet.usedRange.colIndex], property: ["value", "value2", "format", "border", "type", "isFilterHide", "isRHide", "isFHide", "isMHide", "merge", "hRow", "wrap", "overflow", "align", "hyperlink", "cFormatRule", "rule", "isOverflow", "isOfBrdr"], sheetIdx: sheetIdx, withRowIdx: true });
            selTable.append(colgroup, xlObj._renderData(rangeData, sheetIdx, range ? range[1] : 0, (range ? range[3] - range[1] : sheet.usedRange.colIndex) + 1, true));
            selTable.width(totWidth);
            range && selTable.find('td[class=""]').remove(); //remove unwanted td in print selection
            for (j = 0; j < hRowCol.length; j++) { //hide row update
                if (range && !xlObj.inRange(range, j, range[1]))
                    continue;
                selTable.find("tr:eq(" + hRowCol[j] + ")").addClass("e-r-hide");
            }
            if (range) {
                printDiv.css({ overflow: "hidden" }); //Chart picture position update
                diffLeft = sheet._colWidthCollection[range[1]], diffTop = sheet._rowHeightCollection[range[0]];
                for (j = 0; j < chartPicElems.length; j++) {
                    top = parseInt(chartPicElems[j].style.top), left = parseInt(chartPicElems[j].style.left);
                    $(chartPicElems[j]).css({ top: (top - diffTop), left: (left - diffLeft) });
                }
            }
            printCntElem = ej.buildTag("div.e-content e-ss-cursor", selTable);
            printCntElem.append(chartPicElems);
            printCntElem = ej.buildTag("div.e-spreadsheetcontentcontainer", printCntElem);
            printCntElem = ej.buildTag("div.e-spreadsheetmainpanel", printCntElem, { width: totWidth, float: "none" });
            inlineStyle += ".e-spreadsheet .e-spreadsheetmainpanel .e-content .e-table tr td:first-child{ border-left-width: 1px; }.e-spreadsheet .e-spreadsheetmainpanel .e-content .e-table tr:first-child td{border-top-width: 1px;}table{page-break-inside: auto !important;}table tr{page-break-inside: avoid !important;}html,body{margin: 0; padding: 0; }";
            printDiv.append(printCntElem, ej.buildTag("style", inlineStyle, {}, { type: 'text/css' }));
            for (i = 0, len = links.length; i < len; i++) {
                link = links[i].href || "";
                if ((links[i].tagName === "STYLE" && (links[i].id.indexOf(xlObj._id + "_sshide") > -1 || links[i].id.indexOf(xlObj._id + "_sscustomformat") > -1)) || link.indexOf("ej.pivotintegration.css") > -1 || link.indexOf("ej.widgets.core") > -1 || link.indexOf("ej.web.all") > -1 || link.indexOf("ej.theme") > -1) {
                    stylesLink.push(links[i]);
                }
            }
            this.print(printDiv, stylesLink);
            xlObj._isPrint = false;
            xlObj._refreshTemplates(sheetIdx, true);
        },

        _calculateTabCount: function () {
            var xlObj = this.XLObj, cColl = [], tCount = 0, actualWidth = 0, colWtColl = xlObj.getSheet(xlObj.getActiveSheetIndex()).columnsWidthCollection;
            for (var i = 0, len = colWtColl.length; i < len; i++) {
                actualWidth += colWtColl[i];
                if (actualWidth >= this._pageWidth) {
                    cColl.push({ tCount: tCount + 1, cellCount: i });
                    actualWidth = 0;
                }
            }
        },

        _calculateCellRowCount: function (rows, startCell, startRow) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), colWtColl = sheet.columnsWidthCollection, rowHtColl = sheet.rowsHeightCollection, extra, actualWidth = 0, actualHeight = 0, cellCount = 12, rowCount = 40, endRow = 0, endCell = 0, len, i, j;
            for (i = startCell, len = colWtColl.length; i < len; i++) {
                actualWidth += colWtColl[i];
                if (actualWidth >= this._pageWidth) {
                    endCell = cellCount = i;
                    break;
                }
                else {
                    extra = Math.floor((this._pageWidth - actualWidth) / sheet.columnWidth);
                    endCell = cellCount = colWtColl.length + extra;
                }
            }

            for (j = startRow, len = rowHtColl.length; j < len; j++) {
                actualHeight += rowHtColl[j];
                if (actualHeight >= this._pageHeight) {
                    endRow = rowCount = j;
                    break;
                }
                else {
                    extra = Math.floor((this._pageHeight - actualHeight) / xlObj.model.rowHeight);
                    endRow = rowCount = rowHtColl.length + extra;
                }
            }
            var cells = { startCell: startCell, endCell: endCell, startRow: startRow, endRow: endRow, cellCount: cellCount, rowCount: rowCount };
            return cells;
        },

        _constructSheet: function (printDiv, sheetIdx, table, rows) {
            var maindiv = ej.buildTag("div .e-spreadsheet", "", {}), subdiv = ej.buildTag("div .e-spreadsheetmainpanel", "", {}), pageCount = 0, cells = this._calculateCellRowCount(rows, 0, 0);
            var totCellCount = rows[0].cells.length, totRowCount = rows.length;
            pageCount = Math.ceil(totCellCount / cells.cellCount);
            pageCount = pageCount * (Math.ceil(totRowCount / cells.rowCount));
            if (pageCount == 1)
                cells.rowCount = rows.length;
            maindiv.append(subdiv);
            this._constructPrintableElement(sheetIdx, printDiv, maindiv.find(".e-spreadsheetmainpanel"), table, rows, totRowCount, totCellCount, pageCount, cells.cellCount, cells.rowCount, cells.startRow, cells.startCell, cells.endRow, cells.endCell);
        },

        _constructPrintableElement: function (sheetIdx, printDiv, maindiv, maintable, rows, totRowCount, totCellCount, pageCount, cellCount, rowCount, startRow, startCell, endRow, endCell) {
            var trRow, tdTemplate, isFirst = false, table, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), duplicateDiv = ej.buildTag("div"), pageTable,
                isEmpty = false, rowHt, isavbleRow = true, isRHide = false, isCHide = false, emptyTr = 0, currTable, i, j, cell, len, dupTab,
                rowHtColl = sheet.rowsHeightCollection, chartPicElems, link;
            for (var h = pageCount; h > 0; h--) {
                pageTable = this._calculateCellRowCount(rows, startCell, startRow);
                startCell = pageTable.startCell; endCell = pageTable.endCell; startRow = pageTable.startRow; endRow = pageTable.endRow; cellCount = pageTable.cellCount; rowCount = pageTable.rowCount;
                table = this._constructTable(sheetIdx, startCell, endCell);
                if (sheet.showHeadings)
                    this._constructHeaders(startCell, endCell, endRow, table);
                for (i = startRow; i < endRow; i++) {
                    if (!ej.isNullOrUndefined(maintable[0].rows[i])) {
                        rowHt = rowHtColl[i];
                        isavbleRow = true;
                        trRow = (rowHt > 0) ? ej.buildTag("tr", "", { height: rowHt }) : ej.buildTag("tr", "", { height: xlObj.model.rowHeight });
                    }
                    else {
                        isavbleRow = false;
                        trRow = ej.buildTag("tr", "", { height: xlObj.model.rowHeight });
                    }
                    if (isavbleRow) {
                        isRHide = xlObj.XLEdit.getPropertyValue(i, 0, "isRHide");
                        if (!ej.isNullOrUndefined(isRHide))
                            xlObj.addClass(trRow[0], "e-r-hide");
                    }
                    for (j = startCell; j < endCell; j++) {
                        if (sheet.showHeadings && !isFirst) {
                            tdTemplate = "<td class=\"{0}\">{1}</td>";
                            $(String.format(tdTemplate, "e-rowcell e-header", (i + 1))).appendTo(trRow);
                            isFirst = true;
                        }
                        if ($(rows[i]).length > 0 && $(rows[i].cells[j]).length > 0) {
                            cell = $(rows[i].cells[j].outerHTML).attr("id", "ss");
                            cell.appendTo(trRow);
                        }
                        else {
                            cell = ej.buildTag("td.e-rowcell");
                            cell.appendTo(trRow);
                        }
                        isCHide = xlObj.XLEdit.getPropertyValue(0, j, "isCHide");
                        if (!ej.isNullOrUndefined(isCHide))
                            xlObj.addClass(cell[0], "e-col-hide");
                    }
                    isFirst = false;
                    table.append(trRow);
                }
                printDiv.append(table);
                if (endRow < totRowCount) {
                    startRow = endRow;
                    endRow = endRow + rowCount;
                }
                else if (endRow >= totRowCount) {
                    if (endCell >= totCellCount)
                        break;
                    startRow = 0;
                    endRow = rowCount;
                    startCell = endCell;
                    endCell = endCell + cellCount;
                }
            }
            for (i = printDiv.find("table").length - 1; i >= 0; --i) {
                currTable = $(printDiv.find("table")[i]);
                if (!isEmpty)
                    this._checkEmptyRow(sheetIdx, currTable, "first");
                emptyTr = sheet.showHeadings ? currTable.find("tr.empty").length + 1 : currTable.find("tr.empty").length;
                if ((currTable.find("tr").length !== emptyTr) || isEmpty) {
                    $(currTable.get(0).outerHTML).attr("id", "cc").appendTo(duplicateDiv);
                    isEmpty = true;
                }

            }
            dupTab = duplicateDiv.find("table");
            for (i = dupTab.length - 1; i >= 0; --i) {
                if (dupTab.length - 1 !== i) {
                    if (xlObj.model.pageSize === ej.Spreadsheet.pageSize.A4)
                        dupTab.eq(i).css({ 'margin-top': 300, 'margin-bottom': 300 });
                    if (xlObj.model.pageSize === ej.Spreadsheet.pageSize.A3)
                        dupTab.eq(i).css({ 'margin-top': 120, 'margin-bottom': 110 });
                    if (xlObj.model.pageSize === ej.Spreadsheet.pageSize.Letter)
                        if (sheet.showHeadings)
                            dupTab.eq(i).css({ 'margin-top': 70, 'margin-bottom': 50 });
                        else
                            dupTab.eq(i).css({ 'margin-top': 0, 'margin-bottom': 50 });
                }
                else if (dupTab.length - 1 === i)
                    dupTab.eq(i).css({ 'margin-top': 30, 'margin-bottom': sheet.showHeadings ? 20 : 0 });
                if (!i) {
                    if (dupTab.length > 1)
                        dupTab.eq(i).css({ 'margin-top': 120, 'margin-bottom': 0 });
                    this._checkEmptyRow(sheetIdx, dupTab.eq(i), "last");
                }
                $(dupTab[i].outerHTML).attr("id", "cc").appendTo(maindiv);
            }
            var links = $("head").find("link"), stylesLink = [];
            for (i = 0, len = links.length; i < len; i++) {
                link = links[i].href || "";
                if (links[i].href.indexOf("ej.pivotintegration.css") > -1 || link.indexOf("ej.theme") > -1) {
                    stylesLink.push(links[i]);
                    break;
                }
            }
            chartPicElems = this._constructChartPicElement(maindiv);
            maindiv.append(chartPicElems);
            maindiv = maindiv.parent();
            xlObj._trigger("_pivotPrint", { element: maindiv });
            this.print(maindiv, stylesLink, sheetIdx);
        },

        _hideShapeElement: function (element) {
            if (this._isPrintSelection) {
                var i, j, len, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), selectedCells = xlObj.getSheet(sheetIdx)._selectedCells, shapemngr = xlObj.getSheet(sheetIdx).shapeMngr, chartLen = xlObj.getObjectLength(shapemngr.chart), picLen = xlObj.getObjectLength(shapemngr.picture);
                element.find(".e-ss-object").hide();
                if (chartLen >= 1) {
                    for (j = 0; j < chartLen; j++) {
                        for (i = 0, len = selectedCells.length; i < len; i++) {
                            if (shapemngr.chart[xlObj.getObjectKeys(shapemngr.chart)[j]].rowIndex == selectedCells[i].rowIndex && shapemngr.chart[xlObj.getObjectKeys(shapemngr.chart)[j]].colIndex == selectedCells[i].colIndex)
                                element.find("#" + shapemngr.chart[xlObj.getObjectKeys(shapemngr.chart)[j]].id).show();
                        }
                    }
                }
                if (picLen >= 1) {
                    for (j = 0; j < picLen; j++) {
                        for (i = 0, len = selectedCells.length; i < len; i++) {
                            if (shapemngr.picture[xlObj.getObjectKeys(shapemngr.picture)[j]].rowIndex == selectedCells[i].rowIndex && shapemngr.picture[xlObj.getObjectKeys(shapemngr.picture)[j]].colIndex == selectedCells[i].colIndex)
                                element.find("#" + shapemngr.picture[xlObj.getObjectKeys(shapemngr.picture)[j]].id).show();
                        }
                    }
                }
            }
        },

        _constructChartPicElement: function (maindiv) {
            var i, j, leng, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), chartPicElems = xlObj.element.find(".e-ss-object").clone(),
                shapemngr = xlObj.getSheet(sheetIdx).shapeMngr, chartLen = xlObj.getObjectLength(shapemngr.chart), picLen = xlObj.getObjectLength(shapemngr.picture), tables = maindiv.find("table"),
                tableLen = tables.length, table, sRowIdx, sColIdx, eRowIdx, eColIdx, rowIdx, colIdx, tabrw;
            this.shpIndex = []; this.shpObj = [], this.shpPicObj = [];
            for (var k = 0; k < tableLen; k++) {
                table = tables[k];
                tabrw = $(table).find("tr");
                sRowIdx = parseInt(tabrw.eq(1).find("td").eq(0).text()) - 1;
                sColIdx = xlObj.XLEdit.getColumnIndexByField(tabrw.eq(0).find("td").eq(1).children().text().trim());
                eRowIdx = sRowIdx + (tabrw.length - 1);
                eColIdx = sColIdx + tabrw.eq(0).children().length - 1;
                this.shpIndex.push({ pageNumber: k, startColIdx: sColIdx, startRowIdx: sRowIdx, endRowIdx: eRowIdx, endColIdx: eColIdx, top: table.style.marginTop, bottom: table.style.marginBottom, height: table.style.height });
            }
            if (chartLen >= 1) {
                for (j = 0; j < chartLen; j++) {
                    rowIdx = shapemngr.chart[chartPicElems[j].id].rowIndex;
                    colIdx = shapemngr.chart[chartPicElems[j].id].colIndex;
                    for (i = 0, leng = this.shpIndex.length; i < leng; i++) {
                        if (rowIdx >= this.shpIndex[i].startRowIdx && rowIdx < this.shpIndex[i].endRowIdx && colIdx >= this.shpIndex[i].startColIdx && colIdx < this.shpIndex[i].endColIdx) {
                            this.shpObj.push({ ID: chartPicElems[j].id, rowIndex: rowIdx, colIndex: colIdx, tableNumber: i })
                            this.shpObj[j].colIndex = this.shpObj[j].colIndex - this.shpIndex[i].startColIdx;
                            this.shpObj[j].rowIndex = this.shpObj[j].rowIndex - this.shpIndex[i].startRowIdx;
                        }
                    }
                    $(chartPicElems[j]).addClass(".e-spreadsheet .e-ss-object .e-datavisualization-chart .e-js");
                    $(chartPicElems[j]).css({ border: '1px solid gray', position: "absolute" });
                }
            }
            if (picLen >= 1) {
                for (j = 0; j < picLen; j++) {
                    rowIdx = shapemngr.picture[chartPicElems[chartLen + j].id].rowIndex;
                    colIdx = shapemngr.picture[chartPicElems[chartLen + j].id].colIndex;
                    for (i = 0, leng = this.shpIndex.length; i < leng; i++) {
                        if (rowIdx >= this.shpIndex[i].startRowIdx && rowIdx < this.shpIndex[i].endRowIdx && colIdx >= this.shpIndex[i].startColIdx && colIdx < this.shpIndex[i].endColIdx) {  //this.shpObj.push({ tableNumber: i });
                            this.shpPicObj.push({ ID: chartPicElems[chartLen + j].id, rowIndex: rowIdx, colIndex: colIdx, tableNumber: i });
                            this.shpPicObj[j].colIndex = this.shpPicObj[j].colIndex - this.shpIndex[i].startColIdx;
                            this.shpPicObj[j].rowIndex = this.shpPicObj[j].rowIndex - this.shpIndex[i].startRowIdx;
                        }
                    }
                    $(chartPicElems[chartLen + j]).addClass(".e-spreadsheet .e-ss-object");
                    $(chartPicElems[chartLen + j]).css({ position: 'absolute', "background-size": '100% 100%' });
                }
            }
            return chartPicElems;
        },

        _calculateTopForShapes: function (element) {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx),
                top, table, style, bottom, mtop, obj = this.shpObj.concat(this.shpPicObj), len = obj.length, diffLeft, diffTop;
            //Chart picture position update
            for (var j = 0; j < len; j++) {
                if (obj[j].tableNumber == 0) {
                    diffLeft = sheet._colWidthCollection[obj[j].colIndex], diffTop = sheet._rowHeightCollection[obj[j].rowIndex];
                    element.find("#" + obj[j].ID).css({ top: (diffTop + 60), left: (diffLeft + 20 + 8) });
                }
                else {
                    // top calcuation
                    top = 0
                    for (var t = 0; t < obj[j].tableNumber; t++) {
                        table = element.find('.e-table')[t];
                        style = table.getBoundingClientRect();
                        bottom = parseInt(table.style.marginBottom);
                        mtop = parseInt(table.style.marginTop);
                        top = top + (style.height + bottom + mtop);
                    }
                    diffLeft = sheet._colWidthCollection[obj[j].colIndex], diffTop = sheet._rowHeightCollection[obj[j].rowIndex];
                    element.find("#" + obj[j].ID).css({ top: (diffTop + top + 30 + parseInt(this.shpIndex[obj[j].tableNumber].top)), left: (diffLeft + 20 + 18) });// 18 for left
                }
            }
        },

        _checkEmptyRow: function (sheetIdx, currTable, tablePosn) {
            var emptyTd, emptyCnt, curTr = currTable.find("tr"), unformatted, unBordered, isMHide;
            for (var j = curTr.length - 1; j >= 0; --j) {
                emptyTd = $(curTr[j]).find(".e-rowcell").length;
                emptyCnt = $(curTr[j]).find(".e-rowcell:empty").length;
                emptyCnt = this.XLObj.getSheet(sheetIdx).showHeadings ? emptyCnt + 1 : emptyCnt;
                unformatted = $(curTr[j]).find('td[class *= "e-format"]').length;
                unBordered = $(curTr[j]).find('td[class *= "e-border"]').length;
                isMHide = $(curTr[j]).find('td[class *= "e-mc-hide"]').length;
                if ((emptyCnt === emptyTd) && unformatted < 1 && unBordered < 1 && isMHide < 1)
                    $(curTr[j]).addClass("empty");
                else {
                    $(curTr[j]).addClass("nonempty");
                    break;
                }
            }
            if (tablePosn === "last") {
                currTable.find("tr.empty").find("td").removeClass("e-rowcell");
                currTable.find("tr.empty").find("td.e-header").text("");
            }
        },

        _constructTable: function (sheetIdx, startCell, endCell) {
            var colgroup = ej.buildTag("colgroup"), xlObj = this.XLObj, pDiv = ej.buildTag("div", "", { height: this._printHeight, 'margin-top': this._marginTop, 'margin-bottom': this._marginBottom }), table = ej.buildTag("table.e-table", "", { height: this._printHeight, 'margin-top': this._marginTop, 'margin-bottom': this._marginBottom }),
                col = xlObj._getContent(xlObj.getActiveSheetIndex()).find("col"), newcol;
            if (xlObj.getSheet(sheetIdx).showHeadings) {
                newcol = "<col class=\"{0}\" style= \"width: 30px;\" >{1}</col>";
                $(newcol).appendTo(colgroup);
            }
            for (var j = startCell; j < endCell; j++)
                if ($(col[j]).length > 0)
                    $(col[j].outerHTML).attr("id", "cc").appendTo(colgroup);
                else {
                    newcol = "<col style= \"width: 64px;\" ></col>";
                    $(newcol).appendTo(colgroup);
                }
            table.append(colgroup);
            pDiv.append(table);
            return table;
        },

        _constructHeaders: function (startCell, endCell, endRow, table) {
            var xlObj = this.XLObj, trRow = ej.buildTag("tr", "", { height: 30 }), tdTemplate, divTemplate, divcell, divCellData, tdCellData, isFirst = false,
                rClass = "e-rowcell";
            if (this._isPrintSelection) {
                if (startCell < this._stCol) {
                    endCell = endCell + (this._stCol - startCell);
                    startCell = this._stCol;
                }
            }
            tdTemplate = "<td class=\"{0}\">{1}</td>";
            divTemplate = "<div class = \"{0}\" > {1}</div>";
            for (var i = startCell; i <= endCell; i++) {
                if (!isFirst) {
                    divcell = "";
                    isFirst = true;
                }
                else {
                    divcell = xlObj._generateHeaderText(i);
                    rClass = !ej.isNullOrUndefined(xlObj.XLEdit.getPropertyValue(0, i - 1, "isCHide")) ? "e-rowcell e-col-hide" : "e-rowcell e-headercell";
                }
                divCellData = String.format(divTemplate, "e-headercelldiv", divcell);
                tdCellData = String.format(tdTemplate, rClass, divCellData);
                $(trRow[0]).append(tdCellData);
            }
            table.append(trRow);
        },

        print: function (element, links, sheetIdx) {
            var xlObj = this.XLObj;
            if (!xlObj.model.printSettings.allowPrinting || xlObj.model.isReadOnly)
                return;
            var printWin = window.open('', 'print', "height=" + screen.height + ",width=" + screen.width + ",tabbar=no"), args = { styleTag: "" }, stylTag = ej.buildTag('style');
            if (xlObj.isUndefined(printWin))
                return;
            var styletext, sty, a, $div = ej.buildTag("div"), elementClone = element.clone();
            $div.append(elementClone);
            printWin.document.write("<!DOCTYPE html>");
            if (xlObj._browserDetails.name === "msie") {
                a = "";
                if (links.length > 0)
                    $(links).each(function (index, obj) {
                        $(obj).attr("href", obj.href);
                        if (obj.tagName == "STYLE" && obj.styleSheet) //IE < 11, inline CSS not loaded
                            a += ("<style>" + obj.styleSheet.cssText + "</style>");
                        else
                            a += obj.outerHTML;
                    });
                printWin.document.write('<html><head></head><body>' + a + $div[0].innerHTML + '</body></html>');
            }
            else {
                a = "";
                printWin.document.write("<html><head>");
                if (links.length > 0)
                    $(links).each(function (index, obj) {
                        $(obj).attr("href", obj.href);
                        a += obj.outerHTML;
                    });
                printWin.document.writeln(a + "</head><body>");
                printWin.document.writeln($div[0].innerHTML + "</body></html>");
                if (xlObj.model.printSettings.allowPageSize) {
                    $(printWin.document.head).append('<style></style>');
                    if (xlObj.model.sheets[sheetIdx].showGridlines)
                        styletext = ".e-spreadsheet .e-table{table-layout: fixed; width: 100%;}.e-spreadsheet .e-rowcell {border: 1px solid #000000;line-height: 14px;overflow: hidden;white-space: pre;vertical-align: bottom;}.e-spreadsheet .e-table{border-collapse: collapse}";
                    else
                        styletext = ".e-spreadsheet .e-table{table-layout: fixed; width: 100%;}.e-spreadsheet .e-rowcell {line-height: 14px;overflow: hidden;white-space: pre;vertical-align: bottom;}.e-spreadsheet .e-table{border-collapse: collapse}";
                    styletext = styletext.concat($(document).find("style#" + this.XLObj._id + "_sscustomformat").text());
                    sty = $(printWin.document.head).find("style");
                    styletext = styletext.concat(".e-spreadsheet .e-fr-hide { display: none !important;}.e-spreadsheet .e-fc-hide { display: none !important;}.e-spreadsheet .e-sswraptext {word-break: break-all; white-space: normal;}.e-spreadsheet .e-headercell{text-align:center;}.e-spreadsheet .e-ralign{text-align:right;}.e-spreadsheet .e-calign{text-align:center;}");
                    styletext = styletext.concat(".e-spreadsheet .e-hyperlinks { text-decoration: underline;}")
                    sty.append(styletext);
                }
            }
            if (xlObj._trigger("beforePrint", args))
                return false;
            if (args.styleTag) {
                if (typeof (args.styleTag) == "object")
                    printWin.document.head.appendChild(args.styleTag);
                else {
                    stylTag[0].append(args.styleTag);
                    printWin.document.head.appendChild(stylTag[0]);
                }
            }
            if (xlObj.model.printSettings.allowPageSize && $(printWin.document).find(".e-ss-object").clone().length) {
                this._calculateTopForShapes($(printWin.document).find('.e-spreadsheetmainpanel'));
                this._hideShapeElement($(printWin.document).find('.e-spreadsheetmainpanel'));
            }
            this._isPrintSelection = false;
            printWin.document.close();
            printWin.focus();
            setTimeout(function () {
                if ((xlObj._browserDetails.name === "msie") ? (xlObj.getObjectLength(printWin) && !ej.isNullOrUndefined(printWin.window) && !ej.isNullOrUndefined(printWin.location)) : (!ej.isNullOrUndefined(printWin.window) && !ej.isNullOrUndefined(printWin.location)))
                    printWin.print();
                setTimeout(function () { printWin.close(); }, 2000);
            }, 2000);
        }
    };
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.scroller = function (obj) {
        this.XLObj = obj;
        this._isIntrnlScroll = false;
        this._isScrollToCell = false;
    };

    ej.spreadsheetFeatures.scroller.prototype = {

        _getColWidths: function (sheetIdx, colIdx) {
            var i, len, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), colWidthColl = sheet.columnsWidthCollection,
                colWidth = sheet._colWidthCollection, val, ofColWidth = sheet._ofColWidthColl;
            if (!colIdx)
                colIdx = 1;
            for (i = colIdx, len = colWidthColl.length; i < len; i++) {
                colWidth[i] = colWidth[i - 1] + colWidthColl[i - 1];
                val = (colWidthColl[i - 1] === 0) ? sheet.hideColsCollection[i - 1] : colWidthColl[i - 1];
                ofColWidth[i] = ofColWidth[i - 1] + val;
            }
        },

        _getRowHeights: function (sheetIdx, rowIdx, cellHgt, isRefreshScroller) { // no need this logic
            var i, len, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), rowHtColl = sheet.rowsHeightCollection, rowHeight = sheet._rowHeightCollection, hideRowsColl = sheet.hideRowsCollection;
            if (!rowIdx)
                rowIdx = 1;
            for (i = rowIdx, len = rowHtColl.length; i < len; i++)
                rowHeight[i] = rowHeight[i - 1] + (hideRowsColl.indexOf(i - 1) > -1 ? 0 : rowHtColl[i - 1]);
            if (!cellHgt && xlObj.model.scrollSettings.allowScrolling) {
                if (xlObj.model.scrollSettings.allowVirtualScrolling)
                    xlObj._refreshVrtlBlocks(sheetIdx);
                !isRefreshScroller && !xlObj._isTableBrdrEnd && this._refreshScroller(sheetIdx, "refresh", "vertical");
            }
        },

        _createScroller: function (sheetIdx, settings, action) {
            var xlObj = this.XLObj, isHScroll = true, isVScroll = true, $content = xlObj._getContent(sheetIdx), vscroll = ej.buildTag("div#vscrollBar"),
                hscroll = ej.buildTag("div#hscrollBar"), sheet = xlObj.getSheet(sheetIdx), width = xlObj.model.scrollSettings.isResponsive ? settings.width - 2 : settings.width;
            sheet._contWidth = width;
            sheet._contHeight = settings.height;
            if (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal) {
                if (sheet._contWidth > xlObj._getEntireColWidth(sheetIdx))
                    isHScroll = false;
                if (sheet._contHeight > xlObj._getEntireRowHeight(sheetIdx))
                    isVScroll = false;
                hscroll[0].style.display = isHScroll ? "block" : "none";
                vscroll[0].style.display = isVScroll ? "block" : "none";
            }
            $content.append(vscroll).append(hscroll);
            xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").width(width - (isVScroll ? 18 : 0)).height(settings.height - (isHScroll ? 18 : 0));
            vscroll.ejScrollBar({
                orientation: "vertical",
                height: settings.height - (isHScroll ? 18 : 0),
                minimum: 0,
                viewportsize: settings.height,
                infiniteScrolling: true,
                scroll: $.proxy(this._scrollSpreadY, this)
            });
            hscroll.ejScrollBar({
                orientation: "horizontal",
                width: width - (isVScroll ? 17 : 0),
                minimum: 0,
                infiniteScrolling: true,
                viewportsize: settings.width,
                scroll: $.proxy(this._scrollSpreadX, this)
            });
            (action != "initial") && this._refreshScroller(sheetIdx, "initial", "all");
        },

        _hScroller: function (sheetIdx) {
            return this.XLObj._getContent(this.XLObj._getSheetIndex(sheetIdx)).find("#hscrollBar").data("ejScrollBar");
        },

        _vScroller: function (sheetIdx) {
            return this.XLObj._getContent(this.XLObj._getSheetIndex(sheetIdx)).find("#vscrollBar").data("ejScrollBar");
        },

        _refreshScroller: function (sheetIdx, status, type) {
            var xlObj = this.XLObj; sheetIdx = xlObj._getSheetIndex(sheetIdx);
            var modelWt, scrollWt, modelHt, scrollHt, noOfCol, noOfRow, fdiff = 0, sheet = xlObj.getSheet(sheetIdx), hScroll = this._hScroller(sheetIdx),
                colWt = sheet.columnWidth, rowHt = sheet.rowHeight, vScroll = this._vScroller(sheetIdx), isScrlNrml = (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal),
                content = xlObj._getContent(sheetIdx), cont = content.find(".e-content")[0];
            if (isScrlNrml && hScroll && vScroll && content.find("table").length) {
                this._refreshContHgt(sheetIdx);
                type = (type === "horizontal") ? "all" : type;
            }
            /* ----------- Horizontal Scrollbar--------- */
            if (hScroll && (type === "all" || type === "horizontal")) {
                modelWt = cont.offsetWidth;
                scrollWt = xlObj._getWidth(0, sheet.colCount - 1, sheetIdx) - sheet._frozenWidth;
                if ((scrollWt < modelWt + 2 * colWt) && !isScrlNrml) {
                    noOfCol = Math.floor(((modelWt + (colWt * 5)) - scrollWt) / colWt);
                    for (var i = 0; i < noOfCol; i++) {
                        this._createNewColumn(sheetIdx, { rowIndex: -1, colIndex: -1 }, { rowIndex: -1, colIndex: -1 }, "insert");
                        scrollWt = scrollWt + colWt;
                    }
                }
                hScroll._scrollData.handleSpace = modelWt - (2 * hScroll.model.buttonSize);
                fdiff = xlObj._isFrozen(xlObj.getFrozenColumns()) ? xlObj._getColOffsetLeft(sheet, (xlObj.getFrozenColumns())) - sheet._contScrollLeft : 0;
                hScroll._scrollData.handle = Math.floor((modelWt - fdiff) / scrollWt * hScroll._scrollData.handleSpace);
                if (hScroll._scrollData.handle < 15)
                    hScroll._scrollData.handle = 15;
                hScroll._scrollData.scrollable = hScroll.model.maximum = scrollWt - (modelWt - fdiff);
                hScroll._scrollData.onePx = hScroll._scrollData.scrollable / (hScroll._scrollData.handleSpace - hScroll._scrollData.handle) || 1;
                hScroll["e-hhandle"].width(hScroll._scrollData.handle);
                hScroll.model.scrollLeft = hScroll._scrollData.handleSpace - hScroll._scrollData.handle;
            }
            if (vScroll && (type === "all" || type === "vertical")) {
                /* ----------- Vertical Scrollbar--------- */
                modelHt = cont.offsetHeight;
                scrollHt = xlObj._getMaxHgt(sheetIdx, true, true) - sheet._frozenHeight;
                if (!isScrlNrml && scrollHt < modelHt + (2 * rowHt)) {
                    noOfRow = Math.floor(((modelHt + (rowHt * 5)) - scrollHt) / rowHt);
                    for (i = 0; i < noOfRow; i++) {
                        this._createNewRow(sheetIdx, -1, -1, "insert");
                        scrollHt = scrollHt + rowHt;
                    }
                }
                vScroll._scrollData.handleSpace = modelHt - (2 * vScroll.model.buttonSize);
                fdiff = xlObj._isFrozen(xlObj.getFrozenRows()) ? xlObj._getRowOffsetTop(sheet, (xlObj.getFrozenRows())) - sheet._contScrollTop : 0;
                vScroll._scrollData.handle = Math.floor((modelHt - fdiff) / scrollHt * vScroll._scrollData.handleSpace);
                if (vScroll._scrollData.handle < 15)
                    vScroll._scrollData.handle = 15;
                if (vScroll._scrollData.handle > vScroll._scrollData.handleSpace && xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Normal)
                    vScroll._scrollData.handle = vScroll._scrollData.handleSpace;
                vScroll._scrollData.scrollable = vScroll.model.maximum = scrollHt - (modelHt - fdiff);
                vScroll._scrollData.onePx = vScroll._scrollData.scrollable / (vScroll._scrollData.handleSpace - vScroll._scrollData.handle);
                vScroll["e-vhandle"].height(vScroll._scrollData.handle);
                vScroll.model.scrollTop = vScroll._scrollData.handleSpace - vScroll._scrollData.handle;
            }
        },

        _refreshContHgt: function (sheetIdx) {
            var hgt, cWidth, isHScrl, isVScrl, vScroll, hdlSpceHgt, hdlSpceWdth, hScroll, px = "px", none = "none", blk = "block", width = "width", height = "height", xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx),
                colWidth = xlObj._getEntireColWidth(sheetIdx), rowHeight = xlObj._getEntireRowHeight(sheetIdx), content = xlObj._getContent(sheetIdx), cont = content.find(".e-content"), hScrlStyle = content.find("#hscrollBar")[0].style, vScrlStyle = content.find("#vscrollBar")[0].style;
            hgt = cont[0].offsetHeight;
            cWidth = cont[0].offsetWidth;
            isHScrl = (hScrlStyle.display === none && sheet._contWidth < colWidth);
            isVScrl = (vScrlStyle.display === none && sheet._contHeight < rowHeight);
            if (isHScrl || (hScrlStyle.display === blk && sheet._contWidth > colWidth)) {
                hScrlStyle.display = isHScrl ? blk : none;
                hgt = isHScrl ? (hgt - 18) : (hgt + 19);
                isHScrl = true;
            }
            if (isVScrl || (vScrlStyle.display === blk && sheet._contHeight > rowHeight)) {
                vScrlStyle.display = isVScrl ? blk : none;
                cWidth = isVScrl ? (cWidth - 19) : (cWidth + 19);
                isVScrl = true;
            }
            if (isHScrl || isVScrl) {
                hdlSpceHgt = hgt - (2 * 18) + px;
                hgt += px;
                vScroll = content.find("#vscrollBar");
                cont[0].style[height] = hgt;
                xlObj._getJSSheetRowHeaderContent(sheetIdx)[0].style[height] = hgt;
                vScroll[0].style[height] = hgt;
                vScroll.find(".e-vscroll")[0].style[height] = hgt;
                vScroll.find(".e-vhandlespace")[0].style[height] = hdlSpceHgt;
                hScroll = content.find("#hscrollBar");
                cont[0].style[width] = cWidth + px;
                if (vScrlStyle.display === blk)
                    cWidth++;
                hdlSpceWdth = cWidth - (2 * 18) + px;
                cWidth += px;
                hScroll[0].style[width] = cWidth;
                hScroll.find(".e-hscroll")[0].style[width] = cWidth;
                hScroll.find(".e-hhandlespace")[0].style[width] = hdlSpceWdth;
            }
            colWidth += px;
            cont.find("table")[0].style[width] = colWidth;
            xlObj._getJSSheetHeader(sheetIdx).find("table")[0].style[width] = colWidth;
        },

        _changeTopSpread: function (vScroll, d, step, source) {
            var start = vScroll.value(), t = start + step;
            d.step = step;
            (!d.enableRTL ? t > d.scrollable : t < d.scrollable) && (t = d.scrollable);
            (!d.enableRTL ? t < 0 : t > 0) && (t = 0);
            vScroll["scroll"](t, source);
        },

        _changeLeftSpread: function (hScroll, d, step, source) {
            var start = hScroll.value(), t = start + step;
            d.step = step;
            (!d.enableRTL ? t > d.scrollable : t < d.scrollable) && (t = d.scrollable);
            (!d.enableRTL ? t < 0 : t > 0) && (t = 0);
            hScroll["scroll"](t, source);
        },

        _spreadMouseWheel: function (e) {
            var xlObj = this.XLObj, activeCell, deltaY, vScroll = this._vScroller(xlObj.getActiveSheetIndex()), hScroll = this._hScroller(xlObj.getActiveSheetIndex()); 
            xlObj._filterClose(e.target);
            e.stopImmediatePropagation();
            e.preventDefault();
            if (xlObj.element.find(".e-excelfilter.e-dlgcontainer").is(":visible") || xlObj._isSubMenuOpen() || xlObj._isSheetRename)
                return;
            if (xlObj.model.allowComments && xlObj.XLComment._isCommentEdit) {
                activeCell = xlObj.getActiveCell();
                if (!ej.isNullOrUndefined(activeCell))
                    xlObj.XLComment._updateCurCmntVal({ rowIndex: activeCell.rowIndex, colIndex: activeCell.colIndex });
            }
            if (xlObj.model.allowDataValidation)
                $("#" + xlObj._id + "ddl").ejDropDownList("hidePopup");
            var delta = 0, ori = e;
            e = e.originalEvent;
            if (e.wheelDelta) {
                deltaY = e.wheelDeltaY; // if wheelDeltaY value exists means vertical scroll, wheelDeltaX value exists means horizontal scroll.
                delta = -e.wheelDelta / 120;
                if (window.opera) {
                    if (parseFloat(window.opera.version, 10) < 10)
                        delta = -delta;
                }
            } else if (e.detail) {
                delta = e.detail / 3;
                deltaY = (e.axis == 1) ? 0 : 1;  // if axis value 1 for horizontal, 2 for vertical.  
            }
            if (!delta) return;
            if (deltaY != 0) {
                if (ej.isNullOrUndefined(vScroll) || !vScroll.element.is(":visible"))
                    return;
                if (this._changeTopSpread(vScroll, vScroll._scrollData, (delta * vScroll._scrollData.scrollOneStepBy), "wheel"))
                    e.preventDefault ? e.preventDefault() : ori.preventDefault();
            }
            else {
                if (ej.isNullOrUndefined(hScroll) || !hScroll.element.is(":visible"))
                    return;
                if (this._changeLeftSpread(hScroll, hScroll._scrollData, (delta * hScroll._scrollData.scrollOneStepBy), "wheel"))
                    e.preventDefault ? e.preventDefault() : ori.preventDefault();
            }
			$.data(this, 'timer', setTimeout(function () {
                xlObj._trigger("scrollStop", { originalEvent: e, scrollData: vScroll._scrollData, reqType: "vertical", position: vScroll.model.value });
            }, 250));
        },

        _scrollSpreadX: function (args) {
            var xlObj = this.XLObj;
            if (xlObj.XLEdit._isEdit) {
				var editElem = xlObj.element.find("#" + xlObj._id + "_Edit")[0], htmlVal = $(editElem).html().replace(/^\s+|\s+$/g, '');
                (htmlVal.indexOf("=") !== 0) && xlObj.XLEdit.saveCell();
			}
            xlObj._isScrolling = true;
            if (xlObj.getSheet()._isFreezed && xlObj._isFrozen(xlObj.getFrozenColumns())) {
                xlObj.XLFreeze._frozenScrollHandler(args)
                this._getFirstColumn(xlObj.getActiveSheetIndex());
            }
            else
                this._spreadHS(args);

            xlObj._isScrolling = false;
        },

        _scrollDirection: function (scroller, pix) {
            var xlObj = this.XLObj;
            scroller = xlObj._getContent(xlObj.getActiveSheetIndex()).find('#' + scroller).ejScrollBar('instance');
            if (scroller.value() < pix)
                scroller._scrollData.step = 1;
            else if (scroller.value() > pix)
                scroller._scrollData.step = -1;
            scroller.scroll(pix);
        },

        _spreadHS: function (args) {
            var pix, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), hScroll = this._hScroller(sheetIdx), hhandle = hScroll.element.find(".e-hhandle")[0], content = xlObj._getContent(sheetIdx),
                cont = content.find(".e-content"), count = ((args.scrollLeft - sheet._scrollLeft) / sheet.columnWidth), retVal;
            args["reachedEnd"] = Math.ceil(parseFloat(hhandle.offsetLeft)) + Math.ceil(parseFloat(hScroll.element.find(".e-hhandle").width())) >= xlObj.element.find(".e-hhandlespace").width() - 2; pix = args.scrollLeft;
            if (xlObj.model.enableContextMenu)
                xlObj.XLCMenu.hideCMenu();
            if (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite && args.scrollData.step > -1 && !xlObj._scrollReverse) {
                if (args.reachedEnd && sheet._leftCol.idx + count <= sheet.colCount) {
                    args.scrollLeft = args.scrollLeft + hScroll._scrollData.scrollOneStepBy;
                    args.cancel = true;
                    this._scrollRight(sheetIdx);
                    if (!this._isScrollToCell)
                        pix = (hScroll._scrollData.handleSpace - hScroll._scrollData.handle) * hScroll._scrollData.onePx;
                    this._refreshScroller(sheetIdx, "refresh", "horizontal");
                    hScroll.element.find(".e-hhandle")[0].style.left = (hScroll._scrollData.handleSpace - (hScroll._scrollData.handle + 1)) + "px";
                    hScroll.value(pix);
                }
                else if (sheet._leftCol.idx + count > sheet.colCount && args.scrollLeft >= sheet._scrollLeft && args.scrollLeft > 0 && sheet.colCount < xlObj._maxColCnt) {
                    while (args.scrollLeft > sheet._colWidthCollection[sheet._colWidthCollection.length - 1])
                        this._scrollRight(sheetIdx);
                    this._refreshScroller(sheetIdx, "refresh", "horizontal");
                }
            }
            retVal = this._ensureScrollPos(args);
            if (!xlObj.isUndefined(retVal.resetTo) && xlObj.model.scrollSettings.scrollMode != ej.Spreadsheet.scrollMode.Normal)
                sheet._scrollLeft = args.scrollLeft = retVal.resetTo;
            else
                sheet._scrollLeft = args.scrollLeft = pix;
            xlObj._scrollReverse = false;
            cont.scrollLeft(args.scrollLeft);
            args.scrollLeft = pix;
            sheet._scrollLeft = cont.scrollLeft();
            hScroll.value(args.scrollLeft);
            this._getFirstColumn(sheetIdx);
            xlObj._refreshViewVar(null, args.scrollLeft, sheetIdx);
        },

        _scrollSpreadY: function (args) {
            var newCnt, ndiff, diff, oldCnt, activeCell, wdiff = 0, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), vScroll = xlObj.getSheetElement(sheetIdx).find("#vscrollBar");
            xlObj._isScrolling = true;
            if (xlObj.XLEdit._isEdit) {
				var editElem = xlObj.element.find("#" + xlObj._id + "_Edit")[0], htmlVal = $(editElem).html().replace(/^\s+|\s+$/g, '');
                (htmlVal.indexOf("=") !== 0) && xlObj.XLEdit.saveCell();
			}
            if (sheet._isFreezed && xlObj._isFrozen(xlObj.getFrozenRows())) {
                xlObj.XLFreeze._frozenScrollHandler(args);
                !this._isIntrnlScroll && this._getFirstRow(xlObj.getActiveSheetIndex());
            }
            else {
                oldCnt = xlObj.getDigits(sheet._bottomRow.idx);
                this.XLObj.model.scrollSettings.allowVirtualScrolling ? this._scrollHandler(args) : this._spreadVS(args);
                if (this.XLObj.model.allowComments && this.XLObj.XLComment._isCommentEdit) {
                    activeCell = this.XLObj.getActiveCell();
                    if (!ej.isNullOrUndefined(activeCell))
                        this.XLObj.XLComment._updateCurCmntVal({ rowIndex: activeCell.rowIndex, colIndex: activeCell.colIndex });
                }
                newCnt = xlObj.getDigits(sheet._bottomRow.idx);
                diff = newCnt - oldCnt;
                if (diff) {
                    if (newCnt > 3)
                        wdiff = ((newCnt - 3) * 10);
                    ndiff = xlObj._rowHeaderWidth + wdiff;
                    xlObj._getJSSheetRowHeaderContent(sheetIdx).find("col").width(ndiff);
                    xlObj._getJSSheetRowHeader(sheetIdx).width(ndiff);
                    xlObj._getJSSheetHeader(sheetIdx).find(".e-spreadsheetcolumnheader").width(ndiff - 1);
                    xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").width(sheet._contWidth - wdiff - (vScroll[0].style.display === "none" ? 0 : 18));//18 scroll bar width
                }
            }
            xlObj._isScrolling = false;
        },

        _scrollHandler: function (args) {
            var key, rIdx, rowIdx, contTBody, retVal, rowHdrTBody, rangeData, clKeys, nstartRIdx, nendRIdx, pstartRIdx, pendRIdx, rowIdxs, i, hgt, height, canRefresh, isRefreshed, prop, len, fitWidth,
                xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), isScrollDown = args.scrollTop >= sheet._scrollTop,
                count = ((args.scrollTop - sheet._scrollTop) / sheet.rowHeight) + 1, cont = xlObj._getContent(sheetIdx).find(".e-content"), contHt, contentrows, rowhdrrows; // +1 for adding one extra row for creating a new block
            i = hgt = height = 0;
            canRefresh = isRefreshed = false;
            if ((args.scrollTop === sheet._scrollTop || (sheet._bottomRow.idx + count > sheet.rowCount)) && xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite) {
                if (isScrollDown && args.scrollTop > 0 && sheet.rowCount < xlObj._maxRowCnt) {
                    rowIdx = sheet.rowCount;
                    do {
                        sheet._virtualBlockCnt++;
                        sheet.rowCount += sheet._virtualBlockRowCnt;
                        for (key in sheet._columnStyles) {
                            rIdx = sheet._virtualBlockRowCnt;
                            while (rIdx < sheet.rowCount) {
                                xlObj.XLEdit._updateDataContainer({ rowIndex: rIdx, colIndex: parseInt(key) }, { dataObj: sheet._columnStyles[key] });
                                rIdx++;
                            }
                        }
                        while (i < sheet._virtualBlockRowCnt) {
                            sheet.rowsHeightCollection.push(sheet.rowHeight);
                            if (sheet.hideRowsCollection.indexOf(rowIdx) === -1 && sheet._hiddenFreezeRows.indexOf(rowIdx) === -1) {
                                sheet._rowIdxColl.push(rowIdx);
                                hgt = sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1] + sheet.rowHeight;
                                sheet._virtualTBodyHgt += sheet.rowHeight;
                            }
                            else
                                hgt = sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1];
                            sheet._rowHeightCollection.push(hgt);
                            rowIdx++;
                            i++;
                        }
                        i = 0;
                    } while ((args.scrollTop + (sheet._virtualBlockRowCnt * sheet.rowHeight)) > sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1]);
                    this._refreshScroller(sheetIdx, "refresh", "vertical");
                    sheet._scrollTop = args.scrollTop;
                    xlObj._refreshViewport(args.scrollTop, sheetIdx);
                    cont.scrollTop(args.scrollTop);
                    sheet._scrollTop = cont.scrollTop();
                    canRefresh = true;
                }
            }
            else {
                prop = ["value", "value2", "comment", "hyperlink", "format", "border", "type", "isFilterHide", "filterState", "isMHide", "isFHide", "merge", "isFilterHeader", "isFilterVisible", "text", "general", "cFormatRule", "wrap", "wrapRow", "rule", "align", "isOverflow", "isOfBrdr", "altTxt"];
                rowHdrTBody = xlObj._getRowHdrTBody(sheetIdx);
                contTBody = xlObj._getContTBody(sheetIdx);
                if (isScrollDown) {
                    if (args.scrollTop >= sheet._virtualContTBodyOffset.bottom && args.scrollTop <= sheet._virtualBottomTBodyOffset.bottom) {
                        height = sheet._virtualTopTBodyOffset.bottom - sheet._virtualTopTBodyOffset.top;
                        sheet._virtualTopTBodyOffset.top = sheet._virtualContTBodyOffset.top;
                        sheet._virtualTopTBodyOffset.bottom = sheet._virtualContTBodyOffset.bottom;
                        sheet._virtualContTBodyOffset.top = sheet._virtualBottomTBodyOffset.top;
                        sheet._virtualContTBodyOffset.bottom = sheet._virtualBottomTBodyOffset.bottom;
                        sheet._virtualContBlockIdx++;
                        if (sheet._virtualContBlockIdx === sheet._virtualBlockCnt) {
                            sheet._virtualBottomTBodyOffset.top = sheet._virtualBottomTBodyOffset.bottom = 0;
                            sheet._isVirtualEndReached = true;
                        }
                        else {
                            sheet._virtualBottomTBodyOffset.top = sheet._virtualBottomTBodyOffset.bottom;
                            nstartRIdx = xlObj._getRowIdx(sheet._virtualContBlockIdx * sheet._virtualBlockRowCnt, sheetIdx, true);
                            nendRIdx = xlObj._getRowIdx((sheet._virtualContBlockIdx * sheet._virtualBlockRowCnt) + (sheet._virtualBlockRowCnt - 1), sheetIdx, true);
                            sheet._virtualBottomTBodyOffset.bottom = xlObj._getRowOffsetBottom(nendRIdx, sheetIdx);
                            rowIdxs = sheet._rowIdxColl.slice(sheet._rowIdxColl.indexOf(nstartRIdx), sheet._rowIdxColl.indexOf(nendRIdx) + 1);
                            rangeData = xlObj.getRangeData({ property: prop, sheetIdx: sheetIdx, rowIdxs: rowIdxs, withRowIdx: true });
                            rowHdrTBody.append(xlObj._renderRowHdr(rangeData.rowIdx, sheetIdx));
                            contTBody.append(xlObj._renderData(rangeData, sheetIdx));
                            contentrows = xlObj._getContTBody(sheetIdx).find("tr");
                            rowhdrrows = xlObj._getRowHdrTBody(sheetIdx).find("tr");
                            xlObj.setRows([rowhdrrows, contentrows], sheetIdx);
                            sheet._virtualRowIdx = sheet._virtualRowIdx.concat(rangeData.rowIdx);
                            canRefresh = true;
                        }
                        if (!sheet._isVirtualTopReached) {
                            xlObj._removeRange(0, sheet._virtualBlockRowCnt);
                            sheet._virtualRowIdx.splice(0, sheet._virtualBlockRowCnt);
                            sheet._virtualTopTBodyHgt += height;
                        }
                        contHt = (xlObj._browserDetails.name === "msie" || xlObj._browserDetails.name === "edge") ? contTBody[0].getBoundingClientRect().height : window.getComputedStyle(contTBody[0], null).height;
                        sheet._virtualBottomTBodyHgt = sheet._virtualTBodyHgt - (sheet._virtualTopTBodyHgt + Math.floor(parseFloat(contHt)));
                        xlObj._refreshTBodiesHgt();
                        sheet._isVirtualTopReached = false;
                    }
                    else if (!sheet._isVirtualEndReached && args.scrollTop >= sheet._virtualBottomTBodyOffset.bottom) {
                        xlObj._refreshViewport(args.scrollTop, sheetIdx);
                        canRefresh = isRefreshed = true;
                    }
                }
                else {
                    if ((args.scrollTop + args.model.viewportsize) < sheet._virtualContTBodyOffset.top && (args.scrollTop + args.model.viewportsize) >= sheet._virtualTopTBodyOffset.top) {
                        height = sheet._virtualBottomTBodyOffset.bottom - sheet._virtualBottomTBodyOffset.top;
                        sheet._virtualBottomTBodyOffset.top = sheet._virtualContTBodyOffset.top;
                        sheet._virtualBottomTBodyOffset.bottom = sheet._virtualContTBodyOffset.bottom;
                        sheet._virtualContTBodyOffset.top = sheet._virtualTopTBodyOffset.top;
                        sheet._virtualContTBodyOffset.bottom = sheet._virtualTopTBodyOffset.bottom;
                        sheet._virtualContBlockIdx--;
                        sheet._virtualTopTBodyOffset.bottom = sheet._virtualContTBodyOffset.top;
                        if (sheet._virtualContBlockIdx === 1) {
                            sheet._virtualTopTBodyOffset.top = 0;
                            sheet._isVirtualTopReached = true;
                        }
                        else {
                            pstartRIdx = xlObj._getRowIdx((sheet._virtualContBlockIdx - 2) * sheet._virtualBlockRowCnt, sheetIdx, true);
                            pendRIdx = xlObj._getRowIdx((((sheet._virtualContBlockIdx - 2) * sheet._virtualBlockRowCnt) + (sheet._virtualBlockRowCnt - 1)), sheetIdx, true);
                            sheet._virtualTopTBodyOffset.top = xlObj._getRowOffsetTop(sheet, pstartRIdx);
                            rowIdxs = sheet._rowIdxColl.slice(sheet._rowIdxColl.indexOf(pstartRIdx), sheet._rowIdxColl.indexOf(pendRIdx) + 1);
                            rangeData = xlObj.getRangeData({ property: prop, sheetIdx: sheetIdx, rowIdxs: rowIdxs, withRowIdx: true });
                            rowHdrTBody.prepend(xlObj._renderRowHdr(rangeData.rowIdx, sheetIdx));
                            contTBody.prepend(xlObj._renderData(rangeData, sheetIdx));
                            contentrows = xlObj._getContTBody(sheetIdx).find("tr");
                            rowhdrrows = xlObj._getRowHdrTBody(sheetIdx).find("tr");
                            xlObj.setRows([rowhdrrows, contentrows], sheetIdx);
                            sheet._virtualRowIdx = rangeData.rowIdx.concat(sheet._virtualRowIdx);
                            canRefresh = true;
                        }
                        if (!sheet._isVirtualEndReached) {
                            xlObj._removeRange(sheet._virtualContBlockIdx === 1 ? 2 * sheet._virtualBlockRowCnt : 3 * sheet._virtualBlockRowCnt, sheet._virtualBlockRowCnt);
                            sheet._virtualRowIdx.splice(sheet._virtualContBlockIdx === 1 ? 2 * sheet._virtualBlockRowCnt : 3 * sheet._virtualBlockRowCnt, sheet._virtualBlockRowCnt);
                            sheet._virtualBottomTBodyHgt += height;
                            pstartRIdx = xlObj._getRowIdx((sheet._virtualContBlockIdx - 2) * sheet._virtualBlockRowCnt, sheetIdx, true);
                            pendRIdx = xlObj._getRowIdx((((sheet._virtualContBlockIdx - 2) * sheet._virtualBlockRowCnt) + (sheet._virtualBlockRowCnt - 1)), sheetIdx, true);
                            sheet._virtualTopTBodyOffset.top = xlObj._getRowOffsetTop(sheet, pstartRIdx);
                        }
                        contHt = (xlObj._browserDetails.name === "msie" || xlObj._browserDetails.name === "edge") ? contTBody[0].getBoundingClientRect().height : window.getComputedStyle(contTBody[0], null).height;
                        sheet._virtualTopTBodyHgt = sheet._virtualTBodyHgt - (sheet._virtualBottomTBodyHgt + Math.floor(parseFloat(contHt)));
                        xlObj._refreshTBodiesHgt();
                        sheet._isVirtualEndReached = false;
                        if (xlObj.model.allowCellType)
                            xlObj.XLCellType._rangeCellTypes(sheet.cellTypes, sheetIdx);
                        if (xlObj.model.allowSparkline)
                            xlObj.XLSparkline._refreshContentWithSparkline(sheetIdx);
                    }
                    else if (!sheet._isVirtualTopReached && (args.scrollTop + args.model.viewportsize) <= sheet._virtualTopTBodyOffset.top) {
                        xlObj._refreshViewport(args.scrollTop, sheetIdx);
                        canRefresh = isRefreshed = true;
                    }
                }
                retVal = this._ensureScrollPos(args);
                if (!xlObj.isUndefined(retVal.resetTo) && xlObj.model.scrollSettings.scrollMode != ej.Spreadsheet.scrollMode.Normal)
                    args.scrollTop = retVal.resetTo;
                else
                    sheet._scrollTop = args.scrollTop;
                if (!isRefreshed)
                    xlObj._refreshViewVar(args.scrollTop, null, sheetIdx);
            }
            cont.scrollTop(args.scrollTop);
            sheet._scrollTop = cont.scrollTop();
            this._getFirstRow(sheetIdx);
            if (xlObj.model.allowSelection && (sheet._isRowSelected || sheet._isColSelected || sheet._isSheetSelected)) {
                xlObj.XLSelection.refreshSelection();
                xlObj.XLDragFill && xlObj.XLDragFill.positionAutoFillElement();
            }
            if (canRefresh) {
                if (xlObj.XLComment)
                    xlObj.XLComment._updateCmntArrowPos(xlObj._getContent(sheetIdx).find('.e-commentcell'));
                clKeys = xlObj.getObjectKeys(xlObj._dataContainer.sheets[sheetIdx][0]);
                xlObj._dupDetails = true;
                for (i = 0, len = clKeys.length; i < len; i++) {
                    fitWidth = xlObj.XLEdit.getPropertyValue(0, clKeys[i], "isFitWidth");
                    if (!ej.isNullOrUndefined(fitWidth))
                        xlObj.XLResize._fitWidth(clKeys[i]);
                }
                xlObj._dupDetails = false;
            }
        },

        _spreadVS: function (args) {
            var pix, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), vScroll = this._vScroller(sheetIdx), vhandle = vScroll.element.find(".e-vhandle")[0], vStyle = vhandle.getBoundingClientRect(),
                content = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"), count = ((args.scrollTop - sheet._scrollTop) / sheet.rowHeight), retVal;
            args["reachedEnd"] = Math.ceil(parseFloat(vhandle.offsetTop)) + Math.ceil(parseFloat(vStyle.height)) >= vScroll.element.find(".e-vhandlespace").height() - 2;
            pix = args.scrollTop;
            if (xlObj.model.enableContextMenu)
                xlObj.XLCMenu.hideCMenu();
            if (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite && args.scrollData.step > -1 && !xlObj._scrollReverse) {
                if (args.reachedEnd && sheet._bottomRow.idx + count <= sheet.rowCount) {
                    var hold = false, btnClk = false, proxy = this, interval;
                    if (!xlObj.isUndefined(args.scrollData.target) && xlObj._hasClass(args.scrollData.target, "e-vdown")) {
                        interval = setInterval(function () {
                            hold = true;
                            for (var i = 0; i < 20; i++)
                                proxy._scrollBottom(sheetIdx);
                            if (!this._isScrollToCell)
                                pix = (vScroll._scrollData.handleSpace - vScroll._scrollData.handle) * vScroll._scrollData.onePx;
                            proxy._refreshScroller(sheetIdx, "refresh", "vertical");
                            vScroll.element.find(".e-vhandle")[0].style.top = (vScroll._scrollData.handleSpace - vScroll._scrollData.handle) + "px";
                            vScroll.scroll(pix);
                            clearInterval(interval);
                            return;
                        }, 1000);
                        if (xlObj._browserDetails.name === "msie" && xlObj._browserDetails.version === "8.0") {
                            vScroll.element.find(".e-vdown")[0].attachEvent("onmouseup", function () {
                                clearInterval(interval);
                                return;
                            });
                            document.attachEvent("onmouseup", function () {
                                clearInterval(interval);
                                return;
                            });
                        }
                        else {
                            vScroll.element.find(".e-vdown")[0].addEventListener("mouseup", function () {
                                clearInterval(interval);
                                return;
                            });
                            document.addEventListener("mouseup", function () {
                                clearInterval(interval);
                                return;
                            });
                        }
                        btnClk = true;
                    }
                    args.cancel = true;
                    if (!hold || !btnClk) {
                        this._scrollBottom(sheetIdx, (args.scrollTop - sheet._scrollTop) / 20 + 1);
                        if (!this._isScrollToCell)
                            pix = (vScroll._scrollData.handleSpace - vScroll._scrollData.handle) * vScroll._scrollData.onePx;
                        proxy._refreshScroller(sheetIdx, "refresh", "vertical");
                        vScroll.element.find(".e-vhandle")[0].style.top = (vScroll._scrollData.handleSpace - (vScroll._scrollData.handle)) + "px";
                        vScroll.value(pix);
                    }
                }
                else if (sheet._bottomRow.idx + count > sheet.rowCount - 1 && args.scrollTop >= sheet._scrollTop && args.scrollTop > 0 && sheet.rowCount < xlObj._maxRowCnt) {
                    this._scrollBottom(sheetIdx, (args.scrollTop - sheet._scrollTop) / 20 + 1);
                    this._refreshScroller(sheetIdx, "refresh", "vertical");
                }
            }
            retVal = this._ensureScrollPos(args);
            if (!xlObj.isUndefined(retVal.resetTo) && xlObj.model.scrollSettings.scrollMode != ej.Spreadsheet.scrollMode.Normal)
                args.scrollTop = sheet._scrollTop = retVal.resetTo;
            else
                args.scrollTop = sheet._scrollTop = pix;
            xlObj._scrollReverse = false;
            content.scrollTop(args.scrollTop);
            sheet._scrollTop = content.scrollTop();
            this._getFirstRow(sheetIdx);
        },

        _scrollX: function (sheetIdx) {
            var i, len, xlObj = this.XLObj, hScroll = this._hScroller(sheetIdx), pix, colWtColl = [1], colgroup = xlObj._getContent(sheetIdx).find("colgroup"), sheet = xlObj.getSheet(sheetIdx);
            if (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite)
                this._scrollRight(sheetIdx);
            hScroll.model.maximum = hScroll.model.maximum + sheet.columnWidth;
            hScroll._scrollData.scrollable = hScroll._scrollData.scrollable + sheet.columnWidth;
            this._refreshScroller(sheetIdx, "refresh", "horizontal");
            hScroll.element.find(".e-hhandle").css("left", (hScroll._scrollData.handleSpace - (hScroll._scrollData.handle + 1)));
            pix = (hScroll._scrollData.handleSpace - hScroll._scrollData.handle) * hScroll._scrollData.onePx;
            hScroll.value(pix);
            for (i = 0, len = xlObj.model.sheets[sheetIdx]._fCol; i < len; i++)
                colWtColl.push(colWtColl[colWtColl.length - 1] + $(colgroup.find('col')[i]).width());
            if (sheet._isFreezed && xlObj._isFrozen(xlObj.getFrozenColumns()))
                hScroll.scroll(hScroll.value() + xlObj._getColWidth(sheet._fleftColIdx, sheetIdx), true);
            else
                xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").scrollLeft(pix, hScroll._scrollData.onePx);
            sheet._scrollLeft = pix;
            this._getFirstColumn(sheetIdx);
        },

        _scrollY: function (sheetIdx) {
            var i, len, xlObj = this.XLObj, vScroll = this._vScroller(sheetIdx), pix, rowHtColl = [1], rows = xlObj.getRows(sheetIdx)[1];
            if (xlObj.model.scrollSettings.scrollMode === ej.Spreadsheet.scrollMode.Infinite)
                this._scrollBottom(sheetIdx);
            vScroll.model.maximum = vScroll.model.maximum + xlObj.model.rowHeight;
            vScroll._scrollData.scrollable = vScroll._scrollData.scrollable + xlObj.model.rowHeight;
            this._refreshScroller(sheetIdx, "refresh", "vertical");
            vScroll.element.find(".e-vhandle")[0].style.top = (vScroll._scrollData.handleSpace - (vScroll._scrollData.handle + 1)) + "px";
            pix = (vScroll._scrollData.handleSpace - vScroll._scrollData.handle) * vScroll._scrollData.onePx;
            vScroll.value(pix);
            for (i = 0, len = xlObj.model.sheets[sheetIdx]._fRow; i < len; i++)
                rowHtColl.push(rowHtColl[rowHtColl.length - 1] + $(rows[i]).height());
            xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content").scrollTop(pix, vScroll._scrollData.onePx);
            this._getFirstRow(sheetIdx);
        },

        _getFirstRow: function (sheetIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), top = 0, topIdx, bottomIdx, rowHtColl = sheet._rowHeightCollection;
            if (xlObj.getFrozenRows(sheetIdx) < 1) {
                top = xlObj._getContent(sheetIdx).find(".e-content").scrollTop();
                topIdx = xlObj._getIdxWithOffset(top, null, true, null, sheetIdx).rowIdx;
                sheet._topRow = { idx: topIdx, value: rowHtColl[topIdx] };
            }
            bottomIdx = xlObj._getIdxWithOffset(top + sheet._vPortHgt, null, true, null, sheetIdx).rowIdx || sheet.rowCount - 1;
            sheet._bottomRow = { idx: bottomIdx, value: rowHtColl[bottomIdx] };
            sheet.topLeftCell = xlObj.getAlphaRange(sheet._topRow.idx, sheet._leftCol.idx);
        },

        _getFirstColumn: function (sheetIdx) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), left = 0, leftIdx, rightIdx, colWtColl = sheet._colWidthCollection;
            if (xlObj.getFrozenColumns(sheetIdx) < 1) {
                left = document.getElementById(xlObj._id + "_content").scrollLeft;
                leftIdx = xlObj._getIdxWithOffset(null, left, true, null, sheetIdx).colIdx;
                sheet._leftCol = { idx: leftIdx, value: colWtColl[leftIdx] };
            }
            rightIdx = xlObj._getIdxWithOffset(null, left + sheet._vPortWth, true, null, sheetIdx).colIdx || sheet.colCount - 1;
            sheet._rightCol = { idx: rightIdx, value: colWtColl[rightIdx] };
            sheet.topLeftCell = xlObj.getAlphaRange(sheet._topRow.idx, sheet._leftCol.idx);
        },

        scrollToCell: function (addr) {
            var rowhgt, colWdth, frowDiff = 0, fcolDiff = 0, xlObj = this.XLObj, range = xlObj.getRangeIndices(addr), sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx);

            if (range[0] > sheet.rowCount)
                rowhgt = xlObj._getRowOffsetBottom(sheet.rowCount - 1, sheetIdx) + ((range[0] - sheet.rowCount) * sheet.rowHeight);
            else
                rowhgt = xlObj._getRowOffsetBottom(range[0] - 1, sheetIdx);

            if (range[1] > sheet.colCount)
                colWdth = xlObj._getWidth(0, sheet.colCount - 1) + ((range[1] - sheet.colCount) * sheet.columnWidth);
            else
                colWdth = xlObj._getWidth(0, range[1] - 1);

            if (xlObj._isFrozen(sheet.frozenRows))
                frowDiff = xlObj._getRowOffsetTop(sheet, sheet._frozenRows - 1);

            if (xlObj._isFrozen(sheet.frozenColumns))
                fcolDiff = xlObj._getColOffsetLeft(sheet, sheet._frozenColumns - 1);
            this._isScrollToCell = true;
            xlObj._scrollContent({ x: (colWdth ? colWdth : 0) - sheet._scrollLeft - fcolDiff, y: (rowhgt ? rowhgt : 0) - sheet._scrollTop - frowDiff });
            this._isScrollToCell = false;
        },

        _scrollSelectedPosition: function (sheetIdx, aCell) {
            if (this.XLObj._isExport)
                return;
            var leftPx, topPx, buffHeight = 0, xlObj = this.XLObj, hScroll = this._hScroller(sheetIdx), vScroll = this._vScroller(sheetIdx), actCellInfo = xlObj._getCellInfo(aCell), sheet = xlObj.getSheet(sheetIdx), content = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer > .e-content"),
                vhandleElem = vScroll.element.find(".e-vhandle"), vStyle = vhandleElem[0].getBoundingClientRect(),
                dupDetails = xlObj._dupDetails, vReachedEnd = (vStyle.top + vScroll._scrollData.handle) >= (vScroll._scrollData.handleSpace), hReachedEnd = (vStyle.left + hScroll._scrollData.handle) >= (hScroll._scrollData.handleSpace);
            if (!xlObj.isUndefined(hScroll)) {
                if ((parseInt(actCellInfo.width) + (actCellInfo.left - content.offset().left)) > content.width()) {
                    leftPx = actCellInfo.left - (hScroll._scrollData.handleSpace + hScroll.model.buttonSize);
                    if (leftPx < 0)
                        hScroll.scroll(0);
                    else {
                        hReachedEnd && (xlObj._scrollReverse = true);
                        if ((((parseInt(actCellInfo.width) + actCellInfo.left) > (hScroll._scrollData.handleSpace + (hScroll.model.buttonSize * 2))) || (actCellInfo.left - content.offset().left) <= 0) && leftPx != 0)
                            hScroll.scroll((actCellInfo.left + actCellInfo.width + 1) - (hScroll._scrollData.handleSpace + (hScroll.model.buttonSize * 2)));
                        xlObj._scrollReverse = false;
                    }
                }
            }
            if (!xlObj.isUndefined(vScroll)) {
                if ((((parseInt(actCellInfo.height) + (actCellInfo.top - content.offset().top)) > content.height()) || ((actCellInfo.top - content.offset().top) <= 0)) && (aCell.rowIndex < sheet._topRow.idx || aCell.rowIndex > sheet._bottomRow.idx)) {
                    if (!aCell.rowIndex < sheet._bottomRow.idx && aCell.rowIndex < sheet.rowCount - 1)
                        buffHeight = actCellInfo.height;
                    topPx = actCellInfo.top + buffHeight - (vScroll._scrollData.handleSpace + vScroll.model.buttonSize);
                    if (topPx < 0)
                        vScroll.scroll(0);
                    else {
                        vReachedEnd && (xlObj._scrollReverse = true);
                        vScroll.scroll((actCellInfo.top + actCellInfo.height + 1) - (vScroll._scrollData.handleSpace + (vScroll.model.buttonSize * 2)));
                        xlObj._scrollReverse = false;
                    }
                }
            }
            xlObj._dupDetails = dupDetails;
        },

        //Infinite Scrolling JS	
        _rowTemplate: function (sheetIdx, value) {
            var i, len, rowCls, trRData, tdCell = "", xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx);
            for (i = 0, len = xlObj.model.sheets[sheetIdx].colCount; i < len; i++) {
                rowCls = "e-rowcell";
                !sheet.showGridlines && (rowCls = rowCls.concat(" e-hborder"));
                if (sheet._hiddenFreezeCols.indexOf(i) > -1)
                    rowCls += " e-fcol-hide";
                tdCell += String.format("<td class=\"{0}\" style=\"{2}\"  >{1}</td>", rowCls, "");
            }
            trRData = String.format("<tr style='{0}' data-idx=\"{1}\">" + tdCell + "</tr>", "height:" + xlObj.model.rowHeight + "px;", value - 1);
            return trRData;
        },

        _rowHeaderTemplate: function (value, height) {
            var tdRHdrCData, trRHdrData;
            height = height ? height : this.XLObj.model.rowHeight;
            tdRHdrCData = String.format("<td class=\"{0}\"  >{1}</td>", "e-rowheader", value);
            trRHdrData = String.format("<tr style='{0}' data-idx=\"{1}\">" + tdRHdrCData + "</tr>", "height:" + height + "px;", value - 1);
            return trRHdrData;
        },

        _columnTemplate: function () {
            var rowCls = "e-rowcell e-wrapword", tdCData, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex();
            !xlObj.getSheet(sheetIdx).showGridlines && (rowCls = rowCls.concat(" e-hborder"));
            tdCData = String.format("<td class=\"{0}\" style=\"{2}\" >{1}</td>", rowCls, "");
            return tdCData;
        },

        _colGroupTemplate: function (sheetIdx, width) {
            width = width ? width : this.XLObj.getSheet(sheetIdx).columnWidth;
            var tdCData = String.format("<col style = '{0}'></col>", "width:" + width + "px;");
            return tdCData;
        },

        _columnHeaderTemplate: function (colCnt, sheetIdx) {
            var divcell, divCData, tdCData, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), len = xlObj.getObjectLength(xlObj._copyColumns);
            divcell = xlObj._generateHeaderText(colCnt);
            if (sheet.fieldAsColumnHeader && len && xlObj._copyColumns[divcell])
                divcell = xlObj._copyColumns[divcell].text;
            divCData = String.format("<div class = \"{0}\" > {1}</div>", "e-headercelldiv", divcell);
            tdCData = String.format("<th class=\"{0}\"  >{1}</th>", "e-headercell", divCData);
            return tdCData;
        },

        _createNewRow: function (sheetIdx, rowIdx, colIdx, status) {
            var rowElemIdx, tbody, trow, trRData, tbodyRHdr, thdr, xlObj = this.XLObj, isVirtualScroll = xlObj.model.scrollSettings.allowVirtualScrolling, xlSelc = xlObj.XLSelection, sheet = xlObj.getSheet(sheetIdx);
            if (!isVirtualScroll) {
                tbody = xlObj._getContent(sheetIdx).find("tbody").not("[class *= 'e-ss-virtual']")[0];
                tbodyRHdr = xlObj._getJSSheetRowHeaderContent(sheetIdx).find("tbody").not("[class *= 'e-ss-virtual']")[0];
            }
            else {
                tbody = xlObj._getContent(sheetIdx).find("tbody")[1];
                tbodyRHdr = xlObj._getJSSheetRowHeaderContent(sheetIdx).find("tbody")[1];
            }
            trRData = this._rowTemplate(sheetIdx, parseInt(tbodyRHdr.lastChild.textContent) + 1);
            if (rowIdx === -1 || (colIdx > -1 && rowIdx > -1 && status === "shift")) {
                $(tbodyRHdr).append(this._rowHeaderTemplate(parseInt(tbodyRHdr.lastChild.textContent) + 1));
                $(tbody).append(trRData);
                if (status == "shift") {
                    $(tbody).find("tr:last td:last").remove();
                    rowElemIdx = xlObj._getRowIdx(rowIdx)
                    $(tbody).find("tr: eq(' + rowElemIdx + ') td:eq(' + (colIdx - 1) + ')").after(this._columnTemplate());
                }
            }
            else {
                trow = tbody.insertRow(rowIdx);
                $(trow).height(xlObj.model.rowHeight);
                $(trow).append($(trRData)[0].innerHTML);
                trow = tbodyRHdr.insertRow(rowIdx);
                $(trow).height(xlObj.model.rowHeight);
                $(trow).append("<td class='e-rowheader'></td>");
            }
            sheet.rowCount = xlObj.model.sheets[sheetIdx].rowCount + 1;
            sheet.rowsHeightCollection.push(xlObj.model.rowHeight);
            if (rowIdx > -1) {
                thdr = $(tbodyRHdr).find('td');
                for (var i = 0, len = thdr.length; i < len; i++)
                    $(thdr[i]).text(i + 1);
                xlObj.XLScroll._getRowHeights(sheetIdx, rowIdx + 1);
            }
            sheet._rowHeightCollection.push(sheet._rowHeightCollection[sheet._rowHeightCollection.length - 1] + xlObj.model.rowHeight);
            if (xlObj.model.allowSelection && (sheet._isColSelected || sheet._isSheetSelected))
                xlSelc.refreshSelection();
            xlObj._refreshRows(sheetIdx);
        },

        _createNewColumn: function (sheetIdx, startCell, endCell, status) {
            var i, j, len, xlObj = this.XLObj, sheet = xlObj.getSheet(sheetIdx), xlSelc = xlObj.XLSelection, tbody, tbodyCHdr, colgrp, hdrcolgrp, colCnt, tdColgrp, tdRData, tdCHdrData, value,
                thdr, field, fIndex, fApplied = false, fRow, tabRange;
            tbody = xlObj._getContTBody(sheetIdx)[0],
                tbodyCHdr = xlObj._getJSSheetHeader(sheetIdx).find("tr")[0];
            colgrp = xlObj._getJSSheetContent(sheetIdx).find(".e-spreadsheetcontentcontainer colgroup");
            hdrcolgrp = xlObj._getJSSheetHeader(sheetIdx).find("colgroup");
            colCnt = sheet.colCount;
            tabRange = sheet.filterSettings.tableRange;
            for (i = 0, len = tabRange.length; i < len; i++) {
                fIndex = tabRange[i].multifilterIdx;
                if ((startCell.colIndex > fIndex[0]) && (endCell.colIndex < fIndex[fIndex.length - 1])) {
                    fApplied = true;
                    fRow = tabRange[i].startRow - 1;
                    tabRange = tabRange[i];
                    break;
                }
            }
            if (startCell.colIndex === -1 || (startCell.colIndex > -1 && startCell.rowIndex > -1 && status === "shift")) {
                if (startCell.colIndex === -1 && status === "insert") {
                    tdCHdrData = this._columnHeaderTemplate(colCnt + 1, sheetIdx);
                    $(tbodyCHdr).append(tdCHdrData);
                    tdColgrp = this._colGroupTemplate(sheetIdx);
                    hdrcolgrp.append(tdColgrp);
                    for (i = 0, len = tbody.rows.length; i < len; i++) {
                        tdRData = this._columnTemplate(i);
                        $(tbody.rows[xlObj._getRowIdx(i, sheetIdx, false, true)]).append(tdRData);
                    }
                    colgrp.append(tdColgrp);
                }
                if (status === "shift") {
                    var x = colCnt;
                    for (i = startCell.colIndex; i <= endCell.colIndex; i++) {
                        tdCHdrData = this._columnHeaderTemplate(x + 1, sheetIdx);
                        $(tbodyCHdr).append(tdCHdrData);
                        tdColgrp = this._colGroupTemplate(sheetIdx);
                        hdrcolgrp.append(tdColgrp);
                        colgrp.append(tdColgrp);
                        x = x + 1;
                    }
                    for (i = 0, len = tbody.rows.length; i < len; i++)
                        for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                            tdRData = this._columnTemplate(i);
                            $(tbody.rows[xlObj._getRowIdx(i)]).append(tdRData);
                        }
                    if (xlObj._insDelStatus.indexOf("insert") > -1)
                        for (i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                            for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                                $(tbody).find('tr:eq(' + xlObj._getRowIdx(i) + ') td:last').remove();
                                tdRData = this._columnTemplate(i);
                                $(tbody).find("tr").eq(xlObj._getRowIdx(i)).find('td:eq(' + j + ')').before(tdRData);
                                if (fApplied && i === fRow)
                                    xlObj.model.allowFiltering && xlObj.XLFilter._insertFilterIcon(i, j, tabRange, fRow, fApplied);
                            }
                        }
                    else
                        for (i = startCell.rowIndex; i <= endCell.rowIndex; i++) {
                            for (j = endCell.colIndex; j >= startCell.colIndex; j--) {
                                $(tbody).find('tr:eq(' + xlObj._getRowIdx(i) + ') td:eq(' + j + ')').remove();
                                tdRData = this._columnTemplate(i);
                                $(tbody).find('tr:eq(' + xlObj._getRowIdx(i) + ')').append(tdRData);
                                if (fApplied && i === fRow)
                                    xlObj.model.allowFiltering && xlObj.XLFilter._insertFilterIcon(i, j, tabRange, fRow, fApplied);
                            }
                        }
                }
                sheet.colCount = sheet.colCount + 1;
                sheet.columnsWidthCollection.push(sheet.columnWidth);
            }
            else {
                if (sheet._isTemplate && (startCell.colIndex < sheet._templateColCount || endCell.colIndex < sheet._templateColCount))
                    return;
                //insert a column in particular position
                var fiCol, colWidthColl = $.extend(true, [], xlObj.getSheet(sheetIdx).columnsWidthCollection);
                if (xlObj._insDelStatus.indexOf("insert") > -1) {
                    fiCol = colWidthColl.splice(0, startCell.colIndex);
                    for (i = startCell.colIndex; i <= endCell.colIndex; i++) {
                        tdCHdrData = this._columnHeaderTemplate(i + 1, sheetIdx);
                        $(tbodyCHdr).find('th:eq(' + i + ')').before(tdCHdrData);
                        tdColgrp = this._colGroupTemplate(sheetIdx);
                        fiCol.push(sheet.columnWidth);
                        hdrcolgrp.find('col:eq(' + i + ')').before(tdColgrp);
                        colgrp.find('col:eq(' + i + ')').before(tdColgrp);
                        sheet.colCount = sheet.colCount + 1;
                    }
                    ej.merge(fiCol, colWidthColl);
                    sheet.columnsWidthCollection = fiCol;
                    for (i = 0, len = tbody.rows.length; i < len; i++) {
                        for (j = startCell.colIndex; j <= endCell.colIndex; j++) {
                            tdRData = this._columnTemplate(i);
                            $(tbody.rows[xlObj._getRowIdx(i)]).find('td:eq(' + j + ')').before(tdRData);
                            if (fApplied && (i === fRow))
                                xlObj.model.allowFiltering && xlObj.XLFilter._insertFilterIcon(i, j, tabRange, fRow, fApplied);
                        }
                    }
                }
                else {
                    fiCol = colWidthColl.splice(0, startCell.colIndex);
                    for (i = endCell.colIndex; i >= startCell.colIndex; i--) {
                        $(tbodyCHdr).find('th:eq(' + i + ')').remove();
                        hdrcolgrp.find('col:eq(' + i + ')').remove();
                        colgrp.find('col:eq(' + i + ')').remove();
                        sheet.colCount = sheet.colCount - 1;
                    }
                    colWidthColl.splice(0, (endCell.colIndex - startCell.colIndex) + 1);
                    ej.merge(fiCol, colWidthColl);
                    sheet.columnsWidthCollection = fiCol;
                    for (i = 0, len = tbody.rows.length; i < len; i++)
                        for (j = endCell.colIndex; j >= startCell.colIndex; j--)
                            $(tbody.rows[xlObj._getRowIdx(i)]).find('td:eq(' + j + ')').remove();
                }
                thdr = $(tbodyCHdr).find('th>.e-headercelldiv');
                for (i = 0, len = thdr.length; i < len; i++)
                    $(thdr[i]).text(xlObj._generateHeaderText(i + 1));
            }
            field = $.trim($(tdCHdrData).text());
            value = $(tdRData).text();
            sheet.columns.push({
                field: field,
                text: field,
                type: value != null ? (value.getDay ? "date" : typeof (value)) : null,
                width: $(tdRData).width()
            });
            xlObj.XLScroll._getColWidths(sheetIdx, (startCell.colIndex > -1) ? startCell.colIndex : sheet.colCount - 2); // 2 for delete or insert
            if (xlObj.model.allowSelection && (sheet._isRowSelected || sheet._isSheetSelected))
                xlSelc.refreshSelection();
            xlObj._refreshTemplates(sheetIdx, true);
        },

        _insertColHeaders: function (sheetIdx, colCnt, tbodyCHdr) {
            var tdCHdrData = this._columnHeaderTemplate(colCnt + 1, sheetIdx), tdColgrp;
            $(tbodyCHdr).append(tdCHdrData);
            tdColgrp = this._colGroupTemplate(sheetIdx);
            $(tbodyCHdr.parentNode.previousSibling).append(tdColgrp);
        },

        _scrollBottom: function (sheetIdx, count) {
            var sheet = this.XLObj.getSheet(sheetIdx), key, cIdx;
            if (!count) {
                this._createNewRow(sheetIdx, -1, -1, "insert");
                for (key in sheet._columnStyles) {
                    cIdx = parseInt(key);
                    this.XLObj.XLEdit._updateDataContainer({ rowIndex: sheet.rowCount - 1, colIndex: cIdx }, { dataObj: sheet._columnStyles[key] });
                }
            }
            else
                this._createRows(sheet.rowCount - 1, sheet.rowCount + count, sheetIdx);
        },

        _createRows: function (stRowIdx, rowCount, sheetIdx) {
            sheetIdx = sheetIdx || this.XLObj.getActiveSheetIndex();
            for (var i = stRowIdx, len = rowCount; i < len; i++)
                this._createNewRow(sheetIdx, -1, -1, "insert");

        },

        _scrollRight: function (sheetIdx) {
            var startCell = { rowIndex: -1, colIndex: -1 }, sheet, rIdx, key;
            this._createNewColumn(sheetIdx, startCell, startCell, "insert");

            sheet = this.XLObj.getSheet(sheetIdx);
            for (key in sheet._rowStyles) {
                rIdx = parseInt(key);
                this.XLObj.XLEdit._updateDataContainer({ rowIndex: rIdx, colIndex: sheet.colCount - 1 }, { dataObj: sheet._rowStyles[key] });
            }
        },

        _ensureScrollPos: function (args) {
            var pos, retVal, obj = {}, xlObj = this.XLObj;
            if (args.model.orientation === ej.ScrollBar.Orientation.Vertical) {
                pos = args.scrollTop;
                retVal = xlObj._getIdxWithOffset(pos, null, true);
                obj.rowIdx = retVal.rowIdx;
                if (pos !== retVal.yOffset)
                    obj.resetTo = retVal.yOffset;
            }
            else {
                pos = args.scrollLeft;
                retVal = xlObj._getIdxWithOffset(null, pos, true);
                obj.colIdx = retVal.colIdx;
                if (pos !== retVal.xOffset)
                    obj.resetTo = retVal.xOffset;
            }
            return obj;
        },

        _refreshRowCol: function (range, sheetIdx) {
            sheetIdx = this.XLObj._getSheetIndex(sheetIdx);
            var i, sheet = this.XLObj.getSheet(sheetIdx), refreshScroll = false;
            if (sheet.colCount < (range[3] + 1)) {
                i = range[3] - (sheet.colCount - 1);
                while (i--)
                    this._scrollRight(sheetIdx);
                refreshScroll = true;
            }
            if (sheet.rowCount < (range[2] + 1)) {
                i = range[2] - (sheet.rowCount - 1);
                while (i--)
                    this._scrollBottom(sheetIdx);
                refreshScroll = true;
            }
            refreshScroll && this._refreshScroller(sheetIdx, "refresh", "all");
        }
    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};

    ej.spreadsheetFeatures.pivot = function (obj) {
        this.XLObj = obj;
        this._pivotCnt = 1;
        this._hasPvtField = false;
        this._displayActPanel = true;
        this.names = {};
        this._valueFieldName = "";
    };

    ej.spreadsheetFeatures.pivot.prototype = {

        createPivotTable: function (range, location, name, settings, pvt) {
            var xlObj = this.XLObj, id, tableName, regx = new RegExp("[^a-z0-9\\s]", 'gi');
            if (name && ((name.indexOf(" ") > -1) || name.match(regx))) {
                tableName = name;
                name = name.replace(regx, '').replace(/ /g, "_");
            }
            if (!xlObj.model.enablePivotTable || (xlObj.getSheet()._isLoaded && xlObj.model.isReadOnly))
                return;
            var xlRibbon = xlObj.XLRibbon, sheetIdx = xlObj.getActiveSheetIndex(), pvtRange = [], dataSheetName, datasource, details;
            var temp, left = 0, top = 0, pvtObj;
            xlObj._showDialog(xlObj._id + "_Ribbon_Insert_Tables_PivotTable");
            temp = xlRibbon._getAddrFromDollarAddr(range);
            dataSheetName = xlObj.model.sheets[temp[0]].sheetInfo.text;
            range = xlObj.getRangeIndices(temp[1]);
            datasource = xlObj.getRangeDataAsJSON({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, false, temp[0]);
            if ($("#" + xlObj._id + "_dlg_existsheet").data("ejRadioButton").model.checked || xlObj.isImport || xlObj.model.isImport || !xlObj.getSheet(sheetIdx)._isLoaded) {
                temp = xlRibbon._getAddrFromDollarAddr(location);
                pvtRange = xlObj.getRangeIndices(temp[1]);
                if (!xlObj._isExport && (sheetIdx !== temp[0])) {
                    xlObj.gotoPage(temp[0], false);
                    sheetIdx = temp[0];
                }
            }
            else {
                xlObj.insertSheet();
                sheetIdx = xlObj.getActiveSheetIndex();
                pvtRange = [2, 0];
            }
            if (xlObj.isUndefined(pvt))
                pvt = {};
            top = xlObj.model.sheets[temp[0]]._rowHeightCollection[pvtRange[0]];
            left = xlObj.model.sheets[temp[0]]._colWidthCollection[pvtRange[1]];
            xlObj.hideActivationPanel();
            if (name && name.length) {
                if (xlObj.getObjectKeys(this.names).indexOf(name) > -1) {
                    do {
                        name = name + this._pivotCnt;
                        this._pivotCnt++;
                    }
                    while (xlObj.getObjectKeys(this.names).indexOf(name) > -1);
                }
            }
            else {
                do {
                    name = "PivotTable" + this._pivotCnt;
                    this._pivotCnt++;
                }
                while (xlObj.getObjectKeys(this.names).indexOf(name) > -1);
            }
            id = xlObj._id + "_" + name;
            this.names[id] = tableName ? tableName : name;
            pvt.pvtRange = pvtRange;
            pvt.sheetIdx = sheetIdx;
            pvt.temp = temp[0];
            pvt.datasource = datasource;
            !xlObj.getSheet(sheetIdx)._isUpdated && this._updatePivotMngr({}, { pivot: { id: id, top: top, left: left, rowIndex: pvtRange[0], colIndex: pvtRange[1], dataRange: range, dataSheetName: dataSheetName, sheetIdx: sheetIdx, tableName: this.names[id] } });
            this._refreshPivotElement(range, location, name, settings, pvt);
            pvtObj = xlObj.element.find("#" + id).data("ejPivotGrid");
            this._refreshRowColumn(pvtRange, pvtObj);
            xlObj.showActivationPanel();
            details = { sheetIndex: pvt.sheetIdx, reqType: "shape", shapeType: "pivot", range: pvt.pvtRange, ID: id, dataSource: pvt.datasource };
            xlObj._trigActionComplete(details);
            return id;
        },

        _refreshRowColumn: function (pvtRange, pvtObj) {
            var colCount, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), width = [], rowCount, i, rowHeight;
            rowCount = pvtObj._rowCount, rowHeight = pvtObj.calculateCellWidths().rowHeight, width = pvtObj.calculateCellWidths().columnWidths, colCount = width.length;
            if (!xlObj._focusTopElem)
                xlObj._createFocusElement();
            if (!rowCount) {
                rowCount = 4;
            }
            for (i = pvtRange[0]; i < rowCount + pvtRange[0]; i++)
                xlObj.XLResize.setRowHeight(i, rowHeight);
            if (colCount > 0) {
                for (i = 0; i < colCount + pvtRange[1]; i++)
                    xlObj.XLResize.setColWidth(i + pvtRange[1], width[i]);
            }
            else {
                for (i = 0; i < 3 + pvtRange[1]; i++)       //  default colcount 3, default column width 81px
                    xlObj.XLResize.setColWidth(i + pvtRange[1], 81);
            }
            if (sheet._isFreezed) {
                xlObj.XLFreeze._refreshFreezeRowDiv();
                xlObj.XLFreeze._refreshFreezeColDiv();
            }
        },

        _refreshPivotElement: function (range, location, name, settings, pvt) {
            var xlObj = this.XLObj, $pvtBase, $pvtSchema, pvtSettings, top, left;
            top = xlObj.model.sheets[pvt.sheetIdx]._rowHeightCollection[pvt.pvtRange[0]];
            left = xlObj.model.sheets[pvt.sheetIdx]._colWidthCollection[pvt.pvtRange[1]];
            pvtSettings = {
                dataSource: {
                    data: pvt.datasource,
                },
                enableToolTipAnimation: false,
                cellDoubleClick: $.proxy(this._cellDblClick, this),
                enableCellDoubleClick: true,
                renderSuccess: $.proxy(this._renderSuccess, this),
                drillSuccess: $.proxy(this._renderSuccess, this),
            };
            if (!ej.isNullOrUndefined(settings))
                pvtSettings.dataSource = {
                    data: pvt.datasource,
                    rows: settings.rows,
                    columns: settings.columns,
                    values: settings.values,
                    filters: settings.filters,
                };
            xlObj.getSheetElement(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot").removeClass("e-ss-activepivot");
            $pvtBase = ej.buildTag("div.e-ss-pivot", "", "", { id: xlObj._id + "_" + name });
            $pvtBase.css({ left: left - 2, top: top - 2 }).addClass("e-ss-activepivot");
            xlObj._getContent(pvt.sheetIdx).find(".e-content").append($pvtBase);
            if (!this._hasPvtField)
                xlObj.getActivationPanel().append(ej.buildTag("div", "", { overflow: "hidden" }, { id: xlObj._id + "_PivotField" }));
            xlObj.element.find("#" + xlObj._id + "_PivotField").append(ej.buildTag("div.e-ss-pivotfield", "", "", { id: xlObj._id + "_PivotTableSchema_" + xlObj._id + "_" + name }));
            $pvtSchema = xlObj.element.find("#" + xlObj._id + "_PivotTableSchema_" + xlObj._id + "_" + name);
            xlObj.getActivationPanel().find("#" + $pvtSchema[0].id).show();
            $pvtBase.ejPivotGrid(pvtSettings);
            $pvtSchema.find("#" + xlObj._id + "_PivotTableSchema_" + xlObj._id + "_" + name + "_schemaFieldTree").data("ejTreeView").option("allowDragAndDrop", false);
            $pvtSchema.css({ "float": "left", "width": xlObj.model.activationPanelWidth - 20 });
            $pvtSchema.find(".schemaFieldList").css({ "height": 150 });
            if (!this._hasPvtField) {
                xlObj.getActivationPanel().ejScroller({ width: xlObj.model.activationPanelWidth, height: xlObj._getContent(pvt.sheetIdx).height(), scroll: $.proxy(this._pivotScroll, this) });
                this._hasPvtField = true;
            }
            this._clearBackgroundData($pvtBase.data("ejPivotGrid"), xlObj.getSheet(pvt.sheetIdx).pivotMngr.pivot[$pvtBase[0].id], pvt.sheetIdx, "update");
            xlObj.XLRibbon && xlObj.XLRibbon._analyzeTabUpdate();
            xlObj.XLSelection._cleanUp(true);
            xlObj.getActivationPanel().data("ejScroller").refresh();

        },

        deletePivotTable: function (pivotName) {
            var len, pvtID = this._getPivotIDFromName(pivotName), xlObj = this.XLObj, cellObj, container = xlObj._dataContainer, pvtObj, i;
            if (!xlObj.model.enablePivotTable || xlObj.model.isReadOnly)
                return;
            for (i = 1, len = xlObj.model.sheetCount; i <= len; i++) {
                if (xlObj._getContent(i).find("#" + pvtID).length) {
                    pvtObj = xlObj.getSheet(i).pivotMngr.pivot[pvtID];
                    cellObj = container.sheets[i][pvtObj.rowIndex][pvtObj.colIndex];
                    if (xlObj.getObjectLength(cellObj) < 2 && cellObj.pivot.length < 2)
                        delete container.sheets[i][pvtObj.rowIndex][pvtObj.colIndex];
                    else if (cellObj.pivot.length < 2)
                        delete container.sheets[i][pvtObj.rowIndex][pvtObj.colIndex].pivot;
                    delete xlObj.getSheet(i).pivotMngr.pivot[pvtID];
                    xlObj._getContent(i).find("#" + pvtID).remove();
                    xlObj.hideActivationPanel();
                    xlObj.getActivationPanel().find("#" + xlObj._id + "_PivotTableSchema_" + pvtID).remove();
                    xlObj.XLRibbon._toggleAnalyzeTab();
                    xlObj._trigActionComplete({ ID: pvtID, rowIndex: pvtObj.rowIndex, colIndex: pvtObj.colIndex, reqType: "shape", shapeType: "pivot", sheetIndex: i });
                }
            }
        },

        refreshDataSource: function (name, sheetIdx) {
            var xlObj = this.XLObj, elem, id, pivObj, range, datasource;
            if (!xlObj.model.enablePivotTable || xlObj.model.isReadOnly)
                return;
            if (name && sheetIdx) {
                elem = xlObj.element.find("#" + xlObj._id + "_" + name);
                if (elem)
                    id = elem[0].id;
            }
            else {
                sheetIdx = xlObj.getActiveSheetIndex();
                elem = xlObj._getContent(sheetIdx).find(".e-ss-activepivot");
                id = elem[0].id;
            }
            pivObj = elem.data("ejPivotGrid");
            if (pivObj) {
                range = xlObj.getSheet(sheetIdx).pivotMngr.pivot[id].dataRange;
                datasource = xlObj.getRangeDataAsJSON({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, false, xlObj._getSheetIndexByName(xlObj.getSheet(sheetIdx).pivotMngr.pivot[id].dataSheetName));
                pivObj.model.dataSource.data = datasource;
                pivObj.refreshPivotGrid();
            }
        },

        clearPivotFieldList: function (pivotName) {
            var xlObj = this.XLObj, pvtID = this._getPivotIDFromName(pivotName);
            if (!xlObj.model.enablePivotTable || xlObj.model.isReadOnly)
                return;
            this._clearFilters(xlObj.element.find("#" + pvtID).data("ejPivotGrid"), xlObj.getActivationPanel().find("#" + xlObj._id + "_PivotTableSchema_" + pvtID).data("ejPivotSchemaDesigner"));
        },

        _cellDblClick: function (args) {
            if (args.selectedData.length) {
                var xlObj = this.XLObj, xlFormat = xlObj.XLFormat, sheetIdx;
                xlObj.insertSheet();
                sheetIdx = xlObj.getActiveSheetIndex();
                xlObj._updateRangeValue(sheetIdx, { dataSource: args.selectedData, startCell: "A1", showHeader: true }, false);
                xlFormat.createTable({ "header": true, name: "Table" + xlObj._tableCnt, "format": xlFormat._getTableLayoutFromName("TableStyleMedium9").format, "formatName": "TableStyleMedium9" }, "A1:" + xlObj._generateHeaderText(xlObj.getObjectLength(args.selectedData[0])) + (args.selectedData.length + 1));
            }
        },

        _dragMove: function () {
            var xlObj = this.XLObj, interval, scrollObj = xlObj.getActivationPanel().data("ejScroller"), actPanel = xlObj.element.find(".e-spreadsheetactpanel"), top = actPanel.offset().top;
            if (actPanel.height() + top - 45 < $(".e-dragedNode").offset().top) {
                interval = setInterval(function () {
                    if (actPanel.height() + top - 45 < $(".e-dragedNode").offset().top)
                        scrollObj.scrollY(scrollObj.model.scrollTop + 25);
                }, 300);
            }
            else if (top + 45 > $(".e-dragedNode").offset().top) {
                interval = setInterval(function () {
                    if (top + 45 > $(".e-dragedNode").offset().top)
                        scrollObj.scrollY(scrollObj.model.scrollTop - 25);
                }, 300);
            }
            if (xlObj._browserDetails.name === "msie" && xlObj._browserDetails.version === "8.0") {
                $(".e-dragedNode")[0].attachEvent("onmouseup", function () {
                    clearInterval(interval);
                });
                document.attachEvent("onmouseup", function () {
                    clearInterval(interval);
                });
            }
            else {
                $(".e-dragedNode")[0].addEventListener("mouseup", function () {
                    clearInterval(interval);
                });
                document.addEventListener("mouseup", function () {
                    clearInterval(interval);
                });
            }
        },

        _renderSuccess: function (args) {
            if (args.type === 'drillSuccess')
                args = args.gridObj;
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), colCount, rowCount, pvtDataObj, pvtObj = args, pvtRange = [];
            (!xlObj._isExport) && this._clearBackgroundData(args, xlObj.getSheet(sheetIdx).pivotMngr.pivot[args._id], sheetIdx, "update");
            xlObj.element.find("#" + xlObj._id + "_PivotTableSchema_" + args._id).ejPivotSchemaDesigner({
                pivotControl: args, layout: ej.PivotSchemaDesigner.Layouts.Excel, dragMove: $.proxy(this._dragMove, this), fieldItemDropped: $.proxy(this._fieldItemDropped, this),
            });
            pvtDataObj = xlObj.getSheet(sheetIdx).pivotMngr.pivot[args._id];
            rowCount = pvtObj._rowCount;
            colCount = pvtObj.getJSONRecords().length / pvtObj._rowCount;
            pvtRange = [pvtDataObj.rowIndex, pvtDataObj.colIndex, pvtDataObj.rowIndex + rowCount, pvtDataObj.colIndex + colCount];
            this._refreshRowColumn(pvtRange, pvtObj);
            $(".e-spreadsheet .e-pivotgrid th[role='columnheader'").addClass("e-ss-pivottableheader");
            $(".e-spreadsheet .e-pivotgrid tr:last th.rgtot").addClass("e-ss-pivottableheader");
            xlObj.XLDragFill.hideAutoFillElement();
        },

        _clearBackgroundData: function (pvtObj, pvtDataObj, sheetIdx, type) {
            var xlObj = this.XLObj;
            var colCount, rowCount, rowIndex, colIndex;
            colCount = pvtObj.getJSONRecords().length / pvtObj._rowCount;
            rowCount = pvtObj._rowCount;
            rowIndex = (!rowCount || isNaN(rowCount)) ? pvtDataObj.rowIndex + 17 : pvtDataObj.rowIndex + rowCount; // 17 is excel default pivot row count
            colIndex = (!colCount || isNaN(colCount)) ? pvtDataObj.colIndex + 2 : pvtDataObj.colIndex + colCount - 1;  // 2 is excel default pivot col count
            if (!type || type === "update")
                xlObj.getRange([pvtDataObj.rowIndex, pvtDataObj.colIndex, rowIndex, colIndex], sheetIdx).removeClass("e-readOnly").addClass("e-readonly");
            else
                xlObj.getRange([pvtDataObj.rowIndex, pvtDataObj.colIndex, rowIndex, colIndex], sheetIdx).removeClass("e-readOnly");
            xlObj._dupDetails = true;
            xlObj.clearRangeData([pvtDataObj.rowIndex, pvtDataObj.colIndex, rowIndex, colIndex], ["value", "value2", "hyperlink", "cFormatRule", "comment", "format", "formats"], "", false);
            xlObj._dupDetails = false;
        },

        _fieldItemDropped: function (args) {
            if (args.axis === "filter") {
                var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), cell,
                pvtObj = xlObj._getContent(sheetIdx).find(".e-ss-activepivot").data("ejPivotGrid"), pivot = xlObj.getSheet(sheetIdx).pivotMngr.pivot[pvtObj._id];
                while (pivot.rowIndex <= pvtObj.getOlapReport().filters.length) {
                    pivot.rowIndex = pivot.rowIndex + 1;
                    cell = xlObj.getCell(pivot.rowIndex, pivot.colIndex)[0];
                    pvtObj.element.css({ left: cell.offsetLeft - 2, top: cell.offsetTop - 2 });
                }
            }
        },

        _updatePivotMngr: function (cell, pivotObj) {
            var xlObj = this.XLObj, pivotMngr = xlObj.getSheet(xlObj.getActiveSheetIndex()).pivotMngr, pivot = pivotMngr["pivot"];
            pivot[pivotObj["pivot"].id] = $.extend(true, {}, pivotObj["pivot"]);
            xlObj.XLEdit._updateDataContainer({ rowIndex: pivotObj.pivot.rowIndex, colIndex: pivotObj.pivot.colIndex }, { dataObj: { pivot: pivotObj["pivot"].id } });
        },

        _pivotMouseDown: function (e) {
            var xlObj = this.XLObj;
            e.preventDefault();
            xlObj.getActivationPanel().find("#" + xlObj._id + "_PivotTableSchema_" + e.target.id).show();
            xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot").removeClass("e-ss-activepivot");
            if ($(e.target).hasClass("e-ss-pivot"))
                $(e.target).addClass("e-ss-activepivot");
            else
                $(e.target).parents("e-ss-object").addClass("e-ss-activepivot");
            xlObj.XLSelection._cleanUp(true);
            xlObj.showActivationPanel();
        },

        _pivotScroll: function (args) {
            var xlObj = this.XLObj, desObj = xlObj.getActivationPanel().find("#" + xlObj._id + "_PivotTableSchema_" + xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot")[0].id).data("ejPivotSchemaDesigner");
            if (args.source === "thumb" && ($(".e-dragedNode").length || desObj._isDragging || this.XLObj.XLResize._allowStart))
                args.cancel = true;
        },

        _pivotMouseUp: function (e) {
            var xlObj = this.XLObj, $trgt = $(e.target), robj = $('#' + xlObj._id + '_Ribbon').data("ejRibbon"), menuObj, actPvt = xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot"),
                menuElem = actPvt.length == 1 ? $("#" + xlObj._id + "_PivotTableSchema_" + actPvt[0].id + "_pivotTreeContextMenu") : null,
                elem = ej.isNullOrUndefined(menuElem) ? null : menuElem.find("#" + xlObj._id + "_fieldSettings")[0];
            if (xlObj.model.showRibbon) {
                if (xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot").length && ($trgt.hasClass("e-ss-pivot") || $trgt.parents(".e-ss-pivot").length))
                    xlObj.XLRibbon._analyzeTabUpdate();
                else if (!xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot").length && (robj.model.selectedItemIndex === xlObj.XLRibbon._getTabIndex("analyze") || robj.isVisible("Analyze")))
                    xlObj.XLRibbon._toggleAnalyzeTab();
            }
            this._valueFieldName = e.target.textContent;
            menuObj = ej.isNullOrUndefined(menuElem) ? null : menuElem.data("ejMenu")
            if (menuObj && $(e.target).parents().eq(2).hasClass("e-schemaValue") && $(e.target).hasClass("e-pvtBtn")) {
                if (!elem) {
                    menuObj.insert([{ id: xlObj._id + "_fieldSettings", parentId: null, text: "Value Field Settings " }], "#" + menuElem[0].id);
                    elem = menuElem.find("#" + xlObj._id + "_fieldSettings")[0];
                    if (xlObj._browserDetails.name == "msie" && xlObj._browserDetails.version == "8.0")
                        $(elem)[0].attachEvent("onclick", this._cmenuclick, true);
                    else
                        $(elem)[0].addEventListener("click", this._cmenuclick, true);
                }
                else
                    menuObj.showItems(["#" + elem.id]);
            }
            else if (!ej.isNullOrUndefined(elem) && !$(e.target).parents().eq(2).hasClass("e-schemaValue"))
                menuObj.hideItems(["#" + elem.id]);
        },

        _cmenuclick: function (event) {
            var xlObj = $("#" + event.currentTarget.id.split("_fieldSettings")[0]).data("ejSpreadsheet"),
                xlId = xlObj._id, $dlg = $("#" + xlId + "_fielddlg");
            if ($dlg.hasClass("e-dialog")) {
                $dlg.ejDialog("open");
                xlObj.XLPivot._refreshSummaryList();
            }
            else
                xlObj.XLPivot._renderFieldSettingDlg();
        },

        _renderFieldSettingDlg: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, dlgId = xlId + "_fielddlg", $dlg, $tab, $ctnr, $ul, $summaryTag, $contentdiv, $li,
                $maindiv, $fieldValueLabel, $fieldNameValueLabel, $topdiv1, $fieldNameLabel, $bottomdiv, $btndiv, $btnctnr, $okBtn, $canBtn, $listSummary,
                summarySrc = [{ value: "sum", text: "Sum" }, { value: "count", text: "Count" }, { value: "average", text: "Average" }, { value: "max", text: "Max" }, { value: "min", text: "Min" }];
            $dlg = ej.buildTag("div#" + dlgId);
            $tab = ej.buildTag("div#" + dlgId + "_fieldtab");
            $ctnr = ej.buildTag("div.e-dlg-fields e-dlgctndiv");
            $maindiv = ej.buildTag("div.e-ss-maindiv");
            $topdiv1 = ej.buildTag("div.e-ss-topmaindiv");
            $fieldNameLabel = ej.buildTag("label", xlObj._getLocStr("FieldValue"), "", { id: dlgId + "_fieldnamelabel" });
            $fieldNameValueLabel = ej.buildTag("label#" + dlgId + "_fieldnamevaluelabel.e-dlg-fieldlabel");
            $fieldNameValueLabel.text(this._valueFieldName);
            $topdiv1.append($fieldNameLabel, $fieldNameValueLabel);
            $dlg.append($topdiv1);
            $bottomdiv = ej.buildTag("div");
            $fieldValueLabel = ej.buildTag("label#" + dlgId + "_fieldvallabel.e-dlg-fieldvaluelabel", xlObj._getLocStr("SummarizeChooseType"));
            $listSummary = ej.buildTag("ul#" + dlgId + "_summarylist", "", { width: "150px", height: "150px" })
            $bottomdiv.append($fieldValueLabel, $listSummary);
            $maindiv.append($bottomdiv);
            $ul = ej.buildTag("ul .e-ul");
            $summaryTag = ej.buildTag("a", xlObj._getLocStr("SummarizeValue"), {}, { href: "#" + dlgId + "_summary" });
            $li = ej.buildTag("li", $summaryTag);
            $listSummary.ejListBox({
                selectedItemIndex: "0", width: "150px", height: "150px", dataSource: summarySrc,
                fields: { text: "text", value: "value" },
                allowMultiSelection: false
            });
            $ul.append($li);
            $tab.append($ul);
            $ctnr.append($tab);
            //create button content
            $btndiv = ej.buildTag("div.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + dlgId + "_okbtn");
            $canBtn = ej.buildTag("input#" + dlgId + "_cantn");
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: 60, click: ej.proxy(this._fielddlgOk, this), cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), showRoundedCorner: true, width: 60, click: ej.proxy(this._fielddlgCancel, this) });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            xlObj.element.append($dlg.append($ctnr, $btndiv));
            $tab.ejTab({ width: "100%", height: "auto", cssClass: "e-ss-dlgtab", allowKeyboardNavigation: false });
            $contentdiv = $("#" + dlgId + "_summary");
            $contentdiv.append($maindiv);
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("ValueFieldSettings"), width: "auto", height: "auto", cssClass: "e-ss-dialog e-ss-mattab e-ss-fcdlg e-" + xlObj._id + "-dlg", open: function () { $("#" + xlObj._id + "_formatdlg_okbtn").focus(); } });
            $dlg.ejDialog("open");
            this._refreshSummaryList();
        },

        _refreshSummaryList: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, dlgId = xlId + "_fielddlg", $fieldNameValueLabel, listObj, tabObj, i, sheetIdx = xlObj.getActiveSheetIndex(),
                pvtID = xlObj._getContent(sheetIdx).find(".e-ss-activepivot")[0].id, pivotGrid = $("#" + pvtID).data("ejPivotGrid"), len = pivotGrid.model.dataSource.values.length,
                dataSrc = pivotGrid.model.dataSource, summarytype;
            for (i = 0; i < len; i++)
                if (dataSrc.values[i].fieldName == this._valueFieldName)
                    summarytype = ej.isNullOrUndefined(dataSrc.values[i].summaryType) ? "sum" : dataSrc.values[i].summaryType;
            $fieldNameValueLabel = $("#" + dlgId + "_fieldnamevaluelabel");
            $fieldNameValueLabel.text(this._valueFieldName);
            listObj = $("#" + dlgId + "_summarylist").data("ejListBox");
            listObj.selectItemByValue(summarytype);
            tabObj = $("#" + xlId + "_fielddlg_fieldtab").data("ejTab");
            tabObj && tabObj._refresh();
        },

        _fielddlgOk: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), xlId = xlObj._id, dlgId = xlId + "_fielddlg", listObj = $("#" + dlgId + "_summarylist").data("ejListBox"),
                pvtID = xlObj._getContent(sheetIdx).find(".e-ss-activepivot")[0].id, pivotGrid = $("#" + pvtID).data("ejPivotGrid"), i, dataSrc = pivotGrid.model.dataSource,
                len = dataSrc.values.length, selValue = listObj.getSelectedItems()[0].text;
            for (i = 0; i < len; i++)
                if (dataSrc.values[i].fieldName == this._valueFieldName)
                    dataSrc.values[i].summaryType = ej.PivotAnalysis.SummaryType[selValue];
            pivotGrid.refreshControl();
            $("#" + dlgId).ejDialog("close");
        },

        _fielddlgCancel: function () {
            $("#" + this.XLObj._id + "_fielddlg").ejDialog("close");
        },

        _changePvtName: function () {
            var xlObj = this.XLObj, newName = xlObj.element.find("#" + xlObj._id + "_Ribbon_Analyze_PivotTable_PivotTableName").val(), sheetIdx = xlObj.getActiveSheetIndex(), id = xlObj._getContent(sheetIdx).find(".e-ss-activepivot")[0].id;
            xlObj.getSheet(sheetIdx).pivotMngr.pivot[id].tableName = this.names[id] = newName;
            xlObj._trigActionComplete({ pvtName: newName, reqType: "shape", shapeType: "pivot", sheetIndex: sheetIdx, ID: id });
        },


        _checkRange: function (dataAddr, tblAddr) {
            var xlObj = this.XLObj, activeCell = xlObj.getActiveCell(), sheetIdx, rowIdx = activeCell.rowIndex, colIdx = activeCell.colIndex, value, range = [];
            var selected = xlObj._getContent(xlObj.getActiveSheetIndex()).find(".e-ss-activepivot");
            var temp, i, len, isError = { isHeader: false, isRows: false };
            temp = xlObj.XLRibbon._getAddrFromDollarAddr(dataAddr);
            sheetIdx = temp[0];
            range = xlObj.getRangeIndices(temp[1]);
            rowIdx = range[0];
            colIdx = range[1];
            if (dataAddr.length)
                for (i = 0, len = range[3] - colIdx + 1; i < len; i++) {
                    value = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx + i, "value", sheetIdx);
                    if ((xlObj.isUndefined(value) || value == ""))
                        isError["isHeader"] = true;
                }
            if (rowIdx === range[2])
                isError["isRows"] = true;
            if (tblAddr.length) {
                var pvtMngr, keys, j, keyLen, pvtObj, colCount, rowCount, rowIndex, colIndex, pivot;
                temp = xlObj.XLRibbon._getAddrFromDollarAddr(tblAddr);
                sheetIdx = temp[0];
                range = xlObj.getRangeIndices(temp[1]);
                for (i = 1, len = xlObj.model.sheetCount; i <= len; i++) {
                    pvtMngr = xlObj.model.sheets[i].pivotMngr.pivot;
                    keys = xlObj.getObjectKeys(pvtMngr);
                    for (j = 0, keyLen = keys.length; j < keyLen; j++) {
                        if (!selected.length || (selected.length && keys[j] !== selected[0].id)) {
                            pvtObj = xlObj.element.find("#" + keys[j]).data("ejPivotGrid");
                            pivot = pvtMngr[keys[j]];
                            colCount = pvtObj.getJSONRecords().length / pvtObj.rowCount;
                            rowCount = pvtObj.rowCount;
                            rowIndex = (!rowCount || isNaN(rowCount)) ? pivot.rowIndex + 17 : pivot.rowIndex + rowCount - 1; // 18 is excel default pivot row count
                            colIndex = (!colCount || isNaN(colCount)) ? pivot.colIndex + 2 : pivot.colIndex + colCount - 1;  // 2 is excel default pivot col count
                            if (range[0] >= pivot.rowIndex && range[0] <= rowIndex && range[1] >= pivot.colIndex && range[1] <= colIndex) {
                                isError["isOverlap"] = true;
                                break;
                            }
                        }
                    }
                }
            }
            return isError;
        },

        _updateSheetName: function (updatedValue) {
            var xlObj = this.XLObj, i, j, len, pvt, keys, kLen, oldValue = xlObj.getSheet(xlObj.getActiveSheetIndex()).sheetInfo.text;
            for (i = 1, len = xlObj.model.sheetCount; i <= len; i++) {
                pvt = xlObj.getSheet(i).pivotMngr.pivot;
                keys = xlObj.getObjectKeys(pvt);
                for (j = 0, kLen = keys.length; j < kLen; j++) {
                    if (pvt[keys[j]].dataSheetName === oldValue)
                        pvt[keys[j]].dataSheetName = updatedValue;
                }
            }
        },

        _getSheetIdxFromName: function (name) {
            var xlObj = this.XLObj, i, len;
            for (i = 1, len = xlObj.model.sheetCount; i <= len; i++)
                if (xlObj.model.sheets[i].sheetInfo.text == name)
                    return i;
        },

        _changeDataSource: function () {
            var range, xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), pvtID = xlObj._getContent(sheetIdx).find(".e-ss-activepivot")[0].id, pivotGrid = $("#" + pvtID).data("ejPivotGrid");
            var pivotSchema, temp, dataSheetName, pivotData, pvtObj, olapReport = pivotGrid.getOlapReport();
            temp = xlObj.XLRibbon._getAddrFromDollarAddr($("#" + xlObj._id + "_Ribbon_PvtRange").val());
            dataSheetName = xlObj.model.sheets[temp[0]].sheetInfo.text;
            range = xlObj.getRangeIndices(temp[1]);
            pvtObj = xlObj.getSheet(xlObj.getActiveSheetIndex()).pivotMngr.pivot[pvtID];
            pvtObj.dataRange = range;
            pvtObj.dataSheetName = dataSheetName;
            pivotData = xlObj.getRangeDataAsJSON({ rowIndex: range[0], colIndex: range[1] }, { rowIndex: range[2], colIndex: range[3] }, false, temp[0]);
            if (xlObj.getObjectKeys(pivotGrid.model.dataSource.data[0]).length !== xlObj.getObjectKeys(pivotData[0]).length) {
                olapReport.rows = [];
                olapReport.columns = [];
                olapReport.values = [];
                olapReport.filters = [];
            }
            olapReport.data = pivotData;
            pivotSchema = $("#" + xlObj._id + "_PivotTableSchema_" + pvtID).data("ejPivotSchemaDesigner");
            pivotGrid.model.dataSource.data = pivotData;
            this._refreshFieldList(pivotGrid, pivotSchema, pivotData);
            xlObj._trigActionComplete({ sheetIndex: sheetIdx, dataRange: pvtObj.dataRange, ID: pvtID, pvtData: pivotData, reqType: "shape", shapeType: "pivot" });
        },

        _refreshFieldList: function (pivotGrid, pivotSchema, pivotData) {
            var xlObj = this.XLObj, dropArgs, i, len, objKeys = xlObj.getObjectKeys(pivotData[0]);
            for (i = 0, len = objKeys.length; i < len; i++) {
                dropArgs = { droppedFieldName: objKeys[i], droppedFieldCaption: objKeys[i], droppedClass: "row", droppedPosition: "", isMeasuresDropped: (objKeys[i].toLocaleLowerCase().indexOf("measures") == 0) };
                ej.Pivot.addReportItem(pivotGrid.model.dataSource, dropArgs);
            }
            pivotGrid.refreshPivotGrid();
            pivotSchema.model.pivotControl = pivotGrid;
            $(pivotSchema.element).html("");
            pivotSchema._load();
            xlObj._refreshActivationPanel();
        },

        _getPivotIDFromName: function (name) {
            for (var key in this.names) {
                if (name === this.names[key])
                    return key;
            }
        },

        _clearFilters: function (pivotGrid, pivotSchema) {
            var xlObj = this.XLObj, olapReport = pivotGrid.getOlapReport();
            olapReport.rows = [];
            olapReport.columns = [];
            olapReport.values = [];
            olapReport.filters = [];
            pivotGrid.refreshPivotGrid();
            pivotSchema.model.pivotControl = pivotGrid;
            $(pivotSchema.element).html("");
            pivotSchema._load();
            xlObj._refreshActivationPanel();
        },

        _movePivotTable: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), pvtElem = xlObj._getContent(sheetIdx).find(".e-ss-activepivot"), pvtID = pvtElem[0].id, pivot, pvtObj = pvtElem.data("ejPivotGrid");
            var splitStr, tblSheetIdx, cell, $cell, pvtRange, newSheetIdx, isUpdate = true, moveRange, colCount, rowCount;
            pivot = xlObj.getSheet(sheetIdx).pivotMngr.pivot[pvtID];
            if ($("#" + xlObj._id + "_dlg_existsheet").data("ejRadioButton").model.checked) {
                isUpdate = false;
                splitStr = $("#" + xlObj._id + "_Ribbon_PvtLocation").val().split("!");
                tblSheetIdx = this._getSheetIdxFromName(splitStr[0]);
                pvtRange = xlObj.getRangeIndices(xlObj.XLRibbon._getAddrFromDollarAddr(splitStr[1])[1]);
                if (sheetIdx !== tblSheetIdx) {
                    xlObj._getContent(tblSheetIdx).find(".e-content").append(pvtElem);
                    xlObj.gotoPage(tblSheetIdx, false);
                    xlObj.XLSelection._cleanUp(true);
                    isUpdate = true;
                }
                pivot.rowIndex = pvtRange[0];
                pivot.colIndex = pvtRange[1];
            }
            else {
                xlObj.insertSheet();
                sheetIdx = xlObj.getActiveSheetIndex();
                xlObj._getContent(sheetIdx).find(".e-content").append(pvtElem);
                pvtRange = [2, 0];
            }
            if (isUpdate) {
                newSheetIdx = xlObj.getActiveSheetIndex();
                xlObj.getSheet(newSheetIdx).pivotMngr.pivot[pvtID] = {};
                $.extend(true, xlObj.getSheet(newSheetIdx).pivotMngr.pivot[pvtID], pivot);
                if (newSheetIdx !== sheetIdx)
                    delete xlObj.getSheet(sheetIdx).pivotMngr.pivot[pvtID];
            }
            $cell = xlObj.getCell(pvtRange[0], pvtRange[1]);
            if (!$cell && xlObj.model.scrollSettings.allowVirtualScrolling) {
                var sheet = xlObj.getSheet(xlObj.getActiveSheetIndex());
                xlObj._scrollContent({ y: sheet._rowHeightCollection[pvtRange[0] + 1] - sheet._scrollTop });
                $cell = xlObj.getCell(pvtRange[0], pvtRange[1]);
            }
            cell = $cell[0];
            pvtElem.css({ left: cell.offsetLeft - 2, top: cell.offsetTop - 2 });
            if (pvtObj.getOlapReport().filters.length)
                while (pivot.rowIndex <= pvtObj.getOlapReport().filters.length) {
                    pivot.rowIndex = pivot.rowIndex + 1;
                    cell = xlObj.getCell(pivot.rowIndex, pivot.colIndex)[0];
                    pvtElem.css({ left: cell.offsetLeft - 2, top: cell.offsetTop - 2 });
                }
            rowCount = pvtObj._rowCount;
            colCount = (pvtObj.calculateCellWidths().columnWidths).length;
            moveRange = [pvtRange[0], pvtRange[1], pvtRange[0] + rowCount, pvtRange[1] + colCount];
            this._refreshRowColumn(moveRange, pvtObj);
            xlObj._trigActionComplete({ sheetIndex: sheetIdx, newRange: moveRange, ID: pvtID, reqType: "shape", shapeType: "pivot" });
        },

    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.spreadsheetFeatures = ej.spreadsheetFeatures || {};
    ej.spreadsheetFeatures.sparkLine = function (obj) {
        this.XLObj = obj;
        this.rowIdx = "";
        this.colIdx = "";
        this.dRange = "";
        this.location = "";
    };

    ej.spreadsheetFeatures.sparkLine.prototype = {
        createSparkline: function (dataRange, locationRange, type, options, sheetIdx) {
            var xlObj = this.XLObj, j, i, k, drow, dcol, lrow, lcol, sparklineString = false, sameDLRnge = false, dtRange, dollarToRnge, dollarToLocRnge, sparkline, sparklineElem, details, lRange, locnlen, cellInfo, selectedDataRnge, selectedLocRnge, dataRngeValue, dRowIdx, dColIdx, dRnglen, arr = [], range = [], tabUpdate = false, array = {};
            if (!xlObj.model.allowSparkline || xlObj.model.ReadOnly)
                return;
            options = options || {};
            if ((dataRange == "") || (locationRange == ""))
                xlObj._showAlertDlg("Alert", "EmptyDLRnge", 630);
            sheetIdx = sheetIdx || xlObj.getActiveSheetIndex();
            dollarToRnge = xlObj.XLRibbon._getAddrFromDollarAddr(dataRange);
            dollarToLocRnge = xlObj.XLRibbon._getAddrFromDollarAddr(locationRange);
            var dataRnge = xlObj._getSelectedCells(sheetIdx, dollarToRnge[1]) || xlObj._getSelectedCells();
            var locRnge = xlObj._getSelectedCells(sheetIdx, dollarToLocRnge[1]) || xlObj._getSelectedCells();
            options.highPointColor = options.highPointColor || null;
            options.lowPointColor = options.lowPointColor || null;
            options.negativePointColor = options.negativePointColor || null;
            options.startPointColor = options.startPointColor || null;
            options.endPointColor = options.endPointColor || null;
            selectedDataRnge = dataRnge.range;
            drow = selectedDataRnge[2] - selectedDataRnge[0] + 1;
            dcol = selectedDataRnge[3] - selectedDataRnge[1] + 1;
            selectedLocRnge = locRnge.range;
            lrow = selectedLocRnge[2] - selectedLocRnge[0] + 1;
            lcol = selectedLocRnge[3] - selectedLocRnge[1] + 1;
            if ((locRnge.range[0] == locRnge.range[2]) || (locRnge.range[1] == locRnge.range[3])) { // check if the loc range are all in single col or row
                if ((dataRnge.range[0] == dataRnge.range[2]) || (dataRnge.range[1] == dataRnge.range[3])) { // check the selected range is single row or column or mul row or col
                    if ((locRnge.selCells.length == 1)) { //  select singlerow or single column
                        for (j = 0, locnlen = locRnge.selCells.length; j < locnlen; j++) {
                            this.rowIdx = locRnge.selCells[j].rowIndex;
                            this.colIdx = locRnge.selCells[j].colIndex;
                            sparkline = xlObj.XLEdit.getPropertyValue(this.rowIdx, this.colIdx, "sparkline");
                            sparkline && xlObj._getContent(sheetIdx).find("#" + sparkline[0]).remove();
                            cellInfo = xlObj._getCellInfo({ rowIndex: this.rowIdx, colIndex: this.colIdx }, sheetIdx);
                            for (i = 0, dRnglen = dataRnge.selCells.length; i < dRnglen; i++) {
                                dRowIdx = dataRnge.selCells[i].rowIndex;
                                dColIdx = dataRnge.selCells[i].colIndex;
                                dataRngeValue = xlObj.XLEdit.getPropertyValue(dRowIdx, dColIdx, "value", sheetIdx);
                                if (typeof dataRngeValue === "string")
                                    sparklineString = true;
                                arr.push(dataRngeValue);
                                range.push(dRowIdx, dColIdx);
                            }
                            dtRange = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[range.length - 2], range[range.length - 1]);
                        }
                        if (sparklineString)
                            xlObj._showAlertDlg("Alert", "SparklineDataAlert", 630);
                        else if (typeof dataRngeValue === "number") {
                            sparklineElem = this._renderBaseElem(cellInfo, type, this.rowIdx, this.colIdx, sheetIdx);
                            array = { dataSource: arr, type: type, isResponsive: true, id: sparklineElem[0].id, rowIndex: this.rowIdx, colIndex: this.colIdx, cellInfo: cellInfo, DataRange: dtRange, LocationRange: dollarToLocRnge[1], reqType: "sparkline", shapeType: "sparkline", action: "create", sparklineType: type, range: range, fill: "#33ccff" };
                            sparklineElem.ejSparkline($.extend(array, options));
                            xlObj.XLShape._updateShapeMngr({ rowIndex: this.rowIdx, colIndex: this.colIdx }, { "sparkline": $.extend(array, options) }, "sparkline");
                            if (!xlObj._isUndoRedo) {
                                details = $.extend(array, options);
                                details["sheetIndex"] = sheetIdx;
                                xlObj._completeAction(details);
                                xlObj._trigActionComplete(details);
                            }
                            tabUpdate = true;
                        }
                    }
                    else if (dataRnge.selCells.length == (locRnge.selCells.length)) //check datarnge and locrnge length to be equal
                    {
                        for (k = 0, dRnglen = dataRnge.selCells.length; k < dRnglen; k++) {
                            this.rowIdx = locRnge.selCells[k].rowIndex;
                            this.colIdx = locRnge.selCells[k].colIndex;
                            sparkline = xlObj.XLEdit.getPropertyValue(this.rowIdx, this.colIdx, "sparkline");
                            sparkline && xlObj._getContent(sheetIdx).find("#" + sparkline[0]).remove();
                            cellInfo = xlObj._getCellInfo({ rowIndex: this.rowIdx, colIndex: this.colIdx }, sheetIdx);
                            dataRngeValue = xlObj.XLEdit.getPropertyValue(dataRnge.selCells[k].rowIndex, dataRnge.selCells[k].colIndex, "value", sheetIdx);
                            sameDLRnge == true;
                            range.push(dataRnge.selCells[k].rowIndex, dataRnge.selCells[k].colIndex);
                            if (typeof dataRngeValue === "string")
                                xlObj._showAlertDlg("Alert", "SparklineDataAlert", 630);
                            else if (typeof dataRngeValue === "number") {
                                sparklineElem = this._renderBaseElem(cellInfo, type, this.rowIdx, this.colIdx, sheetIdx);
                                dtRange = xlObj._getAlphaRange(sheetIdx, dataRnge.selCells[k].rowIndex, dataRnge.selCells[k].colIndex, dataRnge.selCells[k].rowIndex, dataRnge.selCells[k].colIndex);
                                array = { dataSource: [dataRngeValue], type: type, isResponsive: true, id: sparklineElem[0].id, rowIndex: this.rowIdx, colIndex: this.colIdx, cellInfo: cellInfo, DataRange: dtRange, LocationRange: dollarToLocRnge[1], reqType: "sparkline", shapeType: "sparkline", action: "create", sparklineType: type, range: range, fill: "#33ccff" }
                                sparklineElem.ejSparkline($.extend(array, options));
                                xlObj.XLShape._updateShapeMngr({ rowIndex: this.rowIdx, colIndex: this.colIdx }, { "sparkline": $.extend(array, options) }, "sparkline");
                                if (!xlObj._isUndoRedo) {
                                    details = $.extend(array, options);
                                    details["sheetIndex"] = sheetIdx;
                                    xlObj._completeAction(details);
                                    xlObj._trigActionComplete(details);
                                }
                                tabUpdate = true;
                            }
                        }
                    }
                    else
                        xlObj._showAlertDlg("Alert", "SparklineLocAlert", 630);
                }
                else if ((drow == lrow) || (drow == lcol)) {   // multiple row or col   ******** row  ****** 
                    dRowIdx = dataRnge.selCells[0].rowIndex;
                    for (j = 0, locnlen = locRnge.selCells.length; j < locnlen; j++) {
                        this.rowIdx = locRnge.selCells[j].rowIndex;
                        this.colIdx = locRnge.selCells[j].colIndex;
                        sparkline = xlObj.XLEdit.getPropertyValue(this.rowIdx, this.colIdx, "sparkline");
                        sparkline && xlObj._getContent(sheetIdx).find("#" + sparkline[0]).remove();
                        cellInfo = xlObj._getCellInfo({ rowIndex: this.rowIdx, colIndex: this.colIdx }, sheetIdx);
                        range = [];
                        for (i = 0; i < dcol; i++) {
                            dColIdx = dataRnge.selCells[i].colIndex;
                            dataRngeValue = xlObj.XLEdit.getPropertyValue(dRowIdx, dColIdx, "value", sheetIdx);
                            if (typeof dataRngeValue === "string")
                                sparklineString = true;
                            arr.push(dataRngeValue);
                            range.push(dRowIdx, dColIdx);
                        }
                        lRange = xlObj._getAlphaRange(sheetIdx, this.rowIdx, this.colIdx, this.rowIdx, this.colIdx);
                        dtRange = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[range.length - 2], range[range.length - 1]);
                        if (sparklineString)
                            xlObj._showAlertDlg("Alert", "SparklineDataAlert", 630);
                        else if (typeof dataRngeValue === "number")
                            sparklineElem = this._renderBaseElem(cellInfo, type, this.rowIdx, this.colIdx, sheetIdx);
                        array = { dataSource: arr, type: type, isResponsive: true, id: sparklineElem[0].id, rowIndex: this.rowIdx, colIndex: this.colIdx, cellInfo: cellInfo, DataRange: dtRange, LocationRange: lRange, reqType: "sparkline", shapeType: "sparkline", action: "create", sparklineType: type, range: range, fill: "#33ccff" }
                        sparklineElem.ejSparkline($.extend(array, options));
                        xlObj.XLShape._updateShapeMngr({ rowIndex: this.rowIdx, colIndex: this.colIdx }, { "sparkline": $.extend(array, options) }, "sparkline");
                        dRowIdx++;
                        arr = [];
                        if (!xlObj._isUndoRedo) {
                            details = $.extend(array, options);
                            details["sheetIndex"] = sheetIdx;
                            xlObj._completeAction(details);
                            xlObj._trigActionComplete(details);
                        }
                        tabUpdate = true;
                    }
                }
                else if ((dcol == lrow) || (dcol == lcol)) {  // col
                    dColIdx = dataRnge.selCells[0].colIndex;
                    for (j = 0, locnlen = locRnge.selCells.length; j < locnlen; j++) {
                        this.rowIdx = locRnge.selCells[j].rowIndex;
                        this.colIdx = locRnge.selCells[j].colIndex;
                        sparkline = xlObj.XLEdit.getPropertyValue(this.rowIdx, this.colIdx, "sparkline");
                        sparkline && xlObj._getContent(sheetIdx).find("#" + sparkline[0]).remove();
                        cellInfo = xlObj._getCellInfo({ rowIndex: this.rowIdx, colIndex: this.colIdx }, sheetIdx);
                        dRowIdx = dataRnge.selCells[0].rowIndex;
                        range = [];
                        for (i = 0; i < drow; i++) {
                            dataRngeValue = xlObj.XLEdit.getPropertyValue(dRowIdx, dColIdx, "value", sheetIdx);
                            if (typeof dataRngeValue === "string")
                                sparklineString = true;
                            arr.push(dataRngeValue);
                            range.push(dRowIdx, dColIdx);
                            dRowIdx++;
                        }
                        lRange = xlObj._getAlphaRange(sheetIdx, this.rowIdx, this.colIdx, this.rowIdx, this.colIdx);
                        dtRange = xlObj._getAlphaRange(sheetIdx, range[0], range[1], range[range.length - 2], range[range.length - 1]);
                        if (sparklineString)
                            xlObj._showAlertDlg("Alert", "SparklineDataAlert", 630);
                        else if (typeof dataRngeValue === "number")
                            sparklineElem = this._renderBaseElem(cellInfo, type, this.rowIdx, this.colIdx, sheetIdx);
                        array = { dataSource: arr, type: type, isResponsive: true, id: sparklineElem[0].id, rowIndex: this.rowIdx, colIndex: this.colIdx, cellInfo: cellInfo, DataRange: dtRange, LocationRange: lRange, reqType: "sparkline", shapeType: "sparkline", action: "create", sparklineType: type, range: range, fill: "#33ccff" };
                        sparklineElem.ejSparkline($.extend(array, options));
                        xlObj.XLShape._updateShapeMngr({ rowIndex: this.rowIdx, colIndex: this.colIdx }, { "sparkline": $.extend(array, options) }, "sparkline");
                        dColIdx++;
                        arr = [];
                        if (!xlObj._isUndoRedo) {
                            details = $.extend(array, options);
                            details["sheetIndex"] = sheetIdx;
                            xlObj._completeAction(details);
                            xlObj._trigActionComplete(details);
                        }
                        tabUpdate = true;
                    }
                }
                else
                    xlObj._showAlertDlg("Alert", "SparklineLocAlert", 630);
            }
            else
                xlObj._showAlertDlg("Alert", "SparklineAlert", 630);
            if ((xlObj.model.showRibbon) && (tabUpdate))
                this._sparklineDesignTabUpdate(sparklineElem[0].id);
            this._wireSparklineEvents("_on");
        },

        _createSparkline: function (sparklineProp, cellInfo, sheetIdx) {
            var xlObj = this.XLObj, sparklineElem; sheetIdx = sheetIdx || xlObj.getActiveSheetIndex();
            if (xlObj.isImport || xlObj.model.isImport) {
                sparklineElem = this._renderBaseElement(cellInfo.top, cellInfo.left, cellInfo.height, cellInfo.width, sparklineProp.rowIndex, sparklineProp.colIndex, sheetIdx, sparklineProp.id);
                sparklineElem.ejSparkline(sparklineProp);
                sparklineProp["cellInfo"] = cellInfo;
                sparklineProp["id"] = sparklineElem[0].id;
                xlObj.XLShape._updateShapeMngr({ rowIndex: sparklineProp.rowIndex, colIndex: sparklineProp.colIndex }, { "sparkline": sparklineProp }, "sparkline");
            }
            else {
                cellInfo = cellInfo || sparklineProp.cellInfo;
                sparklineElem = this._renderBaseElement(cellInfo.top, cellInfo.left, sparklineProp.cellInfo.height, sparklineProp.cellInfo.width, sparklineProp.rowIndex, sparklineProp.colIndex, sheetIdx, sparklineProp.id);
                sparklineElem.ejSparkline(sparklineProp);
            }
            this._wireSparklineEvents("_on");
        },
        _renderBaseElement: function (top, left, height, width, rowIndex, colIndex, sheetIndex, sparklineId) {
            var xlObj = this.XLObj, div, actCell;
            div = $("<div id='" + sparklineId + "' class='e-ss-sparkline'  style='top:" + top + "px; left:" + left + "px; height:" + (height - 1) + "px; width:" + width + "px;' ></div>");
            div.data("parentID", xlObj._id);
            actCell = xlObj.getCell(rowIndex, colIndex, sheetIndex);
            if (actCell.find('div[id *= "_Merge"]').length)
                actCell.find('div[id *= "_Merge"]').prepend(div[0]);
            else
                actCell.prepend(div[0]);
            return div;
        },

        _initSparklineDialog: function () {
            var xlObj = this.XLObj, $dlg, $okBtn, $canBtn, $btndiv, $btnctnr;
            $dlg = ej.buildTag("div#" + xlObj._id + "_SparklineDialog");
            xlObj.element.append($dlg);
            $dlg.append(ej.buildTag("div#" + xlObj._id + "_Sparkline.e-dlgctndiv"));
            $btndiv = ej.buildTag("div#" + xlObj._id + "sparklineBtnDiv.e-dlg-btnfields");
            $btnctnr = ej.buildTag("div.e-dlg-btnctnr");
            $okBtn = ej.buildTag("input#" + xlObj._id + "sparklineDialog_OKBtn", "", {}, { type: "button" });
            $canBtn = ej.buildTag("input#" + xlObj._id + "sparklineDialog_CancelBtn", "", {}, { type: "button" });
            $okBtn.ejButton({ text: xlObj._getLocStr("Ok"), showRoundedCorner: true, width: "25%", click: ej.proxy(this._dlgSparklineOk, this), enabled: true, cssClass: "e-ss-okbtn" });
            $canBtn.ejButton({ text: xlObj._getLocStr("Cancel"), click: ej.proxy(this._dlgSparklineCancel, this), showRoundedCorner: true, width: "25%" });
            $btndiv.append($btnctnr.append($okBtn, $canBtn));
            $dlg.append($btndiv);
            $dlg.ejDialog({ enableModal: true, showOnInit: false, enableResize: false, allowKeyboardNavigation: false, title: xlObj._getLocStr("SparklineChart"), width: "auto", cssClass: "e-ss-dialog e-ss-sparklinedlg e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
        },
        _dlgSparklineOk: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sheet = xlObj.getSheet(sheetIdx), sparkline, newLocationRange, newDataRange,
                sparklineDiv, dlg = $("#" + xlObj._id + "_SparklineDialog"), dollarToDRnge, type;
            if ($("#" + xlObj._id + "_Form_Ribbon_SparklineRange").valid() && $("#" + xlObj._id + "_Form_Ribbon_SparklineLocation").valid()) {
                if (xlObj.XLRibbon._isEditGroupLocationClick) {
                    dollarToDRnge = xlObj.XLRibbon._getAddrFromDollarAddr(this.dRange);
                    newLocationRange = $("#" + xlObj._id + "_Ribbon_SparklineLocation").val();
                    newDataRange = $("#" + xlObj._id + "_Ribbon_SparklineRange").val();
                    if ((((dollarToDRnge[1] == newDataRange || dollarToDRnge[1].toLowerCase() == newDataRange) && this.location != newLocationRange) || ((dollarToDRnge[1] != newDataRange || dollarToDRnge[1].toLowerCase() != newDataRange) && this.location == newLocationRange)) || ((dollarToDRnge[1] != newDataRange || dollarToDRnge[1].toLowerCase() != newDataRange) && this.location != newLocationRange)) {
                        sparklineDiv = xlObj._getContent(sheetIdx).find("#" + xlObj._id + "_" + "S" + sheetIdx + "_" + xlObj.XLRibbon._sparklineDesignType + "_" + this.rowIdx + "_" + this.colIdx);
                        sparkline = sheet.shapeMngr.sparkline[sparklineDiv[0].id];
                        type = sparkline.type;
                        delete xlObj._dataContainer.sheets[sheetIdx][this.rowIdx][this.colIdx];
                        delete sheet.shapeMngr.sparkline[sparklineDiv[0].id];
                        sparklineDiv.remove();
                        this.createSparkline(newDataRange, newLocationRange, type);
                        dlg.ejDialog("close");
                        xlObj.XLRibbon._isEditGroupLocationClick = false;
                    }
                }
                else {
                    this.dRange = $("#" + xlObj._id + "_Ribbon_SparklineRange").val();
                    this.location = $("#" + xlObj._id + "_Ribbon_SparklineLocation").val();
                    this.createSparkline(this.dRange, this.location, xlObj.XLRibbon._sparklineDesignType);
                }
                dlg.ejDialog("close");
            }
        },
        _dlgSparklineDesignOk: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), sparklineId, locRange, dlg = $("#" + xlObj._id + "_sparklinedesigndlg");
            if ($("#" + xlObj._id + "_Form_datarange").valid()) {
                locRange = xlObj.getAlphaRange(xlObj._getSelectedCells(sheetIdx).selCells[0].rowIndex, xlObj._getSelectedCells(sheetIdx).selCells[0].colIndex);
                sparklineId = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline")[0];
                this.createSparkline($("#" + xlObj._id + "_datarange").val(), locRange, xlObj.getSheet(sheetIdx).shapeMngr.sparkline[sparklineId].type);
                xlObj.XLRibbon._isEditSingleSparklineClick = false;
                dlg.ejDialog("close");
            }
        },

        _dlgSparklineCancel: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_SparklineDialog").ejDialog("close");
            xlObj._setSheetFocus();
        },
        _dlgSparklineDesignCancel: function () {
            var xlObj = this.XLObj;
            $("#" + xlObj._id + "_sparklinedesigndlg").ejDialog("close");
            xlObj._setSheetFocus();
        },

        _renderSparklineDialog: function () {
            var xlObj = this.XLObj;
            if ($("#" + xlObj._id + "_Ribbon_SparklineDiv").length < 1) {
                var $sparklineDiv, $label, $table, $tr, $td, input;
                $sparklineDiv = ej.buildTag("div.e-dlgctndiv", "", {}, { id: xlObj._id + "_Ribbon_SparklineDiv" });
                $table = ej.buildTag("table", "", {}, { "cellpadding": 0, "cellspacing": 0 });
                $tr = ej.buildTag("tr");
                $td = ej.buildTag("td");
                $td.attr("colspan", 1);
                $table.append($tr.append($td));

                $tr = ej.buildTag("tr.e-ss-changerange");
                $td = ej.buildTag("td", "");
                $label = ej.buildTag("label", " " + xlObj._getLocStr("DataRange"));
                $td.append($label);
                $tr.append($td);
                $td = ej.buildTag("td", "");
                input = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_SparklineRange", type: "text" });
                input.data("parentID", xlObj._id);
                $tr.append($td.append(input));
                $table.append($tr);

                $tr = ej.buildTag("tr");
                $td = ej.buildTag("td");
                $label = ej.buildTag("label", "");
                $td.append($label);
                $td.attr("colspan", 2);
                $table.append($tr.append($td));

                $tr = ej.buildTag("tr");
                $td = ej.buildTag("td");
                $label = ej.buildTag("label", " " + xlObj._getLocStr("LocationRange"));
                $td.append($label);
                $label = ej.buildTag("label", "  ");
                $td.append($label);
                $tr.append($td);
                $td = ej.buildTag("td");
                input = ej.buildTag("input.ejinputtext", "", {}, { id: xlObj._id + "_Ribbon_SparklineLocation", type: "text" });
                input.data("parentID", xlObj._id);
                $tr.append($td.append(input));
                $table.append($tr);

                $("#" + xlObj._id + "_Sparkline").append($sparklineDiv.append($table));
                $("#" + xlObj._id + "_Ribbon_SparklineLocation").wrap("<form id='" + xlObj._id + "_Form_Ribbon_SparklineLocation' onsubmit='return false'></form>");
                xlObj.XLRibbon._dialogValidate("_Ribbon_SparklineLocation");
                $("#" + xlObj._id + "_Ribbon_SparklineRange").wrap("<form id='" + xlObj._id + "_Form_Ribbon_SparklineRange' onsubmit='return false'></form>");
                xlObj.XLRibbon._dialogValidate("_Ribbon_SparklineRange");
            }
        },
        _tabInsert: function () {
            var createdObj, xlObj = this.XLObj;
            createdObj = {
                text: "Sparkline Charts",
                id: "SparklineCharts",
                alignType: ej.Ribbon.alignType.rows,
                content: [{
                    groups: [
                        xlObj.XLRibbon._generateBtn("Insert_Sparkline_Line", "LineChart", "imageonly", "e-icon e-ss-linesparkline", 30, xlObj.XLRibbon._smallBtnHeight, "LineSparklineTitle", "LineSparklineContent", false, "ej.ImagePosition.ImageTop"),
                        xlObj.XLRibbon._generateBtn("Insert_Sparkline_Column", "ColumnChart", "imageonly", "e-icon e-ss-columnsparkline", 30, xlObj.XLRibbon._smallBtnHeight, "ColumnSparklineTitle", "ColumnSparklineContent", false, "ej.ImagePosition.ImageTop"),
                        xlObj.XLRibbon._generateBtn("Insert_Sparkline_Winloss", "Win/Loss Chart", "imageonly", "e-icon e-ss-winlosssparkline", 30, xlObj.XLRibbon._smallBtnHeight, "WinLossSparklineTitle", "WinLossSparklineContent", false, "ej.ImagePosition.ImageTop"),
                    ],
                },
                {
                    groups: [
                        //xlObj.XLRibbon._generateBtn("Insert_Sparkline_Area", "AreaChart", "imageonly", "e-icon e-ss-areasparkline", 30, xlObj.XLRibbon._smallBtnHeight, "AreaSparklineTitle", "AreaSparklineContent", false,  "ej.ImagePosition.ImageTop"),
                        //xlObj.XLRibbon._generateBtn("Insert_Sparkline_Pie", "PieChart", "imageonly", "e-icon e-ss-piesparkline", 30, xlObj.XLRibbon._smallBtnHeight, "PieSparklineTitle", "PieSparklineContent", false,  "ej.ImagePosition.ImageTop"),
                    ],
                },
                ]
            };
            return createdObj;
        },
        _contextualTabInsert: function () {
            var xlObj = this.XLObj, xlId = xlObj._id, imgtop = "imagetop",
            createdObj = {
                backgroundColor: "#EAF6BD",
                borderColor: "#90AA3C",
                tabs: [
                    {
                        id: "sparklinedesign",
                        text: xlObj._getLocStr("SPARKLINEDESIGN"),
                        groups: [
                            {
                                text: "Sparkline",
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        xlObj.XLRibbon._generateSplitBtn("SparklineDesign_Sparkline_EditData", "EditData", "textandimage", xlId + "_Ribbon_SElement", "", "e-icon e-ss-editdata", false, 65, xlObj.XLRibbon._bigBtnHeight, "bottom", ej.ImagePosition.ImageTop, "dropdown", "e-spreadsheet e-sparklineeditdatabtn", "EditData", "EditDataContent")
                                    ]
                                }]
                            },
                            {
                                text: "Type",
                                alignType: ej.Ribbon.alignType.rows,
                                content: [{
                                    groups: [
                                        xlObj.XLRibbon._generateBtn("SparklineDesign_Line", "LineChart", "imageonly", "e-icon e-ss-linesparkline", 30, xlObj.XLRibbon._smallBtnHeight, "LineSparklineTitle", "LineSparklineContent", false, imgtop),
                                        xlObj.XLRibbon._generateBtn("SparklineDesign_Column", "ColumnChart", "imageonly", "e-icon e-ss-columnsparkline", 30, xlObj.XLRibbon._smallBtnHeight, "ColumnSparklineTitle", "ColumnSparklineContent", false, imgtop),
                                        xlObj.XLRibbon._generateBtn("SparklineDesign_Winloss", "Win/Loss Chart", "imageonly", "e-icon e-ss-winlosssparkline", 30, xlObj.XLRibbon._smallBtnHeight, "WinLossSparklineTitle", "WinLossSparklineContent", false, imgtop),
                                    ],
                                },
                                {
                                    groups: [
                                        //xlObj.XLRibbon._generateBtn("SparklineDesign_Area", "AreaChart", "imageonly", "e-icon e-ss-areasparkline", 30, xlObj.XLRibbon._smallBtnHeight, "AreaSparklineTitle", "AreaSparklineContent", false, imgtop),
                                        //xlObj.XLRibbon._generateBtn("SparklineDesign_Pie", "PieChart", "imageonly", "e-icon e-ss-piesparkline", 30, xlObj.XLRibbon._smallBtnHeight, "PieSparklineTitle", "PieSparklineContent", false, imgtop),
                                    ],
                                }]
                            },
                            {
                                text: "Show",
                                alignType: ej.Ribbon.alignType.rows,
                                type: "custom",
                                contentID: xlId + "_Ribbon_SparklineDesign_Show"

                            },
                            {
                                text: "Style",
                                alignType: ej.Ribbon.alignType.columns,
                                content: [{
                                    groups: [
                                        xlObj.XLRibbon._generateSplitBtn("SparklineDesign_Style_SparklineColor", "SparklineColor", "textandimage", xlId + "_Ribbon_SparklineBorder", "", "e-icon e-ss-sparklinecolor", false, 140, xlObj.XLRibbon._mediumBtnHeight, "left", "", "dropdown", "e-ss-pictbrdrbtn", "SparklineColorTitle", "SparklineColorContent"),
                                        xlObj.XLRibbon._generateSplitBtn("SparklineDesign_Style_MarkerColor", "MarkerColor", "textandimage", xlId + "_Ribbon_MarkerColorBorder", "", "e-icon e-ss-markercolor", false, 140, xlObj.XLRibbon._mediumBtnHeight, "left", "", "dropdown", "e-ss-markercolorbtn", "MarkerColor", "MarkerColorContent")
                                    ],
                                }]
                            },

                        ]
                    }]
            };
            return createdObj;
        },

        _sparklineDlgBox: function () {
            var xlObj = this.XLObj, sheetIdx = xlObj.getActiveSheetIndex(), dlg = $("#" + xlObj._id + "_SparklineDialog"), sheet = xlObj.getSheet(sheetIdx), range, sparkline;
            $("#" + xlObj._id + "_Ribbon_SparklineRange").val("");
            $("#" + xlObj._id + "_Ribbon_SparklineLocation").val("");
            if (sheet._selectedCells.length >= 1) {
                range = sheet.selectedRange;
                sparkline = xlObj.XLEdit.getPropertyValue(xlObj._getSelectedCells().selCells[0].rowIndex, xlObj._getSelectedCells().selCells[0].colIndex, "sparkline");
                if (sparkline)
                    $("#" + xlObj._id + "_Ribbon_SparklineRange").val(xlObj.getSheet(sheetIdx).shapeMngr.sparkline[sparkline].DataRange);
                else
                    $("#" + xlObj._id + "_Ribbon_SparklineRange").val(sheet.sheetInfo.text + "!$" + xlObj._generateHeaderText(range[1] + 1) + "$" + (range[0] + 1) + ":$" + xlObj._generateHeaderText(range[3] + 1) + "$" + (range[2] + 1));
            }
            else if (!xlObj.isUndefined(xlObj.XLEdit.getPropertyValueByElem(xlObj.getActiveCellElem()))) {
                xlObj.selectAll(false);
                $("#" + xlObj._id + "_Ribbon_SparklineRange").val(sheet.sheetInfo.text + "!$" + xlObj._generateHeaderText(sheet._startCell.colIndex + 1) + "$" + (sheet._startCell.rowIndex + 1) + ":$" + xlObj._generateHeaderText(sheet._endCell.colIndex + 1) + "$" + (sheet._endCell.rowIndex + 1));
            }
            dlg.find(".e-ss-changerange").show();
            dlg.data("ejDialog").option("title", xlObj._getLocStr("CreateSparkline"));
            dlg.ejDialog("open");
        },

        _sparklinDesignDlg: function () {
            var xlObj = this.XLObj;
            $('#' + xlObj._id + '_sparklinedesigndlg').ejDialog('open');
        },

        _renderSparklineDesignDlg: function () {
            var htmlstr, xlObj = this.XLObj, datarange = xlObj._getLocStr('SelectDataSource');
            htmlstr = '<div id=' + xlObj._id + '_sparklinedesigndlg><div class="e-dlg-fields e-dlgctndiv"><table cellspacing="0" cellpadding="0"><tr><td>' + datarange + '</td></tr><tr><td style="padding-top: 11px;"><input id="' + xlObj._id + '_datarange" class="e-ss-changerange" style="width: 100%;"/></td><tr class="e-dlgtd-fields"><td></td></tr></table></div><div class="e-dlg-btnfields"><div class="e-dlg-btnctnr"><button id=' + xlObj._id + '_sparklinedesigndlgok>' + xlObj._getLocStr('Ok') + '</button><button id=' + xlObj._id + '_sparklinedesigndlgcancel>' + xlObj._getLocStr('Cancel') + '</button></div></div></div>'
            xlObj.element.append(htmlstr);
            $("#" + xlObj._id + "_datarange").data("parentID", xlObj._id);
            $("#" + xlObj._id + "_datarange").wrap("<form id='" + xlObj._id + "_Form_datarange' onsubmit='return false'></form>");
            xlObj.XLRibbon._dialogValidate("_datarange");
            $('#' + xlObj._id + '_sparklinedesigndlgok').ejButton({ showRoundedCorner: true, width: "20%", click: $.proxy(this._dlgSparklineDesignOk, this) });
            $('#' + xlObj._id + '_sparklinedesigndlgcancel').ejButton({ showRoundedCorner: true, width: "20%", click: $.proxy(this._dlgSparklineDesignCancel, this) });
            $('#' + xlObj._id + '_sparklinedesigndlg').ejDialog({ showOnInit: false, width: "auto", showRoundedCorner: true, title: xlObj._getLocStr('EditSingleSparklineData'), enableModal: true, enableResize: false, cssClass: "e-ss-dialog e-" + xlObj._id + "-dlg", close: ej.proxy(this._dialogClose, this) });
        },

        _renderBaseElem: function (cellInfo, type, rowIndex, colIndex, sheetIdx) {
            var xlObj = this.XLObj, div;
            div = $("<div id='" + xlObj._id + "_" + "S" + sheetIdx + "_" + type + "_" + rowIndex + "_" + colIndex + "' class='e-ss-sparkline'  style='top:" + cellInfo.top + "px; left:" + cellInfo.left + "px; height:" + (cellInfo.height - 1) + "px; width:" + cellInfo.width + "px;'></div>");
            div.data("parentID", xlObj._id);
            xlObj.getCell(this.rowIdx, this.colIdx).prepend(div);
            xlObj._selectActiveCell(this.rowIdx, this.colIdx);
            return div;
        },
        _sparklineElementTag: function () {
            var xlObj = this.XLObj, element = '<ul id=' + xlObj._id + '_Ribbon_SElement class="selement" style="width: 17%">';
            element += '<li class="editgrouplocation" id="EditGroupLocation"><a><span id="editsparkline" class="e-ss-editdatasparkline" style= margin-top:"0px";></span>' + xlObj._getLocStr("EditDataContent") + '</a><li>';
            element += '<li class="editsinglesparklinedata" id="EditSingleSparklineData"><a>' + xlObj._getLocStr("EditSingleSparklineData") + '</a><li>';
            return element;
        },
        _sparklineColor: function () {
            var xlObj = this.XLObj;
            return "<ul id=" + xlObj._id + "_Ribbon_SparklineBorder style='width:16%'><li id='" + xlObj._id + "sparklinecolor'><input id='" + xlObj._id + "_Ribbon_SparklineColor' style='display:none; width: 18%'></input></li></ul>";
        },
        _markerColor: function () {
            var xlObj = this.XLObj;
            return "<ul id=" + xlObj._id + "_Ribbon_MarkerColorBorder style='display:none' class='e-ss-pictureborder'><li id='" + xlObj._id + "MarkerNegativePoint'><a>" + xlObj._getLocStr("NegativePoints") + "</a><ul><li><input id='" + xlObj._id + "_Ribbon_MarkerNegativePoint'></input></li></ul></li><li id='" + xlObj._id + "MarkerHighPoint'><a>" + xlObj._getLocStr("HighPoint") + "</a><ul><li><input id='" + xlObj._id + "_Ribbon_MarkerHighPoint'></input></li></ul></li><li id='" + xlObj._id + "MarkerLowPoint'><a>" + xlObj._getLocStr("LowPoint") + "</a><ul><li><input id='" + xlObj._id + "_Ribbon_MarkerLowPoint'></input></li></ul></li></ul>";
        },
        _renderSparklineTab: function () {
            var xlObj = this.XLObj, xlEle = xlObj.element, xlId = xlObj._id, rbnId = xlId + "_Ribbon", htmlstr = '', groupId = xlObj._id + "_Ribbon_SparklineDesign_Show";
            xlEle.append(this._sparklineElementTag());
            xlEle.append(this._sparklineColor());
            xlEle.append(this._markerColor());
            htmlstr = '<div id=' + groupId + '><div class="e-tablestyleoptionsrow"><div class="e-sparklinedesignshowcell"><input id=' + groupId + '_HighPoint type="checkbox" /><label class="e-tablestyleoptionslabel" for="' + groupId + '_HighPoint">' + xlObj._getLocStr('HighPoint') + '</label></div><div class="e-sparklinedesignshowcell"><input id=' + groupId + '_FirstPoint type="checkbox"/><label class="e-tablestyleoptionslabel" for="' + groupId + '_FirstPoint">' + xlObj._getLocStr('FirstPoint') + '</label></div></div><div class="e-tablestyleoptionsrow"><div class="e-sparklinedesignshowcell"><input id=' + groupId + '_LowPoint type="checkbox"/><label class="e-tablestyleoptionslabel" for="' + groupId + '_LowPoint">' + xlObj._getLocStr('LowPoint') + '</label></div><div class="e-sparklinedesignshowcell"><input id=' + groupId + '_LastPoint type="checkbox"/><label class="e-tablestyleoptionslabel" for="' + groupId + '_LastPoint">' + xlObj._getLocStr('LastPoint') + '</label></div></div><div class="e-tablestyleoptionsrow"><div class="e-sparklinedesignshowcell"><input id=' + groupId + '_NegativePoints type="checkbox"/><label class="e-tablestyleoptionslabel" for="' + groupId + '_NegativePoints">' + xlObj._getLocStr('NegativePoint') + '</label></div><div id= "markers" class="e-sparklinedesignshowcell"><input id=' + groupId + '_Markers type="checkbox" /><label class="e-tablestyleoptionslabel" for="' + groupId + '_Markers">' + xlObj._getLocStr('Markers') + '</label></div></div>';
            xlObj.element.append(htmlstr);
            $("#" + groupId + "_HighPoint").ejCheckBox({ change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + groupId + "_FirstPoint").ejCheckBox({ change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + groupId + "_LowPoint").ejCheckBox({ change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + groupId + "_LastPoint").ejCheckBox({ change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + groupId + "_NegativePoints").ejCheckBox({ change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + groupId + "_Markers").ejCheckBox({ change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + rbnId + "_SparklineColor").ejColorPicker({ modelType: "palette", presetType: "basic", cssClass: "e-ss-colorpicker e-ss-menuclrpkr", open: $.proxy(xlObj.XLRibbon._colorPickerHandler, this, "Ribbon_SparklineDesign_Style_SparklineColor"), change: xlObj.XLRibbon._ribbonClickHandler });
            xlObj.XLRibbon._isSetModel = true;
            $("#" + rbnId + "_SparklineColor").data("ejColorPicker").show();
            $("#" + rbnId + "_SparklineColor_popup").css({ "display": "block", "height": "135px" });
            $("#" + xlObj._id + "sparklinecolor").append($("#" + rbnId + "_SparklineColor_popup"));
            $("#" + rbnId + "_SparklineColorWrapper").hide();
            $("#" + rbnId + "_MarkerNegativePoint").ejColorPicker({ modelType: "palette", presetType: "basic", cssClass: "e-ss-colorpicker e-ss-menuclrpkr", change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + rbnId + "_MarkerNegativePoint").data("ejColorPicker").show();
            $("#" + rbnId + "_MarkerNegativePoint_popup").css({ "display": "block", "height": "135px" });
            $("#" + xlObj._id + "MarkerNegativePoint ul li").append($("#" + rbnId + "_MarkerNegativePoint_popup"));
            $("#" + rbnId + "_MarkerNegativePointWrapper").hide();
            $("#" + rbnId + "_MarkerHighPoint").ejColorPicker({ modelType: "palette", presetType: "basic", cssClass: "e-ss-colorpicker e-ss-menuclrpkr", change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + rbnId + "_MarkerHighPoint").data("ejColorPicker").show();
            $("#" + rbnId + "_MarkerHighPoint_popup").css({ "display": "block", "height": "135px" });
            $("#" + xlObj._id + "MarkerHighPoint ul li").append($("#" + rbnId + "_MarkerHighPoint_popup"));
            $("#" + rbnId + "_MarkerHighPointWrapper").hide();
            $("#" + rbnId + "_MarkerLowPoint").ejColorPicker({ modelType: "palette", presetType: "basic", cssClass: "e-ss-colorpicker e-ss-menuclrpkr", change: xlObj.XLRibbon._ribbonClickHandler });
            $("#" + rbnId + "_MarkerLowPoint").data("ejColorPicker").show();
			$("#" + rbnId + "_MarkerLowPoint_popup").css({ "display": "block", "height": "135px" });
            $("#" + xlObj._id + "MarkerLowPoint ul li").append($("#" + rbnId + "_MarkerLowPoint_popup"));
            $("#" + rbnId + "_MarkerLowPointWrapper").hide();
            xlObj.XLRibbon._isSetModel = false;
        },

        _sparklineDesignTabUpdate: function (sparklineId) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(xlObj.getActiveSheetIndex()), xlId = xlObj._id, sparkline;
            sparkline = sheet.shapeMngr.sparkline;
            if (xlObj.model.showRibbon) {
                var rObj = $("#" + xlObj._id + '_Ribbon').data('ejRibbon');
                rObj.showTab(xlObj._getLocStr("SPARKLINEDESIGN"));
                if (!rObj._isCollapsed)
                    rObj.option({ selectedItemIndex: xlObj.XLRibbon._getTabIndex("sparklinedesign") });
                if (sparkline[sparklineId].type == "Winloss") {
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_FirstPoint").ejCheckBox({ enabled: false });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_LastPoint").ejCheckBox({ enabled: false });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_HighPoint").ejCheckBox({ enabled: false });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_LowPoint").ejCheckBox({ enabled: false });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_NegativePoints").ejCheckBox({ enabled: false });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_Markers").ejCheckBox({ enabled: false });
                    xlObj.element.find("#" + xlObj._id + "_Ribbon_sparklinedesign_Style_SparklineDesign_Style_MarkerColor").hide();
                }
                else {
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_FirstPoint").ejCheckBox({ enabled: true });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_LastPoint").ejCheckBox({ enabled: true });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_HighPoint").ejCheckBox({ enabled: true });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_LowPoint").ejCheckBox({ enabled: true });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_NegativePoints").ejCheckBox({ enabled: true });
                    $("#" + xlId + "_Ribbon_SparklineDesign_Show_Markers").ejCheckBox({ enabled: true });
                    xlObj.element.find("#" + xlObj._id + "_Ribbon_sparklinedesign_Style_SparklineDesign_Style_MarkerColor").show();
                }
                if ((sparkline[sparklineId].type == "Column") || (sparkline[sparklineId].type == "Winloss"))
                    xlObj.element.find("#" + "markers").hide();
                else
                    xlObj.element.find("#" + "markers").show();
                xlObj.XLRibbon._isSetModel = true;
                $("#" + xlId + "_Ribbon_SparklineDesign_Show_FirstPoint").data("ejCheckBox").option({ checked: sparkline[sparklineId]["FirstPoint"] ? true : false });
                $("#" + xlId + "_Ribbon_SparklineDesign_Show_LastPoint").data("ejCheckBox").option({ checked: sparkline[sparklineId]["LastPoint"] ? true : false });
                $("#" + xlId + "_Ribbon_SparklineDesign_Show_HighPoint").data("ejCheckBox").option({ checked: sparkline[sparklineId]["HighPoint"] ? true : false });
                $("#" + xlId + "_Ribbon_SparklineDesign_Show_LowPoint").data("ejCheckBox").option({ checked: sparkline[sparklineId]["LowPoint"] ? true : false });
                $("#" + xlId + "_Ribbon_SparklineDesign_Show_NegativePoints").data("ejCheckBox").option({ checked: sparkline[sparklineId]["NegativePoints"] ? true : false });
                $("#" + xlId + "_Ribbon_SparklineDesign_Show_Markers").length && $("#" + xlId + "_Ribbon_SparklineDesign_Show_Markers").data("ejCheckBox").option({ checked: sparkline[sparklineId]["Markers"] ? true : false });
                xlObj.XLRibbon._isSetModel = false;
            }
        },
        _toggleSparklineDesignTab: function () {
            var xlObj = this.XLObj;
            xlObj.XLRibbon._toggleContextualTab(xlObj._getLocStr("SPARKLINEDESIGN"));
        },
        _undoForSparkline: function (val) {
            var xlObj = this.XLObj, sheet = xlObj.getSheet(val.sheetIndex), dataContainer = xlObj._dataContainer, sparklineObj = sheet.shapeMngr.sparkline;
            var sparkline, sparklineElem = xlObj._getContent(val.sheetIndex).find("#" + val.id);
            switch (val.action) {
                case "create":
                    var sparklineDiv = sparklineElem;
                    sparkline = xlObj.XLEdit.getPropertyValue(val.rowIndex, val.colIndex, "sparkline");
                    if (sparkline) {
                        sparklineDiv.remove();
                        if (sparklineObj == sparklineDiv[0].id)
                            delete sparklineObj[sparklineDiv[0].id];
                        delete sparklineObj[val.id];
                        delete dataContainer.sheets[val.sheetIndex][val.rowIndex][val.colIndex];
                    }
                    val.action = "remove";
                    break;
                case "sparklinehighpoint":
                    if (xlObj._isUndo)
                        sparklineElem.ejSparkline({ highPointColor: val.prev["sparklinehighpoint"] });
                    else {
                        sparklineElem.ejSparkline({ highPointColor: val.sparklinehighpoint });
                        sparklineObj[val.id]["HighPoint"] = true;
                        sparklineObj[val.id]["highPointColor"] = val.sparklinehighpoint;
                    }
                    break;
                case "sparklinenegativepoint":
                    if (xlObj._isUndo)
                        sparklineElem.ejSparkline({ negativePointColor: val.prev["sparklinenegativepoint"] });
                    else {
                        sparklineElem.ejSparkline({ negativePointColor: val.sparklinenegativepoint });
                        sparklineObj[val.id]["NegativePoints"] = true;
                        sparklineObj[val.id]["negativePointColor"] = val.sparklinehighpoint;
                    }
                    break;
                case "sparklinelowpoint":
                    if (xlObj._isUndo)
                        sparklineElem.ejSparkline({ lowPointColor: val.prev["sparklinelowpoint"] });
                    else {
                        sparklineElem.ejSparkline({ lowPointColor: val.sparklinelowpoint });
                        sparklineObj[val.id]["LowPoint"] = true;
                        sparklineObj[val.id]["lowPointColor"] = val.sparklinelowpoint;
                    }
                    break;
                case "sparklinefirstpoint":
                    if (xlObj._isUndo)
                        sparklineElem.ejSparkline({ startPointColor: val.prev["sparklinefirstpoint"] });
                    else {
                        sparklineElem.ejSparkline({ startPointColor: val.sparklinefirstpoint });
                        sparklineObj[val.id]["FirstPoint"] = true;
                        sparklineObj[val.id]["startPointColor"] = val.sparklinefirstpoint;
                    }
                    break;
                case "sparklinelastpoint":
                    if (xlObj._isUndo)
                        sparklineElem.ejSparkline({ endPointColor: val.prev["sparklinelastpoint"] });
                    else {
                        sparklineElem.ejSparkline({ endPointColor: val.sparklinelastpoint });
                        sparklineObj[val.id]["LastPoint"] = true;
                        sparklineObj[val.id]["endPointColor"] = val.sparklinelastpoint;
                    }
                    break;
                case "sparklinetype":
                    xlObj._isUndo ? this.changeType(val.id, val.prev["sparklineType"], val.sheetIndex) : this.changeType(val.prev["sparklineId"], val.sparklineType, val.sheetIndex);
                    break;
                case "sparklinecolor":
                    if (xlObj._isUndo)
                        sparklineElem.ejSparkline({ fill: val.prev["sColor"] });
                    else {
                        sparklineElem.ejSparkline({ fill: val.sColor });
                        sparklineObj[val.id]["sparklineColor"] = true;
                        sparklineObj[val.id]["sparklineColor"] = val.sColor;
                    }
                    break;
                case "remove":
                    this.createSparkline(val.DataRange, val.LocationRange, val.sparklineType, { highPointColor: val.highPointColor, lowPointColor: val.lowPointColor, NegativePointColor: val.NegativePointColor, startPointColor: val.startPointColor, endPointColor: val.endPointColor });
                    val.action = "create";
                    break;
                case "markerSettings":
                    if (val.isVisible) {
                        sparklineObj[val.id]["Markers"] = true;
                        sparklineObj[val.id]["markerSettings"] = { visible: true };
                        sparklineElem.ejSparkline({ markerSettings: { visible: true } });
                    }
                    else {
                        sparklineObj[val.id]["Markers"] = false;
                        sparklineObj[val.id]["markerSettings"] = { visible: false };
                        sparklineElem.ejSparkline({ markerSettings: { visible: null } });
                    }
                    val.isVisible = !val.isVisible;
                    break;
            }
        },
        changeType: function (sparklineId, type, sheetIdx) {
            var xlObj = this.XLObj; sheetIdx = xlObj.getActiveSheetIndex();
            var sheet = xlObj.getSheet(sheetIdx), details, sparklineProp,
                sparklineElem = xlObj._getContent(sheetIdx).find("#" + sparklineId);
            sparklineProp = sheet.shapeMngr.sparkline[sparklineId];
            sparklineElem.remove();
            delete xlObj._dataContainer.sheets[sheetIdx][sparklineProp.rowIndex][sparklineProp.colIndex];
            sparklineProp.type = type;
            sparklineProp.id = xlObj._id + "_" + "S" + sheetIdx + "_" + type + "_" + sparklineProp.rowIndex + "_" + sparklineProp.colIndex;
            this._createSparkline(sparklineProp, sparklineProp.cellInfo, sheetIdx);
            delete sheet.shapeMngr.sparkline[sparklineId];
            xlObj.XLShape._updateShapeMngr({ rowIndex: sparklineProp.rowIndex, colIndex: sparklineProp.colIndex }, { "sparkline": sparklineProp }, "sparkline");
            details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "sparklinetype", id: sparklineProp.id, cellInfo: sparklineProp.cellInfo, rowIndex: sparklineProp.rowIndex, colIndex: sparklineProp.colIndex, dataSource: sparklineProp.dataSource };
            details.prev = { sparklineType: sparklineProp["sparklineType"], sparklineId: sparklineId };
            details.sparklineType = type;
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        changePointColor: function (sparklineId, options, sheetIdx, isChecked) {
            var xlObj = this.XLObj; sheetIdx = sheetIdx || xlObj.getActiveSheetIndex();
            var sheet = xlObj.getSheet(sheetIdx), details, sparkline,
                sparklineElem = xlObj._getContent(sheetIdx).find("#" + sparklineId), val;
            sparkline = sheet.shapeMngr.sparkline;
            for (var option in options)
                val = options[option];
            switch (option) {
                case "highPointColor":
                    details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "sparklinehighpoint", id: sparklineId };
                    details.prev = (sparkline[sparklineId].type.toLowerCase() == "line") ? { sparklinehighpoint: sparklineElem.data('ejSparkline').model.stroke } : { sparklinehighpoint: sparkline[sparklineId][option] };
                    if (isChecked) {
                        sparkline[sparklineId]["HighPoint"] = true;
                        sparkline[sparklineId]["highPointColor"] = val;
                    }
                    else {
                        delete sparkline[sparklineId]["HighPoint"];
                        delete sparkline[sparklineId]["highPointColor"];
                        options = { highPointColor: null };
                    }
                    sparklineElem.ejSparkline(options);
                    details.sparklinehighpoint = val;
                    break;
                case "lowPointColor":
                    details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "sparklinelowpoint", id: sparklineId };
                    details.prev = (sparkline[sparklineId].type.toLowerCase() == "line") ? { sparklinelowpoint: sparklineElem.data('ejSparkline').model.stroke } : { sparklinelowpoint: sparkline[sparklineId][option] };
                    if (isChecked) {
                        sparkline[sparklineId]["LowPoint"] = true;
                        sparkline[sparklineId]["lowPointColor"] = val;
                    }
                    else {
                        delete sparkline[sparklineId]["LowPoint"];
                        delete sparkline[sparklineId]["lowPointColor"];
                        options = { lowPointColor: null };
                    }
                    sparklineElem.ejSparkline(options);
                    details.sparklinelowpoint = val;
                    break;

                case "startPointColor":
                    details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "sparklinefirstpoint", id: sparklineId };
                    details.prev = { sparklinefirstpoint: sparklineElem.data('ejSparkline').model.stroke };
                    if (isChecked) {
                        sparkline[sparklineId]["FirstPoint"] = true;
                        sparkline[sparklineId]["startPointColor"] = val;
                    }
                    else {
                        delete sparkline[sparklineId]["FirstPoint"];
                        delete sparkline[sparklineId]["startPointColor"];
                        options = { startPointColor: null };
                    }
                    sparklineElem.ejSparkline(options);
                    details.sparklinefirstpoint = val;
                    break;

                case "endPointColor":
                    details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "sparklinelastpoint", id: sparklineId };
                    details.prev = { sparklinelastpoint: sparklineElem.data('ejSparkline').model.stroke };
                    if (isChecked) {
                        sparkline[sparklineId]["LastPoint"] = true;
                        sparkline[sparklineId]["endPointColor"] = val;
                    }
                    else {
                        delete sparkline[sparklineId]["LastPoint"];
                        delete sparkline[sparklineId]["endPointColor"];
                        options = { endPointColor: null };
                    }
                    sparklineElem.ejSparkline(options);
                    details.sparklinelastpoint = val;
                    break;

                case "negativePointColor":
                    details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "sparklinenegativepoint", id: sparklineId };
                    details.prev = (sparkline[sparklineId].type.toLowerCase() == "line") ? { sparklinenegativepoint: sparklineElem.data('ejSparkline').model.stroke } : { sparklinenegativepoint: sparkline[sparklineId][option] };
                    if (isChecked) {
                        sparkline[sparklineId]["NegativePoints"] = true;
                        sparkline[sparklineId]["negativePointColor"] = val;
                    }
                    else {
                        delete sparkline[sparklineId]["NegativePoints"];
                        delete sparkline[sparklineId]["negativePointColor"];
                        options = { negativePointColor: null };
                    }
                    sparklineElem.ejSparkline(options);
                    details.sparklinenegativepoint = val;
                    break;

                case "fill":
                    sparkline[sparklineId]["sparklinecolor"] = true;
                    details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "sparklinecolor", id: sparklineId };
                    details.sColor = val;
                    if (sparkline[sparklineId].type.toLowerCase() == "line") {
                        sparkline[sparklineId]["stroke"] = val;
                        details.prev = { sColor: sparklineElem.data('ejSparkline').model.stroke };
                        sparklineElem.ejSparkline("option", { stroke: val });
                    }
                    else {
                        sparkline[sparklineId][option] = val;
                        details.prev = { sColor: sparklineElem.data('ejSparkline').model.fill };
                        sparklineElem.ejSparkline("option", { fill: val });
                    }
                    break;
                case "markerSettings":
                    var visibleProp;
                    details = { sheetIndex: sheetIdx, reqType: "sparkline", action: "markerSettings", id: sparklineId, isVisible: sparkline[sparklineId]["Markers"] };
                    if (sparkline[sparklineId].type == "Line") {
                        if (isChecked) {
                            visibleProp = { visible: true };
                            $("#" + sparklineId).ejSparkline("option", { markerSettings: { visible: true } });
                            sparkline[sparklineId]["Markers"] = true;
                        }
                        else {
                            visibleProp = { visible: false };
                            $("#" + sparklineId).ejSparkline("option", { markerSettings: { visible: null } });
                            sparkline[sparklineId]["Markers"] = false;
                        }
                        sparkline[sparklineId]["markerSettings"] = visibleProp;
                    }
                    break;
            }
            xlObj._completeAction(details);
            xlObj._trigActionComplete(details);
        },

        _sparklineResize: function (sparklineId, option, sheetIdx) {
            var xlObj = this.XLObj, sparklineObj, shapeManager, sparklineElem = xlObj._getContent(sheetIdx).find("#" + sparklineId);
            sparklineElem.css(option);
            sparklineObj = sparklineElem.data("ejSparkline");
            sparklineObj.model.size = option;
            sparklineObj.resize();
            shapeManager = xlObj.getSheet(sheetIdx).shapeMngr.sparkline;
            shapeManager[sparklineId].cellInfo.width = option.width
            shapeManager[sparklineId].cellInfo.height = option.height;
        },

        _clearSparkline: function (classes) {
            var xlObj = this.XLObj;
            xlObj.XLSelection._clearBorder(classes);
            xlObj.getSheet(xlObj.getActiveSheetIndex())._isSparklineBorder = false;
        },

        refreshSparkline: function (rowIdx, colIdx, sheetIdx) {
            var xlObj = this.XLObj, sparkline, sparklineStr = false, dataSource, range, dataValue, i, sparklineProp, sheetCnt = 1, cnt = xlObj.model.sheetCount + 1;
            while (sheetCnt < cnt) {
                sparkline = xlObj.getSheet(sheetCnt).shapeMngr.sparkline;
                i = xlObj.getObjectLength(sparkline);
                if (i) {
                    while (i--) {
                        sparklineProp = sparkline[xlObj.getObjectKeys(sparkline)[i]];
                        range = xlObj.getRangeIndices(sparklineProp.DataRange);
                        if ((sheetCnt === sheetIdx) && (this.XLObj.inRange(range, rowIdx, colIdx))) {
                            dataValue = xlObj.getRangeData({ range: range, valueOnly: true, sheetIdx: sparklineProp.sheetIndex, skipFormula: true });
                            for (var j = 0, len = dataValue.length; j < len; j++) {
                                dataSource = dataValue[j];
                                if (dataSource == "")
                                    dataValue[j] = 0;
                                else if (typeof dataSource === "string") {
                                    sparklineStr = true;
                                    break;
                                }
                            }
                            if (sparklineStr) {
                                xlObj._showAlertDlg("Alert", "SparklineDataAlert", 630);
                                sparklineStr = false;
                            }
                            else {
                                xlObj._getContent(sheetIdx).find("#" + sparklineProp.id).ejSparkline({ dataSource: dataValue });
                                sparklineProp.dataSource = dataValue;
                            }
                        }
                    }
                }
                sheetCnt++;
            }
        },

        _refreshContentWithSparkline: function (sheetIdx) {
            var xlObj = this.XLObj, i, sparklineProp, len, cellInfo, sparklineColl = {},
                dupSparkline = $.extend(true, {}, xlObj.getSheet(sheetIdx).shapeMngr.sparkline), sparklineObj = xlObj.getObjectKeys(dupSparkline);
            var splitId, newId;
            for (i = 0, len = sparklineObj.length; i < len; i++) {
                sparklineProp = dupSparkline[sparklineObj[i]];
                if (xlObj._copySheet) {
                    delete xlObj.getSheet(sheetIdx).shapeMngr.sparkline[sparklineObj[i]];
                    splitId = sparklineObj[i].replace(xlObj._id, "").split("_");
                    splitId[0] = xlObj._id;
                    splitId[1] = "S" + sheetIdx;
                    newId = splitId.join("_");
                    sparklineProp["id"] = newId;
                    sparklineColl[newId] = sparklineProp;
                    xlObj._dataContainer.sheets[sheetIdx][sparklineProp.rowIndex][sparklineProp.colIndex]["sparkline"] = [newId];
                }
                if (xlObj._isRowViewable(sheetIdx, sparklineProp.rowIndex)) {
                    if (!xlObj._getContent(sheetIdx).find("#" + sparklineProp["id"]).length) {
                        cellInfo = xlObj._getCellInfo({ rowIndex: sparklineProp.rowIndex, colIndex: sparklineProp.colIndex }, sheetIdx)
                        this._createSparkline(sparklineProp, cellInfo, sheetIdx);
                    }
                }
            }
            if (xlObj._copySheet)
                xlObj.getSheet(sheetIdx).shapeMngr.sparkline = sparklineColl;
        },

        _renderSparklineContent: function (table, sheetIdx) {
            var xlObj = this.XLObj, sparklineProp, sparkline = xlObj.getSheet(sheetIdx).shapeMngr.sparkline, sparklineObj = xlObj.getObjectKeys(sparkline), cell, sparkDiv,
                rowIndex, colIndex;
            for (var i = 0, len = sparklineObj.length; i < len; i++) {
                sparklineProp = sparkline[sparklineObj[i]];
                rowIndex = sparklineProp.rowIndex;
                colIndex = sparklineProp.colIndex;
                cell = table.rows[rowIndex].cells[colIndex];
                sparkDiv = $("<div id='" + xlObj._id + "_" + "S" + sheetIdx + "_" + sparklineProp.type + "_" + rowIndex + "_" + colIndex + "' class='e-ss-sparkline'  style='height:" + (sparklineProp.height - 1) + "px; width:" + sparklineProp.width + "px;' ></div>");
                $(cell).append(sparkDiv);
                $(table).find("#" + sparkDiv[0].id).ejSparkline(sparklineProp);
            }
        },

        _refreshSparklinePos: function (startCell, sheetIdx) {
            var xlObj = this.XLObj; sheetIdx = sheetIdx || xlObj._getSheetIndex(sheetIdx);
            var i, len, cellInfo, cellIdx, sparklineCell, sparklineColl = xlObj._getContent(sheetIdx).find(".e-ss-sparkline");
            startCell = startCell || {};
            for (i = 0, len = sparklineColl.length; i < len; i++) {
                sparklineCell = $(sparklineColl[i]);
                cellIdx = xlObj._getCellIdx($(sparklineCell[0]).parents('td')[0]);
                if ((cellIdx.rowIndex < startCell.rowIndex) || (cellIdx.colIndex < startCell.colIndex))
                    continue;
                cellInfo = xlObj._getCellInfo({ rowIndex: cellIdx.rowIndex, colIndex: cellIdx.colIndex }, sheetIdx);
                sparklineCell.css({ "top": cellInfo.top + "px", "left": cellInfo.left + "px" });
            }
        },

        _refreshSparklineForInsDel: function (rowIdx, colIdx, count, action, operation, sheetIdx) {
            var xlObj = this.XLObj, sparklineProp, oldSparklineId, newSparklineId;
            if (xlObj._checkIndicesInContainer(sheetIdx, rowIdx, colIdx, "sparkline")) {
                oldSparklineId = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "sparkline", sheetIdx)[0];
                sparklineProp = $.extend(true, {}, xlObj.getSheet(sheetIdx).shapeMngr.sparkline[oldSparklineId])
                newSparklineId = oldSparklineId.replace(xlObj._id, "").split("_");
                if (action === "row")
                    newSparklineId[3] = (operation === "insert") ? parseInt(newSparklineId[3]) + count : parseInt(newSparklineId[3]) - count;
                else
                    newSparklineId[4] = (operation === "insert") ? parseInt(newSparklineId[4]) + count : parseInt(newSparklineId[4]) - count;
                newSparklineId[0] = xlObj._id;
                newSparklineId = newSparklineId.join("_");
                sparklineProp["id"] = newSparklineId;
                sparklineProp["rowIndex"] = rowIdx;
                sparklineProp["colIndex"] = colIdx;
                delete xlObj.getSheet(sheetIdx).shapeMngr.sparkline[oldSparklineId];
                xlObj.getSheet(sheetIdx).shapeMngr.sparkline[newSparklineId] = sparklineProp;
                xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx]["sparkline"] = [newSparklineId];
            }
        },

        _refreshSparklineClipboard: function (rowIdx, colIdx, pastesheetIdx, copySheetIdx, isCopy) {
            var xlObj = this.XLObj, copySparklineId = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "sparkline", pastesheetIdx)[0],
                sparklineProp = $.extend(true, {}, xlObj.getSheet(copySheetIdx).shapeMngr.sparkline[copySparklineId]),
                pasteSparkleneId, cellInfo;
            if (xlObj.XLClipboard._copyBackup["sparkline"] && xlObj.XLClipboard._copyBackup["sparkline"][copySparklineId])
                sparklineProp = xlObj.XLClipboard._copyBackup["sparkline"][copySparklineId];
            else
                sparklineProp = $.extend(true, {}, xlObj.getSheet(copySheetIdx).shapeMngr.sparkline[copySparklineId]);
            pasteSparkleneId = copySparklineId.replace(xlObj._id, "").split("_");
            pasteSparkleneId[0] = xlObj._id;
            pasteSparkleneId[1] = "S" + pastesheetIdx;
            pasteSparkleneId[3] = rowIdx;
            pasteSparkleneId[4] = colIdx;
            pasteSparkleneId = pasteSparkleneId.join("_");
            sparklineProp["id"] = pasteSparkleneId;
            sparklineProp["rowIndex"] = rowIdx;
            sparklineProp["colIndex"] = colIdx;
            xlObj.getSheet(pastesheetIdx).shapeMngr.sparkline[pasteSparkleneId] = sparklineProp;
            xlObj._dataContainer.sheets[pastesheetIdx][rowIdx][colIdx]["sparkline"] = [pasteSparkleneId];
            if (xlObj._isRowViewable(pastesheetIdx, rowIdx)) {
                if (!xlObj._getContent(pastesheetIdx).find("#" + pasteSparkleneId).length) {
                    cellInfo = xlObj._getCellInfo({ rowIndex: rowIdx, colIndex: colIdx }, pastesheetIdx)
                    this._createSparkline(sparklineProp, cellInfo, pastesheetIdx);
                }
            }
            if (!isCopy) {
                delete xlObj.getSheet(copySheetIdx).shapeMngr.sparkline[copySparklineId];
            }
        },
        _removeSparklineElem: function (rowIdx, colIdx, sheetIdx, isConainerClear) {
            var xlObj = this.XLObj, sparklineId = xlObj.XLEdit.getPropertyValue(rowIdx, colIdx, "sparkline", sheetIdx), sparklineElem, details;
            if (sparklineId) {
                sparklineId = sparklineId[0];
                sparklineElem = xlObj._getContent(sheetIdx).find("#" + sparklineId);
                sparklineElem.ejSparkline("destroy");
                this._wireSparklineEvents("_off");
                details = { sheetIndex: sheetIdx, reqType: "sparkline", shapeType: "sparkline", action: "remove" };
                xlObj._completeAction(details);
                xlObj._trigActionComplete(details);
                sparklineElem.remove();
                if (isConainerClear) {
                    delete xlObj._dataContainer.sheets[sheetIdx][rowIdx][colIdx]["sparkline"];
                    delete xlObj.getSheet(sheetIdx).shapeMngr.sparkline[sparklineId];
                }
            }
        },

        _wireSparklineEvents: function (action) {
            var xlObj = this.XLObj, elem = xlObj.element;
            xlObj[action](elem, ($.isFunction($.fn.doubletap) && (xlObj.model.enableTouch && (parseInt(xlObj._browserDetails.version) > 8)) && !xlObj._browserDetails.isMSPointerEnabled) ? "doubletap" : "dblclick", ".e-ss-sparkline", xlObj._dblClickHandler);
            xlObj[action]($("#svg"), ($.isFunction($.fn.doubletap) && (xlObj.model.enableTouch && (parseInt(xlObj._browserDetails.version) > 8)) && !xlObj._browserDetails.isMSPointerEnabled) ? "doubletap" : "dblclick", xlObj._dblClickHandler);
            xlObj[action]($("#rect"), ($.isFunction($.fn.doubletap) && (xlObj.model.enableTouch && (parseInt(xlObj._browserDetails.version) > 8)) && !xlObj._browserDetails.isMSPointerEnabled) ? "doubletap" : "dblclick", xlObj._dblClickHandler);
            xlObj[action]($("#path"), ($.isFunction($.fn.doubletap) && (xlObj.model.enableTouch && (parseInt(xlObj._browserDetails.version) > 8)) && !xlObj._browserDetails.isMSPointerEnabled) ? "doubletap" : "dblclick", xlObj._dblClickHandler);
            xlObj[action]($("#circle"), ($.isFunction($.fn.doubletap) && (xlObj.model.enableTouch && (parseInt(xlObj._browserDetails.version) > 8)) && !xlObj._browserDetails.isMSPointerEnabled) ? "doubletap" : "dblclick", xlObj._dblClickHandler);
        }
    }
})(jQuery, Syncfusion);

});